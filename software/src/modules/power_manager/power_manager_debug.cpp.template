// WARNING: Edit only power_manager_debug.cpp.template. Do not edit power_manager_debug.cpp.

#include "power_manager.h"
#include "module_dependencies.h"

#include "tools.h"

#include "gcc_warnings.h"

#define MAX_FMT_LENGTH 512
#define MAX_DEBUG_LINE_LENGTH 512

extern inline const char* fmt(SwitchingState) {return "%u";  }
extern inline const char* fmt(bool          ) {return "%i";  } // implicitly converted to int
extern inline const char* fmt(uint8_t       ) {return "%i";  } // implicitly converted to int
extern inline const char* fmt(uint16_t      ) {return "%i";  } // implicitly converted to int
extern inline const char* fmt(int32_t       ) {return "%i";  }
extern inline const char* fmt(uint32_t      ) {return "%u";  }
extern inline const char* fmt(float         ) {return "%03f";}
extern inline const char* fmt(void          ) {return "";    }

static char *fmtstr;

[[gnu::noinline]]
String PowerManager::prepare_fmtstr() {
    const char * const fmts[{{{varcount}}}] = {
        {{{formats}}}
    };

    fmtstr = reinterpret_cast<char *>(malloc(MAX_FMT_LENGTH));
    if (!fmtstr)
        return "out of memory";

    size_t offset = 0;

    int ret = snprintf(fmtstr, MAX_FMT_LENGTH, "%s", fmts[0]);
    if (ret < 0) {
        return "snprintf error";
    } else {
        offset += static_cast<size_t>(ret);
    }

    for (unsigned long i = 1; i < {{{varcount}}}; i++) {
        ret = snprintf(fmtstr + offset, MAX_FMT_LENGTH - offset, ",%s", fmts[i]);
        if (ret < 0) {
            return "snprintf error";
        } else {
            offset += static_cast<size_t>(ret);
        }
    }

    fmtstr[MAX_FMT_LENGTH - 1] = 0;
    fmtstr = reinterpret_cast<char *>(realloc(fmtstr, offset + 1));

    //logger.printfln("power_manager: using fmtstr='%s'", fmtstr);

    return String();
}

String PowerManager::get_debug_header()
{
    return {{{header}}};
}

#if defined(__GNUC__)
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wdouble-promotion"
    #pragma GCC diagnostic ignored "-Wformat-nonliteral"
#endif

String PowerManager::get_debug_line()
{
    if (!fmtstr) {
        String err = prepare_fmtstr();
        if (err.length() > 0)
            return err;
    }

    char line[MAX_DEBUG_LINE_LENGTH] = {0};
    snprintf(line,
             sizeof(line) / sizeof(line[0]),
             fmtstr,
             {{{data}}}
    );

    return String(line);
}

#if defined(__GNUC__)
    #pragma GCC diagnostic pop
#endif
