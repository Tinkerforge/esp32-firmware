
// This file is generated by generator.py. Changes will be overwritten
#pragma once
#include "module.h"
#include "config.h"
#include <string>
#include <vector>
#include <optional>
#include "spine_types.h"




using MessageProtocolFormatType = std::string;
using MessageProtocolHandshakeErrorErrorType = int;
using PinValueType = std::string;
using ConnectionPinErrorErrorType = int;
using ProtocolIdType = std::string;
/**
* Datatype ConnectionHelloPhaseType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class ConnectionHelloPhaseType {
	pending,
	ready,
	aborted,
};
/**
 * Convert the enum ConnectionHelloPhaseType to its String representation
 * @param src The source ConnectionHelloPhaseType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionHelloPhaseType &src, JsonVariant& dst);
/**
 * Convert a string to a ConnectionHelloPhaseType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ConnectionHelloPhaseType.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionHelloPhaseType &dst);

/**
* Datatype ProtocolHandshakeTypeType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class ProtocolHandshakeTypeType {
	announceMax,
	select,
};
/**
 * Convert the enum ProtocolHandshakeTypeType to its String representation
 * @param src The source ProtocolHandshakeTypeType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ProtocolHandshakeTypeType &src, JsonVariant& dst);
/**
 * Convert a string to a ProtocolHandshakeTypeType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ProtocolHandshakeTypeType.
 */
void convertFromJson(const JsonVariantConst& src, ProtocolHandshakeTypeType &dst);

/**
* Datatype PinStateType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class PinStateType {
	required,
	optional,
	pinOk,
	none,
};
/**
 * Convert the enum PinStateType to its String representation
 * @param src The source PinStateType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PinStateType &src, JsonVariant& dst);
/**
 * Convert a string to a PinStateType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PinStateType.
 */
void convertFromJson(const JsonVariantConst& src, PinStateType &dst);

/**
* Datatype PinInputPermissionType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class PinInputPermissionType {
	busy,
	ok,
};
/**
 * Convert the enum PinInputPermissionType to its String representation
 * @param src The source PinInputPermissionType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PinInputPermissionType &src, JsonVariant& dst);
/**
 * Convert a string to a PinInputPermissionType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PinInputPermissionType.
 */
void convertFromJson(const JsonVariantConst& src, PinInputPermissionType &dst);

/**
* Datatype ConnectionClosePhaseType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class ConnectionClosePhaseType {
	announce,
	confirm,
};
/**
 * Convert the enum ConnectionClosePhaseType to its String representation
 * @param src The source ConnectionClosePhaseType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionClosePhaseType &src, JsonVariant& dst);
/**
 * Convert a string to a ConnectionClosePhaseType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ConnectionClosePhaseType.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionClosePhaseType &dst);

/**
* Datatype ConnectionCloseReasonType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
enum class ConnectionCloseReasonType {
	unspecific,
	removedConnection,
};
/**
 * Convert the enum ConnectionCloseReasonType to its String representation
 * @param src The source ConnectionCloseReasonType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionCloseReasonType &src, JsonVariant& dst);
/**
 * Convert a string to a ConnectionCloseReasonType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ConnectionCloseReasonType.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionCloseReasonType &dst);

/**
 * Datatype ConnectionHelloType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ConnectionHelloType { 
	std::optional<ConnectionHelloPhaseType> phase;
	std::optional<uint32_t> waiting;
	std::optional<bool> prolongationRequest;

	ConnectionHelloType()
		:
		phase(ConnectionHelloPhaseType{}),
		waiting(uint32_t{}),
		prolongationRequest(bool{})
	{}
};
/**
 * Convert a ConnectionHelloType to its JSON representation
 * @param src The ConnectionHelloType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionHelloType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ConnectionHelloType
 * @param src The JSON variant to convert
 * @param dst The ConnectionHelloType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionHelloType &dst);

/**
 * Datatype MessageProtocolFormatsType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct MessageProtocolFormatsType { 
	std::optional<std::vector<MessageProtocolFormatType>> format;

	MessageProtocolFormatsType()
		:
		format(std::vector<MessageProtocolFormatType>{})
	{}
};
/**
 * Convert a MessageProtocolFormatsType to its JSON representation
 * @param src The MessageProtocolFormatsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessageProtocolFormatsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessageProtocolFormatsType
 * @param src The JSON variant to convert
 * @param dst The MessageProtocolFormatsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessageProtocolFormatsType &dst);

/**
 * Datatype MessageProtocolHandshakeType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct MessageProtocolHandshakeType { 
	std::optional<ProtocolHandshakeTypeType> handshakeType;
	std::optional<uint16_t> major;
	std::optional<uint16_t> minor;
	std::optional<MessageProtocolFormatsType> formats;

	MessageProtocolHandshakeType()
		:
		handshakeType(ProtocolHandshakeTypeType{}),
		major(uint16_t{}),
		minor(uint16_t{}),
		formats(MessageProtocolFormatsType{})
	{}
};
/**
 * Convert a MessageProtocolHandshakeType to its JSON representation
 * @param src The MessageProtocolHandshakeType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessageProtocolHandshakeType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessageProtocolHandshakeType
 * @param src The JSON variant to convert
 * @param dst The MessageProtocolHandshakeType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessageProtocolHandshakeType &dst);

/**
 * Datatype MessageProtocolHandshakeErrorType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct MessageProtocolHandshakeErrorType { 
	std::optional<MessageProtocolHandshakeErrorErrorType> error;

	MessageProtocolHandshakeErrorType()
		:
		error(MessageProtocolHandshakeErrorErrorType{})
	{}
};
/**
 * Convert a MessageProtocolHandshakeErrorType to its JSON representation
 * @param src The MessageProtocolHandshakeErrorType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessageProtocolHandshakeErrorType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessageProtocolHandshakeErrorType
 * @param src The JSON variant to convert
 * @param dst The MessageProtocolHandshakeErrorType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessageProtocolHandshakeErrorType &dst);

/**
 * Datatype ConnectionPinStateType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ConnectionPinStateType { 
	std::optional<PinStateType> pinState;
	std::optional<PinInputPermissionType> inputPermission;

	ConnectionPinStateType()
		:
		pinState(PinStateType{}),
		inputPermission(PinInputPermissionType{})
	{}
};
/**
 * Convert a ConnectionPinStateType to its JSON representation
 * @param src The ConnectionPinStateType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionPinStateType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ConnectionPinStateType
 * @param src The JSON variant to convert
 * @param dst The ConnectionPinStateType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionPinStateType &dst);

/**
 * Datatype ConnectionPinInputType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ConnectionPinInputType { 
	std::optional<PinValueType> pin;

	ConnectionPinInputType()
		:
		pin(PinValueType{})
	{}
};
/**
 * Convert a ConnectionPinInputType to its JSON representation
 * @param src The ConnectionPinInputType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionPinInputType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ConnectionPinInputType
 * @param src The JSON variant to convert
 * @param dst The ConnectionPinInputType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionPinInputType &dst);

/**
 * Datatype ConnectionPinErrorType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ConnectionPinErrorType { 
	std::optional<ConnectionPinErrorErrorType> error;

	ConnectionPinErrorType()
		:
		error(ConnectionPinErrorErrorType{})
	{}
};
/**
 * Convert a ConnectionPinErrorType to its JSON representation
 * @param src The ConnectionPinErrorType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionPinErrorType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ConnectionPinErrorType
 * @param src The JSON variant to convert
 * @param dst The ConnectionPinErrorType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionPinErrorType &dst);

/**
 * Datatype SpineHeaderType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct SpineHeaderType { 
	std::optional<ProtocolIdType> protocolId;

	SpineHeaderType()
		:
		protocolId(ProtocolIdType{})
	{}
};
/**
 * Convert a SpineHeaderType to its JSON representation
 * @param src The SpineHeaderType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpineHeaderType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SpineHeaderType
 * @param src The JSON variant to convert
 * @param dst The SpineHeaderType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SpineHeaderType &dst);

/**
 * Datatype ExtensionType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ExtensionType { 
	std::optional<std::string> extensionId;
	std::optional<std::string> binary;
	std::optional<std::string> string;

	ExtensionType()
		:
		extensionId(std::string{}),
		binary(std::string{}),
		string(std::string{})
	{}
};
/**
 * Convert a ExtensionType to its JSON representation
 * @param src The ExtensionType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ExtensionType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ExtensionType
 * @param src The JSON variant to convert
 * @param dst The ExtensionType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ExtensionType &dst);

/**
 * Datatype DataType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct DataType { 
	std::optional<SpineHeaderType> header;
	std::optional<std::string> payload;
	std::optional<ExtensionType> extension;

	DataType()
		:
		header(SpineHeaderType{}),
		payload(std::string{}),
		extension(ExtensionType{})
	{}
};
/**
 * Convert a DataType to its JSON representation
 * @param src The DataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DataType
 * @param src The JSON variant to convert
 * @param dst The DataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DataType &dst);

/**
 * Datatype ConnectionCloseType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct ConnectionCloseType { 
	std::optional<ConnectionClosePhaseType> phase;
	std::optional<uint32_t> maxTime;
	std::optional<ConnectionCloseReasonType> reason;

	ConnectionCloseType()
		:
		phase(ConnectionClosePhaseType{}),
		maxTime(uint32_t{}),
		reason(ConnectionCloseReasonType{})
	{}
};
/**
 * Convert a ConnectionCloseType to its JSON representation
 * @param src The ConnectionCloseType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ConnectionCloseType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ConnectionCloseType
 * @param src The JSON variant to convert
 * @param dst The ConnectionCloseType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ConnectionCloseType &dst);

/**
 * Datatype AccessMethodsRequestType as defined in EEBus_SHIP_TS_TransferProtocol.xsd
*/
struct AccessMethodsRequestType { 

	AccessMethodsRequestType()
		
	{}
};
/**
 * Convert a AccessMethodsRequestType to its JSON representation
 * @param src The AccessMethodsRequestType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AccessMethodsRequestType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AccessMethodsRequestType
 * @param src The JSON variant to convert
 * @param dst The AccessMethodsRequestType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AccessMethodsRequestType &dst);





