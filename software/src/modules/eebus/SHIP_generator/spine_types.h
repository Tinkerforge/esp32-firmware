// This file is generated by pre_generator.py
#include "module.h"
#include "config.h"
using MessagingNumberType = int;
using MessagingDataTextType = std::string;
using LabelType = std::string;
using DescriptionType = std::string;
using SpecificationVersionType = std::string;
using EnumExtendType = std::string;
using DayOfMonthType = int;
using CalendarWeekType = int;
using NumberType = int;
using ScaleType = int;
using MaxResponseDelayType = uint64_t;
using AddressDeviceType = std::string;
using AddressEntityType = int;
using AddressFeatureType = int;
using FeatureGroupType = std::string;
using TimeSeriesIdType = int;
using TimeSeriesSlotIdType = int;
using TimeSeriesSlotCountType = std::string;
using MeasurementIdType = int;
using ThresholdIdType = int;
using AlternativesIdType = int;
using PowerSequenceIdType = int;
using PowerTimeSlotNumberType = int;
using ErrorNumberType = int;
using BindingIdType = int;
using MsgCounterType = int;
using FilterIdType = int;
using AlarmIdType = int;
using BillIdType = int;
using BillPositionIdType = int;
using BillPositionCountType = std::string;
using BillValueIdType = int;
using BillCostIdType = int;
using IdentificationIdType = int;
using IdentificationValueType = std::string;
using SessionIdType = int;
using PurposeIdType = std::string;
using ChannelIdType = int;
using DeviceClassificationStringType = std::string;
using DeviceConfigurationKeyIdType = int;
using DeviceConfigurationKeyValueStringType = std::string;
using VendorStateCodeType = std::string;
using LastErrorCodeType = std::string;
using ElectricalConnectionIdType = int;
using ElectricalConnectionParameterIdType = int;
using ElectricalConnectionCharacteristicIdType = int;
using HvacSystemFunctionIdType = int;
using HvacOperationModeIdType = int;
using HvacOverrunIdType = int;
using SetpointIdType = int;
using TimeTableIdType = int;
using TimeSlotIdType = int;
using TimeSlotCountType = std::string;
using TariffIdType = int;
using TariffCountType = std::string;
using TierBoundaryIdType = int;
using TierBoundaryCountType = std::string;
using CommodityIdType = int;
using TierIdType = int;
using TierCountType = std::string;
using IncentiveIdType = int;
using IncentiveCountType = std::string;
using IncentivePriorityType = int;
using LoadControlEventIdType = int;
using LoadControlLimitIdType = int;
using NetworkManagementNativeSetupType = std::string;
using NetworkManagementScanSetupType = std::string;
using NetworkManagementSetupType = std::string;
using NetworkManagementCandidateSetupType = std::string;
using NetworkManagementTechnologyAddressType = std::string;
using NetworkManagementCommunicationsTechnologyInformationType = std::string;
using NetworkManagementMinimumTrustLevelType = std::string;
using NetworkManagementProcessTimeoutType = uint64_t;
using SubscriptionIdType = int;
using UseCaseActorEnumType = std::string;
using UseCaseNameEnumType = std::string;
using UseCaseScenarioSupportType = int;
using stateInformationIdType = int;
using ConditionIdType = int;
using TaskManagementJobIdType = int;
enum MessagingTypeEnumType {
	logging,
	information,
	warning,
	alarm,
	emergency,
	obsolete,
};
enum RecurringIntervalEnumType {
	yearly,
	monthly,
	weekly,
	daily,
	hourly,
	everyMinute,
	everySecond,
};
enum MonthType {
	january,
	february,
	march,
	april,
	may,
	june,
	july,
	august,
	september,
	october,
	november,
	december,
};
enum DayOfWeekType {
	monday,
	tuesday,
	wednesday,
	thursday,
	friday,
	saturday,
	sunday,
};
enum OccurrenceEnumType {
	first,
	second,
	third,
	fourth,
	last,
};
enum CommodityTypeEnumType {
	electricity,
	gas,
	oil,
	water,
	wasteWater,
	domesticHotWater,
	heatingWater,
	steam,
	heat,
	coolingLoad,
	air,
};
enum EnergyDirectionEnumType {
	consume,
	produce,
};
enum EnergyModeEnumType {
	consume,
	produce,
	idle,
	auto,
};
enum UnitOfMeasurementEnumType {
	unknown,
	var_1,
	m,
	kg,
	s,
	A,
	K,
	mol,
	cd,
	V,
	W,
	Wh,
	VA,
	VAh,
	var,
	varh,
	degC,
	degF,
	Lm,
	lx,
	Ohm,
	Hz,
	dB,
	dBm,
	pct,
	ppm,
	l,
	l_s,
	l_h,
	deg,
	rad,
	rad_s,
	sr,
	Gy,
	Bq,
	Bq_m_3,
	Sv,
	Rd,
	C,
	F,
	H,
	J,
	N,
	N_m,
	N_s,
	Wb,
	T,
	Pa,
	bar,
	atm,
	psi,
	mmHg,
	m_2,
	m_3,
	m_3_h,
	m_s,
	m_s_2,
	m_3_s,
	m_m_3,
	kg_m_3,
	kg_m,
	m_2_s,
	W_m_K,
	J_K,
	var_1_s,
	W_m_2,
	J_m_2,
	S,
	S_m,
	K_s,
	Pa_s,
	J_kg_K,
	Vs,
	V_m,
	V_Hz,
	As,
	A_m,
	Hz_s,
	kg_s,
	kg_m_2,
	J_Wh,
	W_s,
	ft_3,
	ft_3_h,
	ccf,
	ccf_h,
	US_liq_gal,
	US_liq_gal_h,
	Imp_gal,
	Imp_gal_h,
	Btu,
	Btu_h,
	Ah,
	kg_Wh,
};
enum CurrencyEnumType {
	AED,
	AFN,
	ALL,
	AMD,
	ANG,
	AOA,
	ARS,
	AUD,
	AWG,
	AZN,
	BAM,
	BBD,
	BDT,
	BGN,
	BHD,
	BIF,
	BMD,
	BND,
	BOB,
	BOV,
	BRL,
	BSD,
	BTN,
	BWP,
	BYR,
	BZD,
	CAD,
	CDF,
	CHE,
	CHF,
	CHW,
	CLF,
	CLP,
	CNY,
	COP,
	COU,
	CRC,
	CUC,
	CUP,
	CVE,
	CZK,
	DJF,
	DKK,
	DOP,
	DZD,
	EGP,
	ERN,
	ETB,
	EUR,
	FJD,
	FKP,
	GBP,
	GEL,
	GHS,
	GIP,
	GMD,
	GNF,
	GTQ,
	GYD,
	HKD,
	HNL,
	HRK,
	HTG,
	HUF,
	IDR,
	ILS,
	INR,
	IQD,
	IRR,
	ISK,
	JMD,
	JOD,
	JPY,
	KES,
	KGS,
	KHR,
	KMF,
	KPW,
	KRW,
	KWD,
	KYD,
	KZT,
	LAK,
	LBP,
	LKR,
	LRD,
	LSL,
	LYD,
	MAD,
	MDL,
	MGA,
	MKD,
	MMK,
	MNT,
	MOP,
	MRO,
	MUR,
	MVR,
	MWK,
	MXN,
	MXV,
	MYR,
	MZN,
	NAD,
	NGN,
	NIO,
	NOK,
	NPR,
	NZD,
	OMR,
	PAB,
	PEN,
	PGK,
	PHP,
	PKR,
	PLN,
	PYG,
	QAR,
	RON,
	RSD,
	RUB,
	RWF,
	SAR,
	SBD,
	SCR,
	SDG,
	SEK,
	SGD,
	SHP,
	SLL,
	SOS,
	SRD,
	SSP,
	STD,
	SVC,
	SYP,
	SZL,
	THB,
	TJS,
	TMT,
	TND,
	TOP,
	TRY,
	TTD,
	TWD,
	TZS,
	UAH,
	UGX,
	USD,
	USN,
	UYI,
	UYU,
	UZS,
	VEF,
	VND,
	VUV,
	WST,
	XAF,
	XAG,
	XAU,
	XBA,
	XBB,
	XBC,
	XBD,
	XCD,
	XDR,
	XOF,
	XPD,
	XPF,
	XPT,
	XSU,
	XTS,
	XUA,
	XXX,
	YER,
	ZAR,
	ZMW,
	ZWL,
};
enum ScopeTypeEnumType {
	ac,
	acCosPhiGrid,
	acCurrentA,
	acCurrentB,
	acCurrentC,
	acFrequencyGrid,
	acPowerA,
	acPowerB,
	acPowerC,
	acPowerLimitPct,
	acPowerTotal,
	acVoltageA,
	acVoltageB,
	acVoltageC,
	acYieldDay,
	acYieldTotal,
	dcCurrent,
	dcPower,
	dcString1,
	dcString2,
	dcString3,
	dcString4,
	dcString5,
	dcString6,
	dcTotal,
	dcVoltage,
	dhwTemperature,
	flowTemperature,
	outsideAirTemperature,
	returnTemperature,
	roomAirTemperature,
	charge,
	stateOfCharge,
	discharge,
	gridConsumption,
	gridFeedIn,
	selfConsumption,
	overloadProtection,
	acPower,
	acEnergy,
	acCurrent,
	acVoltage,
	batteryControl,
	simpleIncentiveTable,
	stateOfHealth,
	travelRange,
	nominalEnergyCapacity,
	acPowerReal,
	acPowerApparent,
	acPowerReactive,
	acYieldMonth,
	acYieldYear,
	acFrequency,
	acCosPhi,
	dcEnergy,
	insulationResistance,
	stateOfEnergy,
	useableCapacity,
	dcChargeEnergy,
	dcDischargeEnergy,
	loadCycleCount,
	componentTemperature,
	gridLimit,
	gridLimitFallback,
	acPowerApparentTotal,
	acPowerReactiveTotal,
	acCurrentTotal,
	acEnergyConsumed,
	acEnergyProduced,
	batteryAcPower,
	batteryAcPowerPhaseSpecific,
	batteryDcPower,
	pccPower,
	activePowerLimit,
	activePowerLimitPercentage,
	simpleCommittedIncentiveTable,
	simplePreliminaryIncentiveTable,
	committedPowerPlan,
	preliminaryPowerPlan,
	incentiveTableEnConsWithPoETF,
	incentiveTableEnProdWithPoETF,
	incentiveTableEnConsWithPoE,
	incentiveTableEnProdWithPoE,
	incentiveTableEnConsWithTF,
	incentiveTableEnProdWithTF,
	activePowerForecast,
};
enum RoleType {
	client,
	server,
	special,
};
enum DeviceTypeEnumType {
	Dishwasher,
	Dryer,
	EnvironmentSensor,
	Generic,
	HeatGenerationSystem,
	HeatSinkSystem,
	HeatStorageSystem,
	HVACController,
	SubMeter,
	Washer,
	ElectricitySupplySystem,
	EnergyManagementSystem,
	Inverter,
	ChargingStation,
};
enum EntityTypeEnumType {
	Battery,
	Compressor,
	DeviceInformation,
	DHWCircuit,
	DHWStorage,
	Dishwasher,
	Dryer,
	ElectricalImmersionHeater,
	Fan,
	GasHeatingAppliance,
	Generic,
	HeatingBufferStorage,
	HeatingCircuit,
	HeatingObject,
	HeatingZone,
	HeatPumpAppliance,
	HeatSinkCircuit,
	HeatSourceCircuit,
	HeatSourceUnit,
	HVACController,
	HVACRoom,
	InstantDHWHeater,
	Inverter,
	OilHeatingAppliance,
	Pump,
	RefrigerantCircuit,
	SmartEnergyAppliance,
	SolarDHWStorage,
	SolarThermalCircuit,
	SubMeterElectricity,
	TemperatureSensor,
	Washer,
	BatterySystem,
	ElectricityGenerationSystem,
	ElectricityStorageSystem,
	GridConnectionPointOfPremises,
	Household,
	PVSystem,
	EV,
	EVSE,
	ChargingOutlet,
	CEM,
	PV,
	PVESHybrid,
	ElectricalStorage,
	PVString,
	GridGuard,
	ControllableSystem,
};
enum FeatureTypeEnumType {
	ActuatorLevel,
	ActuatorSwitch,
	Alarm,
	DataTunneling,
	DeviceClassification,
	DeviceDiagnosis,
	DirectControl,
	ElectricalConnection,
	Generic,
	HVAC,
	LoadControl,
	Measurement,
	Messaging,
	NetworkManagement,
	NodeManagement,
	OperatingConstraints,
	PowerSequences,
	Sensing,
	Setpoint,
	SmartEnergyManagementPs,
	TaskManagement,
	Threshold,
	TimeInformation,
	TimeTable,
	DeviceConfiguration,
	SupplyCondition,
	TimeSeries,
	TariffInformation,
	IncentiveTable,
	Bill,
	Identification,
	StateInformation,
};
enum FeatureDirectControlSpecificUsageEnumType {
	History,
	RealTime,
};
enum FeatureHvacSpecificUsageEnumType {
	OperationMode,
	Overrun,
};
enum FeatureMeasurementSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
enum FeatureSetpointSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
enum FeatureSmartEnergyManagementPsSpecificUsageEnumType {
	FixedForecast,
	FlexibleChosenForecast,
	FlexibleOptionalForecast,
	OptionalSequenceBasedImmediateControl,
};
enum FunctionEnumType {
	actuatorLevelData,
	actuatorLevelDescriptionData,
	actuatorSwitchData,
	actuatorSwitchDescriptionData,
	alarmListData,
	bindingManagementDeleteCall,
	bindingManagementEntryListData,
	bindingManagementRequestCall,
	dataTunnelingCall,
	deviceClassificationManufacturerData,
	deviceClassificationUserData,
	deviceDiagnosisHeartbeatData,
	deviceDiagnosisServiceData,
	deviceDiagnosisStateData,
	directControlActivityListData,
	directControlDescriptionData,
	electricalConnectionDescriptionListData,
	electricalConnectionParameterDescriptionListData,
	electricalConnectionStateListData,
	hvacOperationModeDescriptionListData,
	hvacOverrunDescriptionListData,
	hvacOverrunListData,
	hvacSystemFunctionDescriptionListData,
	hvacSystemFunctionListData,
	hvacSystemFunctionOperationModeRelationListData,
	hvacSystemFunctionPowerSequenceRelationListData,
	hvacSystemFunctionSetpointRelationListData,
	loadControlEventListData,
	loadControlStateListData,
	measurementConstraintsListData,
	measurementDescriptionListData,
	measurementListData,
	measurementThresholdRelationListData,
	messagingListData,
	networkManagementAbortCall,
	networkManagementAddNodeCall,
	networkManagementDeviceDescriptionListData,
	networkManagementDiscoverCall,
	networkManagementEntityDescriptionListData,
	networkManagementFeatureDescriptionListData,
	networkManagementJoiningModeData,
	networkManagementModifyNodeCall,
	networkManagementProcessStateData,
	networkManagementRemoveNodeCall,
	networkManagementReportCandidateData,
	networkManagementScanNetworkCall,
	nodeManagementBindingData,
	nodeManagementBindingDeleteCall,
	nodeManagementBindingRequestCall,
	nodeManagementDestinationListData,
	nodeManagementDetailedDiscoveryData,
	nodeManagementSubscriptionData,
	nodeManagementSubscriptionDeleteCall,
	nodeManagementSubscriptionRequestCall,
	operatingConstraintsDurationListData,
	operatingConstraintsInterruptListData,
	operatingConstraintsPowerDescriptionListData,
	operatingConstraintsPowerLevelListData,
	operatingConstraintsPowerRangeListData,
	operatingConstraintsResumeImplicationListData,
	powerSequenceAlternativesRelationListData,
	powerSequenceDescriptionListData,
	powerSequenceNodeScheduleInformationData,
	powerSequencePriceCalculationRequestCall,
	powerSequencePriceListData,
	powerSequenceScheduleConfigurationRequestCall,
	powerSequenceScheduleConstraintsListData,
	powerSequenceScheduleListData,
	powerSequenceSchedulePreferenceListData,
	powerSequenceStateListData,
	powerTimeSlotScheduleConstraintsListData,
	powerTimeSlotScheduleListData,
	powerTimeSlotValueListData,
	resultData,
	sensingDescriptionData,
	sensingListData,
	sessionIdentificationListData,
	sessionMeasurementRelationListData,
	setpointConstraintsListData,
	setpointDescriptionListData,
	setpointListData,
	smartEnergyManagementPsConfigurationRequestCall,
	smartEnergyManagementPsData,
	smartEnergyManagementPsPriceCalculationRequestCall,
	smartEnergyManagementPsPriceData,
	specificationVersionListData,
	subscriptionManagementDeleteCall,
	subscriptionManagementEntryListData,
	subscriptionManagementRequestCall,
	supplyConditionDescriptionListData,
	supplyConditionListData,
	supplyConditionThresholdRelationListData,
	taskManagementJobDescriptionListData,
	taskManagementJobListData,
	taskManagementJobRelationListData,
	taskManagementOverviewData,
	thresholdConstraintsListData,
	thresholdDescriptionListData,
	thresholdListData,
	timeDistributorData,
	timeDistributorEnquiryCall,
	timeInformationData,
	timePrecisionData,
	timeTableConstraintsListData,
	timeTableDescriptionListData,
	timeTableListData,
	deviceConfigurationKeyValueConstraintsListData,
	deviceConfigurationKeyValueListData,
	deviceConfigurationKeyValueDescriptionListData,
	loadControlLimitConstraintsListData,
	loadControlLimitDescriptionListData,
	loadControlLimitListData,
	loadControlNodeData,
	timeSeriesConstraintsListData,
	timeSeriesDescriptionListData,
	timeSeriesListData,
	tariffOverallConstraintsData,
	tariffListData,
	tariffBoundaryRelationListData,
	tariffTierRelationListData,
	tariffDescriptionListData,
	tierBoundaryListData,
	tierBoundaryDescriptionListData,
	commodityListData,
	tierListData,
	tierIncentiveRelationListData,
	tierDescriptionListData,
	incentiveListData,
	incentiveDescriptionListData,
	incentiveTableData,
	incentiveTableDescriptionData,
	incentiveTableConstraintsData,
	electricalConnectionPermittedValueSetListData,
	useCaseInformationListData,
	nodeManagementUseCaseData,
	billConstraintsListData,
	billDescriptionListData,
	billListData,
	identificationListData,
	measurementSeriesListData,
	electricalConnectionCharacteristicListData,
	stateInformationListData,
};
enum TimeSeriesTypeEnumType {
	plan,
	singleDemand,
	constraints,
	energyRequest,
	dischargingEnergyRequest,
	consumptionLimitCurve,
	productionLimitCurve,
};
enum MeasurementTypeEnumType {
	acceleration,
	angle,
	angularVelocity,
	area,
	atmosphericPressure,
	capacity,
	concentration,
	count,
	current,
	density,
	distance,
	electricField,
	energy,
	force,
	frequency,
	harmonicDistortion,
	heat,
	heatFlux,
	illuminance,
	impulse,
	level,
	magneticField,
	mass,
	massFlow,
	particles,
	percentage,
	power,
	powerFactor,
	pressure,
	radonActivity,
	relativeHumidity,
	resistance,
	solarRadiation,
	speed,
	temperature,
	time,
	torque,
	unknown,
	velocity,
	voltage,
	volume,
	volumetricFlow,
};
enum MeasurementValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
	standardDeviation,
};
enum MeasurementValueSourceEnumType {
	measuredValue,
	calculatedValue,
	empiricalValue,
};
enum MeasurementValueTendencyEnumType {
	rising,
	stable,
	falling,
};
enum MeasurementValueStateEnumType {
	normal,
	outOfRange,
	error,
};
enum ThresholdTypeEnumType {
	goodAbove,
	badAbove,
	goodBelow,
	badBelow,
	minValueThreshold,
	maxValueThreshold,
	minValueThresholdExtreme,
	maxValueThresholdExtreme,
	sagThreshold,
	swellThreshold,
};
enum DirectControlActivityStateEnumType {
	running,
	paused,
	inactive,
};
enum PowerTimeSlotValueTypeEnumType {
	power,
	powerMin,
	powerMax,
	powerExpectedValue,
	powerStandardDeviation,
	powerSkewness,
	energy,
	energyMin,
	energyMax,
	energyExpectedValue,
	energyStandardDeviation,
	energySkewness,
};
enum PowerSequenceScopeEnumType {
	forecast,
	measurement,
	recommendation,
};
enum PowerSequenceStateEnumType {
	running,
	paused,
	scheduled,
	scheduledPaused,
	pending,
	inactive,
	completed,
	invalid,
};
enum ActuatorLevelFctEnumType {
	start,
	up,
	down,
	stop,
	percentageAbsolute,
	percentageRelative,
	absolute,
	relative,
};
enum CmdClassifierType {
	read,
	reply,
	notify,
	write,
	call,
	result,
};
enum ActuatorSwitchFctEnumType {
	on,
	off,
	toggle,
};
enum AlarmTypeEnumType {
	alarmCancelled,
	underThreshold,
	overThreshold,
};
enum BillTypeEnumType {
	chargingSummary,
};
enum BillPositionTypeEnumType {
	gridElectricEnergy,
	selfProducedElectricEnergy,
};
enum BillCostTypeEnumType {
	absolutePrice,
	relativePrice,
	co2Emission,
	renewableEnergy,
	radioactiveWaste,
};
enum IdentificationTypeEnumType {
	eui48,
	eui64,
	userRfidTag,
};
enum PowerSourceEnumType {
	unknown,
	mainsSinglePhase,
	mains3Phase,
	battery,
	dc,
};
enum DeviceConfigurationKeyNameEnumType {
	peakPowerOfPvSystem,
	pvCurtailmentLimitFactor,
	asymmetricChargingSupported,
	communicationsStandard,
	inverterGridCode,
	pvStringAvailabilityStatus,
	batteryAvailabilityStatus,
	gridConnectionStatus,
	timeToAcChargePowerMax,
	timeToAcDischargePowerMax,
	tilt,
	azimuth,
	batteryType,
	maxCycleCountPerDay,
	failsafeConsumptionActivePowerLimit,
	failsafeProductionActivePowerLimit,
	failsafePositiveReactivePowerLimit,
	failsafeNegativeReactivePowerLimit,
	failsafePositiveCosPhiLimit,
	failsafeNegativeCosPhiLimit,
	maxAcChargePower,
	maxAcDischargePower,
	maxDcChargePower,
	maxDcDischargePower,
	batteryActiveControlMode,
	defaultAcPower,
	defaultDcPower,
	defaultPccPower,
	failsafeAcPowerSetpoint,
	failsafeDcPowerSetpoint,
	failsafePccPowerSetpoint,
	failsafeDurationMinimum,
	dischargingBelowTargetEnergyRequestPermitted,
	incentivesSimulationCyclesMax,
	incentivesSimulationConcurrent,
	incentivesTimeoutIncentiveRequest,
	incentivesWaitIncentiveWriteable,
};
enum DeviceConfigurationKeyValueTypeType {
	boolean,
	date,
	dateTime,
	duration,
	string,
	time,
	scaledNumber,
	integer,
};
enum DeviceDiagnosisOperatingStateEnumType {
	normalOperation,
	standby,
	failure,
	serviceNeeded,
	overrideDetected,
	inAlarm,
	notReachable,
	finished,
	temporarilyNotReady,
	off,
};
enum PowerSupplyConditionEnumType {
	good,
	low,
	critical,
	unknown,
	error,
};
enum ElectricalConnectionMeasurandVariantEnumType {
	amplitude,
	rms,
	instantaneous,
	angle,
	cosPhi,
};
enum ElectricalConnectionVoltageTypeEnumType {
	ac,
	dc,
};
enum ElectricalConnectionAcMeasurementTypeEnumType {
	real,
	reactive,
	apparent,
	phase,
};
enum ElectricalConnectionPhaseNameEnumType {
	a,
	b,
	c,
	ab,
	bc,
	ac,
	abc,
	neutral,
	ground,
	none,
};
enum ElectricalConnectionConnectionPointType {
	grid,
	home,
	pv,
	sd,
	other,
};
enum ElectricalConnectionCharacteristicContextEnumType {
	device,
	entity,
	inverter,
	pvString,
	battery,
};
enum ElectricalConnectionCharacteristicTypeEnumType {
	powerConsumptionMin,
	powerConsumptionMax,
	powerConsumptionNominalMin,
	powerConsumptionNominalMax,
	powerProductionMin,
	powerProductionMax,
	powerProductionNominalMin,
	powerProductionNominalMax,
	energyCapacityNominalMax,
	contractualConsumptionNominalMax,
	contractualProductionNominalMax,
	apparentPowerProductionNominalMax,
	apparentPowerConsumptionNominalMax,
};
enum HvacSystemFunctionTypeEnumType {
	heating,
	cooling,
	ventilation,
	dhw,
};
enum HvacOperationModeTypeEnumType {
	auto,
	on,
	off,
	eco,
};
enum HvacOverrunTypeEnumType {
	oneTimeDhw,
	party,
	sgReadyCondition1,
	sgReadyCondition3,
	sgReadyCondition4,
	oneDayAway,
	oneDayAtHome,
	oneTimeVentilation,
	hvacSystemOff,
	valveKick,
};
enum HvacOverrunStatusEnumType {
	active,
	running,
	finished,
	inactive,
};
enum SetpointTypeEnumType {
	valueAbsolute,
	valueRelative,
};
enum TimeSlotTimeModeEnumType {
	absolute,
	recurring,
	both,
};
enum TierBoundaryTypeEnumType {
	powerBoundary,
	energyBoundary,
	countBoundary,
};
enum TierTypeEnumType {
	fixedCost,
	dynamicCost,
};
enum IncentiveTypeEnumType {
	absoluteCost,
	relativeCost,
	renewableEnergyPercentage,
	co2Emission,
};
enum IncentiveValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
};
enum LoadControlEventActionEnumType {
	pause,
	resume,
	reduce,
	increase,
	emergency,
	normal,
};
enum LoadControlEventStateEnumType {
	eventAccepted,
	eventStarted,
	eventStopped,
	eventRejected,
	eventCancelled,
	eventError,
};
enum LoadControlLimitTypeEnumType {
	minValueLimit,
	maxValueLimit,
	signDependentAbsValueLimit,
};
enum LoadControlCategoryEnumType {
	obligation,
	recommendation,
	optimization,
};
enum NetworkManagementFeatureSetType {
	gateway,
	router,
	smart,
	simple,
};
enum NetworkManagementProcessStateStateType {
	succeeded,
	failed,
	aborted,
};
enum NetworkManagementStateChangeType {
	added,
	removed,
	modified,
};
enum SensingStateEnumType {
	on,
	off,
	toggle,
	level,
	levelUp,
	levelDown,
	levelStart,
	levelStop,
	levelAbsolute,
	levelRelative,
	levelPercentageAbsolute,
	levelPercentageRelative,
	pressed,
	longPressed,
	released,
	changed,
	started,
	stopped,
	paused,
	middle,
	up,
	down,
	forward,
	backwards,
	open,
	closed,
	opening,
	closing,
	high,
	low,
	day,
	night,
	detected,
	notDetected,
	alarmed,
	notAlarmed,
};
enum SensingTypeEnumType {
	switch,
	button,
	level,
	levelSwitch,
	windowHandle,
	contactSensor,
	occupancySensor,
	motionDetector,
	fireDetector,
	smokeDetector,
	heatDetector,
	waterDetector,
	gasDetector,
	alarmSensor,
	powerAlarmSensor,
	dayNightIndicator,
};
enum StateInformationFunctionalityEnumType {
	externalOverrideFromGrid,
	autonomousGridSupport,
	islandingMode,
	balancing,
	trickleCharging,
	calibration,
	commissioningMissing,
	sleeping,
	starting,
	mppt,
	throttled,
	shuttingDown,
	manualShutdown,
};
enum StateInformationFailureEnumType {
	inverterDefective,
	batteryOvercurrentProtection,
	pvStringOvercurrentProtection,
	gridFault,
	groundFault,
	acDisconnected,
	dcDisconnected,
	cabinetOpen,
	overTemperature,
	underTemperature,
	frequencyAboveLimit,
	frequencyBelowLimit,
	acVoltageAboveLimit,
	acVoltageBelowLimit,
	dcVoltageAboveLimit,
	dcVoltageBelowLimit,
	hardwareTestFailure,
	genericInternalError,
};
enum StateInformationCategoryEnumType {
	functionality,
	failure,
};
enum SupplyConditionEventTypeEnumType {
	thesholdExceeded,
	fallenBelowThreshold,
	supplyInterrupt,
	releaseOfLimitations,
	otherProblem,
	gridConditionUpdate,
};
enum SupplyConditionOriginatorEnumType {
	externDSO,
	externSupplier,
	internalLimit,
	internalService,
	internalUser,
};
enum GridConditionEnumType {
	consumptionRed,
	consumptionYellow,
	good,
	productionYellow,
	productionRed,
};
enum TaskManagementJobSourceEnumType {
	internalMechanism,
	userInteraction,
	externalConfiguration,
};
struct MessagingTypeType {
	MessagingTypeEnumType messagingtypeenumtype;
	EnumExtendType enumextendtype;
};
struct AbsoluteOrRelativeTimeType {
	uint64_t duration;
	uint64_t dateTime;
};
struct RecurringIntervalType {
	RecurringIntervalEnumType recurringintervalenumtype;
	EnumExtendType enumextendtype;
};
struct OccurrenceType {
	OccurrenceEnumType occurrenceenumtype;
	EnumExtendType enumextendtype;
};
struct CommodityTypeType {
	CommodityTypeEnumType commoditytypeenumtype;
	EnumExtendType enumextendtype;
};
struct EnergyDirectionType {
	EnergyDirectionEnumType energydirectionenumtype;
	EnumExtendType enumextendtype;
};
struct EnergyModeType {
	EnergyModeEnumType energymodeenumtype;
	EnumExtendType enumextendtype;
};
struct UnitOfMeasurementType {
	UnitOfMeasurementEnumType unitofmeasurementenumtype;
	EnumExtendType enumextendtype;
};
struct CurrencyType {
	CurrencyEnumType currencyenumtype;
	EnumExtendType enumextendtype;
};
struct ScopeTypeType {
	ScopeTypeEnumType scopetypeenumtype;
	EnumExtendType enumextendtype;
};
struct DeviceTypeType {
	DeviceTypeEnumType devicetypeenumtype;
	EnumExtendType enumextendtype;
};
struct EntityTypeType {
	EntityTypeEnumType entitytypeenumtype;
	EnumExtendType enumextendtype;
};
struct FeatureTypeType {
	FeatureTypeEnumType featuretypeenumtype;
	EnumExtendType enumextendtype;
};
struct FeatureSpecificUsageType {
	std::string FeatureSpecificUsageEnumType;
	EnumExtendType enumextendtype;
};
struct FeatureSpecificUsageEnumType {
	FeatureDirectControlSpecificUsageEnumType featuredirectcontrolspecificusageenumtype;
	FeatureHvacSpecificUsageEnumType featurehvacspecificusageenumtype;
	FeatureMeasurementSpecificUsageEnumType featuremeasurementspecificusageenumtype;
	FeatureSetpointSpecificUsageEnumType featuresetpointspecificusageenumtype;
	FeatureSmartEnergyManagementPsSpecificUsageEnumType featuresmartenergymanagementpsspecificusageenumtype;
};
struct FunctionType {
	FunctionEnumType functionenumtype;
	EnumExtendType enumextendtype;
};
struct TimeSeriesTypeType {
	TimeSeriesTypeEnumType timeseriestypeenumtype;
	EnumExtendType enumextendtype;
};
struct MeasurementTypeType {
	MeasurementTypeEnumType measurementtypeenumtype;
	EnumExtendType enumextendtype;
};
struct MeasurementValueTypeType {
	MeasurementValueTypeEnumType measurementvaluetypeenumtype;
	EnumExtendType enumextendtype;
};
struct MeasurementValueSourceType {
	MeasurementValueSourceEnumType measurementvaluesourceenumtype;
	EnumExtendType enumextendtype;
};
struct MeasurementValueTendencyType {
	MeasurementValueTendencyEnumType measurementvaluetendencyenumtype;
	EnumExtendType enumextendtype;
};
struct MeasurementValueStateType {
	MeasurementValueStateEnumType measurementvaluestateenumtype;
	EnumExtendType enumextendtype;
};
struct ThresholdTypeType {
	ThresholdTypeEnumType thresholdtypeenumtype;
	EnumExtendType enumextendtype;
};
struct DirectControlActivityStateType {
	DirectControlActivityStateEnumType directcontrolactivitystateenumtype;
	EnumExtendType enumextendtype;
};
struct PowerTimeSlotValueTypeType {
	PowerTimeSlotValueTypeEnumType powertimeslotvaluetypeenumtype;
	EnumExtendType enumextendtype;
};
struct PowerSequenceScopeType {
	PowerSequenceScopeEnumType powersequencescopeenumtype;
	EnumExtendType enumextendtype;
};
struct PowerSequenceStateType {
	PowerSequenceStateEnumType powersequencestateenumtype;
	EnumExtendType enumextendtype;
};
struct ActuatorLevelFctType {
	ActuatorLevelFctEnumType actuatorlevelfctenumtype;
	EnumExtendType enumextendtype;
};
struct ActuatorSwitchFctType {
	ActuatorSwitchFctEnumType actuatorswitchfctenumtype;
	EnumExtendType enumextendtype;
};
struct AlarmTypeType {
	AlarmTypeEnumType alarmtypeenumtype;
	EnumExtendType enumextendtype;
};
struct BillTypeType {
	BillTypeEnumType billtypeenumtype;
	EnumExtendType enumextendtype;
};
struct BillPositionTypeType {
	BillPositionTypeEnumType billpositiontypeenumtype;
	EnumExtendType enumextendtype;
};
struct BillCostTypeType {
	BillCostTypeEnumType billcosttypeenumtype;
	EnumExtendType enumextendtype;
};
struct IdentificationTypeType {
	IdentificationTypeEnumType identificationtypeenumtype;
	EnumExtendType enumextendtype;
};
struct PowerSourceType {
	PowerSourceEnumType powersourceenumtype;
	EnumExtendType enumextendtype;
};
struct DeviceConfigurationKeyNameType {
	DeviceConfigurationKeyNameEnumType deviceconfigurationkeynameenumtype;
	EnumExtendType enumextendtype;
};
struct DeviceDiagnosisOperatingStateType {
	DeviceDiagnosisOperatingStateEnumType devicediagnosisoperatingstateenumtype;
	EnumExtendType enumextendtype;
};
struct PowerSupplyConditionType {
	PowerSupplyConditionEnumType powersupplyconditionenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionMeasurandVariantType {
	ElectricalConnectionMeasurandVariantEnumType electricalconnectionmeasurandvariantenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionVoltageTypeType {
	ElectricalConnectionVoltageTypeEnumType electricalconnectionvoltagetypeenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionAcMeasurementTypeType {
	ElectricalConnectionAcMeasurementTypeEnumType electricalconnectionacmeasurementtypeenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionPhaseNameType {
	ElectricalConnectionPhaseNameEnumType electricalconnectionphasenameenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionCharacteristicContextType {
	ElectricalConnectionCharacteristicContextEnumType electricalconnectioncharacteristiccontextenumtype;
	EnumExtendType enumextendtype;
};
struct ElectricalConnectionCharacteristicTypeType {
	ElectricalConnectionCharacteristicTypeEnumType electricalconnectioncharacteristictypeenumtype;
	EnumExtendType enumextendtype;
};
struct HvacSystemFunctionTypeType {
	HvacSystemFunctionTypeEnumType hvacsystemfunctiontypeenumtype;
	EnumExtendType enumextendtype;
};
struct HvacOperationModeTypeType {
	HvacOperationModeTypeEnumType hvacoperationmodetypeenumtype;
	EnumExtendType enumextendtype;
};
struct HvacOverrunTypeType {
	HvacOverrunTypeEnumType hvacoverruntypeenumtype;
	EnumExtendType enumextendtype;
};
struct HvacOverrunStatusType {
	HvacOverrunStatusEnumType hvacoverrunstatusenumtype;
	EnumExtendType enumextendtype;
};
struct SetpointTypeType {
	SetpointTypeEnumType setpointtypeenumtype;
	EnumExtendType enumextendtype;
};
struct TimeSlotTimeModeType {
	TimeSlotTimeModeEnumType timeslottimemodeenumtype;
	EnumExtendType enumextendtype;
};
struct TierBoundaryTypeType {
	TierBoundaryTypeEnumType tierboundarytypeenumtype;
	EnumExtendType enumextendtype;
};
struct TierTypeType {
	TierTypeEnumType tiertypeenumtype;
	EnumExtendType enumextendtype;
};
struct IncentiveTypeType {
	IncentiveTypeEnumType incentivetypeenumtype;
	EnumExtendType enumextendtype;
};
struct IncentiveValueTypeType {
	IncentiveValueTypeEnumType incentivevaluetypeenumtype;
	EnumExtendType enumextendtype;
};
struct LoadControlEventActionType {
	LoadControlEventActionEnumType loadcontroleventactionenumtype;
	EnumExtendType enumextendtype;
};
struct LoadControlEventStateType {
	LoadControlEventStateEnumType loadcontroleventstateenumtype;
	EnumExtendType enumextendtype;
};
struct LoadControlLimitTypeType {
	LoadControlLimitTypeEnumType loadcontrollimittypeenumtype;
	EnumExtendType enumextendtype;
};
struct LoadControlCategoryType {
	LoadControlCategoryEnumType loadcontrolcategoryenumtype;
	EnumExtendType enumextendtype;
};
struct UseCaseActorType {
	UseCaseActorEnumType usecaseactorenumtype;
	EnumExtendType enumextendtype;
};
struct UseCaseNameType {
	UseCaseNameEnumType usecasenameenumtype;
	EnumExtendType enumextendtype;
};
struct SensingStateType {
	SensingStateEnumType sensingstateenumtype;
	EnumExtendType enumextendtype;
};
struct SensingTypeType {
	SensingTypeEnumType sensingtypeenumtype;
	EnumExtendType enumextendtype;
};
struct StateInformationType {
	StateInformationFunctionalityEnumType stateinformationfunctionalityenumtype;
	StateInformationFailureEnumType stateinformationfailureenumtype;
	EnumExtendType enumextendtype;
};
struct StateInformationCategoryType {
	StateInformationCategoryEnumType stateinformationcategoryenumtype;
	EnumExtendType enumextendtype;
};
struct SupplyConditionEventTypeType {
	SupplyConditionEventTypeEnumType supplyconditioneventtypeenumtype;
	EnumExtendType enumextendtype;
};
struct SupplyConditionOriginatorType {
	SupplyConditionOriginatorEnumType supplyconditionoriginatorenumtype;
	EnumExtendType enumextendtype;
};
struct GridConditionType {
	GridConditionEnumType gridconditionenumtype;
	EnumExtendType enumextendtype;
};
struct TaskManagementJobStateType {
	DirectControlActivityStateEnumType directcontrolactivitystateenumtype;
	HvacOverrunStatusEnumType hvacoverrunstatusenumtype;
	LoadControlEventStateEnumType loadcontroleventstateenumtype;
	PowerSequenceStateEnumType powersequencestateenumtype;
	EnumExtendType enumextendtype;
};
struct TaskManagementJobSourceType {
	TaskManagementJobSourceEnumType taskmanagementjobsourceenumtype;
	EnumExtendType enumextendtype;
};
