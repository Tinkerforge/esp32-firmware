
// This file is generated by generator.py. Changes will be overwritten

#pragma once

#include "module.h"
#include "config.h"
#include <string>
#include <vector>
#include <map>
#include <optional>

namespace ArduinoJson
{
template <typename T> struct Converter<std::vector<T>> {
    static void toJson(const std::vector<T> &src, JsonVariant dst);
    static std::vector<T> fromJson(JsonVariantConst src);
    static bool checkJson(JsonVariantConst src);
};
} // namespace ArduinoJson


struct DateTimeStruct { // Added manually
    std::optional<uint16_t> year;
    std::optional<uint8_t> month;
    std::optional<uint8_t> day;
    std::optional<uint8_t> hour;
    std::optional<uint8_t> minute;
    std::optional<uint8_t> second;
    std::optional<uint16_t> millisecond;
    std::optional<int8_t> timezone; // Offset from UTC in hours, 0 if time is UTC, empty if no TZ is given
};






using MessagingNumberType = int;
using MessagingTypeType = std::string;
using MessagingDataTextType = std::string;
using LabelType = std::string;
using DescriptionType = std::string;
using SpecificationVersionType = std::string;
using EnumExtendType = std::string;
using AbsoluteOrRelativeTimeType = std::string;
using RecurringIntervalType = std::string;
using DayOfMonthType = int;
using CalendarWeekType = int;
using OccurrenceType = std::string;
using NumberType = int;
using ScaleType = int;
using MaxResponseDelayType = std::string;
using CommodityTypeType = std::string;
using EnergyDirectionType = std::string;
using EnergyModeType = std::string;
using UnitOfMeasurementType = std::string;
using CurrencyType = std::string;
using AddressDeviceType = std::string;
using AddressEntityType = int;
using AddressFeatureType = int;
using ScopeTypeType = std::string;
using FeatureGroupType = std::string;
using DeviceTypeType = std::string;
using EntityTypeType = std::string;
using FeatureTypeType = std::string;
using FeatureSpecificUsageType = std::string;
using FeatureSpecificUsageEnumType = std::string;
using FunctionType = std::string;
using TimeSeriesIdType = int;
using TimeSeriesSlotIdType = int;
using TimeSeriesSlotCountType = std::string;
using TimeSeriesTypeType = std::string;
using MeasurementIdType = int;
using MeasurementTypeType = std::string;
using MeasurementValueTypeType = std::string;
using MeasurementValueSourceType = std::string;
using MeasurementValueTendencyType = std::string;
using MeasurementValueStateType = std::string;
using ThresholdIdType = int;
using ThresholdTypeType = std::string;
using DirectControlActivityStateType = std::string;
using AlternativesIdType = int;
using PowerSequenceIdType = int;
using PowerTimeSlotNumberType = int;
using PowerTimeSlotValueTypeType = std::string;
using PowerSequenceScopeType = std::string;
using PowerSequenceStateType = std::string;
using ErrorNumberType = int;
using BindingIdType = int;
using ActuatorLevelFctType = std::string;
using MsgCounterType = int;
using FilterIdType = int;
using ActuatorSwitchFctType = std::string;
using AlarmIdType = int;
using AlarmTypeType = std::string;
using BillIdType = int;
using BillTypeType = std::string;
using BillPositionIdType = int;
using BillPositionCountType = std::string;
using BillPositionTypeType = std::string;
using BillValueIdType = int;
using BillCostIdType = int;
using BillCostTypeType = std::string;
using IdentificationIdType = int;
using IdentificationTypeType = std::string;
using IdentificationValueType = std::string;
using SessionIdType = int;
using PurposeIdType = std::string;
using ChannelIdType = int;
using DeviceClassificationStringType = std::string;
using PowerSourceType = std::string;
using DeviceConfigurationKeyIdType = int;
using DeviceConfigurationKeyValueStringType = std::string;
using DeviceConfigurationKeyNameType = std::string;
using VendorStateCodeType = std::string;
using LastErrorCodeType = std::string;
using DeviceDiagnosisOperatingStateType = std::string;
using PowerSupplyConditionType = std::string;
using ElectricalConnectionIdType = int;
using ElectricalConnectionParameterIdType = int;
using ElectricalConnectionMeasurandVariantType = std::string;
using ElectricalConnectionVoltageTypeType = std::string;
using ElectricalConnectionAcMeasurementTypeType = std::string;
using ElectricalConnectionPhaseNameType = std::string;
using ElectricalConnectionCharacteristicIdType = int;
using ElectricalConnectionCharacteristicContextType = std::string;
using ElectricalConnectionCharacteristicTypeType = std::string;
using HvacSystemFunctionIdType = int;
using HvacSystemFunctionTypeType = std::string;
using HvacOperationModeIdType = int;
using HvacOperationModeTypeType = std::string;
using HvacOverrunIdType = int;
using HvacOverrunTypeType = std::string;
using HvacOverrunStatusType = std::string;
using SetpointIdType = int;
using SetpointTypeType = std::string;
using TimeTableIdType = int;
using TimeSlotIdType = int;
using TimeSlotCountType = std::string;
using TimeSlotTimeModeType = std::string;
using TariffIdType = int;
using TariffCountType = std::string;
using TierBoundaryIdType = int;
using TierBoundaryCountType = std::string;
using TierBoundaryTypeType = std::string;
using CommodityIdType = int;
using TierIdType = int;
using TierCountType = std::string;
using TierTypeType = std::string;
using IncentiveIdType = int;
using IncentiveCountType = std::string;
using IncentiveTypeType = std::string;
using IncentivePriorityType = int;
using IncentiveValueTypeType = std::string;
using LoadControlEventIdType = int;
using LoadControlEventActionType = std::string;
using LoadControlEventStateType = std::string;
using LoadControlLimitIdType = int;
using LoadControlLimitTypeType = std::string;
using LoadControlCategoryType = std::string;
using NetworkManagementNativeSetupType = std::string;
using NetworkManagementScanSetupType = std::string;
using NetworkManagementSetupType = std::string;
using NetworkManagementCandidateSetupType = std::string;
using NetworkManagementTechnologyAddressType = std::string;
using NetworkManagementCommunicationsTechnologyInformationType = std::string;
using NetworkManagementMinimumTrustLevelType = std::string;
using NetworkManagementProcessTimeoutType = std::string;
using SubscriptionIdType = int;
using UseCaseActorType = std::string;
using UseCaseActorEnumType = std::string;
using UseCaseNameType = std::string;
using UseCaseNameEnumType = std::string;
using UseCaseScenarioSupportType = int;
using SensingStateType = std::string;
using SensingTypeType = std::string;
using stateInformationIdType = int;
using StateInformationType = std::string;
using StateInformationCategoryType = std::string;
using ConditionIdType = int;
using SupplyConditionEventTypeType = std::string;
using SupplyConditionOriginatorType = std::string;
using GridConditionType = std::string;
using TaskManagementJobIdType = int;
using TaskManagementJobStateType = std::string;
using TaskManagementJobSourceType = std::string;
using SpecificationVersionDataType = std::string; 
/**
* Datatype MessagingTypeEnumType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
enum class MessagingTypeEnumType {
	logging,
	information,
	warning,
	alarm,
	emergency,
	obsolete,
};
/**
 * Convert the enum MessagingTypeEnumType to its String representation
 * @param src The source MessagingTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MessagingTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MessagingTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MessagingTypeEnumType &dst);

/**
* Datatype RecurringIntervalEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class RecurringIntervalEnumType {
	yearly,
	monthly,
	weekly,
	daily,
	hourly,
	everyMinute,
	everySecond,
};
/**
 * Convert the enum RecurringIntervalEnumType to its String representation
 * @param src The source RecurringIntervalEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurringIntervalEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a RecurringIntervalEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination RecurringIntervalEnumType.
 */
void convertFromJson(const JsonVariantConst& src, RecurringIntervalEnumType &dst);

/**
* Datatype MonthType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class MonthType {
	january,
	february,
	march,
	april,
	may,
	june,
	july,
	august,
	september,
	october,
	november,
	december,
};
/**
 * Convert the enum MonthType to its String representation
 * @param src The source MonthType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MonthType &src, JsonVariant& dst);
/**
 * Convert a string to a MonthType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MonthType.
 */
void convertFromJson(const JsonVariantConst& src, MonthType &dst);

/**
* Datatype DayOfWeekType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class DayOfWeekType {
	monday,
	tuesday,
	wednesday,
	thursday,
	friday,
	saturday,
	sunday,
};
/**
 * Convert the enum DayOfWeekType to its String representation
 * @param src The source DayOfWeekType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DayOfWeekType &src, JsonVariant& dst);
/**
 * Convert a string to a DayOfWeekType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DayOfWeekType.
 */
void convertFromJson(const JsonVariantConst& src, DayOfWeekType &dst);

/**
* Datatype OccurrenceEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class OccurrenceEnumType {
	first,
	second,
	third,
	fourth,
	last,
};
/**
 * Convert the enum OccurrenceEnumType to its String representation
 * @param src The source OccurrenceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OccurrenceEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a OccurrenceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination OccurrenceEnumType.
 */
void convertFromJson(const JsonVariantConst& src, OccurrenceEnumType &dst);

/**
* Datatype CommodityTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class CommodityTypeEnumType {
	electricity,
	gas,
	oil,
	water,
	wasteWater,
	domesticHotWater,
	heatingWater,
	steam,
	heat,
	coolingLoad,
	air,
};
/**
 * Convert the enum CommodityTypeEnumType to its String representation
 * @param src The source CommodityTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a CommodityTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CommodityTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, CommodityTypeEnumType &dst);

/**
* Datatype EnergyDirectionEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EnergyDirectionEnumType {
	consume,
	produce,
};
/**
 * Convert the enum EnergyDirectionEnumType to its String representation
 * @param src The source EnergyDirectionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EnergyDirectionEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a EnergyDirectionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EnergyDirectionEnumType.
 */
void convertFromJson(const JsonVariantConst& src, EnergyDirectionEnumType &dst);

/**
* Datatype EnergyModeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EnergyModeEnumType {
	consume,
	produce,
	idle,
	var_auto,
};
/**
 * Convert the enum EnergyModeEnumType to its String representation
 * @param src The source EnergyModeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EnergyModeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a EnergyModeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EnergyModeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, EnergyModeEnumType &dst);

/**
* Datatype UnitOfMeasurementEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class UnitOfMeasurementEnumType {
	unknown,
	var_1,
	m,
	kg,
	s,
	A,
	K,
	mol,
	cd,
	V,
	W,
	Wh,
	VA,
	VAh,
	var,
	varh,
	degC,
	degF,
	Lm,
	lx,
	Ohm,
	Hz,
	dB,
	dBm,
	pct,
	ppm,
	l,
	l_s,
	l_h,
	deg,
	rad,
	rad_s,
	sr,
	Gy,
	Bq,
	Bq_m_3,
	Sv,
	Rd,
	C,
	F,
	H,
	J,
	N,
	N_m,
	N_s,
	Wb,
	T,
	Pa,
	bar,
	atm,
	psi,
	mmHg,
	m_2,
	m_3,
	m_3_h,
	m_s,
	m_s_2,
	m_3_s,
	m_m_3,
	kg_m_3,
	kg_m,
	m_2_s,
	W_m_K,
	J_K,
	var_1_s,
	W_m_2,
	J_m_2,
	S,
	S_m,
	K_s,
	Pa_s,
	J_kg_K,
	Vs,
	V_m,
	V_Hz,
	As,
	A_m,
	Hz_s,
	kg_s,
	kg_m_2,
	J_Wh,
	W_s,
	ft_3,
	ft_3_h,
	ccf,
	ccf_h,
	US_liq_gal,
	US_liq_gal_h,
	Imp_gal,
	Imp_gal_h,
	Btu,
	Btu_h,
	Ah,
	kg_Wh,
};
/**
 * Convert the enum UnitOfMeasurementEnumType to its String representation
 * @param src The source UnitOfMeasurementEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UnitOfMeasurementEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a UnitOfMeasurementEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination UnitOfMeasurementEnumType.
 */
void convertFromJson(const JsonVariantConst& src, UnitOfMeasurementEnumType &dst);

/**
* Datatype CurrencyEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class CurrencyEnumType {
	AED,
	AFN,
	ALL,
	AMD,
	ANG,
	AOA,
	ARS,
	AUD,
	AWG,
	AZN,
	BAM,
	BBD,
	BDT,
	BGN,
	BHD,
	BIF,
	BMD,
	BND,
	BOB,
	BOV,
	BRL,
	BSD,
	BTN,
	BWP,
	BYR,
	BZD,
	CAD,
	CDF,
	CHE,
	CHF,
	CHW,
	CLF,
	CLP,
	CNY,
	COP,
	COU,
	CRC,
	CUC,
	CUP,
	CVE,
	CZK,
	DJF,
	DKK,
	DOP,
	DZD,
	EGP,
	ERN,
	ETB,
	EUR,
	FJD,
	FKP,
	GBP,
	GEL,
	GHS,
	GIP,
	GMD,
	GNF,
	GTQ,
	GYD,
	HKD,
	HNL,
	HRK,
	HTG,
	HUF,
	IDR,
	ILS,
	INR,
	IQD,
	IRR,
	ISK,
	JMD,
	JOD,
	JPY,
	KES,
	KGS,
	KHR,
	KMF,
	KPW,
	KRW,
	KWD,
	KYD,
	KZT,
	LAK,
	LBP,
	LKR,
	LRD,
	LSL,
	LYD,
	MAD,
	MDL,
	MGA,
	MKD,
	MMK,
	MNT,
	MOP,
	MRO,
	MUR,
	MVR,
	MWK,
	MXN,
	MXV,
	MYR,
	MZN,
	NAD,
	NGN,
	NIO,
	NOK,
	NPR,
	NZD,
	OMR,
	PAB,
	PEN,
	PGK,
	PHP,
	PKR,
	PLN,
	PYG,
	QAR,
	RON,
	RSD,
	RUB,
	RWF,
	var_SAR,
	SBD,
	SCR,
	SDG,
	SEK,
	SGD,
	SHP,
	SLL,
	SOS,
	SRD,
	SSP,
	STD,
	SVC,
	SYP,
	SZL,
	THB,
	TJS,
	TMT,
	TND,
	TOP,
	TRY,
	TTD,
	TWD,
	TZS,
	UAH,
	UGX,
	USD,
	USN,
	UYI,
	UYU,
	UZS,
	VEF,
	VND,
	VUV,
	WST,
	XAF,
	XAG,
	XAU,
	XBA,
	XBB,
	XBC,
	XBD,
	XCD,
	XDR,
	XOF,
	XPD,
	XPF,
	XPT,
	XSU,
	XTS,
	XUA,
	XXX,
	YER,
	ZAR,
	ZMW,
	ZWL,
};
/**
 * Convert the enum CurrencyEnumType to its String representation
 * @param src The source CurrencyEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CurrencyEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a CurrencyEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CurrencyEnumType.
 */
void convertFromJson(const JsonVariantConst& src, CurrencyEnumType &dst);

/**
* Datatype ScopeTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class ScopeTypeEnumType {
	ac,
	acCosPhiGrid,
	acCurrentA,
	acCurrentB,
	acCurrentC,
	acFrequencyGrid,
	acPowerA,
	acPowerB,
	acPowerC,
	acPowerLimitPct,
	acPowerTotal,
	acVoltageA,
	acVoltageB,
	acVoltageC,
	acYieldDay,
	acYieldTotal,
	dcCurrent,
	dcPower,
	dcString1,
	dcString2,
	dcString3,
	dcString4,
	dcString5,
	dcString6,
	dcTotal,
	dcVoltage,
	dhwTemperature,
	flowTemperature,
	outsideAirTemperature,
	returnTemperature,
	roomAirTemperature,
	charge,
	stateOfCharge,
	discharge,
	gridConsumption,
	gridFeedIn,
	selfConsumption,
	overloadProtection,
	acPower,
	acEnergy,
	acCurrent,
	acVoltage,
	batteryControl,
	simpleIncentiveTable,
	stateOfHealth,
	travelRange,
	nominalEnergyCapacity,
	acPowerReal,
	acPowerApparent,
	acPowerReactive,
	acYieldMonth,
	acYieldYear,
	acFrequency,
	acCosPhi,
	dcEnergy,
	insulationResistance,
	stateOfEnergy,
	useableCapacity,
	dcChargeEnergy,
	dcDischargeEnergy,
	loadCycleCount,
	componentTemperature,
	gridLimit,
	gridLimitFallback,
	acPowerApparentTotal,
	acPowerReactiveTotal,
	acCurrentTotal,
	acEnergyConsumed,
	acEnergyProduced,
	batteryAcPower,
	batteryAcPowerPhaseSpecific,
	batteryDcPower,
	pccPower,
	activePowerLimit,
	activePowerLimitPercentage,
	simpleCommittedIncentiveTable,
	simplePreliminaryIncentiveTable,
	committedPowerPlan,
	preliminaryPowerPlan,
	incentiveTableEnConsWithPoETF,
	incentiveTableEnProdWithPoETF,
	incentiveTableEnConsWithPoE,
	incentiveTableEnProdWithPoE,
	incentiveTableEnConsWithTF,
	incentiveTableEnProdWithTF,
	activePowerForecast,
};
/**
 * Convert the enum ScopeTypeEnumType to its String representation
 * @param src The source ScopeTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScopeTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ScopeTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ScopeTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ScopeTypeEnumType &dst);

/**
* Datatype RoleType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class RoleType {
	client,
	server,
	special,
};
/**
 * Convert the enum RoleType to its String representation
 * @param src The source RoleType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RoleType &src, JsonVariant& dst);
/**
 * Convert a string to a RoleType 
 * @param src The JSON variant containing the string.
 * @param dst The destination RoleType.
 */
void convertFromJson(const JsonVariantConst& src, RoleType &dst);

/**
* Datatype DeviceTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class DeviceTypeEnumType {
	Dishwasher,
	Dryer,
	EnvironmentSensor,
	Generic,
	HeatGenerationSystem,
	HeatSinkSystem,
	HeatStorageSystem,
	HVACController,
	SubMeter,
	Washer,
	ElectricitySupplySystem,
	EnergyManagementSystem,
	Inverter,
	ChargingStation,
};
/**
 * Convert the enum DeviceTypeEnumType to its String representation
 * @param src The source DeviceTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a DeviceTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, DeviceTypeEnumType &dst);

/**
* Datatype EntityTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EntityTypeEnumType {
	Battery,
	Compressor,
	DeviceInformation,
	DHWCircuit,
	DHWStorage,
	Dishwasher,
	Dryer,
	ElectricalImmersionHeater,
	Fan,
	GasHeatingAppliance,
	Generic,
	HeatingBufferStorage,
	HeatingCircuit,
	HeatingObject,
	HeatingZone,
	HeatPumpAppliance,
	HeatSinkCircuit,
	HeatSourceCircuit,
	HeatSourceUnit,
	HVACController,
	HVACRoom,
	InstantDHWHeater,
	Inverter,
	OilHeatingAppliance,
	Pump,
	RefrigerantCircuit,
	SmartEnergyAppliance,
	SolarDHWStorage,
	SolarThermalCircuit,
	SubMeterElectricity,
	TemperatureSensor,
	Washer,
	BatterySystem,
	ElectricityGenerationSystem,
	ElectricityStorageSystem,
	GridConnectionPointOfPremises,
	Household,
	PVSystem,
	EV,
	EVSE,
	ChargingOutlet,
	CEM,
	PV,
	PVESHybrid,
	ElectricalStorage,
	PVString,
	GridGuard,
	ControllableSystem,
};
/**
 * Convert the enum EntityTypeEnumType to its String representation
 * @param src The source EntityTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a EntityTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EntityTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, EntityTypeEnumType &dst);

/**
* Datatype FeatureTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureTypeEnumType {
	ActuatorLevel,
	ActuatorSwitch,
	Alarm,
	DataTunneling,
	DeviceClassification,
	DeviceDiagnosis,
	DirectControl,
	ElectricalConnection,
	Generic,
	HVAC,
	LoadControl,
	Measurement,
	Messaging,
	NetworkManagement,
	NodeManagement,
	OperatingConstraints,
	PowerSequences,
	Sensing,
	Setpoint,
	SmartEnergyManagementPs,
	TaskManagement,
	Threshold,
	TimeInformation,
	TimeTable,
	DeviceConfiguration,
	SupplyCondition,
	TimeSeries,
	TariffInformation,
	IncentiveTable,
	Bill,
	Identification,
	StateInformation,
};
/**
 * Convert the enum FeatureTypeEnumType to its String representation
 * @param src The source FeatureTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureTypeEnumType &dst);

/**
* Datatype FeatureDirectControlSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureDirectControlSpecificUsageEnumType {
	History,
	RealTime,
};
/**
 * Convert the enum FeatureDirectControlSpecificUsageEnumType to its String representation
 * @param src The source FeatureDirectControlSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureDirectControlSpecificUsageEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureDirectControlSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureDirectControlSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureDirectControlSpecificUsageEnumType &dst);

/**
* Datatype FeatureHvacSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureHvacSpecificUsageEnumType {
	OperationMode,
	Overrun,
};
/**
 * Convert the enum FeatureHvacSpecificUsageEnumType to its String representation
 * @param src The source FeatureHvacSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureHvacSpecificUsageEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureHvacSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureHvacSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureHvacSpecificUsageEnumType &dst);

/**
* Datatype FeatureMeasurementSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureMeasurementSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
/**
 * Convert the enum FeatureMeasurementSpecificUsageEnumType to its String representation
 * @param src The source FeatureMeasurementSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureMeasurementSpecificUsageEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureMeasurementSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureMeasurementSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureMeasurementSpecificUsageEnumType &dst);

/**
* Datatype FeatureSetpointSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureSetpointSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
/**
 * Convert the enum FeatureSetpointSpecificUsageEnumType to its String representation
 * @param src The source FeatureSetpointSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureSetpointSpecificUsageEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureSetpointSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureSetpointSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureSetpointSpecificUsageEnumType &dst);

/**
* Datatype FeatureSmartEnergyManagementPsSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureSmartEnergyManagementPsSpecificUsageEnumType {
	FixedForecast,
	FlexibleChosenForecast,
	FlexibleOptionalForecast,
	OptionalSequenceBasedImmediateControl,
};
/**
 * Convert the enum FeatureSmartEnergyManagementPsSpecificUsageEnumType to its String representation
 * @param src The source FeatureSmartEnergyManagementPsSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureSmartEnergyManagementPsSpecificUsageEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FeatureSmartEnergyManagementPsSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureSmartEnergyManagementPsSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FeatureSmartEnergyManagementPsSpecificUsageEnumType &dst);

/**
* Datatype FunctionEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FunctionEnumType {
	actuatorLevelData,
	actuatorLevelDescriptionData,
	actuatorSwitchData,
	actuatorSwitchDescriptionData,
	alarmListData,
	bindingManagementDeleteCall,
	bindingManagementEntryListData,
	bindingManagementRequestCall,
	dataTunnelingCall,
	deviceClassificationManufacturerData,
	deviceClassificationUserData,
	deviceDiagnosisHeartbeatData,
	deviceDiagnosisServiceData,
	deviceDiagnosisStateData,
	directControlActivityListData,
	directControlDescriptionData,
	electricalConnectionDescriptionListData,
	electricalConnectionParameterDescriptionListData,
	electricalConnectionStateListData,
	hvacOperationModeDescriptionListData,
	hvacOverrunDescriptionListData,
	hvacOverrunListData,
	hvacSystemFunctionDescriptionListData,
	hvacSystemFunctionListData,
	hvacSystemFunctionOperationModeRelationListData,
	hvacSystemFunctionPowerSequenceRelationListData,
	hvacSystemFunctionSetpointRelationListData,
	loadControlEventListData,
	loadControlStateListData,
	measurementConstraintsListData,
	measurementDescriptionListData,
	measurementListData,
	measurementThresholdRelationListData,
	messagingListData,
	networkManagementAbortCall,
	networkManagementAddNodeCall,
	networkManagementDeviceDescriptionListData,
	networkManagementDiscoverCall,
	networkManagementEntityDescriptionListData,
	networkManagementFeatureDescriptionListData,
	networkManagementJoiningModeData,
	networkManagementModifyNodeCall,
	networkManagementProcessStateData,
	networkManagementRemoveNodeCall,
	networkManagementReportCandidateData,
	networkManagementScanNetworkCall,
	nodeManagementBindingData,
	nodeManagementBindingDeleteCall,
	nodeManagementBindingRequestCall,
	nodeManagementDestinationListData,
	nodeManagementDetailedDiscoveryData,
	nodeManagementSubscriptionData,
	nodeManagementSubscriptionDeleteCall,
	nodeManagementSubscriptionRequestCall,
	operatingConstraintsDurationListData,
	operatingConstraintsInterruptListData,
	operatingConstraintsPowerDescriptionListData,
	operatingConstraintsPowerLevelListData,
	operatingConstraintsPowerRangeListData,
	operatingConstraintsResumeImplicationListData,
	powerSequenceAlternativesRelationListData,
	powerSequenceDescriptionListData,
	powerSequenceNodeScheduleInformationData,
	powerSequencePriceCalculationRequestCall,
	powerSequencePriceListData,
	powerSequenceScheduleConfigurationRequestCall,
	powerSequenceScheduleConstraintsListData,
	powerSequenceScheduleListData,
	powerSequenceSchedulePreferenceListData,
	powerSequenceStateListData,
	powerTimeSlotScheduleConstraintsListData,
	powerTimeSlotScheduleListData,
	powerTimeSlotValueListData,
	resultData,
	sensingDescriptionData,
	sensingListData,
	sessionIdentificationListData,
	sessionMeasurementRelationListData,
	setpointConstraintsListData,
	setpointDescriptionListData,
	setpointListData,
	smartEnergyManagementPsConfigurationRequestCall,
	smartEnergyManagementPsData,
	smartEnergyManagementPsPriceCalculationRequestCall,
	smartEnergyManagementPsPriceData,
	specificationVersionListData,
	subscriptionManagementDeleteCall,
	subscriptionManagementEntryListData,
	subscriptionManagementRequestCall,
	supplyConditionDescriptionListData,
	supplyConditionListData,
	supplyConditionThresholdRelationListData,
	taskManagementJobDescriptionListData,
	taskManagementJobListData,
	taskManagementJobRelationListData,
	taskManagementOverviewData,
	thresholdConstraintsListData,
	thresholdDescriptionListData,
	thresholdListData,
	timeDistributorData,
	timeDistributorEnquiryCall,
	timeInformationData,
	timePrecisionData,
	timeTableConstraintsListData,
	timeTableDescriptionListData,
	timeTableListData,
	deviceConfigurationKeyValueConstraintsListData,
	deviceConfigurationKeyValueListData,
	deviceConfigurationKeyValueDescriptionListData,
	loadControlLimitConstraintsListData,
	loadControlLimitDescriptionListData,
	loadControlLimitListData,
	loadControlNodeData,
	timeSeriesConstraintsListData,
	timeSeriesDescriptionListData,
	timeSeriesListData,
	tariffOverallConstraintsData,
	tariffListData,
	tariffBoundaryRelationListData,
	tariffTierRelationListData,
	tariffDescriptionListData,
	tierBoundaryListData,
	tierBoundaryDescriptionListData,
	commodityListData,
	tierListData,
	tierIncentiveRelationListData,
	tierDescriptionListData,
	incentiveListData,
	incentiveDescriptionListData,
	incentiveTableData,
	incentiveTableDescriptionData,
	incentiveTableConstraintsData,
	electricalConnectionPermittedValueSetListData,
	useCaseInformationListData,
	nodeManagementUseCaseData,
	billConstraintsListData,
	billDescriptionListData,
	billListData,
	identificationListData,
	measurementSeriesListData,
	electricalConnectionCharacteristicListData,
	stateInformationListData,
};
/**
 * Convert the enum FunctionEnumType to its String representation
 * @param src The source FunctionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a FunctionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FunctionEnumType.
 */
void convertFromJson(const JsonVariantConst& src, FunctionEnumType &dst);

/**
* Datatype TimeSeriesTypeEnumType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
enum class TimeSeriesTypeEnumType {
	plan,
	singleDemand,
	constraints,
	energyRequest,
	dischargingEnergyRequest,
	consumptionLimitCurve,
	productionLimitCurve,
};
/**
 * Convert the enum TimeSeriesTypeEnumType to its String representation
 * @param src The source TimeSeriesTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a TimeSeriesTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TimeSeriesTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesTypeEnumType &dst);

/**
* Datatype MeasurementTypeEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementTypeEnumType {
	acceleration,
	angle,
	angularVelocity,
	area,
	atmosphericPressure,
	capacity,
	concentration,
	count,
	current,
	density,
	distance,
	electricField,
	energy,
	force,
	frequency,
	harmonicDistortion,
	heat,
	heatFlux,
	illuminance,
	impulse,
	level,
	magneticField,
	mass,
	massFlow,
	particles,
	percentage,
	power,
	powerFactor,
	pressure,
	radonActivity,
	relativeHumidity,
	resistance,
	solarRadiation,
	speed,
	temperature,
	time,
	torque,
	unknown,
	velocity,
	voltage,
	volume,
	volumetricFlow,
};
/**
 * Convert the enum MeasurementTypeEnumType to its String representation
 * @param src The source MeasurementTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MeasurementTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementTypeEnumType &dst);

/**
* Datatype MeasurementValueTypeEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
	standardDeviation,
};
/**
 * Convert the enum MeasurementValueTypeEnumType to its String representation
 * @param src The source MeasurementValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MeasurementValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementValueTypeEnumType &dst);

/**
* Datatype MeasurementValueSourceEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueSourceEnumType {
	measuredValue,
	calculatedValue,
	empiricalValue,
};
/**
 * Convert the enum MeasurementValueSourceEnumType to its String representation
 * @param src The source MeasurementValueSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueSourceEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MeasurementValueSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueSourceEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementValueSourceEnumType &dst);

/**
* Datatype MeasurementValueTendencyEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueTendencyEnumType {
	rising,
	stable,
	falling,
};
/**
 * Convert the enum MeasurementValueTendencyEnumType to its String representation
 * @param src The source MeasurementValueTendencyEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueTendencyEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MeasurementValueTendencyEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueTendencyEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementValueTendencyEnumType &dst);

/**
* Datatype MeasurementValueStateEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueStateEnumType {
	normal,
	outOfRange,
	error,
};
/**
 * Convert the enum MeasurementValueStateEnumType to its String representation
 * @param src The source MeasurementValueStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a MeasurementValueStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementValueStateEnumType &dst);

/**
* Datatype ThresholdTypeEnumType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
enum class ThresholdTypeEnumType {
	goodAbove,
	badAbove,
	goodBelow,
	badBelow,
	minValueThreshold,
	maxValueThreshold,
	minValueThresholdExtreme,
	maxValueThresholdExtreme,
	sagThreshold,
	swellThreshold,
};
/**
 * Convert the enum ThresholdTypeEnumType to its String representation
 * @param src The source ThresholdTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ThresholdTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ThresholdTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdTypeEnumType &dst);

/**
* Datatype DirectControlActivityStateEnumType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
enum class DirectControlActivityStateEnumType {
	running,
	paused,
	inactive,
};
/**
 * Convert the enum DirectControlActivityStateEnumType to its String representation
 * @param src The source DirectControlActivityStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a DirectControlActivityStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DirectControlActivityStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlActivityStateEnumType &dst);

/**
* Datatype PowerTimeSlotValueTypeEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerTimeSlotValueTypeEnumType {
	power,
	powerMin,
	powerMax,
	powerExpectedValue,
	powerStandardDeviation,
	powerSkewness,
	energy,
	energyMin,
	energyMax,
	energyExpectedValue,
	energyStandardDeviation,
	energySkewness,
};
/**
 * Convert the enum PowerTimeSlotValueTypeEnumType to its String representation
 * @param src The source PowerTimeSlotValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a PowerTimeSlotValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerTimeSlotValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueTypeEnumType &dst);

/**
* Datatype PowerSequenceScopeEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerSequenceScopeEnumType {
	forecast,
	measurement,
	recommendation,
};
/**
 * Convert the enum PowerSequenceScopeEnumType to its String representation
 * @param src The source PowerSequenceScopeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScopeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a PowerSequenceScopeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSequenceScopeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScopeEnumType &dst);

/**
* Datatype PowerSequenceStateEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerSequenceStateEnumType {
	running,
	paused,
	scheduled,
	scheduledPaused,
	pending,
	inactive,
	completed,
	invalid,
};
/**
 * Convert the enum PowerSequenceStateEnumType to its String representation
 * @param src The source PowerSequenceStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a PowerSequenceStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSequenceStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateEnumType &dst);

/**
* Datatype ActuatorLevelFctEnumType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
enum class ActuatorLevelFctEnumType {
	start,
	up,
	down,
	stop,
	percentageAbsolute,
	percentageRelative,
	absolute,
	relative,
};
/**
 * Convert the enum ActuatorLevelFctEnumType to its String representation
 * @param src The source ActuatorLevelFctEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelFctEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ActuatorLevelFctEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ActuatorLevelFctEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorLevelFctEnumType &dst);

/**
* Datatype CmdClassifierType as defined in EEBus_SPINE_TS_CommandFrame.xsd
*/
enum class CmdClassifierType {
	read,
	reply,
	notify,
	write,
	call,
	result,
};
/**
 * Convert the enum CmdClassifierType to its String representation
 * @param src The source CmdClassifierType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CmdClassifierType &src, JsonVariant& dst);
/**
 * Convert a string to a CmdClassifierType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CmdClassifierType.
 */
void convertFromJson(const JsonVariantConst& src, CmdClassifierType &dst);

/**
* Datatype ActuatorSwitchFctEnumType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
enum class ActuatorSwitchFctEnumType {
	on,
	off,
	toggle,
};
/**
 * Convert the enum ActuatorSwitchFctEnumType to its String representation
 * @param src The source ActuatorSwitchFctEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchFctEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ActuatorSwitchFctEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ActuatorSwitchFctEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchFctEnumType &dst);

/**
* Datatype AlarmTypeEnumType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
enum class AlarmTypeEnumType {
	alarmCancelled,
	underThreshold,
	overThreshold,
};
/**
 * Convert the enum AlarmTypeEnumType to its String representation
 * @param src The source AlarmTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a AlarmTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination AlarmTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, AlarmTypeEnumType &dst);

/**
* Datatype BillTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillTypeEnumType {
	chargingSummary,
};
/**
 * Convert the enum BillTypeEnumType to its String representation
 * @param src The source BillTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a BillTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, BillTypeEnumType &dst);

/**
* Datatype BillPositionTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillPositionTypeEnumType {
	gridElectricEnergy,
	selfProducedElectricEnergy,
};
/**
 * Convert the enum BillPositionTypeEnumType to its String representation
 * @param src The source BillPositionTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a BillPositionTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillPositionTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, BillPositionTypeEnumType &dst);

/**
* Datatype BillCostTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillCostTypeEnumType {
	absolutePrice,
	relativePrice,
	co2Emission,
	renewableEnergy,
	radioactiveWaste,
};
/**
 * Convert the enum BillCostTypeEnumType to its String representation
 * @param src The source BillCostTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a BillCostTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillCostTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, BillCostTypeEnumType &dst);

/**
* Datatype IdentificationTypeEnumType as defined in EEBus_SPINE_TS_Identification.xsd
*/
enum class IdentificationTypeEnumType {
	eui48,
	eui64,
	userRfidTag,
};
/**
 * Convert the enum IdentificationTypeEnumType to its String representation
 * @param src The source IdentificationTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a IdentificationTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IdentificationTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, IdentificationTypeEnumType &dst);

/**
* Datatype PowerSourceEnumType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
enum class PowerSourceEnumType {
	unknown,
	mainsSinglePhase,
	mains3Phase,
	battery,
	dc,
};
/**
 * Convert the enum PowerSourceEnumType to its String representation
 * @param src The source PowerSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSourceEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a PowerSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSourceEnumType.
 */
void convertFromJson(const JsonVariantConst& src, PowerSourceEnumType &dst);

/**
* Datatype DeviceConfigurationKeyNameEnumType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
enum class DeviceConfigurationKeyNameEnumType {
	peakPowerOfPvSystem,
	pvCurtailmentLimitFactor,
	asymmetricChargingSupported,
	communicationsStandard,
	inverterGridCode,
	pvStringAvailabilityStatus,
	batteryAvailabilityStatus,
	gridConnectionStatus,
	timeToAcChargePowerMax,
	timeToAcDischargePowerMax,
	tilt,
	azimuth,
	batteryType,
	maxCycleCountPerDay,
	failsafeConsumptionActivePowerLimit,
	failsafeProductionActivePowerLimit,
	failsafePositiveReactivePowerLimit,
	failsafeNegativeReactivePowerLimit,
	failsafePositiveCosPhiLimit,
	failsafeNegativeCosPhiLimit,
	maxAcChargePower,
	maxAcDischargePower,
	maxDcChargePower,
	maxDcDischargePower,
	batteryActiveControlMode,
	defaultAcPower,
	defaultDcPower,
	defaultPccPower,
	failsafeAcPowerSetpoint,
	failsafeDcPowerSetpoint,
	failsafePccPowerSetpoint,
	failsafeDurationMinimum,
	dischargingBelowTargetEnergyRequestPermitted,
	incentivesSimulationCyclesMax,
	incentivesSimulationConcurrent,
	incentivesTimeoutIncentiveRequest,
	incentivesWaitIncentiveWriteable,
};
/**
 * Convert the enum DeviceConfigurationKeyNameEnumType to its String representation
 * @param src The source DeviceConfigurationKeyNameEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyNameEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a DeviceConfigurationKeyNameEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceConfigurationKeyNameEnumType.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyNameEnumType &dst);

/**
* Datatype DeviceConfigurationKeyValueTypeType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
enum class DeviceConfigurationKeyValueTypeType {
	boolean,
	date,
	dateTime,
	duration,
	string,
	time,
	scaledNumber,
	integer,
};
/**
 * Convert the enum DeviceConfigurationKeyValueTypeType to its String representation
 * @param src The source DeviceConfigurationKeyValueTypeType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueTypeType &src, JsonVariant& dst);
/**
 * Convert a string to a DeviceConfigurationKeyValueTypeType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceConfigurationKeyValueTypeType.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueTypeType &dst);

/**
* Datatype DeviceDiagnosisOperatingStateEnumType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
enum class DeviceDiagnosisOperatingStateEnumType {
	normalOperation,
	standby,
	failure,
	serviceNeeded,
	overrideDetected,
	inAlarm,
	notReachable,
	finished,
	temporarilyNotReady,
	off,
};
/**
 * Convert the enum DeviceDiagnosisOperatingStateEnumType to its String representation
 * @param src The source DeviceDiagnosisOperatingStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisOperatingStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a DeviceDiagnosisOperatingStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceDiagnosisOperatingStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisOperatingStateEnumType &dst);

/**
* Datatype PowerSupplyConditionEnumType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
enum class PowerSupplyConditionEnumType {
	good,
	low,
	critical,
	unknown,
	error,
};
/**
 * Convert the enum PowerSupplyConditionEnumType to its String representation
 * @param src The source PowerSupplyConditionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSupplyConditionEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a PowerSupplyConditionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSupplyConditionEnumType.
 */
void convertFromJson(const JsonVariantConst& src, PowerSupplyConditionEnumType &dst);

/**
* Datatype ElectricalConnectionMeasurandVariantEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionMeasurandVariantEnumType {
	amplitude,
	rms,
	instantaneous,
	angle,
	cosPhi,
};
/**
 * Convert the enum ElectricalConnectionMeasurandVariantEnumType to its String representation
 * @param src The source ElectricalConnectionMeasurandVariantEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionMeasurandVariantEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionMeasurandVariantEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionMeasurandVariantEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionMeasurandVariantEnumType &dst);

/**
* Datatype ElectricalConnectionVoltageTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionVoltageTypeEnumType {
	ac,
	dc,
};
/**
 * Convert the enum ElectricalConnectionVoltageTypeEnumType to its String representation
 * @param src The source ElectricalConnectionVoltageTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionVoltageTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionVoltageTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionVoltageTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionVoltageTypeEnumType &dst);

/**
* Datatype ElectricalConnectionAcMeasurementTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionAcMeasurementTypeEnumType {
	real,
	reactive,
	apparent,
	phase,
};
/**
 * Convert the enum ElectricalConnectionAcMeasurementTypeEnumType to its String representation
 * @param src The source ElectricalConnectionAcMeasurementTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionAcMeasurementTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionAcMeasurementTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionAcMeasurementTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionAcMeasurementTypeEnumType &dst);

/**
* Datatype ElectricalConnectionPhaseNameEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionPhaseNameEnumType {
	a,
	b,
	c,
	ab,
	bc,
	ac,
	abc,
	neutral,
	ground,
	none,
};
/**
 * Convert the enum ElectricalConnectionPhaseNameEnumType to its String representation
 * @param src The source ElectricalConnectionPhaseNameEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPhaseNameEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionPhaseNameEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionPhaseNameEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPhaseNameEnumType &dst);

/**
* Datatype ElectricalConnectionConnectionPointType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionConnectionPointType {
	grid,
	home,
	pv,
	sd,
	other,
};
/**
 * Convert the enum ElectricalConnectionConnectionPointType to its String representation
 * @param src The source ElectricalConnectionConnectionPointType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionConnectionPointType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionConnectionPointType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionConnectionPointType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionConnectionPointType &dst);

/**
* Datatype ElectricalConnectionCharacteristicContextEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionCharacteristicContextEnumType {
	device,
	entity,
	inverter,
	pvString,
	battery,
};
/**
 * Convert the enum ElectricalConnectionCharacteristicContextEnumType to its String representation
 * @param src The source ElectricalConnectionCharacteristicContextEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicContextEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionCharacteristicContextEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionCharacteristicContextEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicContextEnumType &dst);

/**
* Datatype ElectricalConnectionCharacteristicTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionCharacteristicTypeEnumType {
	powerConsumptionMin,
	powerConsumptionMax,
	powerConsumptionNominalMin,
	powerConsumptionNominalMax,
	powerProductionMin,
	powerProductionMax,
	powerProductionNominalMin,
	powerProductionNominalMax,
	energyCapacityNominalMax,
	contractualConsumptionNominalMax,
	contractualProductionNominalMax,
	apparentPowerProductionNominalMax,
	apparentPowerConsumptionNominalMax,
};
/**
 * Convert the enum ElectricalConnectionCharacteristicTypeEnumType to its String representation
 * @param src The source ElectricalConnectionCharacteristicTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a ElectricalConnectionCharacteristicTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionCharacteristicTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicTypeEnumType &dst);

/**
* Datatype HvacSystemFunctionTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacSystemFunctionTypeEnumType {
	heating,
	cooling,
	ventilation,
	dhw,
};
/**
 * Convert the enum HvacSystemFunctionTypeEnumType to its String representation
 * @param src The source HvacSystemFunctionTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a HvacSystemFunctionTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacSystemFunctionTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionTypeEnumType &dst);

/**
* Datatype HvacOperationModeTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOperationModeTypeEnumType {
	var_auto,
	on,
	off,
	eco,
};
/**
 * Convert the enum HvacOperationModeTypeEnumType to its String representation
 * @param src The source HvacOperationModeTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a HvacOperationModeTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOperationModeTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, HvacOperationModeTypeEnumType &dst);

/**
* Datatype HvacOverrunTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOverrunTypeEnumType {
	oneTimeDhw,
	party,
	sgReadyCondition1,
	sgReadyCondition3,
	sgReadyCondition4,
	oneDayAway,
	oneDayAtHome,
	oneTimeVentilation,
	hvacSystemOff,
	valveKick,
};
/**
 * Convert the enum HvacOverrunTypeEnumType to its String representation
 * @param src The source HvacOverrunTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a HvacOverrunTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOverrunTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunTypeEnumType &dst);

/**
* Datatype HvacOverrunStatusEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOverrunStatusEnumType {
	active,
	running,
	finished,
	inactive,
};
/**
 * Convert the enum HvacOverrunStatusEnumType to its String representation
 * @param src The source HvacOverrunStatusEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunStatusEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a HvacOverrunStatusEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOverrunStatusEnumType.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunStatusEnumType &dst);

/**
* Datatype SetpointTypeEnumType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
enum class SetpointTypeEnumType {
	valueAbsolute,
	valueRelative,
};
/**
 * Convert the enum SetpointTypeEnumType to its String representation
 * @param src The source SetpointTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a SetpointTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SetpointTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, SetpointTypeEnumType &dst);

/**
* Datatype TimeSlotTimeModeEnumType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
enum class TimeSlotTimeModeEnumType {
	absolute,
	recurring,
	both,
};
/**
 * Convert the enum TimeSlotTimeModeEnumType to its String representation
 * @param src The source TimeSlotTimeModeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSlotTimeModeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a TimeSlotTimeModeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TimeSlotTimeModeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, TimeSlotTimeModeEnumType &dst);

/**
* Datatype TierBoundaryTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class TierBoundaryTypeEnumType {
	powerBoundary,
	energyBoundary,
	countBoundary,
};
/**
 * Convert the enum TierBoundaryTypeEnumType to its String representation
 * @param src The source TierBoundaryTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a TierBoundaryTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TierBoundaryTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryTypeEnumType &dst);

/**
* Datatype TierTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class TierTypeEnumType {
	fixedCost,
	dynamicCost,
};
/**
 * Convert the enum TierTypeEnumType to its String representation
 * @param src The source TierTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a TierTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TierTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, TierTypeEnumType &dst);

/**
* Datatype IncentiveTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class IncentiveTypeEnumType {
	absoluteCost,
	relativeCost,
	renewableEnergyPercentage,
	co2Emission,
};
/**
 * Convert the enum IncentiveTypeEnumType to its String representation
 * @param src The source IncentiveTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a IncentiveTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IncentiveTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTypeEnumType &dst);

/**
* Datatype IncentiveValueTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class IncentiveValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
};
/**
 * Convert the enum IncentiveValueTypeEnumType to its String representation
 * @param src The source IncentiveValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveValueTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a IncentiveValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IncentiveValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveValueTypeEnumType &dst);

/**
* Datatype LoadControlEventActionEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlEventActionEnumType {
	pause,
	resume,
	reduce,
	increase,
	emergency,
	normal,
};
/**
 * Convert the enum LoadControlEventActionEnumType to its String representation
 * @param src The source LoadControlEventActionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventActionEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a LoadControlEventActionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlEventActionEnumType.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventActionEnumType &dst);

/**
* Datatype LoadControlEventStateEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlEventStateEnumType {
	eventAccepted,
	eventStarted,
	eventStopped,
	eventRejected,
	eventCancelled,
	eventError,
};
/**
 * Convert the enum LoadControlEventStateEnumType to its String representation
 * @param src The source LoadControlEventStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a LoadControlEventStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlEventStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventStateEnumType &dst);

/**
* Datatype LoadControlLimitTypeEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlLimitTypeEnumType {
	minValueLimit,
	maxValueLimit,
	signDependentAbsValueLimit,
};
/**
 * Convert the enum LoadControlLimitTypeEnumType to its String representation
 * @param src The source LoadControlLimitTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a LoadControlLimitTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlLimitTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitTypeEnumType &dst);

/**
* Datatype LoadControlCategoryEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlCategoryEnumType {
	obligation,
	recommendation,
	optimization,
};
/**
 * Convert the enum LoadControlCategoryEnumType to its String representation
 * @param src The source LoadControlCategoryEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlCategoryEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a LoadControlCategoryEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlCategoryEnumType.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlCategoryEnumType &dst);

/**
* Datatype NetworkManagementFeatureSetType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementFeatureSetType {
	gateway,
	router,
	smart,
	simple,
};
/**
 * Convert the enum NetworkManagementFeatureSetType to its String representation
 * @param src The source NetworkManagementFeatureSetType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureSetType &src, JsonVariant& dst);
/**
 * Convert a string to a NetworkManagementFeatureSetType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementFeatureSetType.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureSetType &dst);

/**
* Datatype NetworkManagementProcessStateStateType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementProcessStateStateType {
	succeeded,
	failed,
	aborted,
};
/**
 * Convert the enum NetworkManagementProcessStateStateType to its String representation
 * @param src The source NetworkManagementProcessStateStateType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateStateType &src, JsonVariant& dst);
/**
 * Convert a string to a NetworkManagementProcessStateStateType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementProcessStateStateType.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateStateType &dst);

/**
* Datatype NetworkManagementStateChangeType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementStateChangeType {
	added,
	removed,
	modified,
};
/**
 * Convert the enum NetworkManagementStateChangeType to its String representation
 * @param src The source NetworkManagementStateChangeType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementStateChangeType &src, JsonVariant& dst);
/**
 * Convert a string to a NetworkManagementStateChangeType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementStateChangeType.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementStateChangeType &dst);

/**
* Datatype SensingStateEnumType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
enum class SensingStateEnumType {
	on,
	off,
	toggle,
	level,
	levelUp,
	levelDown,
	levelStart,
	levelStop,
	levelAbsolute,
	levelRelative,
	levelPercentageAbsolute,
	levelPercentageRelative,
	pressed,
	longPressed,
	released,
	changed,
	started,
	stopped,
	paused,
	middle,
	up,
	down,
	forward,
	backwards,
	open,
	closed,
	opening,
	closing,
	high,
	low,
	day,
	night,
	detected,
	notDetected,
	alarmed,
	notAlarmed,
};
/**
 * Convert the enum SensingStateEnumType to its String representation
 * @param src The source SensingStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingStateEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a SensingStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SensingStateEnumType.
 */
void convertFromJson(const JsonVariantConst& src, SensingStateEnumType &dst);

/**
* Datatype SensingTypeEnumType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
enum class SensingTypeEnumType {
	var_switch,
	button,
	level,
	levelSwitch,
	windowHandle,
	contactSensor,
	occupancySensor,
	motionDetector,
	fireDetector,
	smokeDetector,
	heatDetector,
	waterDetector,
	gasDetector,
	alarmSensor,
	powerAlarmSensor,
	dayNightIndicator,
};
/**
 * Convert the enum SensingTypeEnumType to its String representation
 * @param src The source SensingTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a SensingTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SensingTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, SensingTypeEnumType &dst);

/**
* Datatype StateInformationFunctionalityEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationFunctionalityEnumType {
	externalOverrideFromGrid,
	autonomousGridSupport,
	islandingMode,
	balancing,
	trickleCharging,
	calibration,
	commissioningMissing,
	sleeping,
	starting,
	mppt,
	throttled,
	shuttingDown,
	manualShutdown,
};
/**
 * Convert the enum StateInformationFunctionalityEnumType to its String representation
 * @param src The source StateInformationFunctionalityEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationFunctionalityEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a StateInformationFunctionalityEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationFunctionalityEnumType.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationFunctionalityEnumType &dst);

/**
* Datatype StateInformationFailureEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationFailureEnumType {
	inverterDefective,
	batteryOvercurrentProtection,
	pvStringOvercurrentProtection,
	gridFault,
	groundFault,
	acDisconnected,
	dcDisconnected,
	cabinetOpen,
	overTemperature,
	underTemperature,
	frequencyAboveLimit,
	frequencyBelowLimit,
	acVoltageAboveLimit,
	acVoltageBelowLimit,
	dcVoltageAboveLimit,
	dcVoltageBelowLimit,
	hardwareTestFailure,
	genericInternalError,
};
/**
 * Convert the enum StateInformationFailureEnumType to its String representation
 * @param src The source StateInformationFailureEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationFailureEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a StateInformationFailureEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationFailureEnumType.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationFailureEnumType &dst);

/**
* Datatype StateInformationCategoryEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationCategoryEnumType {
	functionality,
	failure,
};
/**
 * Convert the enum StateInformationCategoryEnumType to its String representation
 * @param src The source StateInformationCategoryEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationCategoryEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a StateInformationCategoryEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationCategoryEnumType.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationCategoryEnumType &dst);

/**
* Datatype SupplyConditionEventTypeEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class SupplyConditionEventTypeEnumType {
	thesholdExceeded,
	fallenBelowThreshold,
	supplyInterrupt,
	releaseOfLimitations,
	otherProblem,
	gridConditionUpdate,
};
/**
 * Convert the enum SupplyConditionEventTypeEnumType to its String representation
 * @param src The source SupplyConditionEventTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionEventTypeEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a SupplyConditionEventTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SupplyConditionEventTypeEnumType.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionEventTypeEnumType &dst);

/**
* Datatype SupplyConditionOriginatorEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class SupplyConditionOriginatorEnumType {
	externDSO,
	externSupplier,
	internalLimit,
	internalService,
	internalUser,
};
/**
 * Convert the enum SupplyConditionOriginatorEnumType to its String representation
 * @param src The source SupplyConditionOriginatorEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionOriginatorEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a SupplyConditionOriginatorEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SupplyConditionOriginatorEnumType.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionOriginatorEnumType &dst);

/**
* Datatype GridConditionEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class GridConditionEnumType {
	consumptionRed,
	consumptionYellow,
	good,
	productionYellow,
	productionRed,
};
/**
 * Convert the enum GridConditionEnumType to its String representation
 * @param src The source GridConditionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const GridConditionEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a GridConditionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination GridConditionEnumType.
 */
void convertFromJson(const JsonVariantConst& src, GridConditionEnumType &dst);

/**
* Datatype TaskManagementJobSourceEnumType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
enum class TaskManagementJobSourceEnumType {
	internalMechanism,
	userInteraction,
	externalConfiguration,
};
/**
 * Convert the enum TaskManagementJobSourceEnumType to its String representation
 * @param src The source TaskManagementJobSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobSourceEnumType &src, JsonVariant& dst);
/**
 * Convert a string to a TaskManagementJobSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TaskManagementJobSourceEnumType.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobSourceEnumType &dst);

/**
 * Datatype MessagingDataType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<MessagingNumberType> messagingNumber;
	std::optional<MessagingTypeType> type;
	std::optional<MessagingDataTextType> text;

	MessagingDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		messagingNumber(MessagingNumberType{}),
		type(MessagingTypeType{}),
		text(MessagingDataTextType{})
	{}
};
/**
 * Convert a MessagingDataType to its JSON representation
 * @param src The MessagingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessagingDataType
 * @param src The JSON variant to convert
 * @param dst The MessagingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessagingDataType &dst);

/**
 * Datatype ElementTagType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ElementTagType { 

	ElementTagType()
		
	{}
};
/**
 * Convert a ElementTagType to its JSON representation
 * @param src The ElementTagType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElementTagType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElementTagType
 * @param src The JSON variant to convert
 * @param dst The ElementTagType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElementTagType &dst);

/**
 * Datatype MessagingDataElementsType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> messagingNumber;
	std::optional<ElementTagType> type;
	std::optional<ElementTagType> text;

	MessagingDataElementsType()
		:
		timestamp(ElementTagType{}),
		messagingNumber(ElementTagType{}),
		type(ElementTagType{}),
		text(ElementTagType{})
	{}
};
/**
 * Convert a MessagingDataElementsType to its JSON representation
 * @param src The MessagingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessagingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MessagingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessagingDataElementsType &dst);

/**
 * Datatype MessagingListDataType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingListDataType { 
	std::optional<std::vector<MessagingDataType>> messagingData;

	MessagingListDataType()
		:
		messagingData(std::vector<MessagingDataType>{})
	{}
};
/**
 * Convert a MessagingListDataType to its JSON representation
 * @param src The MessagingListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessagingListDataType
 * @param src The JSON variant to convert
 * @param dst The MessagingListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessagingListDataType &dst);

/**
 * Datatype TimestampIntervalType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimestampIntervalType { 
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;

	TimestampIntervalType()
		:
		startTime(AbsoluteOrRelativeTimeType{}),
		endTime(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a TimestampIntervalType to its JSON representation
 * @param src The TimestampIntervalType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimestampIntervalType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimestampIntervalType
 * @param src The JSON variant to convert
 * @param dst The TimestampIntervalType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimestampIntervalType &dst);

/**
 * Datatype MessagingListDataSelectorsType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingListDataSelectorsType { 
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<MessagingNumberType> messagingNumber;

	MessagingListDataSelectorsType()
		:
		timestampInterval(TimestampIntervalType{}),
		messagingNumber(MessagingNumberType{})
	{}
};
/**
 * Convert a MessagingListDataSelectorsType to its JSON representation
 * @param src The MessagingListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MessagingListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MessagingListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MessagingListDataSelectorsType &dst);

/**
 * Datatype TimePeriodType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimePeriodType { 
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;

	TimePeriodType()
		:
		startTime(AbsoluteOrRelativeTimeType{}),
		endTime(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a TimePeriodType to its JSON representation
 * @param src The TimePeriodType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePeriodType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimePeriodType
 * @param src The JSON variant to convert
 * @param dst The TimePeriodType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimePeriodType &dst);

/**
 * Datatype TimePeriodElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimePeriodElementsType { 
	std::optional<ElementTagType> startTime;
	std::optional<ElementTagType> endTime;

	TimePeriodElementsType()
		:
		startTime(ElementTagType{}),
		endTime(ElementTagType{})
	{}
};
/**
 * Convert a TimePeriodElementsType to its JSON representation
 * @param src The TimePeriodElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePeriodElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimePeriodElementsType
 * @param src The JSON variant to convert
 * @param dst The TimePeriodElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimePeriodElementsType &dst);

/**
 * Datatype DaysOfWeekType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DaysOfWeekType { 
	std::optional<ElementTagType> monday;
	std::optional<ElementTagType> tuesday;
	std::optional<ElementTagType> wednesday;
	std::optional<ElementTagType> thursday;
	std::optional<ElementTagType> friday;
	std::optional<ElementTagType> saturday;
	std::optional<ElementTagType> sunday;

	DaysOfWeekType()
		:
		monday(ElementTagType{}),
		tuesday(ElementTagType{}),
		wednesday(ElementTagType{}),
		thursday(ElementTagType{}),
		friday(ElementTagType{}),
		saturday(ElementTagType{}),
		sunday(ElementTagType{})
	{}
};
/**
 * Convert a DaysOfWeekType to its JSON representation
 * @param src The DaysOfWeekType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DaysOfWeekType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DaysOfWeekType
 * @param src The JSON variant to convert
 * @param dst The DaysOfWeekType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DaysOfWeekType &dst);

/**
 * Datatype AbsoluteOrRecurringTimeType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct AbsoluteOrRecurringTimeType { 
	std::optional<std::string> dateTime;
	std::optional<MonthType> month;
	std::optional<DayOfMonthType> dayOfMonth;
	std::optional<CalendarWeekType> calendarWeek;
	std::optional<OccurrenceType> dayOfWeekOccurrence;
	std::optional<DaysOfWeekType> daysOfWeek;
	std::optional<std::string> time;
	std::optional<std::string> relative;

	AbsoluteOrRecurringTimeType()
		:
		dateTime(std::string{}),
		month(MonthType{}),
		dayOfMonth(DayOfMonthType{}),
		calendarWeek(CalendarWeekType{}),
		dayOfWeekOccurrence(OccurrenceType{}),
		daysOfWeek(DaysOfWeekType{}),
		time(std::string{}),
		relative(std::string{})
	{}
};
/**
 * Convert a AbsoluteOrRecurringTimeType to its JSON representation
 * @param src The AbsoluteOrRecurringTimeType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AbsoluteOrRecurringTimeType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AbsoluteOrRecurringTimeType
 * @param src The JSON variant to convert
 * @param dst The AbsoluteOrRecurringTimeType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AbsoluteOrRecurringTimeType &dst);

/**
 * Datatype AbsoluteOrRecurringTimeElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct AbsoluteOrRecurringTimeElementsType { 
	std::optional<ElementTagType> dateTime;
	std::optional<ElementTagType> month;
	std::optional<ElementTagType> dayOfMonth;
	std::optional<ElementTagType> calendarWeek;
	std::optional<ElementTagType> dayOfWeekOccurrence;
	std::optional<ElementTagType> daysOfWeek;
	std::optional<ElementTagType> time;
	std::optional<ElementTagType> relative;

	AbsoluteOrRecurringTimeElementsType()
		:
		dateTime(ElementTagType{}),
		month(ElementTagType{}),
		dayOfMonth(ElementTagType{}),
		calendarWeek(ElementTagType{}),
		dayOfWeekOccurrence(ElementTagType{}),
		daysOfWeek(ElementTagType{}),
		time(ElementTagType{}),
		relative(ElementTagType{})
	{}
};
/**
 * Convert a AbsoluteOrRecurringTimeElementsType to its JSON representation
 * @param src The AbsoluteOrRecurringTimeElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AbsoluteOrRecurringTimeElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AbsoluteOrRecurringTimeElementsType
 * @param src The JSON variant to convert
 * @param dst The AbsoluteOrRecurringTimeElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AbsoluteOrRecurringTimeElementsType &dst);

/**
 * Datatype RecurrenceInformationType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct RecurrenceInformationType { 
	std::optional<RecurringIntervalType> recurringInterval;
	std::optional<uint32_t> recurringIntervalStep;
	std::optional<std::string> firstExecution;
	std::optional<uint32_t> executionCount;
	std::optional<std::string> lastExecution;

	RecurrenceInformationType()
		:
		recurringInterval(RecurringIntervalType{}),
		recurringIntervalStep(uint32_t{}),
		firstExecution(std::string{}),
		executionCount(uint32_t{}),
		lastExecution(std::string{})
	{}
};
/**
 * Convert a RecurrenceInformationType to its JSON representation
 * @param src The RecurrenceInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurrenceInformationType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a RecurrenceInformationType
 * @param src The JSON variant to convert
 * @param dst The RecurrenceInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, RecurrenceInformationType &dst);

/**
 * Datatype RecurrenceInformationElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct RecurrenceInformationElementsType { 
	std::optional<ElementTagType> recurringInterval;
	std::optional<ElementTagType> recurringIntervalStep;
	std::optional<ElementTagType> firstExecution;
	std::optional<ElementTagType> executionCount;
	std::optional<ElementTagType> lastExecution;

	RecurrenceInformationElementsType()
		:
		recurringInterval(ElementTagType{}),
		recurringIntervalStep(ElementTagType{}),
		firstExecution(ElementTagType{}),
		executionCount(ElementTagType{}),
		lastExecution(ElementTagType{})
	{}
};
/**
 * Convert a RecurrenceInformationElementsType to its JSON representation
 * @param src The RecurrenceInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurrenceInformationElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a RecurrenceInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The RecurrenceInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, RecurrenceInformationElementsType &dst);

/**
 * Datatype ScaledNumberType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberType { 
	std::optional<NumberType> number;
	std::optional<ScaleType> scale;

	ScaledNumberType()
		:
		number(NumberType{}),
		scale(ScaleType{})
	{}
};
/**
 * Convert a ScaledNumberType to its JSON representation
 * @param src The ScaledNumberType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberType &dst);

/**
 * Datatype ScaledNumberRangeType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberRangeType { 
	std::optional<ScaledNumberType> min;
	std::optional<ScaledNumberType> max;

	ScaledNumberRangeType()
		:
		min(ScaledNumberType{}),
		max(ScaledNumberType{})
	{}
};
/**
 * Convert a ScaledNumberRangeType to its JSON representation
 * @param src The ScaledNumberRangeType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberRangeType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberRangeType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberRangeType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberRangeType &dst);

/**
 * Datatype ScaledNumberElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberElementsType { 
	std::optional<ElementTagType> number;
	std::optional<ElementTagType> scale;

	ScaledNumberElementsType()
		:
		number(ElementTagType{}),
		scale(ElementTagType{})
	{}
};
/**
 * Convert a ScaledNumberElementsType to its JSON representation
 * @param src The ScaledNumberElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberElementsType &dst);

/**
 * Datatype ScaledNumberRangeElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberRangeElementsType { 
	std::optional<ScaledNumberElementsType> min;
	std::optional<ScaledNumberElementsType> max;

	ScaledNumberRangeElementsType()
		:
		min(ScaledNumberElementsType{}),
		max(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a ScaledNumberRangeElementsType to its JSON representation
 * @param src The ScaledNumberRangeElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberRangeElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberRangeElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberRangeElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberRangeElementsType &dst);

/**
 * Datatype ScaledNumberSetType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberSetType { 
	std::optional<std::vector<ScaledNumberType>> value;
	std::optional<std::vector<ScaledNumberRangeType>> range;

	ScaledNumberSetType()
		:
		value(std::vector<ScaledNumberType>{}),
		range(std::vector<ScaledNumberRangeType>{})
	{}
};
/**
 * Convert a ScaledNumberSetType to its JSON representation
 * @param src The ScaledNumberSetType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberSetType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberSetType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberSetType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberSetType &dst);

/**
 * Datatype ScaledNumberSetElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberSetElementsType { 
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberRangeElementsType> range;

	ScaledNumberSetElementsType()
		:
		value(ScaledNumberElementsType{}),
		range(ScaledNumberRangeElementsType{})
	{}
};
/**
 * Convert a ScaledNumberSetElementsType to its JSON representation
 * @param src The ScaledNumberSetElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberSetElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ScaledNumberSetElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberSetElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ScaledNumberSetElementsType &dst);

/**
 * Datatype DeviceAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DeviceAddressType { 
	std::optional<AddressDeviceType> device;

	DeviceAddressType()
		:
		device(AddressDeviceType{})
	{}
};
/**
 * Convert a DeviceAddressType to its JSON representation
 * @param src The DeviceAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceAddressType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceAddressType
 * @param src The JSON variant to convert
 * @param dst The DeviceAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceAddressType &dst);

/**
 * Datatype DeviceAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DeviceAddressElementsType { 
	std::optional<ElementTagType> device;

	DeviceAddressElementsType()
		:
		device(ElementTagType{})
	{}
};
/**
 * Convert a DeviceAddressElementsType to its JSON representation
 * @param src The DeviceAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceAddressElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceAddressElementsType &dst);

/**
 * Datatype EntityAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct EntityAddressType { 
	std::optional<AddressDeviceType> device;
	std::optional<std::vector<AddressEntityType>> entity;

	EntityAddressType()
		:
		device(AddressDeviceType{}),
		entity(std::vector<AddressEntityType>{})
	{}
};
/**
 * Convert a EntityAddressType to its JSON representation
 * @param src The EntityAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityAddressType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a EntityAddressType
 * @param src The JSON variant to convert
 * @param dst The EntityAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, EntityAddressType &dst);

/**
 * Datatype EntityAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct EntityAddressElementsType { 
	std::optional<ElementTagType> device;
	std::optional<ElementTagType> entity;

	EntityAddressElementsType()
		:
		device(ElementTagType{}),
		entity(ElementTagType{})
	{}
};
/**
 * Convert a EntityAddressElementsType to its JSON representation
 * @param src The EntityAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityAddressElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a EntityAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The EntityAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, EntityAddressElementsType &dst);

/**
 * Datatype FeatureAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FeatureAddressType { 
	std::optional<AddressDeviceType> device;
	std::optional<std::vector<AddressEntityType>> entity;
	std::optional<AddressFeatureType> feature;

	FeatureAddressType()
		:
		device(AddressDeviceType{}),
		entity(std::vector<AddressEntityType>{}),
		feature(AddressFeatureType{})
	{}
};
/**
 * Convert a FeatureAddressType to its JSON representation
 * @param src The FeatureAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureAddressType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a FeatureAddressType
 * @param src The JSON variant to convert
 * @param dst The FeatureAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, FeatureAddressType &dst);

/**
 * Datatype FeatureAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FeatureAddressElementsType { 
	std::optional<ElementTagType> device;
	std::optional<ElementTagType> entity;
	std::optional<ElementTagType> feature;

	FeatureAddressElementsType()
		:
		device(ElementTagType{}),
		entity(ElementTagType{}),
		feature(ElementTagType{})
	{}
};
/**
 * Convert a FeatureAddressElementsType to its JSON representation
 * @param src The FeatureAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureAddressElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a FeatureAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The FeatureAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, FeatureAddressElementsType &dst);

/**
 * Datatype PossibleOperationsClassifierType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsClassifierType { 
	std::optional<ElementTagType> partial;

	PossibleOperationsClassifierType()
		:
		partial(ElementTagType{})
	{}
};
/**
 * Convert a PossibleOperationsClassifierType to its JSON representation
 * @param src The PossibleOperationsClassifierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsClassifierType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PossibleOperationsClassifierType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsClassifierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PossibleOperationsClassifierType &dst);

/**
 * Datatype PossibleOperationsReadType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsReadType { 
	std::optional<ElementTagType> partial;

	PossibleOperationsReadType()
		:
		partial(ElementTagType{})
	{}
};
/**
 * Convert a PossibleOperationsReadType to its JSON representation
 * @param src The PossibleOperationsReadType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsReadType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PossibleOperationsReadType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsReadType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PossibleOperationsReadType &dst);

/**
 * Datatype PossibleOperationsWriteType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsWriteType { 
	std::optional<ElementTagType> partial;

	PossibleOperationsWriteType()
		:
		partial(ElementTagType{})
	{}
};
/**
 * Convert a PossibleOperationsWriteType to its JSON representation
 * @param src The PossibleOperationsWriteType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsWriteType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PossibleOperationsWriteType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsWriteType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PossibleOperationsWriteType &dst);

/**
 * Datatype PossibleOperationsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsType { 
	std::optional<PossibleOperationsReadType> read;
	std::optional<PossibleOperationsWriteType> write;

	PossibleOperationsType()
		:
		read(PossibleOperationsReadType{}),
		write(PossibleOperationsWriteType{})
	{}
};
/**
 * Convert a PossibleOperationsType to its JSON representation
 * @param src The PossibleOperationsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PossibleOperationsType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PossibleOperationsType &dst);

/**
 * Datatype PossibleOperationsElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsElementsType { 
	std::optional<ElementTagType> read;
	std::optional<ElementTagType> write;

	PossibleOperationsElementsType()
		:
		read(ElementTagType{}),
		write(ElementTagType{})
	{}
};
/**
 * Convert a PossibleOperationsElementsType to its JSON representation
 * @param src The PossibleOperationsElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PossibleOperationsElementsType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PossibleOperationsElementsType &dst);

/**
 * Datatype FunctionPropertyType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FunctionPropertyType { 
	std::optional<FunctionType> function;
	std::optional<PossibleOperationsType> possibleOperations;

	FunctionPropertyType()
		:
		function(FunctionType{}),
		possibleOperations(PossibleOperationsType{})
	{}
};
/**
 * Convert a FunctionPropertyType to its JSON representation
 * @param src The FunctionPropertyType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionPropertyType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a FunctionPropertyType
 * @param src The JSON variant to convert
 * @param dst The FunctionPropertyType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, FunctionPropertyType &dst);

/**
 * Datatype FunctionPropertyElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FunctionPropertyElementsType { 
	std::optional<ElementTagType> function;
	std::optional<PossibleOperationsElementsType> possibleOperations;

	FunctionPropertyElementsType()
		:
		function(ElementTagType{}),
		possibleOperations(PossibleOperationsElementsType{})
	{}
};
/**
 * Convert a FunctionPropertyElementsType to its JSON representation
 * @param src The FunctionPropertyElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionPropertyElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a FunctionPropertyElementsType
 * @param src The JSON variant to convert
 * @param dst The FunctionPropertyElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, FunctionPropertyElementsType &dst);

/**
 * Datatype TimeSeriesSlotType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesSlotType { 
	std::optional<TimeSeriesSlotIdType> timeSeriesSlotId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::string> duration;
	std::optional<AbsoluteOrRecurringTimeType> recurrenceInformation;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> minValue;
	std::optional<ScaledNumberType> maxValue;

	TimeSeriesSlotType()
		:
		timeSeriesSlotId(TimeSeriesSlotIdType{}),
		timePeriod(TimePeriodType{}),
		duration(std::string{}),
		recurrenceInformation(AbsoluteOrRecurringTimeType{}),
		value(ScaledNumberType{}),
		minValue(ScaledNumberType{}),
		maxValue(ScaledNumberType{})
	{}
};
/**
 * Convert a TimeSeriesSlotType to its JSON representation
 * @param src The TimeSeriesSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesSlotType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesSlotType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesSlotType &dst);

/**
 * Datatype TimeSeriesSlotElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesSlotElementsType { 
	std::optional<ElementTagType> timeSeriesSlotId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> duration;
	std::optional<AbsoluteOrRecurringTimeElementsType> recurrenceInformation;
	std::optional<ElementTagType> value;
	std::optional<ElementTagType> minValue;
	std::optional<ElementTagType> maxValue;

	TimeSeriesSlotElementsType()
		:
		timeSeriesSlotId(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		duration(ElementTagType{}),
		recurrenceInformation(AbsoluteOrRecurringTimeElementsType{}),
		value(ElementTagType{}),
		minValue(ElementTagType{}),
		maxValue(ElementTagType{})
	{}
};
/**
 * Convert a TimeSeriesSlotElementsType to its JSON representation
 * @param src The TimeSeriesSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesSlotElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesSlotElementsType &dst);

/**
 * Datatype TimeSeriesDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDataType { 
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::vector<TimeSeriesSlotType>> timeSeriesSlot;

	TimeSeriesDataType()
		:
		timeSeriesId(TimeSeriesIdType{}),
		timePeriod(TimePeriodType{}),
		timeSeriesSlot(std::vector<TimeSeriesSlotType>{})
	{}
};
/**
 * Convert a TimeSeriesDataType to its JSON representation
 * @param src The TimeSeriesDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDataType &dst);

/**
 * Datatype TimeSeriesDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDataElementsType { 
	std::optional<ElementTagType> timeSeriesId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<TimeSeriesSlotElementsType> timeSeriesSlot;

	TimeSeriesDataElementsType()
		:
		timeSeriesId(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		timeSeriesSlot(TimeSeriesSlotElementsType{})
	{}
};
/**
 * Convert a TimeSeriesDataElementsType to its JSON representation
 * @param src The TimeSeriesDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDataElementsType &dst);

/**
 * Datatype TimeSeriesListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesListDataType { 
	std::optional<std::vector<TimeSeriesDataType>> timeSeriesData;

	TimeSeriesListDataType()
		:
		timeSeriesData(std::vector<TimeSeriesDataType>{})
	{}
};
/**
 * Convert a TimeSeriesListDataType to its JSON representation
 * @param src The TimeSeriesListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesListDataType &dst);

/**
 * Datatype TimeSeriesListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesListDataSelectorsType { 
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesSlotIdType> timeSeriesSlotId;

	TimeSeriesListDataSelectorsType()
		:
		timeSeriesId(TimeSeriesIdType{}),
		timeSeriesSlotId(TimeSeriesSlotIdType{})
	{}
};
/**
 * Convert a TimeSeriesListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesListDataSelectorsType &dst);

/**
 * Datatype TimeSeriesDescriptionDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionDataType { 
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesTypeType> timeSeriesType;
	std::optional<bool> timeSeriesWriteable;
	std::optional<bool> updateRequired;
	std::optional<MeasurementIdType> measurementId;
	std::optional<CurrencyType> currency;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<ScopeTypeType> scopeType;

	TimeSeriesDescriptionDataType()
		:
		timeSeriesId(TimeSeriesIdType{}),
		timeSeriesType(TimeSeriesTypeType{}),
		timeSeriesWriteable(bool{}),
		updateRequired(bool{}),
		measurementId(MeasurementIdType{}),
		currency(CurrencyType{}),
		unit(UnitOfMeasurementType{}),
		label(LabelType{}),
		description(DescriptionType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a TimeSeriesDescriptionDataType to its JSON representation
 * @param src The TimeSeriesDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionDataType &dst);

/**
 * Datatype TimeSeriesDescriptionDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionDataElementsType { 
	std::optional<ElementTagType> timeSeriesId;
	std::optional<ElementTagType> timeSeriesType;
	std::optional<ElementTagType> timeSeriesWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> currency;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> scopeType;

	TimeSeriesDescriptionDataElementsType()
		:
		timeSeriesId(ElementTagType{}),
		timeSeriesType(ElementTagType{}),
		timeSeriesWriteable(ElementTagType{}),
		updateRequired(ElementTagType{}),
		measurementId(ElementTagType{}),
		currency(ElementTagType{}),
		unit(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{}),
		scopeType(ElementTagType{})
	{}
};
/**
 * Convert a TimeSeriesDescriptionDataElementsType to its JSON representation
 * @param src The TimeSeriesDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionDataElementsType &dst);

/**
 * Datatype TimeSeriesDescriptionListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionListDataType { 
	std::optional<std::vector<TimeSeriesDescriptionDataType>> timeSeriesDescriptionData;

	TimeSeriesDescriptionListDataType()
		:
		timeSeriesDescriptionData(std::vector<TimeSeriesDescriptionDataType>{})
	{}
};
/**
 * Convert a TimeSeriesDescriptionListDataType to its JSON representation
 * @param src The TimeSeriesDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionListDataType &dst);

/**
 * Datatype TimeSeriesDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionListDataSelectorsType { 
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesTypeType> timeSeriesType;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;

	TimeSeriesDescriptionListDataSelectorsType()
		:
		timeSeriesId(TimeSeriesIdType{}),
		timeSeriesType(TimeSeriesTypeType{}),
		measurementId(MeasurementIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a TimeSeriesDescriptionListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionListDataSelectorsType &dst);

/**
 * Datatype TimeSeriesConstraintsDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsDataType { 
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesSlotCountType> slotCountMin;
	std::optional<TimeSeriesSlotCountType> slotCountMax;
	std::optional<std::string> slotDurationMin;
	std::optional<std::string> slotDurationMax;
	std::optional<std::string> slotDurationStepSize;
	std::optional<AbsoluteOrRelativeTimeType> earliestTimeSeriesStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestTimeSeriesEndTime;
	std::optional<ScaledNumberType> slotValueMin;
	std::optional<ScaledNumberType> slotValueMax;
	std::optional<ScaledNumberType> slotValueStepSize;

	TimeSeriesConstraintsDataType()
		:
		timeSeriesId(TimeSeriesIdType{}),
		slotCountMin(TimeSeriesSlotCountType{}),
		slotCountMax(TimeSeriesSlotCountType{}),
		slotDurationMin(std::string{}),
		slotDurationMax(std::string{}),
		slotDurationStepSize(std::string{}),
		earliestTimeSeriesStartTime(AbsoluteOrRelativeTimeType{}),
		latestTimeSeriesEndTime(AbsoluteOrRelativeTimeType{}),
		slotValueMin(ScaledNumberType{}),
		slotValueMax(ScaledNumberType{}),
		slotValueStepSize(ScaledNumberType{})
	{}
};
/**
 * Convert a TimeSeriesConstraintsDataType to its JSON representation
 * @param src The TimeSeriesConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsDataType &dst);

/**
 * Datatype TimeSeriesConstraintsDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsDataElementsType { 
	std::optional<ElementTagType> timeSeriesId;
	std::optional<ElementTagType> slotCountMin;
	std::optional<ElementTagType> slotCountMax;
	std::optional<ElementTagType> slotDurationMin;
	std::optional<ElementTagType> slotDurationMax;
	std::optional<ElementTagType> slotDurationStepSize;
	std::optional<ElementTagType> earliestTimeSeriesStartTime;
	std::optional<ElementTagType> latestTimeSeriesEndTime;
	std::optional<ScaledNumberElementsType> slotValueMin;
	std::optional<ScaledNumberElementsType> slotValueMax;
	std::optional<ScaledNumberElementsType> slotValueStepSize;

	TimeSeriesConstraintsDataElementsType()
		:
		timeSeriesId(ElementTagType{}),
		slotCountMin(ElementTagType{}),
		slotCountMax(ElementTagType{}),
		slotDurationMin(ElementTagType{}),
		slotDurationMax(ElementTagType{}),
		slotDurationStepSize(ElementTagType{}),
		earliestTimeSeriesStartTime(ElementTagType{}),
		latestTimeSeriesEndTime(ElementTagType{}),
		slotValueMin(ScaledNumberElementsType{}),
		slotValueMax(ScaledNumberElementsType{}),
		slotValueStepSize(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a TimeSeriesConstraintsDataElementsType to its JSON representation
 * @param src The TimeSeriesConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsDataElementsType &dst);

/**
 * Datatype TimeSeriesConstraintsListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsListDataType { 
	std::optional<std::vector<TimeSeriesConstraintsDataType>> timeSeriesConstraintsData;

	TimeSeriesConstraintsListDataType()
		:
		timeSeriesConstraintsData(std::vector<TimeSeriesConstraintsDataType>{})
	{}
};
/**
 * Convert a TimeSeriesConstraintsListDataType to its JSON representation
 * @param src The TimeSeriesConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsListDataType &dst);

/**
 * Datatype TimeSeriesConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsListDataSelectorsType { 
	std::optional<TimeSeriesIdType> timeSeriesId;

	TimeSeriesConstraintsListDataSelectorsType()
		:
		timeSeriesId(TimeSeriesIdType{})
	{}
};
/**
 * Convert a TimeSeriesConstraintsListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsListDataSelectorsType &dst);

/**
 * Datatype MeasurementDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDataType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<ScaledNumberType> value;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<MeasurementValueTendencyType> valueTendency;
	std::optional<MeasurementValueStateType> valueState;

	MeasurementDataType()
		:
		measurementId(MeasurementIdType{}),
		valueType(MeasurementValueTypeType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		value(ScaledNumberType{}),
		evaluationPeriod(TimePeriodType{}),
		valueSource(MeasurementValueSourceType{}),
		valueTendency(MeasurementValueTendencyType{}),
		valueState(MeasurementValueStateType{})
	{}
};
/**
 * Convert a MeasurementDataType to its JSON representation
 * @param src The MeasurementDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDataType &dst);

/**
 * Datatype MeasurementDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDataElementsType { 
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<ScaledNumberElementsType> value;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> valueTendency;
	std::optional<ElementTagType> valueState;

	MeasurementDataElementsType()
		:
		measurementId(ElementTagType{}),
		valueType(ElementTagType{}),
		timestamp(ElementTagType{}),
		value(ScaledNumberElementsType{}),
		evaluationPeriod(TimePeriodElementsType{}),
		valueSource(ElementTagType{}),
		valueTendency(ElementTagType{}),
		valueState(ElementTagType{})
	{}
};
/**
 * Convert a MeasurementDataElementsType to its JSON representation
 * @param src The MeasurementDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDataElementsType &dst);

/**
 * Datatype MeasurementListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementListDataType { 
	std::optional<std::vector<MeasurementDataType>> measurementData;

	MeasurementListDataType()
		:
		measurementData(std::vector<MeasurementDataType>{})
	{}
};
/**
 * Convert a MeasurementListDataType to its JSON representation
 * @param src The MeasurementListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementListDataType &dst);

/**
 * Datatype MeasurementListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementListDataSelectorsType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;

	MeasurementListDataSelectorsType()
		:
		measurementId(MeasurementIdType{}),
		valueType(MeasurementValueTypeType{}),
		timestampInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a MeasurementListDataSelectorsType to its JSON representation
 * @param src The MeasurementListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementListDataSelectorsType &dst);

/**
 * Datatype MeasurementSeriesDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesDataType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<ScaledNumberType> value;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<MeasurementValueTendencyType> valueTendency;
	std::optional<MeasurementValueStateType> valueState;

	MeasurementSeriesDataType()
		:
		measurementId(MeasurementIdType{}),
		valueType(MeasurementValueTypeType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		value(ScaledNumberType{}),
		evaluationPeriod(TimePeriodType{}),
		valueSource(MeasurementValueSourceType{}),
		valueTendency(MeasurementValueTendencyType{}),
		valueState(MeasurementValueStateType{})
	{}
};
/**
 * Convert a MeasurementSeriesDataType to its JSON representation
 * @param src The MeasurementSeriesDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementSeriesDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesDataType &dst);

/**
 * Datatype MeasurementSeriesDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesDataElementsType { 
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<ScaledNumberElementsType> value;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> valueTendency;
	std::optional<ElementTagType> valueState;

	MeasurementSeriesDataElementsType()
		:
		measurementId(ElementTagType{}),
		valueType(ElementTagType{}),
		timestamp(ElementTagType{}),
		value(ScaledNumberElementsType{}),
		evaluationPeriod(TimePeriodElementsType{}),
		valueSource(ElementTagType{}),
		valueTendency(ElementTagType{}),
		valueState(ElementTagType{})
	{}
};
/**
 * Convert a MeasurementSeriesDataElementsType to its JSON representation
 * @param src The MeasurementSeriesDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementSeriesDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesDataElementsType &dst);

/**
 * Datatype MeasurementSeriesListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesListDataType { 
	std::optional<std::vector<MeasurementSeriesDataType>> measurementSeriesData;

	MeasurementSeriesListDataType()
		:
		measurementSeriesData(std::vector<MeasurementSeriesDataType>{})
	{}
};
/**
 * Convert a MeasurementSeriesListDataType to its JSON representation
 * @param src The MeasurementSeriesListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementSeriesListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesListDataType &dst);

/**
 * Datatype MeasurementSeriesListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesListDataSelectorsType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;

	MeasurementSeriesListDataSelectorsType()
		:
		measurementId(MeasurementIdType{}),
		valueType(MeasurementValueTypeType{}),
		timestampInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a MeasurementSeriesListDataSelectorsType to its JSON representation
 * @param src The MeasurementSeriesListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementSeriesListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesListDataSelectorsType &dst);

/**
 * Datatype MeasurementConstraintsDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsDataType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScaledNumberType> valueRangeMin;
	std::optional<ScaledNumberType> valueRangeMax;
	std::optional<ScaledNumberType> valueStepSize;

	MeasurementConstraintsDataType()
		:
		measurementId(MeasurementIdType{}),
		valueRangeMin(ScaledNumberType{}),
		valueRangeMax(ScaledNumberType{}),
		valueStepSize(ScaledNumberType{})
	{}
};
/**
 * Convert a MeasurementConstraintsDataType to its JSON representation
 * @param src The MeasurementConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsDataType &dst);

/**
 * Datatype MeasurementConstraintsDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsDataElementsType { 
	std::optional<ElementTagType> measurementId;
	std::optional<ScaledNumberElementsType> valueRangeMin;
	std::optional<ScaledNumberElementsType> valueRangeMax;
	std::optional<ScaledNumberElementsType> valueStepSize;

	MeasurementConstraintsDataElementsType()
		:
		measurementId(ElementTagType{}),
		valueRangeMin(ScaledNumberElementsType{}),
		valueRangeMax(ScaledNumberElementsType{}),
		valueStepSize(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a MeasurementConstraintsDataElementsType to its JSON representation
 * @param src The MeasurementConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsDataElementsType &dst);

/**
 * Datatype MeasurementConstraintsListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsListDataType { 
	std::optional<std::vector<MeasurementConstraintsDataType>> measurementConstraintsData;

	MeasurementConstraintsListDataType()
		:
		measurementConstraintsData(std::vector<MeasurementConstraintsDataType>{})
	{}
};
/**
 * Convert a MeasurementConstraintsListDataType to its JSON representation
 * @param src The MeasurementConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsListDataType &dst);

/**
 * Datatype MeasurementConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsListDataSelectorsType { 
	std::optional<MeasurementIdType> measurementId;

	MeasurementConstraintsListDataSelectorsType()
		:
		measurementId(MeasurementIdType{})
	{}
};
/**
 * Convert a MeasurementConstraintsListDataSelectorsType to its JSON representation
 * @param src The MeasurementConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsListDataSelectorsType &dst);

/**
 * Datatype MeasurementDescriptionDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionDataType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementTypeType> measurementType;
	std::optional<CommodityTypeType> commodityType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScaledNumberType> calibrationValue;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	MeasurementDescriptionDataType()
		:
		measurementId(MeasurementIdType{}),
		measurementType(MeasurementTypeType{}),
		commodityType(CommodityTypeType{}),
		unit(UnitOfMeasurementType{}),
		calibrationValue(ScaledNumberType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a MeasurementDescriptionDataType to its JSON representation
 * @param src The MeasurementDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionDataType &dst);

/**
 * Datatype MeasurementDescriptionDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionDataElementsType { 
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> measurementType;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> unit;
	std::optional<ScaledNumberElementsType> calibrationValue;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	MeasurementDescriptionDataElementsType()
		:
		measurementId(ElementTagType{}),
		measurementType(ElementTagType{}),
		commodityType(ElementTagType{}),
		unit(ElementTagType{}),
		calibrationValue(ScaledNumberElementsType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a MeasurementDescriptionDataElementsType to its JSON representation
 * @param src The MeasurementDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionDataElementsType &dst);

/**
 * Datatype MeasurementDescriptionListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionListDataType { 
	std::optional<std::vector<MeasurementDescriptionDataType>> measurementDescriptionData;

	MeasurementDescriptionListDataType()
		:
		measurementDescriptionData(std::vector<MeasurementDescriptionDataType>{})
	{}
};
/**
 * Convert a MeasurementDescriptionListDataType to its JSON representation
 * @param src The MeasurementDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionListDataType &dst);

/**
 * Datatype MeasurementDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionListDataSelectorsType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementTypeType> measurementType;
	std::optional<CommodityTypeType> commodityType;
	std::optional<ScopeTypeType> scopeType;

	MeasurementDescriptionListDataSelectorsType()
		:
		measurementId(MeasurementIdType{}),
		measurementType(MeasurementTypeType{}),
		commodityType(CommodityTypeType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a MeasurementDescriptionListDataSelectorsType to its JSON representation
 * @param src The MeasurementDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionListDataSelectorsType &dst);

/**
 * Datatype MeasurementThresholdRelationDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationDataType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<std::vector<ThresholdIdType>> thresholdId;

	MeasurementThresholdRelationDataType()
		:
		measurementId(MeasurementIdType{}),
		thresholdId(std::vector<ThresholdIdType>{})
	{}
};
/**
 * Convert a MeasurementThresholdRelationDataType to its JSON representation
 * @param src The MeasurementThresholdRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationDataType &dst);

/**
 * Datatype MeasurementThresholdRelationDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationDataElementsType { 
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> thresholdId;

	MeasurementThresholdRelationDataElementsType()
		:
		measurementId(ElementTagType{}),
		thresholdId(ElementTagType{})
	{}
};
/**
 * Convert a MeasurementThresholdRelationDataElementsType to its JSON representation
 * @param src The MeasurementThresholdRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationDataElementsType &dst);

/**
 * Datatype MeasurementThresholdRelationListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationListDataType { 
	std::optional<std::vector<MeasurementThresholdRelationDataType>> measurementThresholdRelationData;

	MeasurementThresholdRelationListDataType()
		:
		measurementThresholdRelationData(std::vector<MeasurementThresholdRelationDataType>{})
	{}
};
/**
 * Convert a MeasurementThresholdRelationListDataType to its JSON representation
 * @param src The MeasurementThresholdRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationListDataType &dst);

/**
 * Datatype MeasurementThresholdRelationListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationListDataSelectorsType { 
	std::optional<MeasurementIdType> measurementId;
	std::optional<ThresholdIdType> thresholdId;

	MeasurementThresholdRelationListDataSelectorsType()
		:
		measurementId(MeasurementIdType{}),
		thresholdId(ThresholdIdType{})
	{}
};
/**
 * Convert a MeasurementThresholdRelationListDataSelectorsType to its JSON representation
 * @param src The MeasurementThresholdRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationListDataSelectorsType &dst);

/**
 * Datatype ThresholdDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDataType { 
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdValue;

	ThresholdDataType()
		:
		thresholdId(ThresholdIdType{}),
		thresholdValue(ScaledNumberType{})
	{}
};
/**
 * Convert a ThresholdDataType to its JSON representation
 * @param src The ThresholdDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDataType &dst);

/**
 * Datatype ThresholdDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDataElementsType { 
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdValue;

	ThresholdDataElementsType()
		:
		thresholdId(ElementTagType{}),
		thresholdValue(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a ThresholdDataElementsType to its JSON representation
 * @param src The ThresholdDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDataElementsType &dst);

/**
 * Datatype ThresholdListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdListDataType { 
	std::optional<std::vector<ThresholdDataType>> thresholdData;

	ThresholdListDataType()
		:
		thresholdData(std::vector<ThresholdDataType>{})
	{}
};
/**
 * Convert a ThresholdListDataType to its JSON representation
 * @param src The ThresholdListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdListDataType &dst);

/**
 * Datatype ThresholdListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdListDataSelectorsType { 
	std::optional<ThresholdIdType> thresholdId;

	ThresholdListDataSelectorsType()
		:
		thresholdId(ThresholdIdType{})
	{}
};
/**
 * Convert a ThresholdListDataSelectorsType to its JSON representation
 * @param src The ThresholdListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdListDataSelectorsType &dst);

/**
 * Datatype ThresholdConstraintsDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsDataType { 
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdRangeMin;
	std::optional<ScaledNumberType> thresholdRangeMax;
	std::optional<ScaledNumberType> thresholdStepSize;

	ThresholdConstraintsDataType()
		:
		thresholdId(ThresholdIdType{}),
		thresholdRangeMin(ScaledNumberType{}),
		thresholdRangeMax(ScaledNumberType{}),
		thresholdStepSize(ScaledNumberType{})
	{}
};
/**
 * Convert a ThresholdConstraintsDataType to its JSON representation
 * @param src The ThresholdConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsDataType &dst);

/**
 * Datatype ThresholdConstraintsDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsDataElementsType { 
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdRangeMin;
	std::optional<ScaledNumberElementsType> thresholdRangeMax;
	std::optional<ScaledNumberElementsType> thresholdStepSize;

	ThresholdConstraintsDataElementsType()
		:
		thresholdId(ElementTagType{}),
		thresholdRangeMin(ScaledNumberElementsType{}),
		thresholdRangeMax(ScaledNumberElementsType{}),
		thresholdStepSize(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a ThresholdConstraintsDataElementsType to its JSON representation
 * @param src The ThresholdConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsDataElementsType &dst);

/**
 * Datatype ThresholdConstraintsListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsListDataType { 
	std::optional<std::vector<ThresholdConstraintsDataType>> thresholdConstraintsData;

	ThresholdConstraintsListDataType()
		:
		thresholdConstraintsData(std::vector<ThresholdConstraintsDataType>{})
	{}
};
/**
 * Convert a ThresholdConstraintsListDataType to its JSON representation
 * @param src The ThresholdConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsListDataType &dst);

/**
 * Datatype ThresholdConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsListDataSelectorsType { 
	std::optional<ThresholdIdType> thresholdId;

	ThresholdConstraintsListDataSelectorsType()
		:
		thresholdId(ThresholdIdType{})
	{}
};
/**
 * Convert a ThresholdConstraintsListDataSelectorsType to its JSON representation
 * @param src The ThresholdConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsListDataSelectorsType &dst);

/**
 * Datatype ThresholdDescriptionDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionDataType { 
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ThresholdTypeType> thresholdType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	ThresholdDescriptionDataType()
		:
		thresholdId(ThresholdIdType{}),
		thresholdType(ThresholdTypeType{}),
		unit(UnitOfMeasurementType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a ThresholdDescriptionDataType to its JSON representation
 * @param src The ThresholdDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionDataType &dst);

/**
 * Datatype ThresholdDescriptionDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionDataElementsType { 
	std::optional<ElementTagType> thresholdId;
	std::optional<ElementTagType> thresholdType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	ThresholdDescriptionDataElementsType()
		:
		thresholdId(ElementTagType{}),
		thresholdType(ElementTagType{}),
		unit(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a ThresholdDescriptionDataElementsType to its JSON representation
 * @param src The ThresholdDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionDataElementsType &dst);

/**
 * Datatype ThresholdDescriptionListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionListDataType { 
	std::optional<std::vector<ThresholdDescriptionDataType>> thresholdDescriptionData;

	ThresholdDescriptionListDataType()
		:
		thresholdDescriptionData(std::vector<ThresholdDescriptionDataType>{})
	{}
};
/**
 * Convert a ThresholdDescriptionListDataType to its JSON representation
 * @param src The ThresholdDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionListDataType &dst);

/**
 * Datatype ThresholdDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionListDataSelectorsType { 
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScopeTypeType> scopeType;

	ThresholdDescriptionListDataSelectorsType()
		:
		thresholdId(ThresholdIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a ThresholdDescriptionListDataSelectorsType to its JSON representation
 * @param src The ThresholdDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionListDataSelectorsType &dst);

/**
 * Datatype DirectControlActivityDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<DirectControlActivityStateType> activityState;
	std::optional<bool> isActivityStateChangeable;
	std::optional<EnergyModeType> energyMode;
	std::optional<bool> isEnergyModeChangeable;
	std::optional<ScaledNumberType> power;
	std::optional<bool> isPowerChangeable;
	std::optional<ScaledNumberType> energy;
	std::optional<bool> isEnergyChangeable;
	std::optional<PowerSequenceIdType> sequenceId;

	DirectControlActivityDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		activityState(DirectControlActivityStateType{}),
		isActivityStateChangeable(bool{}),
		energyMode(EnergyModeType{}),
		isEnergyModeChangeable(bool{}),
		power(ScaledNumberType{}),
		isPowerChangeable(bool{}),
		energy(ScaledNumberType{}),
		isEnergyChangeable(bool{}),
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a DirectControlActivityDataType to its JSON representation
 * @param src The DirectControlActivityDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlActivityDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlActivityDataType &dst);

/**
 * Datatype DirectControlActivityDataElementsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> activityState;
	std::optional<ElementTagType> isActivityStateChangeable;
	std::optional<ElementTagType> energyMode;
	std::optional<ElementTagType> isEnergyModeChangeable;
	std::optional<ScaledNumberElementsType> power;
	std::optional<ElementTagType> isPowerChangeable;
	std::optional<ScaledNumberElementsType> energy;
	std::optional<ElementTagType> isEnergyChangeable;
	std::optional<ElementTagType> sequenceId;

	DirectControlActivityDataElementsType()
		:
		timestamp(ElementTagType{}),
		activityState(ElementTagType{}),
		isActivityStateChangeable(ElementTagType{}),
		energyMode(ElementTagType{}),
		isEnergyModeChangeable(ElementTagType{}),
		power(ScaledNumberElementsType{}),
		isPowerChangeable(ElementTagType{}),
		energy(ScaledNumberElementsType{}),
		isEnergyChangeable(ElementTagType{}),
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a DirectControlActivityDataElementsType to its JSON representation
 * @param src The DirectControlActivityDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlActivityDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlActivityDataElementsType &dst);

/**
 * Datatype DirectControlActivityListDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityListDataType { 
	std::optional<std::vector<DirectControlActivityDataType>> directControlActivityData;

	DirectControlActivityListDataType()
		:
		directControlActivityData(std::vector<DirectControlActivityDataType>{})
	{}
};
/**
 * Convert a DirectControlActivityListDataType to its JSON representation
 * @param src The DirectControlActivityListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlActivityListDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlActivityListDataType &dst);

/**
 * Datatype DirectControlActivityListDataSelectorsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityListDataSelectorsType { 
	std::optional<TimestampIntervalType> timestampInterval;

	DirectControlActivityListDataSelectorsType()
		:
		timestampInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a DirectControlActivityListDataSelectorsType to its JSON representation
 * @param src The DirectControlActivityListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlActivityListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlActivityListDataSelectorsType &dst);

/**
 * Datatype DirectControlDescriptionDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlDescriptionDataType { 
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;

	DirectControlDescriptionDataType()
		:
		positiveEnergyDirection(EnergyDirectionType{}),
		powerUnit(UnitOfMeasurementType{}),
		energyUnit(UnitOfMeasurementType{})
	{}
};
/**
 * Convert a DirectControlDescriptionDataType to its JSON representation
 * @param src The DirectControlDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlDescriptionDataType &dst);

/**
 * Datatype DirectControlDescriptionDataElementsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlDescriptionDataElementsType { 
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;

	DirectControlDescriptionDataElementsType()
		:
		positiveEnergyDirection(ElementTagType{}),
		powerUnit(ElementTagType{}),
		energyUnit(ElementTagType{})
	{}
};
/**
 * Convert a DirectControlDescriptionDataElementsType to its JSON representation
 * @param src The DirectControlDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DirectControlDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DirectControlDescriptionDataElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::string> defaultDuration;
	std::optional<std::string> durationUncertainty;
	std::optional<bool> slotActivated;
	std::optional<DescriptionType> description;

	PowerTimeSlotScheduleDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{}),
		timePeriod(TimePeriodType{}),
		defaultDuration(std::string{}),
		durationUncertainty(std::string{}),
		slotActivated(bool{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> defaultDuration;
	std::optional<ElementTagType> durationUncertainty;
	std::optional<ElementTagType> slotActivated;
	std::optional<ElementTagType> description;

	PowerTimeSlotScheduleDataElementsType()
		:
		sequenceId(ElementTagType{}),
		slotNumber(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		defaultDuration(ElementTagType{}),
		durationUncertainty(ElementTagType{}),
		slotActivated(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleDataElementsType to its JSON representation
 * @param src The PowerTimeSlotScheduleDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleDataElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleListDataType { 
	std::optional<std::vector<PowerTimeSlotScheduleDataType>> powerTimeSlotScheduleData;

	PowerTimeSlotScheduleListDataType()
		:
		powerTimeSlotScheduleData(std::vector<PowerTimeSlotScheduleDataType>{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleListDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleListDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;

	PowerTimeSlotScheduleListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotScheduleListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleListDataSelectorsType &dst);

/**
 * Datatype PowerTimeSlotValueDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<PowerTimeSlotValueTypeType> valueType;
	std::optional<ScaledNumberType> value;

	PowerTimeSlotValueDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{}),
		valueType(PowerTimeSlotValueTypeType{}),
		value(ScaledNumberType{})
	{}
};
/**
 * Convert a PowerTimeSlotValueDataType to its JSON representation
 * @param src The PowerTimeSlotValueDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueDataType &dst);

/**
 * Datatype PowerTimeSlotValueDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<ElementTagType> valueType;
	std::optional<ScaledNumberElementsType> value;

	PowerTimeSlotValueDataElementsType()
		:
		sequenceId(ElementTagType{}),
		slotNumber(ElementTagType{}),
		valueType(ElementTagType{}),
		value(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a PowerTimeSlotValueDataElementsType to its JSON representation
 * @param src The PowerTimeSlotValueDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueDataElementsType &dst);

/**
 * Datatype PowerTimeSlotValueListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueListDataType { 
	std::optional<std::vector<PowerTimeSlotValueDataType>> powerTimeSlotValueData;

	PowerTimeSlotValueListDataType()
		:
		powerTimeSlotValueData(std::vector<PowerTimeSlotValueDataType>{})
	{}
};
/**
 * Convert a PowerTimeSlotValueListDataType to its JSON representation
 * @param src The PowerTimeSlotValueListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueListDataType &dst);

/**
 * Datatype PowerTimeSlotValueListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<PowerTimeSlotValueTypeType> valueType;

	PowerTimeSlotValueListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{}),
		valueType(PowerTimeSlotValueTypeType{})
	{}
};
/**
 * Convert a PowerTimeSlotValueListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotValueListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueListDataSelectorsType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<AbsoluteOrRelativeTimeType> earliestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestEndTime;
	std::optional<std::string> minDuration;
	std::optional<std::string> maxDuration;
	std::optional<bool> optionalSlot;

	PowerTimeSlotScheduleConstraintsDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{}),
		earliestStartTime(AbsoluteOrRelativeTimeType{}),
		latestEndTime(AbsoluteOrRelativeTimeType{}),
		minDuration(std::string{}),
		maxDuration(std::string{}),
		optionalSlot(bool{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleConstraintsDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<ElementTagType> earliestStartTime;
	std::optional<ElementTagType> latestEndTime;
	std::optional<ElementTagType> minDuration;
	std::optional<ElementTagType> maxDuration;
	std::optional<ElementTagType> optionalSlot;

	PowerTimeSlotScheduleConstraintsDataElementsType()
		:
		sequenceId(ElementTagType{}),
		slotNumber(ElementTagType{}),
		earliestStartTime(ElementTagType{}),
		latestEndTime(ElementTagType{}),
		minDuration(ElementTagType{}),
		maxDuration(ElementTagType{}),
		optionalSlot(ElementTagType{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleConstraintsDataElementsType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsDataElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsListDataType { 
	std::optional<std::vector<PowerTimeSlotScheduleConstraintsDataType>> powerTimeSlotScheduleConstraintsData;

	PowerTimeSlotScheduleConstraintsListDataType()
		:
		powerTimeSlotScheduleConstraintsData(std::vector<PowerTimeSlotScheduleConstraintsDataType>{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleConstraintsListDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsListDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;

	PowerTimeSlotScheduleConstraintsListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{}),
		slotNumber(PowerTimeSlotNumberType{})
	{}
};
/**
 * Convert a PowerTimeSlotScheduleConstraintsListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationDataType { 
	std::optional<AlternativesIdType> alternativesId;
	std::optional<std::vector<PowerSequenceIdType>> sequenceId;

	PowerSequenceAlternativesRelationDataType()
		:
		alternativesId(AlternativesIdType{}),
		sequenceId(std::vector<PowerSequenceIdType>{})
	{}
};
/**
 * Convert a PowerSequenceAlternativesRelationDataType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationDataType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationDataElementsType { 
	std::optional<ElementTagType> alternativesId;
	std::optional<ElementTagType> sequenceId;

	PowerSequenceAlternativesRelationDataElementsType()
		:
		alternativesId(ElementTagType{}),
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceAlternativesRelationDataElementsType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationDataElementsType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationListDataType { 
	std::optional<std::vector<PowerSequenceAlternativesRelationDataType>> powerSequenceAlternativesRelationData;

	PowerSequenceAlternativesRelationListDataType()
		:
		powerSequenceAlternativesRelationData(std::vector<PowerSequenceAlternativesRelationDataType>{})
	{}
};
/**
 * Convert a PowerSequenceAlternativesRelationListDataType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationListDataType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationListDataSelectorsType { 
	std::optional<AlternativesIdType> alternativesId;
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceAlternativesRelationListDataSelectorsType()
		:
		alternativesId(AlternativesIdType{}),
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceAlternativesRelationListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceDescriptionDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<DescriptionType> description;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<PowerSequenceScopeType> scope;
	std::optional<uint32_t> taskIdentifier;
	std::optional<uint32_t> repetitionsTotal;

	PowerSequenceDescriptionDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		description(DescriptionType{}),
		positiveEnergyDirection(EnergyDirectionType{}),
		powerUnit(UnitOfMeasurementType{}),
		energyUnit(UnitOfMeasurementType{}),
		valueSource(MeasurementValueSourceType{}),
		scope(PowerSequenceScopeType{}),
		taskIdentifier(uint32_t{}),
		repetitionsTotal(uint32_t{})
	{}
};
/**
 * Convert a PowerSequenceDescriptionDataType to its JSON representation
 * @param src The PowerSequenceDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionDataType &dst);

/**
 * Datatype PowerSequenceDescriptionDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> scope;
	std::optional<ElementTagType> taskIdentifier;
	std::optional<ElementTagType> repetitionsTotal;

	PowerSequenceDescriptionDataElementsType()
		:
		sequenceId(ElementTagType{}),
		description(ElementTagType{}),
		positiveEnergyDirection(ElementTagType{}),
		powerUnit(ElementTagType{}),
		energyUnit(ElementTagType{}),
		valueSource(ElementTagType{}),
		scope(ElementTagType{}),
		taskIdentifier(ElementTagType{}),
		repetitionsTotal(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceDescriptionDataElementsType to its JSON representation
 * @param src The PowerSequenceDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionDataElementsType &dst);

/**
 * Datatype PowerSequenceDescriptionListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionListDataType { 
	std::optional<std::vector<PowerSequenceDescriptionDataType>> powerSequenceDescriptionData;

	PowerSequenceDescriptionListDataType()
		:
		powerSequenceDescriptionData(std::vector<PowerSequenceDescriptionDataType>{})
	{}
};
/**
 * Convert a PowerSequenceDescriptionListDataType to its JSON representation
 * @param src The PowerSequenceDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionListDataType &dst);

/**
 * Datatype PowerSequenceDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceDescriptionListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceDescriptionListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceStateDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerSequenceStateType> state;
	std::optional<PowerTimeSlotNumberType> activeSlotNumber;
	std::optional<std::string> elapsedSlotTime;
	std::optional<std::string> remainingSlotTime;
	std::optional<bool> sequenceRemoteControllable;
	std::optional<uint32_t> activeRepetitionNumber;
	std::optional<std::string> remainingPauseTime;

	PowerSequenceStateDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		state(PowerSequenceStateType{}),
		activeSlotNumber(PowerTimeSlotNumberType{}),
		elapsedSlotTime(std::string{}),
		remainingSlotTime(std::string{}),
		sequenceRemoteControllable(bool{}),
		activeRepetitionNumber(uint32_t{}),
		remainingPauseTime(std::string{})
	{}
};
/**
 * Convert a PowerSequenceStateDataType to its JSON representation
 * @param src The PowerSequenceStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceStateDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateDataType &dst);

/**
 * Datatype PowerSequenceStateDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> state;
	std::optional<ElementTagType> activeSlotNumber;
	std::optional<ElementTagType> elapsedSlotTime;
	std::optional<ElementTagType> remainingSlotTime;
	std::optional<ElementTagType> sequenceRemoteControllable;
	std::optional<ElementTagType> activeRepetitionNumber;
	std::optional<ElementTagType> remainingPauseTime;

	PowerSequenceStateDataElementsType()
		:
		sequenceId(ElementTagType{}),
		state(ElementTagType{}),
		activeSlotNumber(ElementTagType{}),
		elapsedSlotTime(ElementTagType{}),
		remainingSlotTime(ElementTagType{}),
		sequenceRemoteControllable(ElementTagType{}),
		activeRepetitionNumber(ElementTagType{}),
		remainingPauseTime(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceStateDataElementsType to its JSON representation
 * @param src The PowerSequenceStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateDataElementsType &dst);

/**
 * Datatype PowerSequenceStateListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateListDataType { 
	std::optional<std::vector<PowerSequenceStateDataType>> powerSequenceStateData;

	PowerSequenceStateListDataType()
		:
		powerSequenceStateData(std::vector<PowerSequenceStateDataType>{})
	{}
};
/**
 * Convert a PowerSequenceStateListDataType to its JSON representation
 * @param src The PowerSequenceStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceStateListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateListDataType &dst);

/**
 * Datatype PowerSequenceStateListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceStateListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceStateListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceScheduleDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;

	PowerSequenceScheduleDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		startTime(AbsoluteOrRelativeTimeType{}),
		endTime(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleDataType to its JSON representation
 * @param src The PowerSequenceScheduleDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleDataType &dst);

/**
 * Datatype PowerSequenceScheduleDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> startTime;
	std::optional<ElementTagType> endTime;

	PowerSequenceScheduleDataElementsType()
		:
		sequenceId(ElementTagType{}),
		startTime(ElementTagType{}),
		endTime(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleDataElementsType to its JSON representation
 * @param src The PowerSequenceScheduleDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleListDataType { 
	std::optional<std::vector<PowerSequenceScheduleDataType>> powerSequenceScheduleData;

	PowerSequenceScheduleListDataType()
		:
		powerSequenceScheduleData(std::vector<PowerSequenceScheduleDataType>{})
	{}
};
/**
 * Convert a PowerSequenceScheduleListDataType to its JSON representation
 * @param src The PowerSequenceScheduleListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleListDataType &dst);

/**
 * Datatype PowerSequenceScheduleListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceScheduleListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceScheduleListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> earliestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> earliestEndTime;
	std::optional<AbsoluteOrRelativeTimeType> latestEndTime;
	std::optional<bool> optionalSequence;

	PowerSequenceScheduleConstraintsDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		earliestStartTime(AbsoluteOrRelativeTimeType{}),
		latestStartTime(AbsoluteOrRelativeTimeType{}),
		earliestEndTime(AbsoluteOrRelativeTimeType{}),
		latestEndTime(AbsoluteOrRelativeTimeType{}),
		optionalSequence(bool{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConstraintsDataType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsDataType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> earliestStartTime;
	std::optional<ElementTagType> latestStartTime;
	std::optional<ElementTagType> earliestEndTime;
	std::optional<ElementTagType> latestEndTime;
	std::optional<ElementTagType> optionalSequence;

	PowerSequenceScheduleConstraintsDataElementsType()
		:
		sequenceId(ElementTagType{}),
		earliestStartTime(ElementTagType{}),
		latestStartTime(ElementTagType{}),
		earliestEndTime(ElementTagType{}),
		latestEndTime(ElementTagType{}),
		optionalSequence(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConstraintsDataElementsType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsListDataType { 
	std::optional<std::vector<PowerSequenceScheduleConstraintsDataType>> powerSequenceScheduleConstraintsData;

	PowerSequenceScheduleConstraintsListDataType()
		:
		powerSequenceScheduleConstraintsData(std::vector<PowerSequenceScheduleConstraintsDataType>{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConstraintsListDataType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsListDataType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceScheduleConstraintsListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConstraintsListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsListDataSelectorsType &dst);

/**
 * Datatype PowerSequencePriceDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> potentialStartTime;
	std::optional<ScaledNumberType> price;
	std::optional<CurrencyType> currency;

	PowerSequencePriceDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		potentialStartTime(AbsoluteOrRelativeTimeType{}),
		price(ScaledNumberType{}),
		currency(CurrencyType{})
	{}
};
/**
 * Convert a PowerSequencePriceDataType to its JSON representation
 * @param src The PowerSequencePriceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceDataType &dst);

/**
 * Datatype PowerSequencePriceDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> potentialStartTime;
	std::optional<ScaledNumberElementsType> price;
	std::optional<ElementTagType> currency;

	PowerSequencePriceDataElementsType()
		:
		sequenceId(ElementTagType{}),
		potentialStartTime(ElementTagType{}),
		price(ScaledNumberElementsType{}),
		currency(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequencePriceDataElementsType to its JSON representation
 * @param src The PowerSequencePriceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceDataElementsType &dst);

/**
 * Datatype PowerSequencePriceListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceListDataType { 
	std::optional<std::vector<PowerSequencePriceDataType>> powerSequencePriceData;

	PowerSequencePriceListDataType()
		:
		powerSequencePriceData(std::vector<PowerSequencePriceDataType>{})
	{}
};
/**
 * Convert a PowerSequencePriceListDataType to its JSON representation
 * @param src The PowerSequencePriceListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceListDataType &dst);

/**
 * Datatype PowerSequencePriceListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<TimestampIntervalType> potentialStartTimeInterval;

	PowerSequencePriceListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{}),
		potentialStartTimeInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a PowerSequencePriceListDataSelectorsType to its JSON representation
 * @param src The PowerSequencePriceListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<bool> greenest;
	std::optional<bool> cheapest;

	PowerSequenceSchedulePreferenceDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		greenest(bool{}),
		cheapest(bool{})
	{}
};
/**
 * Convert a PowerSequenceSchedulePreferenceDataType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceDataType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> greenest;
	std::optional<ElementTagType> cheapest;

	PowerSequenceSchedulePreferenceDataElementsType()
		:
		sequenceId(ElementTagType{}),
		greenest(ElementTagType{}),
		cheapest(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceSchedulePreferenceDataElementsType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceDataElementsType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceListDataType { 
	std::optional<std::vector<PowerSequenceSchedulePreferenceDataType>> powerSequenceSchedulePreferenceData;

	PowerSequenceSchedulePreferenceListDataType()
		:
		powerSequenceSchedulePreferenceData(std::vector<PowerSequenceSchedulePreferenceDataType>{})
	{}
};
/**
 * Convert a PowerSequenceSchedulePreferenceListDataType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceListDataType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceSchedulePreferenceListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceSchedulePreferenceListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceNodeScheduleInformationDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceNodeScheduleInformationDataType { 
	std::optional<bool> nodeRemoteControllable;
	std::optional<bool> supportsSingleSlotSchedulingOnly;
	std::optional<uint32_t> alternativesCount;
	std::optional<uint32_t> totalSequencesCountMax;
	std::optional<bool> supportsReselection;

	PowerSequenceNodeScheduleInformationDataType()
		:
		nodeRemoteControllable(bool{}),
		supportsSingleSlotSchedulingOnly(bool{}),
		alternativesCount(uint32_t{}),
		totalSequencesCountMax(uint32_t{}),
		supportsReselection(bool{})
	{}
};
/**
 * Convert a PowerSequenceNodeScheduleInformationDataType to its JSON representation
 * @param src The PowerSequenceNodeScheduleInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceNodeScheduleInformationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceNodeScheduleInformationDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceNodeScheduleInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceNodeScheduleInformationDataType &dst);

/**
 * Datatype PowerSequenceNodeScheduleInformationDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceNodeScheduleInformationDataElementsType { 
	std::optional<ElementTagType> nodeRemoteControllable;
	std::optional<ElementTagType> supportsSingleSlotSchedulingOnly;
	std::optional<ElementTagType> alternativesCount;
	std::optional<ElementTagType> totalSequencesCountMax;
	std::optional<ElementTagType> supportsReselection;

	PowerSequenceNodeScheduleInformationDataElementsType()
		:
		nodeRemoteControllable(ElementTagType{}),
		supportsSingleSlotSchedulingOnly(ElementTagType{}),
		alternativesCount(ElementTagType{}),
		totalSequencesCountMax(ElementTagType{}),
		supportsReselection(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceNodeScheduleInformationDataElementsType to its JSON representation
 * @param src The PowerSequenceNodeScheduleInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceNodeScheduleInformationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceNodeScheduleInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceNodeScheduleInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceNodeScheduleInformationDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleConfigurationRequestCallType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConfigurationRequestCallType { 
	std::optional<PowerSequenceIdType> sequenceId;

	PowerSequenceScheduleConfigurationRequestCallType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConfigurationRequestCallType to its JSON representation
 * @param src The PowerSequenceScheduleConfigurationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConfigurationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConfigurationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConfigurationRequestCallType &dst);

/**
 * Datatype PowerSequenceScheduleConfigurationRequestCallElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConfigurationRequestCallElementsType { 
	std::optional<ElementTagType> sequenceId;

	PowerSequenceScheduleConfigurationRequestCallElementsType()
		:
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequenceScheduleConfigurationRequestCallElementsType to its JSON representation
 * @param src The PowerSequenceScheduleConfigurationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConfigurationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConfigurationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConfigurationRequestCallElementsType &dst);

/**
 * Datatype PowerSequencePriceCalculationRequestCallType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceCalculationRequestCallType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> potentialStartTime;

	PowerSequencePriceCalculationRequestCallType()
		:
		sequenceId(PowerSequenceIdType{}),
		potentialStartTime(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a PowerSequencePriceCalculationRequestCallType to its JSON representation
 * @param src The PowerSequencePriceCalculationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceCalculationRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceCalculationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceCalculationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceCalculationRequestCallType &dst);

/**
 * Datatype PowerSequencePriceCalculationRequestCallElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceCalculationRequestCallElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> potentialStartTime;

	PowerSequencePriceCalculationRequestCallElementsType()
		:
		sequenceId(ElementTagType{}),
		potentialStartTime(ElementTagType{})
	{}
};
/**
 * Convert a PowerSequencePriceCalculationRequestCallElementsType to its JSON representation
 * @param src The PowerSequencePriceCalculationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceCalculationRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a PowerSequencePriceCalculationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceCalculationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceCalculationRequestCallElementsType &dst);

/**
 * Datatype ResultDataType as defined in EEBus_SPINE_TS_Result.xsd
*/
struct ResultDataType { 
	std::optional<ErrorNumberType> errorNumber;
	std::optional<DescriptionType> description;

	ResultDataType()
		:
		errorNumber(ErrorNumberType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a ResultDataType to its JSON representation
 * @param src The ResultDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ResultDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ResultDataType
 * @param src The JSON variant to convert
 * @param dst The ResultDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ResultDataType &dst);

/**
 * Datatype BindingManagementEntryDataType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryDataType { 
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	BindingManagementEntryDataType()
		:
		bindingId(BindingIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a BindingManagementEntryDataType to its JSON representation
 * @param src The BindingManagementEntryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementEntryDataType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryDataType &dst);

/**
 * Datatype BindingManagementEntryDataElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryDataElementsType { 
	std::optional<ElementTagType> bindingId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	BindingManagementEntryDataElementsType()
		:
		bindingId(ElementTagType{}),
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a BindingManagementEntryDataElementsType to its JSON representation
 * @param src The BindingManagementEntryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementEntryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryDataElementsType &dst);

/**
 * Datatype BindingManagementEntryListDataType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryListDataType { 
	std::optional<std::vector<BindingManagementEntryDataType>> bindingManagementEntryData;

	BindingManagementEntryListDataType()
		:
		bindingManagementEntryData(std::vector<BindingManagementEntryDataType>{})
	{}
};
/**
 * Convert a BindingManagementEntryListDataType to its JSON representation
 * @param src The BindingManagementEntryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementEntryListDataType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryListDataType &dst);

/**
 * Datatype BindingManagementEntryListDataSelectorsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryListDataSelectorsType { 
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;

	BindingManagementEntryListDataSelectorsType()
		:
		bindingId(BindingIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{})
	{}
};
/**
 * Convert a BindingManagementEntryListDataSelectorsType to its JSON representation
 * @param src The BindingManagementEntryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementEntryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryListDataSelectorsType &dst);

/**
 * Datatype BindingManagementRequestCallType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementRequestCallType { 
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<FeatureTypeType> serverFeatureType;

	BindingManagementRequestCallType()
		:
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{}),
		serverFeatureType(FeatureTypeType{})
	{}
};
/**
 * Convert a BindingManagementRequestCallType to its JSON representation
 * @param src The BindingManagementRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementRequestCallType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementRequestCallType &dst);

/**
 * Datatype BindingManagementRequestCallElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementRequestCallElementsType { 
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> serverFeatureType;

	BindingManagementRequestCallElementsType()
		:
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{}),
		serverFeatureType(ElementTagType{})
	{}
};
/**
 * Convert a BindingManagementRequestCallElementsType to its JSON representation
 * @param src The BindingManagementRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementRequestCallElementsType &dst);

/**
 * Datatype BindingManagementDeleteCallType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementDeleteCallType { 
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;

	BindingManagementDeleteCallType()
		:
		bindingId(BindingIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{})
	{}
};
/**
 * Convert a BindingManagementDeleteCallType to its JSON representation
 * @param src The BindingManagementDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementDeleteCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementDeleteCallType &dst);

/**
 * Datatype BindingManagementDeleteCallElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementDeleteCallElementsType { 
	std::optional<ElementTagType> bindingId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;

	BindingManagementDeleteCallElementsType()
		:
		bindingId(ElementTagType{}),
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{})
	{}
};
/**
 * Convert a BindingManagementDeleteCallElementsType to its JSON representation
 * @param src The BindingManagementDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementDeleteCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BindingManagementDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BindingManagementDeleteCallElementsType &dst);

/**
 * Datatype ActuatorLevelDataType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDataType { 
	std::optional<ActuatorLevelFctType> function;
	std::optional<ScaledNumberType> value;

	ActuatorLevelDataType()
		:
		function(ActuatorLevelFctType{}),
		value(ScaledNumberType{})
	{}
};
/**
 * Convert a ActuatorLevelDataType to its JSON representation
 * @param src The ActuatorLevelDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorLevelDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDataType &dst);

/**
 * Datatype ActuatorLevelDataElementsType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDataElementsType { 
	std::optional<ElementTagType> function;
	std::optional<ScaledNumberElementsType> value;

	ActuatorLevelDataElementsType()
		:
		function(ElementTagType{}),
		value(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a ActuatorLevelDataElementsType to its JSON representation
 * @param src The ActuatorLevelDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorLevelDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDataElementsType &dst);

/**
 * Datatype ActuatorLevelDescriptionDataType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDescriptionDataType { 
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<UnitOfMeasurementType> levelDefaultUnit;

	ActuatorLevelDescriptionDataType()
		:
		label(LabelType{}),
		description(DescriptionType{}),
		levelDefaultUnit(UnitOfMeasurementType{})
	{}
};
/**
 * Convert a ActuatorLevelDescriptionDataType to its JSON representation
 * @param src The ActuatorLevelDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorLevelDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDescriptionDataType &dst);

/**
 * Datatype ActuatorLevelDescriptionDataElementsType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDescriptionDataElementsType { 
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> levelDefaultUnit;

	ActuatorLevelDescriptionDataElementsType()
		:
		label(ElementTagType{}),
		description(ElementTagType{}),
		levelDefaultUnit(ElementTagType{})
	{}
};
/**
 * Convert a ActuatorLevelDescriptionDataElementsType to its JSON representation
 * @param src The ActuatorLevelDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorLevelDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDescriptionDataElementsType &dst);

/**
 * Datatype CmdControlType as defined in EEBus_SPINE_TS_CommandFrame.xsd
*/
struct CmdControlType { 
	std::optional<ElementTagType> var_delete;
	std::optional<ElementTagType> partial;

	CmdControlType()
		:
		var_delete(ElementTagType{}),
		partial(ElementTagType{})
	{}
};
/**
 * Convert a CmdControlType to its JSON representation
 * @param src The CmdControlType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CmdControlType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a CmdControlType
 * @param src The JSON variant to convert
 * @param dst The CmdControlType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, CmdControlType &dst);

/**
 * Datatype ActuatorSwitchDataType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDataType { 
	std::optional<ActuatorSwitchFctType> function;

	ActuatorSwitchDataType()
		:
		function(ActuatorSwitchFctType{})
	{}
};
/**
 * Convert a ActuatorSwitchDataType to its JSON representation
 * @param src The ActuatorSwitchDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDataType &dst);

/**
 * Datatype ActuatorSwitchDataElementsType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDataElementsType { 
	std::optional<ElementTagType> function;

	ActuatorSwitchDataElementsType()
		:
		function(ElementTagType{})
	{}
};
/**
 * Convert a ActuatorSwitchDataElementsType to its JSON representation
 * @param src The ActuatorSwitchDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDataElementsType &dst);

/**
 * Datatype ActuatorSwitchDescriptionDataType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDescriptionDataType { 
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	ActuatorSwitchDescriptionDataType()
		:
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a ActuatorSwitchDescriptionDataType to its JSON representation
 * @param src The ActuatorSwitchDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDescriptionDataType &dst);

/**
 * Datatype ActuatorSwitchDescriptionDataElementsType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDescriptionDataElementsType { 
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	ActuatorSwitchDescriptionDataElementsType()
		:
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a ActuatorSwitchDescriptionDataElementsType to its JSON representation
 * @param src The ActuatorSwitchDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDescriptionDataElementsType &dst);

/**
 * Datatype AlarmDataType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmDataType { 
	std::optional<AlarmIdType> alarmId;
	std::optional<ThresholdIdType> thresholdId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<AlarmTypeType> alarmType;
	std::optional<ScaledNumberType> measuredValue;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	AlarmDataType()
		:
		alarmId(AlarmIdType{}),
		thresholdId(ThresholdIdType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		alarmType(AlarmTypeType{}),
		measuredValue(ScaledNumberType{}),
		evaluationPeriod(TimePeriodType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a AlarmDataType to its JSON representation
 * @param src The AlarmDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AlarmDataType
 * @param src The JSON variant to convert
 * @param dst The AlarmDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AlarmDataType &dst);

/**
 * Datatype AlarmDataElementsType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmDataElementsType { 
	std::optional<ElementTagType> alarmId;
	std::optional<ElementTagType> thresholdId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> alarmType;
	std::optional<ScaledNumberElementsType> measuredValue;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	AlarmDataElementsType()
		:
		alarmId(ElementTagType{}),
		thresholdId(ElementTagType{}),
		timestamp(ElementTagType{}),
		alarmType(ElementTagType{}),
		measuredValue(ScaledNumberElementsType{}),
		evaluationPeriod(TimePeriodElementsType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a AlarmDataElementsType to its JSON representation
 * @param src The AlarmDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AlarmDataElementsType
 * @param src The JSON variant to convert
 * @param dst The AlarmDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AlarmDataElementsType &dst);

/**
 * Datatype AlarmListDataType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmListDataType { 
	std::optional<std::vector<AlarmDataType>> alarmData;

	AlarmListDataType()
		:
		alarmData(std::vector<AlarmDataType>{})
	{}
};
/**
 * Convert a AlarmListDataType to its JSON representation
 * @param src The AlarmListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AlarmListDataType
 * @param src The JSON variant to convert
 * @param dst The AlarmListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AlarmListDataType &dst);

/**
 * Datatype AlarmListDataSelectorsType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmListDataSelectorsType { 
	std::optional<AlarmIdType> alarmId;
	std::optional<ScopeTypeType> scopeType;

	AlarmListDataSelectorsType()
		:
		alarmId(AlarmIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a AlarmListDataSelectorsType to its JSON representation
 * @param src The AlarmListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a AlarmListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The AlarmListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, AlarmListDataSelectorsType &dst);

/**
 * Datatype BillValueType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillValueType { 
	std::optional<BillValueIdType> valueId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> valuePercentage;

	BillValueType()
		:
		valueId(BillValueIdType{}),
		unit(UnitOfMeasurementType{}),
		value(ScaledNumberType{}),
		valuePercentage(ScaledNumberType{})
	{}
};
/**
 * Convert a BillValueType to its JSON representation
 * @param src The BillValueType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillValueType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillValueType
 * @param src The JSON variant to convert
 * @param dst The BillValueType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillValueType &dst);

/**
 * Datatype BillValueElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillValueElementsType { 
	std::optional<ElementTagType> valueId;
	std::optional<ElementTagType> unit;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberElementsType> valuePercentage;

	BillValueElementsType()
		:
		valueId(ElementTagType{}),
		unit(ElementTagType{}),
		value(ScaledNumberElementsType{}),
		valuePercentage(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a BillValueElementsType to its JSON representation
 * @param src The BillValueElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillValueElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillValueElementsType
 * @param src The JSON variant to convert
 * @param dst The BillValueElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillValueElementsType &dst);

/**
 * Datatype BillCostType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillCostType { 
	std::optional<BillCostIdType> costId;
	std::optional<BillCostTypeType> costType;
	std::optional<BillValueIdType> valueId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<CurrencyType> currency;
	std::optional<ScaledNumberType> cost;
	std::optional<ScaledNumberType> costPercentage;

	BillCostType()
		:
		costId(BillCostIdType{}),
		costType(BillCostTypeType{}),
		valueId(BillValueIdType{}),
		unit(UnitOfMeasurementType{}),
		currency(CurrencyType{}),
		cost(ScaledNumberType{}),
		costPercentage(ScaledNumberType{})
	{}
};
/**
 * Convert a BillCostType to its JSON representation
 * @param src The BillCostType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillCostType
 * @param src The JSON variant to convert
 * @param dst The BillCostType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillCostType &dst);

/**
 * Datatype BillCostElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillCostElementsType { 
	std::optional<ElementTagType> costId;
	std::optional<ElementTagType> costType;
	std::optional<ElementTagType> valueId;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> currency;
	std::optional<ScaledNumberElementsType> cost;
	std::optional<ScaledNumberElementsType> costPercentage;

	BillCostElementsType()
		:
		costId(ElementTagType{}),
		costType(ElementTagType{}),
		valueId(ElementTagType{}),
		unit(ElementTagType{}),
		currency(ElementTagType{}),
		cost(ScaledNumberElementsType{}),
		costPercentage(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a BillCostElementsType to its JSON representation
 * @param src The BillCostElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillCostElementsType
 * @param src The JSON variant to convert
 * @param dst The BillCostElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillCostElementsType &dst);

/**
 * Datatype BillPositionType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillPositionType { 
	std::optional<BillPositionIdType> positionId;
	std::optional<BillPositionTypeType> positionType;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::vector<BillValueType>> value;
	std::optional<std::vector<BillCostType>> cost;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	BillPositionType()
		:
		positionId(BillPositionIdType{}),
		positionType(BillPositionTypeType{}),
		timePeriod(TimePeriodType{}),
		value(std::vector<BillValueType>{}),
		cost(std::vector<BillCostType>{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a BillPositionType to its JSON representation
 * @param src The BillPositionType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillPositionType
 * @param src The JSON variant to convert
 * @param dst The BillPositionType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillPositionType &dst);

/**
 * Datatype BillPositionElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillPositionElementsType { 
	std::optional<ElementTagType> positionId;
	std::optional<ElementTagType> positionType;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<BillValueElementsType> value;
	std::optional<BillCostElementsType> cost;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	BillPositionElementsType()
		:
		positionId(ElementTagType{}),
		positionType(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		value(BillValueElementsType{}),
		cost(BillCostElementsType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a BillPositionElementsType to its JSON representation
 * @param src The BillPositionElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillPositionElementsType
 * @param src The JSON variant to convert
 * @param dst The BillPositionElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillPositionElementsType &dst);

/**
 * Datatype BillDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDataType { 
	std::optional<BillIdType> billId;
	std::optional<BillTypeType> billType;
	std::optional<ScopeTypeType> scopeType;
	std::optional<BillPositionType> total;
	std::optional<std::vector<BillPositionType>> position;

	BillDataType()
		:
		billId(BillIdType{}),
		billType(BillTypeType{}),
		scopeType(ScopeTypeType{}),
		total(BillPositionType{}),
		position(std::vector<BillPositionType>{})
	{}
};
/**
 * Convert a BillDataType to its JSON representation
 * @param src The BillDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDataType
 * @param src The JSON variant to convert
 * @param dst The BillDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDataType &dst);

/**
 * Datatype BillDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDataElementsType { 
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> billType;
	std::optional<ElementTagType> scopeType;
	std::optional<BillPositionElementsType> total;
	std::optional<BillPositionElementsType> position;

	BillDataElementsType()
		:
		billId(ElementTagType{}),
		billType(ElementTagType{}),
		scopeType(ElementTagType{}),
		total(BillPositionElementsType{}),
		position(BillPositionElementsType{})
	{}
};
/**
 * Convert a BillDataElementsType to its JSON representation
 * @param src The BillDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDataElementsType &dst);

/**
 * Datatype BillListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillListDataType { 
	std::optional<std::vector<BillDataType>> billData;

	BillListDataType()
		:
		billData(std::vector<BillDataType>{})
	{}
};
/**
 * Convert a BillListDataType to its JSON representation
 * @param src The BillListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillListDataType
 * @param src The JSON variant to convert
 * @param dst The BillListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillListDataType &dst);

/**
 * Datatype BillListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillListDataSelectorsType { 
	std::optional<BillIdType> billId;
	std::optional<ScopeTypeType> scopeType;

	BillListDataSelectorsType()
		:
		billId(BillIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a BillListDataSelectorsType to its JSON representation
 * @param src The BillListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillListDataSelectorsType &dst);

/**
 * Datatype BillConstraintsDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsDataType { 
	std::optional<BillIdType> billId;
	std::optional<BillPositionCountType> positionCountMin;
	std::optional<BillPositionCountType> positionCountMax;

	BillConstraintsDataType()
		:
		billId(BillIdType{}),
		positionCountMin(BillPositionCountType{}),
		positionCountMax(BillPositionCountType{})
	{}
};
/**
 * Convert a BillConstraintsDataType to its JSON representation
 * @param src The BillConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillConstraintsDataType &dst);

/**
 * Datatype BillConstraintsDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsDataElementsType { 
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> positionCountMin;
	std::optional<ElementTagType> positionCountMax;

	BillConstraintsDataElementsType()
		:
		billId(ElementTagType{}),
		positionCountMin(ElementTagType{}),
		positionCountMax(ElementTagType{})
	{}
};
/**
 * Convert a BillConstraintsDataElementsType to its JSON representation
 * @param src The BillConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillConstraintsDataElementsType &dst);

/**
 * Datatype BillConstraintsListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsListDataType { 
	std::optional<std::vector<BillConstraintsDataType>> billConstraintsData;

	BillConstraintsListDataType()
		:
		billConstraintsData(std::vector<BillConstraintsDataType>{})
	{}
};
/**
 * Convert a BillConstraintsListDataType to its JSON representation
 * @param src The BillConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillConstraintsListDataType &dst);

/**
 * Datatype BillConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsListDataSelectorsType { 
	std::optional<BillIdType> billId;

	BillConstraintsListDataSelectorsType()
		:
		billId(BillIdType{})
	{}
};
/**
 * Convert a BillConstraintsListDataSelectorsType to its JSON representation
 * @param src The BillConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillConstraintsListDataSelectorsType &dst);

/**
 * Datatype BillDescriptionDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionDataType { 
	std::optional<BillIdType> billId;
	std::optional<bool> billWriteable;
	std::optional<bool> updateRequired;
	std::optional<std::vector<BillTypeType>> supportedBillType;
	std::optional<SessionIdType> sessionId;

	BillDescriptionDataType()
		:
		billId(BillIdType{}),
		billWriteable(bool{}),
		updateRequired(bool{}),
		supportedBillType(std::vector<BillTypeType>{}),
		sessionId(SessionIdType{})
	{}
};
/**
 * Convert a BillDescriptionDataType to its JSON representation
 * @param src The BillDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDescriptionDataType &dst);

/**
 * Datatype BillDescriptionDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionDataElementsType { 
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> billWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> supportedBillType;
	std::optional<ElementTagType> sessionId;

	BillDescriptionDataElementsType()
		:
		billId(ElementTagType{}),
		billWriteable(ElementTagType{}),
		updateRequired(ElementTagType{}),
		supportedBillType(ElementTagType{}),
		sessionId(ElementTagType{})
	{}
};
/**
 * Convert a BillDescriptionDataElementsType to its JSON representation
 * @param src The BillDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDescriptionDataElementsType &dst);

/**
 * Datatype BillDescriptionListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionListDataType { 
	std::optional<std::vector<BillDescriptionDataType>> billDescriptionData;

	BillDescriptionListDataType()
		:
		billDescriptionData(std::vector<BillDescriptionDataType>{})
	{}
};
/**
 * Convert a BillDescriptionListDataType to its JSON representation
 * @param src The BillDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDescriptionListDataType &dst);

/**
 * Datatype BillDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionListDataSelectorsType { 
	std::optional<BillIdType> billId;

	BillDescriptionListDataSelectorsType()
		:
		billId(BillIdType{})
	{}
};
/**
 * Convert a BillDescriptionListDataSelectorsType to its JSON representation
 * @param src The BillDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a BillDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, BillDescriptionListDataSelectorsType &dst);

/**
 * Datatype IdentificationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationDataType { 
	std::optional<IdentificationIdType> identificationId;
	std::optional<IdentificationTypeType> identificationType;
	std::optional<IdentificationValueType> identificationValue;
	std::optional<bool> authorized;

	IdentificationDataType()
		:
		identificationId(IdentificationIdType{}),
		identificationType(IdentificationTypeType{}),
		identificationValue(IdentificationValueType{}),
		authorized(bool{})
	{}
};
/**
 * Convert a IdentificationDataType to its JSON representation
 * @param src The IdentificationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IdentificationDataType
 * @param src The JSON variant to convert
 * @param dst The IdentificationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IdentificationDataType &dst);

/**
 * Datatype IdentificationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationDataElementsType { 
	std::optional<ElementTagType> identificationId;
	std::optional<ElementTagType> identificationType;
	std::optional<ElementTagType> identificationValue;
	std::optional<ElementTagType> authorized;

	IdentificationDataElementsType()
		:
		identificationId(ElementTagType{}),
		identificationType(ElementTagType{}),
		identificationValue(ElementTagType{}),
		authorized(ElementTagType{})
	{}
};
/**
 * Convert a IdentificationDataElementsType to its JSON representation
 * @param src The IdentificationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IdentificationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IdentificationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IdentificationDataElementsType &dst);

/**
 * Datatype IdentificationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationListDataType { 
	std::optional<std::vector<IdentificationDataType>> identificationData;

	IdentificationListDataType()
		:
		identificationData(std::vector<IdentificationDataType>{})
	{}
};
/**
 * Convert a IdentificationListDataType to its JSON representation
 * @param src The IdentificationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IdentificationListDataType
 * @param src The JSON variant to convert
 * @param dst The IdentificationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IdentificationListDataType &dst);

/**
 * Datatype IdentificationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationListDataSelectorsType { 
	std::optional<IdentificationIdType> identificationId;
	std::optional<IdentificationTypeType> identificationType;

	IdentificationListDataSelectorsType()
		:
		identificationId(IdentificationIdType{}),
		identificationType(IdentificationTypeType{})
	{}
};
/**
 * Convert a IdentificationListDataSelectorsType to its JSON representation
 * @param src The IdentificationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IdentificationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IdentificationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IdentificationListDataSelectorsType &dst);

/**
 * Datatype SessionIdentificationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationDataType { 
	std::optional<SessionIdType> sessionId;
	std::optional<IdentificationIdType> identificationId;
	std::optional<bool> isLatestSession;
	std::optional<TimePeriodType> timePeriod;

	SessionIdentificationDataType()
		:
		sessionId(SessionIdType{}),
		identificationId(IdentificationIdType{}),
		isLatestSession(bool{}),
		timePeriod(TimePeriodType{})
	{}
};
/**
 * Convert a SessionIdentificationDataType to its JSON representation
 * @param src The SessionIdentificationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionIdentificationDataType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionIdentificationDataType &dst);

/**
 * Datatype SessionIdentificationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationDataElementsType { 
	std::optional<ElementTagType> sessionId;
	std::optional<ElementTagType> identificationId;
	std::optional<ElementTagType> isLatestSession;
	std::optional<TimePeriodElementsType> timePeriod;

	SessionIdentificationDataElementsType()
		:
		sessionId(ElementTagType{}),
		identificationId(ElementTagType{}),
		isLatestSession(ElementTagType{}),
		timePeriod(TimePeriodElementsType{})
	{}
};
/**
 * Convert a SessionIdentificationDataElementsType to its JSON representation
 * @param src The SessionIdentificationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionIdentificationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionIdentificationDataElementsType &dst);

/**
 * Datatype SessionIdentificationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationListDataType { 
	std::optional<std::vector<SessionIdentificationDataType>> sessionIdentificationData;

	SessionIdentificationListDataType()
		:
		sessionIdentificationData(std::vector<SessionIdentificationDataType>{})
	{}
};
/**
 * Convert a SessionIdentificationListDataType to its JSON representation
 * @param src The SessionIdentificationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionIdentificationListDataType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionIdentificationListDataType &dst);

/**
 * Datatype SessionIdentificationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationListDataSelectorsType { 
	std::optional<SessionIdType> sessionId;
	std::optional<IdentificationIdType> identificationId;
	std::optional<bool> isLatestSession;
	std::optional<TimePeriodType> timePeriod;

	SessionIdentificationListDataSelectorsType()
		:
		sessionId(SessionIdType{}),
		identificationId(IdentificationIdType{}),
		isLatestSession(bool{}),
		timePeriod(TimePeriodType{})
	{}
};
/**
 * Convert a SessionIdentificationListDataSelectorsType to its JSON representation
 * @param src The SessionIdentificationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionIdentificationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionIdentificationListDataSelectorsType &dst);

/**
 * Datatype SessionMeasurementRelationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationDataType { 
	std::optional<SessionIdType> sessionId;
	std::optional<std::vector<MeasurementIdType>> measurementId;

	SessionMeasurementRelationDataType()
		:
		sessionId(SessionIdType{}),
		measurementId(std::vector<MeasurementIdType>{})
	{}
};
/**
 * Convert a SessionMeasurementRelationDataType to its JSON representation
 * @param src The SessionMeasurementRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationDataType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationDataType &dst);

/**
 * Datatype SessionMeasurementRelationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationDataElementsType { 
	std::optional<ElementTagType> sessionId;
	std::optional<ElementTagType> measurementId;

	SessionMeasurementRelationDataElementsType()
		:
		sessionId(ElementTagType{}),
		measurementId(ElementTagType{})
	{}
};
/**
 * Convert a SessionMeasurementRelationDataElementsType to its JSON representation
 * @param src The SessionMeasurementRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationDataElementsType &dst);

/**
 * Datatype SessionMeasurementRelationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationListDataType { 
	std::optional<std::vector<SessionMeasurementRelationDataType>> sessionMeasurementRelationData;

	SessionMeasurementRelationListDataType()
		:
		sessionMeasurementRelationData(std::vector<SessionMeasurementRelationDataType>{})
	{}
};
/**
 * Convert a SessionMeasurementRelationListDataType to its JSON representation
 * @param src The SessionMeasurementRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationListDataType &dst);

/**
 * Datatype SessionMeasurementRelationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationListDataSelectorsType { 
	std::optional<SessionIdType> sessionId;
	std::optional<MeasurementIdType> measurementId;

	SessionMeasurementRelationListDataSelectorsType()
		:
		sessionId(SessionIdType{}),
		measurementId(MeasurementIdType{})
	{}
};
/**
 * Convert a SessionMeasurementRelationListDataSelectorsType to its JSON representation
 * @param src The SessionMeasurementRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationListDataSelectorsType &dst);

/**
 * Datatype DataTunnelingHeaderType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingHeaderType { 
	std::optional<PurposeIdType> purposeId;
	std::optional<ChannelIdType> channelId;
	std::optional<uint32_t> sequenceId;

	DataTunnelingHeaderType()
		:
		purposeId(PurposeIdType{}),
		channelId(ChannelIdType{}),
		sequenceId(uint32_t{})
	{}
};
/**
 * Convert a DataTunnelingHeaderType to its JSON representation
 * @param src The DataTunnelingHeaderType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingHeaderType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DataTunnelingHeaderType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingHeaderType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DataTunnelingHeaderType &dst);

/**
 * Datatype DataTunnelingHeaderElementsType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingHeaderElementsType { 
	std::optional<ElementTagType> purposeId;
	std::optional<ElementTagType> channelId;
	std::optional<ElementTagType> sequenceId;

	DataTunnelingHeaderElementsType()
		:
		purposeId(ElementTagType{}),
		channelId(ElementTagType{}),
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a DataTunnelingHeaderElementsType to its JSON representation
 * @param src The DataTunnelingHeaderElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingHeaderElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DataTunnelingHeaderElementsType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingHeaderElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DataTunnelingHeaderElementsType &dst);

/**
 * Datatype DataTunnelingCallType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingCallType { 
	std::optional<DataTunnelingHeaderType> header;
	std::optional<std::string> payload;

	DataTunnelingCallType()
		:
		header(DataTunnelingHeaderType{}),
		payload(std::string{})
	{}
};
/**
 * Convert a DataTunnelingCallType to its JSON representation
 * @param src The DataTunnelingCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DataTunnelingCallType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DataTunnelingCallType &dst);

/**
 * Datatype DataTunnelingCallElementsType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingCallElementsType { 
	std::optional<DataTunnelingHeaderElementsType> header;
	std::optional<ElementTagType> payload;

	DataTunnelingCallElementsType()
		:
		header(DataTunnelingHeaderElementsType{}),
		payload(ElementTagType{})
	{}
};
/**
 * Convert a DataTunnelingCallElementsType to its JSON representation
 * @param src The DataTunnelingCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DataTunnelingCallElementsType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DataTunnelingCallElementsType &dst);

/**
 * Datatype DeviceClassificationManufacturerDataType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationManufacturerDataType { 
	std::optional<DeviceClassificationStringType> deviceName;
	std::optional<DeviceClassificationStringType> deviceCode;
	std::optional<DeviceClassificationStringType> serialNumber;
	std::optional<DeviceClassificationStringType> softwareRevision;
	std::optional<DeviceClassificationStringType> hardwareRevision;
	std::optional<DeviceClassificationStringType> vendorName;
	std::optional<DeviceClassificationStringType> vendorCode;
	std::optional<DeviceClassificationStringType> brandName;
	std::optional<PowerSourceType> powerSource;
	std::optional<DeviceClassificationStringType> manufacturerNodeIdentification;
	std::optional<LabelType> manufacturerLabel;
	std::optional<DescriptionType> manufacturerDescription;

	DeviceClassificationManufacturerDataType()
		:
		deviceName(DeviceClassificationStringType{}),
		deviceCode(DeviceClassificationStringType{}),
		serialNumber(DeviceClassificationStringType{}),
		softwareRevision(DeviceClassificationStringType{}),
		hardwareRevision(DeviceClassificationStringType{}),
		vendorName(DeviceClassificationStringType{}),
		vendorCode(DeviceClassificationStringType{}),
		brandName(DeviceClassificationStringType{}),
		powerSource(PowerSourceType{}),
		manufacturerNodeIdentification(DeviceClassificationStringType{}),
		manufacturerLabel(LabelType{}),
		manufacturerDescription(DescriptionType{})
	{}
};
/**
 * Convert a DeviceClassificationManufacturerDataType to its JSON representation
 * @param src The DeviceClassificationManufacturerDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationManufacturerDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceClassificationManufacturerDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationManufacturerDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceClassificationManufacturerDataType &dst);

/**
 * Datatype DeviceClassificationManufacturerDataElementsType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationManufacturerDataElementsType { 
	std::optional<ElementTagType> deviceName;
	std::optional<ElementTagType> deviceCode;
	std::optional<ElementTagType> serialNumber;
	std::optional<ElementTagType> softwareRevision;
	std::optional<ElementTagType> hardwareRevision;
	std::optional<ElementTagType> vendorName;
	std::optional<ElementTagType> vendorCode;
	std::optional<ElementTagType> brandName;
	std::optional<ElementTagType> powerSource;
	std::optional<ElementTagType> manufacturerNodeIdentification;
	std::optional<ElementTagType> manufacturerLabel;
	std::optional<ElementTagType> manufacturerDescription;

	DeviceClassificationManufacturerDataElementsType()
		:
		deviceName(ElementTagType{}),
		deviceCode(ElementTagType{}),
		serialNumber(ElementTagType{}),
		softwareRevision(ElementTagType{}),
		hardwareRevision(ElementTagType{}),
		vendorName(ElementTagType{}),
		vendorCode(ElementTagType{}),
		brandName(ElementTagType{}),
		powerSource(ElementTagType{}),
		manufacturerNodeIdentification(ElementTagType{}),
		manufacturerLabel(ElementTagType{}),
		manufacturerDescription(ElementTagType{})
	{}
};
/**
 * Convert a DeviceClassificationManufacturerDataElementsType to its JSON representation
 * @param src The DeviceClassificationManufacturerDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationManufacturerDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceClassificationManufacturerDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationManufacturerDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceClassificationManufacturerDataElementsType &dst);

/**
 * Datatype DeviceClassificationUserDataType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationUserDataType { 
	std::optional<DeviceClassificationStringType> userNodeIdentification;
	std::optional<LabelType> userLabel;
	std::optional<DescriptionType> userDescription;

	DeviceClassificationUserDataType()
		:
		userNodeIdentification(DeviceClassificationStringType{}),
		userLabel(LabelType{}),
		userDescription(DescriptionType{})
	{}
};
/**
 * Convert a DeviceClassificationUserDataType to its JSON representation
 * @param src The DeviceClassificationUserDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationUserDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceClassificationUserDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationUserDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceClassificationUserDataType &dst);

/**
 * Datatype DeviceClassificationUserDataElementsType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationUserDataElementsType { 
	std::optional<ElementTagType> userNodeIdentification;
	std::optional<ElementTagType> userLabel;
	std::optional<ElementTagType> userDescription;

	DeviceClassificationUserDataElementsType()
		:
		userNodeIdentification(ElementTagType{}),
		userLabel(ElementTagType{}),
		userDescription(ElementTagType{})
	{}
};
/**
 * Convert a DeviceClassificationUserDataElementsType to its JSON representation
 * @param src The DeviceClassificationUserDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationUserDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceClassificationUserDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationUserDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceClassificationUserDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueValueType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueValueType { 
	std::optional<bool> boolean;
	std::optional<std::string> date;
	std::optional<std::string> dateTime;
	std::optional<std::string> duration;
	std::optional<DeviceConfigurationKeyValueStringType> string;
	std::optional<std::string> time;
	std::optional<ScaledNumberType> scaledNumber;
	std::optional<long> integer;

	DeviceConfigurationKeyValueValueType()
		:
		boolean(bool{}),
		date(std::string{}),
		dateTime(std::string{}),
		duration(std::string{}),
		string(DeviceConfigurationKeyValueStringType{}),
		time(std::string{}),
		scaledNumber(ScaledNumberType{}),
		integer(long{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueValueType to its JSON representation
 * @param src The DeviceConfigurationKeyValueValueType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueValueType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueValueType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueValueType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueValueType &dst);

/**
 * Datatype DeviceConfigurationKeyValueValueElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueValueElementsType { 
	std::optional<ElementTagType> boolean;
	std::optional<ElementTagType> date;
	std::optional<ElementTagType> dateTime;
	std::optional<ElementTagType> duration;
	std::optional<ElementTagType> string;
	std::optional<ElementTagType> time;
	std::optional<ScaledNumberElementsType> scaledNumber;

	DeviceConfigurationKeyValueValueElementsType()
		:
		boolean(ElementTagType{}),
		date(ElementTagType{}),
		dateTime(ElementTagType{}),
		duration(ElementTagType{}),
		string(ElementTagType{}),
		time(ElementTagType{}),
		scaledNumber(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueValueElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueValueElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueValueElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueValueElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueValueElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueValueElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDataType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyValueValueType> value;
	std::optional<bool> isValueChangeable;

	DeviceConfigurationKeyValueDataType()
		:
		keyId(DeviceConfigurationKeyIdType{}),
		value(DeviceConfigurationKeyValueValueType{}),
		isValueChangeable(bool{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDataElementsType { 
	std::optional<ElementTagType> keyId;
	std::optional<DeviceConfigurationKeyValueValueElementsType> value;
	std::optional<ElementTagType> isValueChangeable;

	DeviceConfigurationKeyValueDataElementsType()
		:
		keyId(ElementTagType{}),
		value(DeviceConfigurationKeyValueValueElementsType{}),
		isValueChangeable(ElementTagType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueListDataType { 
	std::optional<std::vector<DeviceConfigurationKeyValueDataType>> deviceConfigurationKeyValueData;

	DeviceConfigurationKeyValueListDataType()
		:
		deviceConfigurationKeyValueData(std::vector<DeviceConfigurationKeyValueDataType>{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueListDataSelectorsType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;

	DeviceConfigurationKeyValueListDataSelectorsType()
		:
		keyId(DeviceConfigurationKeyIdType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueListDataSelectorsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionDataType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyNameType> keyName;
	std::optional<DeviceConfigurationKeyValueTypeType> valueType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	DeviceConfigurationKeyValueDescriptionDataType()
		:
		keyId(DeviceConfigurationKeyIdType{}),
		keyName(DeviceConfigurationKeyNameType{}),
		valueType(DeviceConfigurationKeyValueTypeType{}),
		unit(UnitOfMeasurementType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDescriptionDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionDataElementsType { 
	std::optional<ElementTagType> keyId;
	std::optional<ElementTagType> keyName;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	DeviceConfigurationKeyValueDescriptionDataElementsType()
		:
		keyId(ElementTagType{}),
		keyName(ElementTagType{}),
		valueType(ElementTagType{}),
		unit(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDescriptionDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionListDataType { 
	std::optional<std::vector<DeviceConfigurationKeyValueDescriptionDataType>> deviceConfigurationKeyValueDescriptionData;

	DeviceConfigurationKeyValueDescriptionListDataType()
		:
		deviceConfigurationKeyValueDescriptionData(std::vector<DeviceConfigurationKeyValueDescriptionDataType>{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDescriptionListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionListDataSelectorsType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyNameType> keyName;

	DeviceConfigurationKeyValueDescriptionListDataSelectorsType()
		:
		keyId(DeviceConfigurationKeyIdType{}),
		keyName(DeviceConfigurationKeyNameType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueDescriptionListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionListDataSelectorsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsDataType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyValueValueType> valueRangeMin;
	std::optional<DeviceConfigurationKeyValueValueType> valueRangeMax;
	std::optional<DeviceConfigurationKeyValueValueType> valueStepSize;

	DeviceConfigurationKeyValueConstraintsDataType()
		:
		keyId(DeviceConfigurationKeyIdType{}),
		valueRangeMin(DeviceConfigurationKeyValueValueType{}),
		valueRangeMax(DeviceConfigurationKeyValueValueType{}),
		valueStepSize(DeviceConfigurationKeyValueValueType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueConstraintsDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsDataElementsType { 
	std::optional<ElementTagType> keyId;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueRangeMin;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueRangeMax;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueStepSize;

	DeviceConfigurationKeyValueConstraintsDataElementsType()
		:
		keyId(ElementTagType{}),
		valueRangeMin(DeviceConfigurationKeyValueValueElementsType{}),
		valueRangeMax(DeviceConfigurationKeyValueValueElementsType{}),
		valueStepSize(DeviceConfigurationKeyValueValueElementsType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueConstraintsDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsListDataType { 
	std::optional<std::vector<DeviceConfigurationKeyValueConstraintsDataType>> deviceConfigurationKeyValueConstraintsData;

	DeviceConfigurationKeyValueConstraintsListDataType()
		:
		deviceConfigurationKeyValueConstraintsData(std::vector<DeviceConfigurationKeyValueConstraintsDataType>{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueConstraintsListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsListDataSelectorsType { 
	std::optional<DeviceConfigurationKeyIdType> keyId;

	DeviceConfigurationKeyValueConstraintsListDataSelectorsType()
		:
		keyId(DeviceConfigurationKeyIdType{})
	{}
};
/**
 * Convert a DeviceConfigurationKeyValueConstraintsListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsListDataSelectorsType &dst);

/**
 * Datatype DeviceDiagnosisStateDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisStateDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<DeviceDiagnosisOperatingStateType> operatingState;
	std::optional<VendorStateCodeType> vendorStateCode;
	std::optional<LastErrorCodeType> lastErrorCode;
	std::optional<std::string> upTime;
	std::optional<std::string> totalUpTime;
	std::optional<PowerSupplyConditionType> powerSupplyCondition;

	DeviceDiagnosisStateDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		operatingState(DeviceDiagnosisOperatingStateType{}),
		vendorStateCode(VendorStateCodeType{}),
		lastErrorCode(LastErrorCodeType{}),
		upTime(std::string{}),
		totalUpTime(std::string{}),
		powerSupplyCondition(PowerSupplyConditionType{})
	{}
};
/**
 * Convert a DeviceDiagnosisStateDataType to its JSON representation
 * @param src The DeviceDiagnosisStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisStateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisStateDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisStateDataType &dst);

/**
 * Datatype DeviceDiagnosisStateDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisStateDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> operatingState;
	std::optional<ElementTagType> vendorStateCode;
	std::optional<ElementTagType> lastErrorCode;
	std::optional<ElementTagType> upTime;
	std::optional<ElementTagType> totalUpTime;
	std::optional<ElementTagType> powerSupplyCondition;

	DeviceDiagnosisStateDataElementsType()
		:
		timestamp(ElementTagType{}),
		operatingState(ElementTagType{}),
		vendorStateCode(ElementTagType{}),
		lastErrorCode(ElementTagType{}),
		upTime(ElementTagType{}),
		totalUpTime(ElementTagType{}),
		powerSupplyCondition(ElementTagType{})
	{}
};
/**
 * Convert a DeviceDiagnosisStateDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisStateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisStateDataElementsType &dst);

/**
 * Datatype DeviceDiagnosisHeartbeatDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisHeartbeatDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<uint64_t> heartbeatCounter;
	std::optional<std::string> heartbeatTimeout;

	DeviceDiagnosisHeartbeatDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		heartbeatCounter(uint64_t{}),
		heartbeatTimeout(std::string{})
	{}
};
/**
 * Convert a DeviceDiagnosisHeartbeatDataType to its JSON representation
 * @param src The DeviceDiagnosisHeartbeatDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisHeartbeatDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisHeartbeatDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisHeartbeatDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisHeartbeatDataType &dst);

/**
 * Datatype DeviceDiagnosisHeartbeatDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisHeartbeatDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> heartbeatCounter;
	std::optional<ElementTagType> heartbeatTimeout;

	DeviceDiagnosisHeartbeatDataElementsType()
		:
		timestamp(ElementTagType{}),
		heartbeatCounter(ElementTagType{}),
		heartbeatTimeout(ElementTagType{})
	{}
};
/**
 * Convert a DeviceDiagnosisHeartbeatDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisHeartbeatDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisHeartbeatDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisHeartbeatDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisHeartbeatDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisHeartbeatDataElementsType &dst);

/**
 * Datatype DeviceDiagnosisServiceDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisServiceDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<AbsoluteOrRelativeTimeType> installationTime;
	std::optional<uint64_t> bootCounter;
	std::optional<AbsoluteOrRelativeTimeType> nextService;

	DeviceDiagnosisServiceDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		installationTime(AbsoluteOrRelativeTimeType{}),
		bootCounter(uint64_t{}),
		nextService(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a DeviceDiagnosisServiceDataType to its JSON representation
 * @param src The DeviceDiagnosisServiceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisServiceDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisServiceDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisServiceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisServiceDataType &dst);

/**
 * Datatype DeviceDiagnosisServiceDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisServiceDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> installationTime;
	std::optional<ElementTagType> bootCounter;
	std::optional<ElementTagType> nextService;

	DeviceDiagnosisServiceDataElementsType()
		:
		timestamp(ElementTagType{}),
		installationTime(ElementTagType{}),
		bootCounter(ElementTagType{}),
		nextService(ElementTagType{})
	{}
};
/**
 * Convert a DeviceDiagnosisServiceDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisServiceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisServiceDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisServiceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisServiceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisServiceDataElementsType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionDataType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ElectricalConnectionVoltageTypeType> voltageType;
	std::optional<ElectricalConnectionPhaseNameType> acMeasuredPhases;
	std::optional<ElectricalConnectionPhaseNameType> acMeasuredInReferenceTo;
	std::optional<ElectricalConnectionAcMeasurementTypeType> acMeasurementType;
	std::optional<ElectricalConnectionMeasurandVariantType> acMeasurementVariant;
	std::optional<uint8_t> acMeasuredHarmonic;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	ElectricalConnectionParameterDescriptionDataType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{}),
		measurementId(MeasurementIdType{}),
		voltageType(ElectricalConnectionVoltageTypeType{}),
		acMeasuredPhases(ElectricalConnectionPhaseNameType{}),
		acMeasuredInReferenceTo(ElectricalConnectionPhaseNameType{}),
		acMeasurementType(ElectricalConnectionAcMeasurementTypeType{}),
		acMeasurementVariant(ElectricalConnectionMeasurandVariantType{}),
		acMeasuredHarmonic(uint8_t{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a ElectricalConnectionParameterDescriptionDataType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionDataType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionDataElementsType { 
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> voltageType;
	std::optional<ElementTagType> acMeasuredPhases;
	std::optional<ElementTagType> acMeasuredInReferenceTo;
	std::optional<ElementTagType> acMeasurementType;
	std::optional<ElementTagType> acMeasurementVariant;
	std::optional<ElementTagType> acMeasuredHarmonic;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	ElectricalConnectionParameterDescriptionDataElementsType()
		:
		electricalConnectionId(ElementTagType{}),
		parameterId(ElementTagType{}),
		measurementId(ElementTagType{}),
		voltageType(ElementTagType{}),
		acMeasuredPhases(ElementTagType{}),
		acMeasuredInReferenceTo(ElementTagType{}),
		acMeasurementType(ElementTagType{}),
		acMeasurementVariant(ElementTagType{}),
		acMeasuredHarmonic(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a ElectricalConnectionParameterDescriptionDataElementsType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionDataElementsType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionListDataType { 
	std::optional<std::vector<ElectricalConnectionParameterDescriptionDataType>> electricalConnectionParameterDescriptionData;

	ElectricalConnectionParameterDescriptionListDataType()
		:
		electricalConnectionParameterDescriptionData(std::vector<ElectricalConnectionParameterDescriptionDataType>{})
	{}
};
/**
 * Convert a ElectricalConnectionParameterDescriptionListDataType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionListDataType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionListDataSelectorsType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;

	ElectricalConnectionParameterDescriptionListDataSelectorsType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{}),
		measurementId(MeasurementIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a ElectricalConnectionParameterDescriptionListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetDataType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<std::vector<ScaledNumberSetType>> permittedValueSet;

	ElectricalConnectionPermittedValueSetDataType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{}),
		permittedValueSet(std::vector<ScaledNumberSetType>{})
	{}
};
/**
 * Convert a ElectricalConnectionPermittedValueSetDataType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetDataType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetDataElementsType { 
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ScaledNumberSetElementsType> permittedValueSet;

	ElectricalConnectionPermittedValueSetDataElementsType()
		:
		electricalConnectionId(ElementTagType{}),
		parameterId(ElementTagType{}),
		permittedValueSet(ScaledNumberSetElementsType{})
	{}
};
/**
 * Convert a ElectricalConnectionPermittedValueSetDataElementsType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetDataElementsType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetListDataType { 
	std::optional<std::vector<ElectricalConnectionPermittedValueSetDataType>> electricalConnectionPermittedValueSetData;

	ElectricalConnectionPermittedValueSetListDataType()
		:
		electricalConnectionPermittedValueSetData(std::vector<ElectricalConnectionPermittedValueSetDataType>{})
	{}
};
/**
 * Convert a ElectricalConnectionPermittedValueSetListDataType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetListDataType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetListDataSelectorsType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;

	ElectricalConnectionPermittedValueSetListDataSelectorsType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{})
	{}
};
/**
 * Convert a ElectricalConnectionPermittedValueSetListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicDataType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<ElectricalConnectionCharacteristicIdType> characteristicId;
	std::optional<ElectricalConnectionCharacteristicContextType> characteristicContext;
	std::optional<ElectricalConnectionCharacteristicTypeType> characteristicType;
	std::optional<ScaledNumberType> value;
	std::optional<UnitOfMeasurementType> unit;

	ElectricalConnectionCharacteristicDataType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{}),
		characteristicId(ElectricalConnectionCharacteristicIdType{}),
		characteristicContext(ElectricalConnectionCharacteristicContextType{}),
		characteristicType(ElectricalConnectionCharacteristicTypeType{}),
		value(ScaledNumberType{}),
		unit(UnitOfMeasurementType{})
	{}
};
/**
 * Convert a ElectricalConnectionCharacteristicDataType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicDataType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicDataElementsType { 
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ElementTagType> characteristicId;
	std::optional<ElementTagType> characteristicContext;
	std::optional<ElementTagType> characteristicType;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ElementTagType> unit;

	ElectricalConnectionCharacteristicDataElementsType()
		:
		electricalConnectionId(ElementTagType{}),
		parameterId(ElementTagType{}),
		characteristicId(ElementTagType{}),
		characteristicContext(ElementTagType{}),
		characteristicType(ElementTagType{}),
		value(ScaledNumberElementsType{}),
		unit(ElementTagType{})
	{}
};
/**
 * Convert a ElectricalConnectionCharacteristicDataElementsType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicDataElementsType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicListDataType { 
	std::optional<std::vector<ElectricalConnectionCharacteristicDataType>> electricalConnectionCharacteristicData;

	ElectricalConnectionCharacteristicListDataType()
		:
		electricalConnectionCharacteristicData(std::vector<ElectricalConnectionCharacteristicDataType>{})
	{}
};
/**
 * Convert a ElectricalConnectionCharacteristicListDataType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicListDataType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicListDataSelectorsType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<ElectricalConnectionCharacteristicIdType> characteristicId;
	std::optional<ElectricalConnectionCharacteristicContextType> characteristicContext;
	std::optional<ElectricalConnectionCharacteristicTypeType> characteristicType;

	ElectricalConnectionCharacteristicListDataSelectorsType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		parameterId(ElectricalConnectionParameterIdType{}),
		characteristicId(ElectricalConnectionCharacteristicIdType{}),
		characteristicContext(ElectricalConnectionCharacteristicContextType{}),
		characteristicType(ElectricalConnectionCharacteristicTypeType{})
	{}
};
/**
 * Convert a ElectricalConnectionCharacteristicListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionStateDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateDataType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<EnergyModeType> currentEnergyMode;
	std::optional<std::string> consumptionTime;
	std::optional<std::string> productionTime;
	std::optional<std::string> totalConsumptionTime;
	std::optional<std::string> totalProductionTime;

	ElectricalConnectionStateDataType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		currentEnergyMode(EnergyModeType{}),
		consumptionTime(std::string{}),
		productionTime(std::string{}),
		totalConsumptionTime(std::string{}),
		totalProductionTime(std::string{})
	{}
};
/**
 * Convert a ElectricalConnectionStateDataType to its JSON representation
 * @param src The ElectricalConnectionStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateDataType &dst);

/**
 * Datatype ElectricalConnectionStateDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateDataElementsType { 
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> currentEnergyMode;
	std::optional<ElementTagType> consumptionTime;
	std::optional<ElementTagType> productionTime;
	std::optional<ElementTagType> totalConsumptionTime;
	std::optional<ElementTagType> totalProductionTime;

	ElectricalConnectionStateDataElementsType()
		:
		electricalConnectionId(ElementTagType{}),
		timestamp(ElementTagType{}),
		currentEnergyMode(ElementTagType{}),
		consumptionTime(ElementTagType{}),
		productionTime(ElementTagType{}),
		totalConsumptionTime(ElementTagType{}),
		totalProductionTime(ElementTagType{})
	{}
};
/**
 * Convert a ElectricalConnectionStateDataElementsType to its JSON representation
 * @param src The ElectricalConnectionStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateDataElementsType &dst);

/**
 * Datatype ElectricalConnectionStateListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateListDataType { 
	std::optional<std::vector<ElectricalConnectionStateDataType>> electricalConnectionStateData;

	ElectricalConnectionStateListDataType()
		:
		electricalConnectionStateData(std::vector<ElectricalConnectionStateDataType>{})
	{}
};
/**
 * Convert a ElectricalConnectionStateListDataType to its JSON representation
 * @param src The ElectricalConnectionStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateListDataType &dst);

/**
 * Datatype ElectricalConnectionStateListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateListDataSelectorsType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;

	ElectricalConnectionStateListDataSelectorsType()
		:
		electricalConnectionId(ElectricalConnectionIdType{})
	{}
};
/**
 * Convert a ElectricalConnectionStateListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionDescriptionDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionDataType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionVoltageTypeType> powerSupplyType;
	std::optional<uint32_t> acConnectedPhases;
	std::optional<std::string> acRmsPeriodDuration;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	ElectricalConnectionDescriptionDataType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		powerSupplyType(ElectricalConnectionVoltageTypeType{}),
		acConnectedPhases(uint32_t{}),
		acRmsPeriodDuration(std::string{}),
		positiveEnergyDirection(EnergyDirectionType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a ElectricalConnectionDescriptionDataType to its JSON representation
 * @param src The ElectricalConnectionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionDataType &dst);

/**
 * Datatype ElectricalConnectionDescriptionDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionDataElementsType { 
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> powerSupplyType;
	std::optional<ElementTagType> acConnectedPhases;
	std::optional<ElementTagType> acRmsPeriodDuration;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	ElectricalConnectionDescriptionDataElementsType()
		:
		electricalConnectionId(ElementTagType{}),
		powerSupplyType(ElementTagType{}),
		acConnectedPhases(ElementTagType{}),
		acRmsPeriodDuration(ElementTagType{}),
		positiveEnergyDirection(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a ElectricalConnectionDescriptionDataElementsType to its JSON representation
 * @param src The ElectricalConnectionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionDataElementsType &dst);

/**
 * Datatype ElectricalConnectionDescriptionListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionListDataType { 
	std::optional<std::vector<ElectricalConnectionDescriptionDataType>> electricalConnectionDescriptionData;

	ElectricalConnectionDescriptionListDataType()
		:
		electricalConnectionDescriptionData(std::vector<ElectricalConnectionDescriptionDataType>{})
	{}
};
/**
 * Convert a ElectricalConnectionDescriptionListDataType to its JSON representation
 * @param src The ElectricalConnectionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionListDataType &dst);

/**
 * Datatype ElectricalConnectionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionListDataSelectorsType { 
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ScopeTypeType> scopeType;

	ElectricalConnectionDescriptionListDataSelectorsType()
		:
		electricalConnectionId(ElectricalConnectionIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a ElectricalConnectionDescriptionListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDataType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> currentOperationModeId;
	std::optional<bool> isOperationModeIdChangeable;
	std::optional<SetpointIdType> currentSetpointId;
	std::optional<bool> isSetpointIdChangeable;
	std::optional<bool> isOverrunActive;

	HvacSystemFunctionDataType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		currentOperationModeId(HvacOperationModeIdType{}),
		isOperationModeIdChangeable(bool{}),
		currentSetpointId(SetpointIdType{}),
		isSetpointIdChangeable(bool{}),
		isOverrunActive(bool{})
	{}
};
/**
 * Convert a HvacSystemFunctionDataType to its JSON representation
 * @param src The HvacSystemFunctionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDataType &dst);

/**
 * Datatype HvacSystemFunctionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDataElementsType { 
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> currentOperationModeId;
	std::optional<ElementTagType> isOperationModeIdChangeable;
	std::optional<ElementTagType> currentSetpointId;
	std::optional<ElementTagType> isSetpointIdChangeable;
	std::optional<ElementTagType> isOverrunActive;

	HvacSystemFunctionDataElementsType()
		:
		systemFunctionId(ElementTagType{}),
		currentOperationModeId(ElementTagType{}),
		isOperationModeIdChangeable(ElementTagType{}),
		currentSetpointId(ElementTagType{}),
		isSetpointIdChangeable(ElementTagType{}),
		isOverrunActive(ElementTagType{})
	{}
};
/**
 * Convert a HvacSystemFunctionDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionListDataType { 
	std::optional<std::vector<HvacSystemFunctionDataType>> hvacSystemFunctionData;

	HvacSystemFunctionListDataType()
		:
		hvacSystemFunctionData(std::vector<HvacSystemFunctionDataType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionListDataType to its JSON representation
 * @param src The HvacSystemFunctionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionListDataType &dst);

/**
 * Datatype HvacSystemFunctionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionListDataSelectorsType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;

	HvacSystemFunctionListDataSelectorsType()
		:
		systemFunctionId(HvacSystemFunctionIdType{})
	{}
};
/**
 * Convert a HvacSystemFunctionListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationDataType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<std::vector<HvacOperationModeIdType>> operationModeId;

	HvacSystemFunctionOperationModeRelationDataType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		operationModeId(std::vector<HvacOperationModeIdType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionOperationModeRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationDataElementsType { 
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> operationModeId;

	HvacSystemFunctionOperationModeRelationDataElementsType()
		:
		systemFunctionId(ElementTagType{}),
		operationModeId(ElementTagType{})
	{}
};
/**
 * Convert a HvacSystemFunctionOperationModeRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationListDataType { 
	std::optional<std::vector<HvacSystemFunctionOperationModeRelationDataType>> hvacSystemFunctionOperationModeRelationData;

	HvacSystemFunctionOperationModeRelationListDataType()
		:
		hvacSystemFunctionOperationModeRelationData(std::vector<HvacSystemFunctionOperationModeRelationDataType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionOperationModeRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationListDataSelectorsType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;

	HvacSystemFunctionOperationModeRelationListDataSelectorsType()
		:
		systemFunctionId(HvacSystemFunctionIdType{})
	{}
};
/**
 * Convert a HvacSystemFunctionOperationModeRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationDataType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> operationModeId;
	std::optional<std::vector<SetpointIdType>> setpointId;

	HvacSystemFunctionSetpointRelationDataType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		operationModeId(HvacOperationModeIdType{}),
		setpointId(std::vector<SetpointIdType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionSetpointRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationDataElementsType { 
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> operationModeId;
	std::optional<ElementTagType> setpointId;

	HvacSystemFunctionSetpointRelationDataElementsType()
		:
		systemFunctionId(ElementTagType{}),
		operationModeId(ElementTagType{}),
		setpointId(ElementTagType{})
	{}
};
/**
 * Convert a HvacSystemFunctionSetpointRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationListDataType { 
	std::optional<std::vector<HvacSystemFunctionSetpointRelationDataType>> hvacSystemFunctionSetpointRelationData;

	HvacSystemFunctionSetpointRelationListDataType()
		:
		hvacSystemFunctionSetpointRelationData(std::vector<HvacSystemFunctionSetpointRelationDataType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionSetpointRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationListDataSelectorsType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> operationModeId;

	HvacSystemFunctionSetpointRelationListDataSelectorsType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		operationModeId(HvacOperationModeIdType{})
	{}
};
/**
 * Convert a HvacSystemFunctionSetpointRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationDataType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<std::vector<PowerSequenceIdType>> sequenceId;

	HvacSystemFunctionPowerSequenceRelationDataType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		sequenceId(std::vector<PowerSequenceIdType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionPowerSequenceRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationDataElementsType { 
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> sequenceId;

	HvacSystemFunctionPowerSequenceRelationDataElementsType()
		:
		systemFunctionId(ElementTagType{}),
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a HvacSystemFunctionPowerSequenceRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationListDataType { 
	std::optional<std::vector<HvacSystemFunctionPowerSequenceRelationDataType>> hvacSystemFunctionPowerSequenceRelationData;

	HvacSystemFunctionPowerSequenceRelationListDataType()
		:
		hvacSystemFunctionPowerSequenceRelationData(std::vector<HvacSystemFunctionPowerSequenceRelationDataType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionPowerSequenceRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationListDataSelectorsType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;

	HvacSystemFunctionPowerSequenceRelationListDataSelectorsType()
		:
		systemFunctionId(HvacSystemFunctionIdType{})
	{}
};
/**
 * Convert a HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionDataType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacSystemFunctionTypeType> systemFunctionType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	HvacSystemFunctionDescriptionDataType()
		:
		systemFunctionId(HvacSystemFunctionIdType{}),
		systemFunctionType(HvacSystemFunctionTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a HvacSystemFunctionDescriptionDataType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionDataType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionDataElementsType { 
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> systemFunctionType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	HvacSystemFunctionDescriptionDataElementsType()
		:
		systemFunctionId(ElementTagType{}),
		systemFunctionType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a HvacSystemFunctionDescriptionDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionListDataType { 
	std::optional<std::vector<HvacSystemFunctionDescriptionDataType>> hvacSystemFunctionDescriptionData;

	HvacSystemFunctionDescriptionListDataType()
		:
		hvacSystemFunctionDescriptionData(std::vector<HvacSystemFunctionDescriptionDataType>{})
	{}
};
/**
 * Convert a HvacSystemFunctionDescriptionListDataType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionListDataType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionListDataSelectorsType { 
	std::optional<HvacSystemFunctionIdType> systemFunctionId;

	HvacSystemFunctionDescriptionListDataSelectorsType()
		:
		systemFunctionId(HvacSystemFunctionIdType{})
	{}
};
/**
 * Convert a HvacSystemFunctionDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionListDataSelectorsType &dst);

/**
 * Datatype HvacOperationModeDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionDataType { 
	std::optional<HvacOperationModeIdType> operationModeId;
	std::optional<HvacOperationModeTypeType> operationModeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	HvacOperationModeDescriptionDataType()
		:
		operationModeId(HvacOperationModeIdType{}),
		operationModeType(HvacOperationModeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a HvacOperationModeDescriptionDataType to its JSON representation
 * @param src The HvacOperationModeDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionDataType &dst);

/**
 * Datatype HvacOperationModeDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionDataElementsType { 
	std::optional<ElementTagType> operationModeId;
	std::optional<ElementTagType> operationModeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	HvacOperationModeDescriptionDataElementsType()
		:
		operationModeId(ElementTagType{}),
		operationModeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a HvacOperationModeDescriptionDataElementsType to its JSON representation
 * @param src The HvacOperationModeDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionDataElementsType &dst);

/**
 * Datatype HvacOperationModeDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionListDataType { 
	std::optional<std::vector<HvacOperationModeDescriptionDataType>> hvacOperationModeDescriptionData;

	HvacOperationModeDescriptionListDataType()
		:
		hvacOperationModeDescriptionData(std::vector<HvacOperationModeDescriptionDataType>{})
	{}
};
/**
 * Convert a HvacOperationModeDescriptionListDataType to its JSON representation
 * @param src The HvacOperationModeDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionListDataType &dst);

/**
 * Datatype HvacOperationModeDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionListDataSelectorsType { 
	std::optional<HvacOperationModeIdType> operationModeId;

	HvacOperationModeDescriptionListDataSelectorsType()
		:
		operationModeId(HvacOperationModeIdType{})
	{}
};
/**
 * Convert a HvacOperationModeDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacOperationModeDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionListDataSelectorsType &dst);

/**
 * Datatype HvacOverrunDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDataType { 
	std::optional<HvacOverrunIdType> overrunId;
	std::optional<HvacOverrunStatusType> overrunStatus;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<bool> isOverrunStatusChangeable;

	HvacOverrunDataType()
		:
		overrunId(HvacOverrunIdType{}),
		overrunStatus(HvacOverrunStatusType{}),
		timeTableId(TimeTableIdType{}),
		isOverrunStatusChangeable(bool{})
	{}
};
/**
 * Convert a HvacOverrunDataType to its JSON representation
 * @param src The HvacOverrunDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDataType &dst);

/**
 * Datatype HvacOverrunDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDataElementsType { 
	std::optional<ElementTagType> overrunId;
	std::optional<ElementTagType> overrunStatus;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> isOverrunStatusChangeable;

	HvacOverrunDataElementsType()
		:
		overrunId(ElementTagType{}),
		overrunStatus(ElementTagType{}),
		timeTableId(ElementTagType{}),
		isOverrunStatusChangeable(ElementTagType{})
	{}
};
/**
 * Convert a HvacOverrunDataElementsType to its JSON representation
 * @param src The HvacOverrunDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDataElementsType &dst);

/**
 * Datatype HvacOverrunListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunListDataType { 
	std::optional<std::vector<HvacOverrunDataType>> hvacOverrunData;

	HvacOverrunListDataType()
		:
		hvacOverrunData(std::vector<HvacOverrunDataType>{})
	{}
};
/**
 * Convert a HvacOverrunListDataType to its JSON representation
 * @param src The HvacOverrunListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunListDataType &dst);

/**
 * Datatype HvacOverrunListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunListDataSelectorsType { 
	std::optional<HvacOverrunIdType> overrunId;

	HvacOverrunListDataSelectorsType()
		:
		overrunId(HvacOverrunIdType{})
	{}
};
/**
 * Convert a HvacOverrunListDataSelectorsType to its JSON representation
 * @param src The HvacOverrunListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunListDataSelectorsType &dst);

/**
 * Datatype HvacOverrunDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionDataType { 
	std::optional<HvacOverrunIdType> overrunId;
	std::optional<HvacOverrunTypeType> overrunType;
	std::optional<std::vector<HvacSystemFunctionIdType>> affectedSystemFunctionId;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	HvacOverrunDescriptionDataType()
		:
		overrunId(HvacOverrunIdType{}),
		overrunType(HvacOverrunTypeType{}),
		affectedSystemFunctionId(std::vector<HvacSystemFunctionIdType>{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a HvacOverrunDescriptionDataType to its JSON representation
 * @param src The HvacOverrunDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionDataType &dst);

/**
 * Datatype HvacOverrunDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionDataElementsType { 
	std::optional<ElementTagType> overrunId;
	std::optional<ElementTagType> overrunType;
	std::optional<ElementTagType> affectedSystemFunctionId;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	HvacOverrunDescriptionDataElementsType()
		:
		overrunId(ElementTagType{}),
		overrunType(ElementTagType{}),
		affectedSystemFunctionId(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a HvacOverrunDescriptionDataElementsType to its JSON representation
 * @param src The HvacOverrunDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionDataElementsType &dst);

/**
 * Datatype HvacOverrunDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionListDataType { 
	std::optional<std::vector<HvacOverrunDescriptionDataType>> hvacOverrunDescriptionData;

	HvacOverrunDescriptionListDataType()
		:
		hvacOverrunDescriptionData(std::vector<HvacOverrunDescriptionDataType>{})
	{}
};
/**
 * Convert a HvacOverrunDescriptionListDataType to its JSON representation
 * @param src The HvacOverrunDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionListDataType &dst);

/**
 * Datatype HvacOverrunDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionListDataSelectorsType { 
	std::optional<HvacOverrunIdType> overrunId;

	HvacOverrunDescriptionListDataSelectorsType()
		:
		overrunId(HvacOverrunIdType{})
	{}
};
/**
 * Convert a HvacOverrunDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacOverrunDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionListDataSelectorsType &dst);

/**
 * Datatype SetpointDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDataType { 
	std::optional<SetpointIdType> setpointId;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> valueMin;
	std::optional<ScaledNumberType> valueMax;
	std::optional<ScaledNumberType> valueToleranceAbsolute;
	std::optional<ScaledNumberType> valueTolerancePercentage;
	std::optional<bool> isSetpointChangeable;
	std::optional<bool> isSetpointActive;
	std::optional<TimePeriodType> timePeriod;

	SetpointDataType()
		:
		setpointId(SetpointIdType{}),
		value(ScaledNumberType{}),
		valueMin(ScaledNumberType{}),
		valueMax(ScaledNumberType{}),
		valueToleranceAbsolute(ScaledNumberType{}),
		valueTolerancePercentage(ScaledNumberType{}),
		isSetpointChangeable(bool{}),
		isSetpointActive(bool{}),
		timePeriod(TimePeriodType{})
	{}
};
/**
 * Convert a SetpointDataType to its JSON representation
 * @param src The SetpointDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDataType &dst);

/**
 * Datatype SetpointDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDataElementsType { 
	std::optional<ElementTagType> setpointId;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberElementsType> valueMin;
	std::optional<ScaledNumberElementsType> valueMax;
	std::optional<ScaledNumberElementsType> valueToleranceAbsolute;
	std::optional<ScaledNumberElementsType> valueTolerancePercentage;
	std::optional<ElementTagType> isSetpointChangeable;
	std::optional<ElementTagType> isSetpointActive;
	std::optional<TimePeriodElementsType> timePeriod;

	SetpointDataElementsType()
		:
		setpointId(ElementTagType{}),
		value(ScaledNumberElementsType{}),
		valueMin(ScaledNumberElementsType{}),
		valueMax(ScaledNumberElementsType{}),
		valueToleranceAbsolute(ScaledNumberElementsType{}),
		valueTolerancePercentage(ScaledNumberElementsType{}),
		isSetpointChangeable(ElementTagType{}),
		isSetpointActive(ElementTagType{}),
		timePeriod(TimePeriodElementsType{})
	{}
};
/**
 * Convert a SetpointDataElementsType to its JSON representation
 * @param src The SetpointDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDataElementsType &dst);

/**
 * Datatype SetpointListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointListDataType { 
	std::optional<std::vector<SetpointDataType>> setpointData;

	SetpointListDataType()
		:
		setpointData(std::vector<SetpointDataType>{})
	{}
};
/**
 * Convert a SetpointListDataType to its JSON representation
 * @param src The SetpointListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointListDataType &dst);

/**
 * Datatype SetpointListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointListDataSelectorsType { 
	std::optional<SetpointIdType> setpointId;

	SetpointListDataSelectorsType()
		:
		setpointId(SetpointIdType{})
	{}
};
/**
 * Convert a SetpointListDataSelectorsType to its JSON representation
 * @param src The SetpointListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointListDataSelectorsType &dst);

/**
 * Datatype SetpointConstraintsDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsDataType { 
	std::optional<SetpointIdType> setpointId;
	std::optional<ScaledNumberType> setpointRangeMin;
	std::optional<ScaledNumberType> setpointRangeMax;
	std::optional<ScaledNumberType> setpointStepSize;

	SetpointConstraintsDataType()
		:
		setpointId(SetpointIdType{}),
		setpointRangeMin(ScaledNumberType{}),
		setpointRangeMax(ScaledNumberType{}),
		setpointStepSize(ScaledNumberType{})
	{}
};
/**
 * Convert a SetpointConstraintsDataType to its JSON representation
 * @param src The SetpointConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsDataType &dst);

/**
 * Datatype SetpointConstraintsDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsDataElementsType { 
	std::optional<ElementTagType> setpointId;
	std::optional<ScaledNumberElementsType> setpointRangeMin;
	std::optional<ScaledNumberElementsType> setpointRangeMax;
	std::optional<ScaledNumberElementsType> setpointStepSize;

	SetpointConstraintsDataElementsType()
		:
		setpointId(ElementTagType{}),
		setpointRangeMin(ScaledNumberElementsType{}),
		setpointRangeMax(ScaledNumberElementsType{}),
		setpointStepSize(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a SetpointConstraintsDataElementsType to its JSON representation
 * @param src The SetpointConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsDataElementsType &dst);

/**
 * Datatype SetpointConstraintsListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsListDataType { 
	std::optional<std::vector<SetpointConstraintsDataType>> setpointConstraintsData;

	SetpointConstraintsListDataType()
		:
		setpointConstraintsData(std::vector<SetpointConstraintsDataType>{})
	{}
};
/**
 * Convert a SetpointConstraintsListDataType to its JSON representation
 * @param src The SetpointConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsListDataType &dst);

/**
 * Datatype SetpointConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsListDataSelectorsType { 
	std::optional<SetpointIdType> setpointId;

	SetpointConstraintsListDataSelectorsType()
		:
		setpointId(SetpointIdType{})
	{}
};
/**
 * Convert a SetpointConstraintsListDataSelectorsType to its JSON representation
 * @param src The SetpointConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsListDataSelectorsType &dst);

/**
 * Datatype SetpointDescriptionDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionDataType { 
	std::optional<SetpointIdType> setpointId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<SetpointTypeType> setpointType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	SetpointDescriptionDataType()
		:
		setpointId(SetpointIdType{}),
		measurementId(MeasurementIdType{}),
		timeTableId(TimeTableIdType{}),
		setpointType(SetpointTypeType{}),
		unit(UnitOfMeasurementType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a SetpointDescriptionDataType to its JSON representation
 * @param src The SetpointDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionDataType &dst);

/**
 * Datatype SetpointDescriptionDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionDataElementsType { 
	std::optional<ElementTagType> setpointId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> setpointType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	SetpointDescriptionDataElementsType()
		:
		setpointId(ElementTagType{}),
		measurementId(ElementTagType{}),
		timeTableId(ElementTagType{}),
		setpointType(ElementTagType{}),
		unit(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a SetpointDescriptionDataElementsType to its JSON representation
 * @param src The SetpointDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionDataElementsType &dst);

/**
 * Datatype SetpointDescriptionListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionListDataType { 
	std::optional<std::vector<SetpointDescriptionDataType>> setpointDescriptionData;

	SetpointDescriptionListDataType()
		:
		setpointDescriptionData(std::vector<SetpointDescriptionDataType>{})
	{}
};
/**
 * Convert a SetpointDescriptionListDataType to its JSON representation
 * @param src The SetpointDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionListDataType &dst);

/**
 * Datatype SetpointDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionListDataSelectorsType { 
	std::optional<SetpointIdType> setpointId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<SetpointTypeType> setpointType;
	std::optional<ScopeTypeType> scopeType;

	SetpointDescriptionListDataSelectorsType()
		:
		setpointId(SetpointIdType{}),
		measurementId(MeasurementIdType{}),
		timeTableId(TimeTableIdType{}),
		setpointType(SetpointTypeType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a SetpointDescriptionListDataSelectorsType to its JSON representation
 * @param src The SetpointDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SetpointDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionListDataSelectorsType &dst);

/**
 * Datatype TimeTableDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDataType { 
	std::optional<TimeTableIdType> timeTableId;
	std::optional<TimeSlotIdType> timeSlotId;
	std::optional<RecurrenceInformationType> recurrenceInformation;
	std::optional<AbsoluteOrRecurringTimeType> startTime;
	std::optional<AbsoluteOrRecurringTimeType> endTime;

	TimeTableDataType()
		:
		timeTableId(TimeTableIdType{}),
		timeSlotId(TimeSlotIdType{}),
		recurrenceInformation(RecurrenceInformationType{}),
		startTime(AbsoluteOrRecurringTimeType{}),
		endTime(AbsoluteOrRecurringTimeType{})
	{}
};
/**
 * Convert a TimeTableDataType to its JSON representation
 * @param src The TimeTableDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDataType &dst);

/**
 * Datatype TimeTableDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDataElementsType { 
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> timeSlotId;
	std::optional<RecurrenceInformationElementsType> recurrenceInformation;
	std::optional<AbsoluteOrRecurringTimeElementsType> startTime;
	std::optional<AbsoluteOrRecurringTimeElementsType> endTime;

	TimeTableDataElementsType()
		:
		timeTableId(ElementTagType{}),
		timeSlotId(ElementTagType{}),
		recurrenceInformation(RecurrenceInformationElementsType{}),
		startTime(AbsoluteOrRecurringTimeElementsType{}),
		endTime(AbsoluteOrRecurringTimeElementsType{})
	{}
};
/**
 * Convert a TimeTableDataElementsType to its JSON representation
 * @param src The TimeTableDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDataElementsType &dst);

/**
 * Datatype TimeTableListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableListDataType { 
	std::optional<std::vector<TimeTableDataType>> timeTableData;

	TimeTableListDataType()
		:
		timeTableData(std::vector<TimeTableDataType>{})
	{}
};
/**
 * Convert a TimeTableListDataType to its JSON representation
 * @param src The TimeTableListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableListDataType &dst);

/**
 * Datatype TimeTableListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableListDataSelectorsType { 
	std::optional<TimeTableIdType> timeTableId;
	std::optional<TimeSlotIdType> timeSlotId;

	TimeTableListDataSelectorsType()
		:
		timeTableId(TimeTableIdType{}),
		timeSlotId(TimeSlotIdType{})
	{}
};
/**
 * Convert a TimeTableListDataSelectorsType to its JSON representation
 * @param src The TimeTableListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableListDataSelectorsType &dst);

/**
 * Datatype TimeTableConstraintsDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsDataType { 
	std::optional<uint32_t> timeTableId;
	std::optional<TimeSlotCountType> slotCountMin;
	std::optional<TimeSlotCountType> slotCountMax;
	std::optional<std::string> slotDurationMin;
	std::optional<std::string> slotDurationMax;
	std::optional<std::string> slotDurationStepSize;
	std::optional<std::string> slotShiftStepSize;
	std::optional<std::string> firstSlotBeginsAt;

	TimeTableConstraintsDataType()
		:
		timeTableId(uint32_t{}),
		slotCountMin(TimeSlotCountType{}),
		slotCountMax(TimeSlotCountType{}),
		slotDurationMin(std::string{}),
		slotDurationMax(std::string{}),
		slotDurationStepSize(std::string{}),
		slotShiftStepSize(std::string{}),
		firstSlotBeginsAt(std::string{})
	{}
};
/**
 * Convert a TimeTableConstraintsDataType to its JSON representation
 * @param src The TimeTableConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsDataType &dst);

/**
 * Datatype TimeTableConstraintsDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsDataElementsType { 
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> slotCountMin;
	std::optional<ElementTagType> slotCountMax;
	std::optional<ElementTagType> slotDurationMin;
	std::optional<ElementTagType> slotDurationMax;
	std::optional<ElementTagType> slotDurationStepSize;
	std::optional<ElementTagType> slotShiftStepSize;
	std::optional<ElementTagType> firstSlotBeginsAt;

	TimeTableConstraintsDataElementsType()
		:
		timeTableId(ElementTagType{}),
		slotCountMin(ElementTagType{}),
		slotCountMax(ElementTagType{}),
		slotDurationMin(ElementTagType{}),
		slotDurationMax(ElementTagType{}),
		slotDurationStepSize(ElementTagType{}),
		slotShiftStepSize(ElementTagType{}),
		firstSlotBeginsAt(ElementTagType{})
	{}
};
/**
 * Convert a TimeTableConstraintsDataElementsType to its JSON representation
 * @param src The TimeTableConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsDataElementsType &dst);

/**
 * Datatype TimeTableConstraintsListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsListDataType { 
	std::optional<std::vector<TimeTableConstraintsDataType>> timeTableConstraintsData;

	TimeTableConstraintsListDataType()
		:
		timeTableConstraintsData(std::vector<TimeTableConstraintsDataType>{})
	{}
};
/**
 * Convert a TimeTableConstraintsListDataType to its JSON representation
 * @param src The TimeTableConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsListDataType &dst);

/**
 * Datatype TimeTableConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsListDataSelectorsType { 
	std::optional<TimeTableIdType> timeTableId;

	TimeTableConstraintsListDataSelectorsType()
		:
		timeTableId(TimeTableIdType{})
	{}
};
/**
 * Convert a TimeTableConstraintsListDataSelectorsType to its JSON representation
 * @param src The TimeTableConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsListDataSelectorsType &dst);

/**
 * Datatype TimeTableDescriptionDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionDataType { 
	std::optional<uint32_t> timeTableId;
	std::optional<bool> timeSlotCountChangeable;
	std::optional<bool> timeSlotTimesChangeable;
	std::optional<TimeSlotTimeModeType> timeSlotTimeMode;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	TimeTableDescriptionDataType()
		:
		timeTableId(uint32_t{}),
		timeSlotCountChangeable(bool{}),
		timeSlotTimesChangeable(bool{}),
		timeSlotTimeMode(TimeSlotTimeModeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a TimeTableDescriptionDataType to its JSON representation
 * @param src The TimeTableDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionDataType &dst);

/**
 * Datatype TimeTableDescriptionDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionDataElementsType { 
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> timeSlotCountChangeable;
	std::optional<ElementTagType> timeSlotTimesChangeable;
	std::optional<ElementTagType> timeSlotTimeMode;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	TimeTableDescriptionDataElementsType()
		:
		timeTableId(ElementTagType{}),
		timeSlotCountChangeable(ElementTagType{}),
		timeSlotTimesChangeable(ElementTagType{}),
		timeSlotTimeMode(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a TimeTableDescriptionDataElementsType to its JSON representation
 * @param src The TimeTableDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionDataElementsType &dst);

/**
 * Datatype TimeTableDescriptionListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionListDataType { 
	std::optional<std::vector<TimeTableDescriptionDataType>> timeTableDescriptionData;

	TimeTableDescriptionListDataType()
		:
		timeTableDescriptionData(std::vector<TimeTableDescriptionDataType>{})
	{}
};
/**
 * Convert a TimeTableDescriptionListDataType to its JSON representation
 * @param src The TimeTableDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionListDataType &dst);

/**
 * Datatype TimeTableDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionListDataSelectorsType { 
	std::optional<TimeTableIdType> timeTableId;

	TimeTableDescriptionListDataSelectorsType()
		:
		timeTableId(TimeTableIdType{})
	{}
};
/**
 * Convert a TimeTableDescriptionListDataSelectorsType to its JSON representation
 * @param src The TimeTableDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionListDataSelectorsType &dst);

/**
 * Datatype TariffDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDataType { 
	std::optional<TariffIdType> tariffId;
	std::optional<std::vector<TierIdType>> activeTierId;

	TariffDataType()
		:
		tariffId(TariffIdType{}),
		activeTierId(std::vector<TierIdType>{})
	{}
};
/**
 * Convert a TariffDataType to its JSON representation
 * @param src The TariffDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDataType &dst);

/**
 * Datatype TierDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDataType { 
	std::optional<TierIdType> tierId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<std::vector<IncentiveIdType>> activeIncentiveId;

	TierDataType()
		:
		tierId(TierIdType{}),
		timePeriod(TimePeriodType{}),
		timeTableId(TimeTableIdType{}),
		activeIncentiveId(std::vector<IncentiveIdType>{})
	{}
};
/**
 * Convert a TierDataType to its JSON representation
 * @param src The TierDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDataType
 * @param src The JSON variant to convert
 * @param dst The TierDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDataType &dst);

/**
 * Datatype TierBoundaryDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDataType { 
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<ScaledNumberType> lowerBoundaryValue;
	std::optional<ScaledNumberType> upperBoundaryValue;

	TierBoundaryDataType()
		:
		boundaryId(TierBoundaryIdType{}),
		timePeriod(TimePeriodType{}),
		timeTableId(TimeTableIdType{}),
		lowerBoundaryValue(ScaledNumberType{}),
		upperBoundaryValue(ScaledNumberType{})
	{}
};
/**
 * Convert a TierBoundaryDataType to its JSON representation
 * @param src The TierBoundaryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDataType &dst);

/**
 * Datatype IncentiveDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDataType { 
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<ScaledNumberType> value;

	IncentiveDataType()
		:
		incentiveId(IncentiveIdType{}),
		valueType(IncentiveValueTypeType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		timePeriod(TimePeriodType{}),
		timeTableId(TimeTableIdType{}),
		value(ScaledNumberType{})
	{}
};
/**
 * Convert a IncentiveDataType to its JSON representation
 * @param src The IncentiveDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDataType &dst);

/**
 * Datatype IncentiveTableTierType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableTierType { 
	std::optional<TierDataType> tier;
	std::optional<std::vector<TierBoundaryDataType>> boundary;
	std::optional<std::vector<IncentiveDataType>> incentive;

	IncentiveTableTierType()
		:
		tier(TierDataType{}),
		boundary(std::vector<TierBoundaryDataType>{}),
		incentive(std::vector<IncentiveDataType>{})
	{}
};
/**
 * Convert a IncentiveTableTierType to its JSON representation
 * @param src The IncentiveTableTierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableTierType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableTierType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableTierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableTierType &dst);

/**
 * Datatype IncentiveTableIncentiveSlotType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableIncentiveSlotType { 
	std::optional<TimeTableDataType> timeInterval;
	std::optional<std::vector<IncentiveTableTierType>> tier;

	IncentiveTableIncentiveSlotType()
		:
		timeInterval(TimeTableDataType{}),
		tier(std::vector<IncentiveTableTierType>{})
	{}
};
/**
 * Convert a IncentiveTableIncentiveSlotType to its JSON representation
 * @param src The IncentiveTableIncentiveSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableIncentiveSlotType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableIncentiveSlotType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableIncentiveSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableIncentiveSlotType &dst);

/**
 * Datatype IncentiveTableType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableType { 
	std::optional<TariffDataType> tariff;
	std::optional<std::vector<IncentiveTableIncentiveSlotType>> incentiveSlot;

	IncentiveTableType()
		:
		tariff(TariffDataType{}),
		incentiveSlot(std::vector<IncentiveTableIncentiveSlotType>{})
	{}
};
/**
 * Convert a IncentiveTableType to its JSON representation
 * @param src The IncentiveTableType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableType &dst);

/**
 * Datatype IncentiveTableDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataType { 
	std::optional<std::vector<IncentiveTableType>> incentiveTable;

	IncentiveTableDataType()
		:
		incentiveTable(std::vector<IncentiveTableType>{})
	{}
};
/**
 * Convert a IncentiveTableDataType to its JSON representation
 * @param src The IncentiveTableDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataType &dst);

/**
 * Datatype TariffDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDataElementsType { 
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> activeTierId;

	TariffDataElementsType()
		:
		tariffId(ElementTagType{}),
		activeTierId(ElementTagType{})
	{}
};
/**
 * Convert a TariffDataElementsType to its JSON representation
 * @param src The TariffDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDataElementsType &dst);

/**
 * Datatype TierDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDataElementsType { 
	std::optional<ElementTagType> tierId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> activeIncentiveId;

	TierDataElementsType()
		:
		tierId(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		timeTableId(ElementTagType{}),
		activeIncentiveId(ElementTagType{})
	{}
};
/**
 * Convert a TierDataElementsType to its JSON representation
 * @param src The TierDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDataElementsType &dst);

/**
 * Datatype TierBoundaryDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDataElementsType { 
	std::optional<ElementTagType> boundaryId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ScaledNumberElementsType> lowerBoundaryValue;
	std::optional<ScaledNumberElementsType> upperBoundaryValue;

	TierBoundaryDataElementsType()
		:
		boundaryId(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		timeTableId(ElementTagType{}),
		lowerBoundaryValue(ScaledNumberElementsType{}),
		upperBoundaryValue(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a TierBoundaryDataElementsType to its JSON representation
 * @param src The TierBoundaryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDataElementsType &dst);

/**
 * Datatype IncentiveDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDataElementsType { 
	std::optional<ElementTagType> incentiveId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> value;

	IncentiveDataElementsType()
		:
		incentiveId(ElementTagType{}),
		valueType(ElementTagType{}),
		timestamp(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		timeTableId(ElementTagType{}),
		value(ElementTagType{})
	{}
};
/**
 * Convert a IncentiveDataElementsType to its JSON representation
 * @param src The IncentiveDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDataElementsType &dst);

/**
 * Datatype IncentiveTableTierElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableTierElementsType { 
	std::optional<TierDataElementsType> tier;
	std::optional<TierBoundaryDataElementsType> boundary;
	std::optional<IncentiveDataElementsType> incentive;

	IncentiveTableTierElementsType()
		:
		tier(TierDataElementsType{}),
		boundary(TierBoundaryDataElementsType{}),
		incentive(IncentiveDataElementsType{})
	{}
};
/**
 * Convert a IncentiveTableTierElementsType to its JSON representation
 * @param src The IncentiveTableTierElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableTierElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableTierElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableTierElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableTierElementsType &dst);

/**
 * Datatype IncentiveTableIncentiveSlotElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableIncentiveSlotElementsType { 
	std::optional<TimeTableDataElementsType> timeInterval;
	std::optional<IncentiveTableTierElementsType> tier;

	IncentiveTableIncentiveSlotElementsType()
		:
		timeInterval(TimeTableDataElementsType{}),
		tier(IncentiveTableTierElementsType{})
	{}
};
/**
 * Convert a IncentiveTableIncentiveSlotElementsType to its JSON representation
 * @param src The IncentiveTableIncentiveSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableIncentiveSlotElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableIncentiveSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableIncentiveSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableIncentiveSlotElementsType &dst);

/**
 * Datatype IncentiveTableElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableElementsType { 
	std::optional<TariffDataElementsType> tariff;
	std::optional<IncentiveTableIncentiveSlotElementsType> incentiveSlot;

	IncentiveTableElementsType()
		:
		tariff(TariffDataElementsType{}),
		incentiveSlot(IncentiveTableIncentiveSlotElementsType{})
	{}
};
/**
 * Convert a IncentiveTableElementsType to its JSON representation
 * @param src The IncentiveTableElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableElementsType &dst);

/**
 * Datatype IncentiveTableDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataElementsType { 
	std::optional<IncentiveTableElementsType> incentiveTable;

	IncentiveTableDataElementsType()
		:
		incentiveTable(IncentiveTableElementsType{})
	{}
};
/**
 * Convert a IncentiveTableDataElementsType to its JSON representation
 * @param src The IncentiveTableDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataElementsType &dst);

/**
 * Datatype TariffListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffListDataSelectorsType { 
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> activeTierId;

	TariffListDataSelectorsType()
		:
		tariffId(TariffIdType{}),
		activeTierId(TierIdType{})
	{}
};
/**
 * Convert a TariffListDataSelectorsType to its JSON representation
 * @param src The TariffListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffListDataSelectorsType &dst);

/**
 * Datatype IncentiveTableDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataSelectorsType { 
	std::optional<TariffListDataSelectorsType> tariff;

	IncentiveTableDataSelectorsType()
		:
		tariff(TariffListDataSelectorsType{})
	{}
};
/**
 * Convert a IncentiveTableDataSelectorsType to its JSON representation
 * @param src The IncentiveTableDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataSelectorsType &dst);

/**
 * Datatype TariffDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionDataType { 
	std::optional<TariffIdType> tariffId;
	std::optional<CommodityIdType> commodityId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<bool> tariffWriteable;
	std::optional<bool> updateRequired;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<bool> slotIdSupport;

	TariffDescriptionDataType()
		:
		tariffId(TariffIdType{}),
		commodityId(CommodityIdType{}),
		measurementId(MeasurementIdType{}),
		tariffWriteable(bool{}),
		updateRequired(bool{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{}),
		slotIdSupport(bool{})
	{}
};
/**
 * Convert a TariffDescriptionDataType to its JSON representation
 * @param src The TariffDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDescriptionDataType &dst);

/**
 * Datatype TierDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionDataType { 
	std::optional<TierIdType> tierId;
	std::optional<TierTypeType> tierType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	TierDescriptionDataType()
		:
		tierId(TierIdType{}),
		tierType(TierTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a TierDescriptionDataType to its JSON representation
 * @param src The TierDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDescriptionDataType &dst);

/**
 * Datatype TierBoundaryDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionDataType { 
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TierBoundaryTypeType> boundaryType;
	std::optional<TierIdType> validForTierId;
	std::optional<TierIdType> switchToTierIdWhenLower;
	std::optional<TierIdType> switchToTierIdWhenHigher;
	std::optional<UnitOfMeasurementType> boundaryUnit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	TierBoundaryDescriptionDataType()
		:
		boundaryId(TierBoundaryIdType{}),
		boundaryType(TierBoundaryTypeType{}),
		validForTierId(TierIdType{}),
		switchToTierIdWhenLower(TierIdType{}),
		switchToTierIdWhenHigher(TierIdType{}),
		boundaryUnit(UnitOfMeasurementType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a TierBoundaryDescriptionDataType to its JSON representation
 * @param src The TierBoundaryDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionDataType &dst);

/**
 * Datatype IncentiveDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionDataType { 
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveTypeType> incentiveType;
	std::optional<IncentivePriorityType> incentivePriority;
	std::optional<CurrencyType> currency;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	IncentiveDescriptionDataType()
		:
		incentiveId(IncentiveIdType{}),
		incentiveType(IncentiveTypeType{}),
		incentivePriority(IncentivePriorityType{}),
		currency(CurrencyType{}),
		unit(UnitOfMeasurementType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a IncentiveDescriptionDataType to its JSON representation
 * @param src The IncentiveDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionDataType &dst);

/**
 * Datatype IncentiveTableDescriptionTierType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionTierType { 
	std::optional<TierDescriptionDataType> tierDescription;
	std::optional<std::vector<TierBoundaryDescriptionDataType>> boundaryDescription;
	std::optional<std::vector<IncentiveDescriptionDataType>> incentiveDescription;

	IncentiveTableDescriptionTierType()
		:
		tierDescription(TierDescriptionDataType{}),
		boundaryDescription(std::vector<TierBoundaryDescriptionDataType>{}),
		incentiveDescription(std::vector<IncentiveDescriptionDataType>{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionTierType to its JSON representation
 * @param src The IncentiveTableDescriptionTierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionTierType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionTierType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionTierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionTierType &dst);

/**
 * Datatype IncentiveTableDescriptionType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionType { 
	std::optional<TariffDescriptionDataType> tariffDescription;
	std::optional<std::vector<IncentiveTableDescriptionTierType>> tier;

	IncentiveTableDescriptionType()
		:
		tariffDescription(TariffDescriptionDataType{}),
		tier(std::vector<IncentiveTableDescriptionTierType>{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionType to its JSON representation
 * @param src The IncentiveTableDescriptionType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionType &dst);

/**
 * Datatype IncentiveTableDescriptionDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataType { 
	std::optional<std::vector<IncentiveTableDescriptionType>> incentiveTableDescription;

	IncentiveTableDescriptionDataType()
		:
		incentiveTableDescription(std::vector<IncentiveTableDescriptionType>{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionDataType to its JSON representation
 * @param src The IncentiveTableDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataType &dst);

/**
 * Datatype TariffDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionDataElementsType { 
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> commodityId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> tariffWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> slotIdSupport;

	TariffDescriptionDataElementsType()
		:
		tariffId(ElementTagType{}),
		commodityId(ElementTagType{}),
		measurementId(ElementTagType{}),
		tariffWriteable(ElementTagType{}),
		updateRequired(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{}),
		slotIdSupport(ElementTagType{})
	{}
};
/**
 * Convert a TariffDescriptionDataElementsType to its JSON representation
 * @param src The TariffDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDescriptionDataElementsType &dst);

/**
 * Datatype TierDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionDataElementsType { 
	std::optional<ElementTagType> tierId;
	std::optional<ElementTagType> tierType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	TierDescriptionDataElementsType()
		:
		tierId(ElementTagType{}),
		tierType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a TierDescriptionDataElementsType to its JSON representation
 * @param src The TierDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDescriptionDataElementsType &dst);

/**
 * Datatype TierBoundaryDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionDataElementsType { 
	std::optional<ElementTagType> boundaryId;
	std::optional<ElementTagType> boundaryType;
	std::optional<ElementTagType> validForTierId;
	std::optional<ElementTagType> switchToTierIdWhenLower;
	std::optional<ElementTagType> switchToTierIdWhenHigher;
	std::optional<ElementTagType> boundaryUnit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	TierBoundaryDescriptionDataElementsType()
		:
		boundaryId(ElementTagType{}),
		boundaryType(ElementTagType{}),
		validForTierId(ElementTagType{}),
		switchToTierIdWhenLower(ElementTagType{}),
		switchToTierIdWhenHigher(ElementTagType{}),
		boundaryUnit(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a TierBoundaryDescriptionDataElementsType to its JSON representation
 * @param src The TierBoundaryDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionDataElementsType &dst);

/**
 * Datatype IncentiveDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionDataElementsType { 
	std::optional<ElementTagType> incentiveId;
	std::optional<ElementTagType> incentiveType;
	std::optional<ElementTagType> incentivePriority;
	std::optional<ElementTagType> currency;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	IncentiveDescriptionDataElementsType()
		:
		incentiveId(ElementTagType{}),
		incentiveType(ElementTagType{}),
		incentivePriority(ElementTagType{}),
		currency(ElementTagType{}),
		unit(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a IncentiveDescriptionDataElementsType to its JSON representation
 * @param src The IncentiveDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionDataElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionTierElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionTierElementsType { 
	std::optional<TierDescriptionDataElementsType> tierDescription;
	std::optional<TierBoundaryDescriptionDataElementsType> boundaryDescription;
	std::optional<IncentiveDescriptionDataElementsType> incentiveDescription;

	IncentiveTableDescriptionTierElementsType()
		:
		tierDescription(TierDescriptionDataElementsType{}),
		boundaryDescription(TierBoundaryDescriptionDataElementsType{}),
		incentiveDescription(IncentiveDescriptionDataElementsType{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionTierElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionTierElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionTierElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionTierElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionTierElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionTierElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionElementsType { 
	std::optional<TariffDescriptionDataElementsType> tariffDescription;
	std::optional<IncentiveTableDescriptionTierElementsType> tier;

	IncentiveTableDescriptionElementsType()
		:
		tariffDescription(TariffDescriptionDataElementsType{}),
		tier(IncentiveTableDescriptionTierElementsType{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataElementsType { 
	std::optional<IncentiveTableDescriptionElementsType> incentiveTableDescription;

	IncentiveTableDescriptionDataElementsType()
		:
		incentiveTableDescription(IncentiveTableDescriptionElementsType{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionDataElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataElementsType &dst);

/**
 * Datatype TariffDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionListDataSelectorsType { 
	std::optional<TariffIdType> tariffId;
	std::optional<CommodityIdType> commodityId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;

	TariffDescriptionListDataSelectorsType()
		:
		tariffId(TariffIdType{}),
		commodityId(CommodityIdType{}),
		measurementId(MeasurementIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a TariffDescriptionListDataSelectorsType to its JSON representation
 * @param src The TariffDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDescriptionListDataSelectorsType &dst);

/**
 * Datatype IncentiveTableDescriptionDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataSelectorsType { 
	std::optional<TariffDescriptionListDataSelectorsType> tariffDescription;

	IncentiveTableDescriptionDataSelectorsType()
		:
		tariffDescription(TariffDescriptionListDataSelectorsType{})
	{}
};
/**
 * Convert a IncentiveTableDescriptionDataSelectorsType to its JSON representation
 * @param src The IncentiveTableDescriptionDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataSelectorsType &dst);

/**
 * Datatype TariffOverallConstraintsDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffOverallConstraintsDataType { 
	std::optional<TariffCountType> maxTariffCount;
	std::optional<TierBoundaryCountType> maxBoundaryCount;
	std::optional<TierCountType> maxTierCount;
	std::optional<IncentiveCountType> maxIncentiveCount;
	std::optional<TierBoundaryCountType> maxBoundariesPerTariff;
	std::optional<TierCountType> maxTiersPerTariff;
	std::optional<TierBoundaryCountType> maxBoundariesPerTier;
	std::optional<IncentiveCountType> maxIncentivesPerTier;

	TariffOverallConstraintsDataType()
		:
		maxTariffCount(TariffCountType{}),
		maxBoundaryCount(TierBoundaryCountType{}),
		maxTierCount(TierCountType{}),
		maxIncentiveCount(IncentiveCountType{}),
		maxBoundariesPerTariff(TierBoundaryCountType{}),
		maxTiersPerTariff(TierCountType{}),
		maxBoundariesPerTier(TierBoundaryCountType{}),
		maxIncentivesPerTier(IncentiveCountType{})
	{}
};
/**
 * Convert a TariffOverallConstraintsDataType to its JSON representation
 * @param src The TariffOverallConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffOverallConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffOverallConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TariffOverallConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffOverallConstraintsDataType &dst);

/**
 * Datatype IncentiveTableConstraintsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsType { 
	std::optional<TariffDataType> tariff;
	std::optional<TariffOverallConstraintsDataType> tariffConstraints;
	std::optional<TimeTableConstraintsDataType> incentiveSlotConstraints;

	IncentiveTableConstraintsType()
		:
		tariff(TariffDataType{}),
		tariffConstraints(TariffOverallConstraintsDataType{}),
		incentiveSlotConstraints(TimeTableConstraintsDataType{})
	{}
};
/**
 * Convert a IncentiveTableConstraintsType to its JSON representation
 * @param src The IncentiveTableConstraintsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataType { 
	std::optional<std::vector<IncentiveTableConstraintsType>> incentiveTableConstraints;

	IncentiveTableConstraintsDataType()
		:
		incentiveTableConstraints(std::vector<IncentiveTableConstraintsType>{})
	{}
};
/**
 * Convert a IncentiveTableConstraintsDataType to its JSON representation
 * @param src The IncentiveTableConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataType &dst);

/**
 * Datatype TariffOverallConstraintsDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffOverallConstraintsDataElementsType { 
	std::optional<ElementTagType> maxTariffCount;
	std::optional<ElementTagType> maxBoundaryCount;
	std::optional<ElementTagType> maxTierCount;
	std::optional<ElementTagType> maxIncentiveCount;
	std::optional<ElementTagType> maxBoundariesPerTariff;
	std::optional<ElementTagType> maxTiersPerTariff;
	std::optional<ElementTagType> maxBoundariesPerTier;
	std::optional<ElementTagType> maxIncentivesPerTier;

	TariffOverallConstraintsDataElementsType()
		:
		maxTariffCount(ElementTagType{}),
		maxBoundaryCount(ElementTagType{}),
		maxTierCount(ElementTagType{}),
		maxIncentiveCount(ElementTagType{}),
		maxBoundariesPerTariff(ElementTagType{}),
		maxTiersPerTariff(ElementTagType{}),
		maxBoundariesPerTier(ElementTagType{}),
		maxIncentivesPerTier(ElementTagType{})
	{}
};
/**
 * Convert a TariffOverallConstraintsDataElementsType to its JSON representation
 * @param src The TariffOverallConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffOverallConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffOverallConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffOverallConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffOverallConstraintsDataElementsType &dst);

/**
 * Datatype IncentiveTableConstraintsElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsElementsType { 
	std::optional<TariffDataElementsType> tariff;
	std::optional<TariffOverallConstraintsDataElementsType> tariffConstraints;
	std::optional<TimeTableConstraintsDataElementsType> incentiveSlotConstraints;

	IncentiveTableConstraintsElementsType()
		:
		tariff(TariffDataElementsType{}),
		tariffConstraints(TariffOverallConstraintsDataElementsType{}),
		incentiveSlotConstraints(TimeTableConstraintsDataElementsType{})
	{}
};
/**
 * Convert a IncentiveTableConstraintsElementsType to its JSON representation
 * @param src The IncentiveTableConstraintsElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsElementsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataElementsType { 
	std::optional<IncentiveTableConstraintsElementsType> incentiveTableConstraints;

	IncentiveTableConstraintsDataElementsType()
		:
		incentiveTableConstraints(IncentiveTableConstraintsElementsType{})
	{}
};
/**
 * Convert a IncentiveTableConstraintsDataElementsType to its JSON representation
 * @param src The IncentiveTableConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataElementsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataSelectorsType { 
	std::optional<TariffListDataSelectorsType> tariff;

	IncentiveTableConstraintsDataSelectorsType()
		:
		tariff(TariffListDataSelectorsType{})
	{}
};
/**
 * Convert a IncentiveTableConstraintsDataSelectorsType to its JSON representation
 * @param src The IncentiveTableConstraintsDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataSelectorsType &dst);

/**
 * Datatype TariffListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffListDataType { 
	std::optional<std::vector<TariffDataType>> tariffData;

	TariffListDataType()
		:
		tariffData(std::vector<TariffDataType>{})
	{}
};
/**
 * Convert a TariffListDataType to its JSON representation
 * @param src The TariffListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffListDataType &dst);

/**
 * Datatype TariffTierRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationDataType { 
	std::optional<TariffIdType> tariffId;
	std::optional<std::vector<TierIdType>> tierId;

	TariffTierRelationDataType()
		:
		tariffId(TariffIdType{}),
		tierId(std::vector<TierIdType>{})
	{}
};
/**
 * Convert a TariffTierRelationDataType to its JSON representation
 * @param src The TariffTierRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffTierRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffTierRelationDataType &dst);

/**
 * Datatype TariffTierRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationDataElementsType { 
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> tierId;

	TariffTierRelationDataElementsType()
		:
		tariffId(ElementTagType{}),
		tierId(ElementTagType{})
	{}
};
/**
 * Convert a TariffTierRelationDataElementsType to its JSON representation
 * @param src The TariffTierRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffTierRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffTierRelationDataElementsType &dst);

/**
 * Datatype TariffTierRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationListDataType { 
	std::optional<std::vector<TariffTierRelationDataType>> tariffTierRelationData;

	TariffTierRelationListDataType()
		:
		tariffTierRelationData(std::vector<TariffTierRelationDataType>{})
	{}
};
/**
 * Convert a TariffTierRelationListDataType to its JSON representation
 * @param src The TariffTierRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffTierRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffTierRelationListDataType &dst);

/**
 * Datatype TariffTierRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationListDataSelectorsType { 
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> tierId;

	TariffTierRelationListDataSelectorsType()
		:
		tariffId(TariffIdType{}),
		tierId(TierIdType{})
	{}
};
/**
 * Convert a TariffTierRelationListDataSelectorsType to its JSON representation
 * @param src The TariffTierRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffTierRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffTierRelationListDataSelectorsType &dst);

/**
 * Datatype TariffBoundaryRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationDataType { 
	std::optional<TariffIdType> tariffId;
	std::optional<std::vector<TierBoundaryIdType>> boundaryId;

	TariffBoundaryRelationDataType()
		:
		tariffId(TariffIdType{}),
		boundaryId(std::vector<TierBoundaryIdType>{})
	{}
};
/**
 * Convert a TariffBoundaryRelationDataType to its JSON representation
 * @param src The TariffBoundaryRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationDataType &dst);

/**
 * Datatype TariffBoundaryRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationDataElementsType { 
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> boundaryId;

	TariffBoundaryRelationDataElementsType()
		:
		tariffId(ElementTagType{}),
		boundaryId(ElementTagType{})
	{}
};
/**
 * Convert a TariffBoundaryRelationDataElementsType to its JSON representation
 * @param src The TariffBoundaryRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationDataElementsType &dst);

/**
 * Datatype TariffBoundaryRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationListDataType { 
	std::optional<std::vector<TariffBoundaryRelationDataType>> tariffBoundaryRelationData;

	TariffBoundaryRelationListDataType()
		:
		tariffBoundaryRelationData(std::vector<TariffBoundaryRelationDataType>{})
	{}
};
/**
 * Convert a TariffBoundaryRelationListDataType to its JSON representation
 * @param src The TariffBoundaryRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationListDataType &dst);

/**
 * Datatype TariffBoundaryRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationListDataSelectorsType { 
	std::optional<TariffIdType> tariffId;
	std::optional<TierBoundaryIdType> boundaryId;

	TariffBoundaryRelationListDataSelectorsType()
		:
		tariffId(TariffIdType{}),
		boundaryId(TierBoundaryIdType{})
	{}
};
/**
 * Convert a TariffBoundaryRelationListDataSelectorsType to its JSON representation
 * @param src The TariffBoundaryRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationListDataSelectorsType &dst);

/**
 * Datatype TariffDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionListDataType { 
	std::optional<std::vector<TariffDescriptionDataType>> tariffDescriptionData;

	TariffDescriptionListDataType()
		:
		tariffDescriptionData(std::vector<TariffDescriptionDataType>{})
	{}
};
/**
 * Convert a TariffDescriptionListDataType to its JSON representation
 * @param src The TariffDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TariffDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TariffDescriptionListDataType &dst);

/**
 * Datatype TierBoundaryListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryListDataType { 
	std::optional<std::vector<TierBoundaryDataType>> tierBoundaryData;

	TierBoundaryListDataType()
		:
		tierBoundaryData(std::vector<TierBoundaryDataType>{})
	{}
};
/**
 * Convert a TierBoundaryListDataType to its JSON representation
 * @param src The TierBoundaryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryListDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryListDataType &dst);

/**
 * Datatype TierBoundaryListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryListDataSelectorsType { 
	std::optional<TierBoundaryIdType> boundaryId;

	TierBoundaryListDataSelectorsType()
		:
		boundaryId(TierBoundaryIdType{})
	{}
};
/**
 * Convert a TierBoundaryListDataSelectorsType to its JSON representation
 * @param src The TierBoundaryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryListDataSelectorsType &dst);

/**
 * Datatype TierBoundaryDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionListDataType { 
	std::optional<std::vector<TierBoundaryDescriptionDataType>> tierBoundaryDescriptionData;

	TierBoundaryDescriptionListDataType()
		:
		tierBoundaryDescriptionData(std::vector<TierBoundaryDescriptionDataType>{})
	{}
};
/**
 * Convert a TierBoundaryDescriptionListDataType to its JSON representation
 * @param src The TierBoundaryDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionListDataType &dst);

/**
 * Datatype TierBoundaryDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionListDataSelectorsType { 
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TierBoundaryTypeType> boundaryType;

	TierBoundaryDescriptionListDataSelectorsType()
		:
		boundaryId(TierBoundaryIdType{}),
		boundaryType(TierBoundaryTypeType{})
	{}
};
/**
 * Convert a TierBoundaryDescriptionListDataSelectorsType to its JSON representation
 * @param src The TierBoundaryDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionListDataSelectorsType &dst);

/**
 * Datatype CommodityDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityDataType { 
	std::optional<CommodityIdType> commodityId;
	std::optional<CommodityTypeType> commodityType;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	CommodityDataType()
		:
		commodityId(CommodityIdType{}),
		commodityType(CommodityTypeType{}),
		positiveEnergyDirection(EnergyDirectionType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a CommodityDataType to its JSON representation
 * @param src The CommodityDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a CommodityDataType
 * @param src The JSON variant to convert
 * @param dst The CommodityDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, CommodityDataType &dst);

/**
 * Datatype CommodityDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityDataElementsType { 
	std::optional<ElementTagType> commodityId;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	CommodityDataElementsType()
		:
		commodityId(ElementTagType{}),
		commodityType(ElementTagType{}),
		positiveEnergyDirection(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a CommodityDataElementsType to its JSON representation
 * @param src The CommodityDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a CommodityDataElementsType
 * @param src The JSON variant to convert
 * @param dst The CommodityDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, CommodityDataElementsType &dst);

/**
 * Datatype CommodityListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityListDataType { 
	std::optional<std::vector<CommodityDataType>> commodityData;

	CommodityListDataType()
		:
		commodityData(std::vector<CommodityDataType>{})
	{}
};
/**
 * Convert a CommodityListDataType to its JSON representation
 * @param src The CommodityListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a CommodityListDataType
 * @param src The JSON variant to convert
 * @param dst The CommodityListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, CommodityListDataType &dst);

/**
 * Datatype CommodityListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityListDataSelectorsType { 
	std::optional<CommodityIdType> commodityId;
	std::optional<CommodityTypeType> commodityType;

	CommodityListDataSelectorsType()
		:
		commodityId(CommodityIdType{}),
		commodityType(CommodityTypeType{})
	{}
};
/**
 * Convert a CommodityListDataSelectorsType to its JSON representation
 * @param src The CommodityListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a CommodityListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The CommodityListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, CommodityListDataSelectorsType &dst);

/**
 * Datatype TierListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierListDataType { 
	std::optional<std::vector<TierDataType>> tierData;

	TierListDataType()
		:
		tierData(std::vector<TierDataType>{})
	{}
};
/**
 * Convert a TierListDataType to its JSON representation
 * @param src The TierListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierListDataType
 * @param src The JSON variant to convert
 * @param dst The TierListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierListDataType &dst);

/**
 * Datatype TierListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierListDataSelectorsType { 
	std::optional<TierIdType> tierId;
	std::optional<IncentiveIdType> activeIncentiveId;

	TierListDataSelectorsType()
		:
		tierId(TierIdType{}),
		activeIncentiveId(IncentiveIdType{})
	{}
};
/**
 * Convert a TierListDataSelectorsType to its JSON representation
 * @param src The TierListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierListDataSelectorsType &dst);

/**
 * Datatype TierIncentiveRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationDataType { 
	std::optional<TierIdType> tierId;
	std::optional<std::vector<IncentiveIdType>> incentiveId;

	TierIncentiveRelationDataType()
		:
		tierId(TierIdType{}),
		incentiveId(std::vector<IncentiveIdType>{})
	{}
};
/**
 * Convert a TierIncentiveRelationDataType to its JSON representation
 * @param src The TierIncentiveRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationDataType &dst);

/**
 * Datatype TierIncentiveRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationDataElementsType { 
	std::optional<ElementTagType> tierId;
	std::optional<ElementTagType> incentiveId;

	TierIncentiveRelationDataElementsType()
		:
		tierId(ElementTagType{}),
		incentiveId(ElementTagType{})
	{}
};
/**
 * Convert a TierIncentiveRelationDataElementsType to its JSON representation
 * @param src The TierIncentiveRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationDataElementsType &dst);

/**
 * Datatype TierIncentiveRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationListDataType { 
	std::optional<std::vector<TierIncentiveRelationDataType>> tierIncentiveRelationData;

	TierIncentiveRelationListDataType()
		:
		tierIncentiveRelationData(std::vector<TierIncentiveRelationDataType>{})
	{}
};
/**
 * Convert a TierIncentiveRelationListDataType to its JSON representation
 * @param src The TierIncentiveRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationListDataType &dst);

/**
 * Datatype TierIncentiveRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationListDataSelectorsType { 
	std::optional<TierIdType> tierId;
	std::optional<IncentiveIdType> incentiveId;

	TierIncentiveRelationListDataSelectorsType()
		:
		tierId(TierIdType{}),
		incentiveId(IncentiveIdType{})
	{}
};
/**
 * Convert a TierIncentiveRelationListDataSelectorsType to its JSON representation
 * @param src The TierIncentiveRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationListDataSelectorsType &dst);

/**
 * Datatype TierDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionListDataType { 
	std::optional<std::vector<TierDescriptionDataType>> tierDescriptionData;

	TierDescriptionListDataType()
		:
		tierDescriptionData(std::vector<TierDescriptionDataType>{})
	{}
};
/**
 * Convert a TierDescriptionListDataType to its JSON representation
 * @param src The TierDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDescriptionListDataType &dst);

/**
 * Datatype TierDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionListDataSelectorsType { 
	std::optional<TierIdType> tierId;
	std::optional<TierTypeType> tierType;

	TierDescriptionListDataSelectorsType()
		:
		tierId(TierIdType{}),
		tierType(TierTypeType{})
	{}
};
/**
 * Convert a TierDescriptionListDataSelectorsType to its JSON representation
 * @param src The TierDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TierDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TierDescriptionListDataSelectorsType &dst);

/**
 * Datatype IncentiveListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveListDataType { 
	std::optional<std::vector<IncentiveDataType>> incentiveData;

	IncentiveListDataType()
		:
		incentiveData(std::vector<IncentiveDataType>{})
	{}
};
/**
 * Convert a IncentiveListDataType to its JSON representation
 * @param src The IncentiveListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveListDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveListDataType &dst);

/**
 * Datatype IncentiveListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveListDataSelectorsType { 
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;

	IncentiveListDataSelectorsType()
		:
		incentiveId(IncentiveIdType{}),
		valueType(IncentiveValueTypeType{}),
		timestampInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a IncentiveListDataSelectorsType to its JSON representation
 * @param src The IncentiveListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveListDataSelectorsType &dst);

/**
 * Datatype IncentiveDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionListDataType { 
	std::optional<std::vector<IncentiveDescriptionDataType>> incentiveDescriptionData;

	IncentiveDescriptionListDataType()
		:
		incentiveDescriptionData(std::vector<IncentiveDescriptionDataType>{})
	{}
};
/**
 * Convert a IncentiveDescriptionListDataType to its JSON representation
 * @param src The IncentiveDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionListDataType &dst);

/**
 * Datatype IncentiveDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionListDataSelectorsType { 
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveTypeType> incentiveType;

	IncentiveDescriptionListDataSelectorsType()
		:
		incentiveId(IncentiveIdType{}),
		incentiveType(IncentiveTypeType{})
	{}
};
/**
 * Convert a IncentiveDescriptionListDataSelectorsType to its JSON representation
 * @param src The IncentiveDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionListDataSelectorsType &dst);

/**
 * Datatype LoadControlNodeDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlNodeDataType { 
	std::optional<bool> isNodeRemoteControllable;

	LoadControlNodeDataType()
		:
		isNodeRemoteControllable(bool{})
	{}
};
/**
 * Convert a LoadControlNodeDataType to its JSON representation
 * @param src The LoadControlNodeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlNodeDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlNodeDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlNodeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlNodeDataType &dst);

/**
 * Datatype LoadControlNodeDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlNodeDataElementsType { 
	std::optional<ElementTagType> isNodeRemoteControllable;

	LoadControlNodeDataElementsType()
		:
		isNodeRemoteControllable(ElementTagType{})
	{}
};
/**
 * Convert a LoadControlNodeDataElementsType to its JSON representation
 * @param src The LoadControlNodeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlNodeDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlNodeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlNodeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlNodeDataElementsType &dst);

/**
 * Datatype LoadControlEventDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<LoadControlEventIdType> eventId;
	std::optional<LoadControlEventActionType> eventActionConsume;
	std::optional<LoadControlEventActionType> eventActionProduce;
	std::optional<TimePeriodType> timePeriod;

	LoadControlEventDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		eventId(LoadControlEventIdType{}),
		eventActionConsume(LoadControlEventActionType{}),
		eventActionProduce(LoadControlEventActionType{}),
		timePeriod(TimePeriodType{})
	{}
};
/**
 * Convert a LoadControlEventDataType to its JSON representation
 * @param src The LoadControlEventDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlEventDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventDataType &dst);

/**
 * Datatype LoadControlEventDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventId;
	std::optional<ElementTagType> eventActionConsume;
	std::optional<ElementTagType> eventActionProduce;
	std::optional<TimePeriodElementsType> timePeriod;

	LoadControlEventDataElementsType()
		:
		timestamp(ElementTagType{}),
		eventId(ElementTagType{}),
		eventActionConsume(ElementTagType{}),
		eventActionProduce(ElementTagType{}),
		timePeriod(TimePeriodElementsType{})
	{}
};
/**
 * Convert a LoadControlEventDataElementsType to its JSON representation
 * @param src The LoadControlEventDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlEventDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventDataElementsType &dst);

/**
 * Datatype LoadControlEventListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventListDataType { 
	std::optional<std::vector<LoadControlEventDataType>> loadControlEventData;

	LoadControlEventListDataType()
		:
		loadControlEventData(std::vector<LoadControlEventDataType>{})
	{}
};
/**
 * Convert a LoadControlEventListDataType to its JSON representation
 * @param src The LoadControlEventListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlEventListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventListDataType &dst);

/**
 * Datatype LoadControlEventListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventListDataSelectorsType { 
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<LoadControlEventIdType> eventId;

	LoadControlEventListDataSelectorsType()
		:
		timestampInterval(TimestampIntervalType{}),
		eventId(LoadControlEventIdType{})
	{}
};
/**
 * Convert a LoadControlEventListDataSelectorsType to its JSON representation
 * @param src The LoadControlEventListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlEventListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlEventListDataSelectorsType &dst);

/**
 * Datatype LoadControlStateDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<LoadControlEventIdType> eventId;
	std::optional<LoadControlEventStateType> eventStateConsume;
	std::optional<LoadControlEventActionType> appliedEventActionConsume;
	std::optional<LoadControlEventStateType> eventStateProduce;
	std::optional<LoadControlEventActionType> appliedEventActionProduce;

	LoadControlStateDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		eventId(LoadControlEventIdType{}),
		eventStateConsume(LoadControlEventStateType{}),
		appliedEventActionConsume(LoadControlEventActionType{}),
		eventStateProduce(LoadControlEventStateType{}),
		appliedEventActionProduce(LoadControlEventActionType{})
	{}
};
/**
 * Convert a LoadControlStateDataType to its JSON representation
 * @param src The LoadControlStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlStateDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlStateDataType &dst);

/**
 * Datatype LoadControlStateDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventId;
	std::optional<ElementTagType> eventStateConsume;
	std::optional<ElementTagType> appliedEventActionConsume;
	std::optional<ElementTagType> eventStateProduce;
	std::optional<ElementTagType> appliedEventActionProduce;

	LoadControlStateDataElementsType()
		:
		timestamp(ElementTagType{}),
		eventId(ElementTagType{}),
		eventStateConsume(ElementTagType{}),
		appliedEventActionConsume(ElementTagType{}),
		eventStateProduce(ElementTagType{}),
		appliedEventActionProduce(ElementTagType{})
	{}
};
/**
 * Convert a LoadControlStateDataElementsType to its JSON representation
 * @param src The LoadControlStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlStateDataElementsType &dst);

/**
 * Datatype LoadControlStateListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateListDataType { 
	std::optional<std::vector<LoadControlStateDataType>> loadControlStateData;

	LoadControlStateListDataType()
		:
		loadControlStateData(std::vector<LoadControlStateDataType>{})
	{}
};
/**
 * Convert a LoadControlStateListDataType to its JSON representation
 * @param src The LoadControlStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlStateListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlStateListDataType &dst);

/**
 * Datatype LoadControlStateListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateListDataSelectorsType { 
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<LoadControlEventIdType> eventId;

	LoadControlStateListDataSelectorsType()
		:
		timestampInterval(TimestampIntervalType{}),
		eventId(LoadControlEventIdType{})
	{}
};
/**
 * Convert a LoadControlStateListDataSelectorsType to its JSON representation
 * @param src The LoadControlStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlStateListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDataType { 
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<bool> isLimitChangeable;
	std::optional<bool> isLimitActive;
	std::optional<TimePeriodType> timePeriod;
	std::optional<ScaledNumberType> value;

	LoadControlLimitDataType()
		:
		limitId(LoadControlLimitIdType{}),
		isLimitChangeable(bool{}),
		isLimitActive(bool{}),
		timePeriod(TimePeriodType{}),
		value(ScaledNumberType{})
	{}
};
/**
 * Convert a LoadControlLimitDataType to its JSON representation
 * @param src The LoadControlLimitDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDataType &dst);

/**
 * Datatype LoadControlLimitDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDataElementsType { 
	std::optional<ElementTagType> limitId;
	std::optional<ElementTagType> isLimitChangeable;
	std::optional<ElementTagType> isLimitActive;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ScaledNumberElementsType> value;

	LoadControlLimitDataElementsType()
		:
		limitId(ElementTagType{}),
		isLimitChangeable(ElementTagType{}),
		isLimitActive(ElementTagType{}),
		timePeriod(TimePeriodElementsType{}),
		value(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a LoadControlLimitDataElementsType to its JSON representation
 * @param src The LoadControlLimitDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDataElementsType &dst);

/**
 * Datatype LoadControlLimitListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitListDataType { 
	std::optional<std::vector<LoadControlLimitDataType>> loadControlLimitData;

	LoadControlLimitListDataType()
		:
		loadControlLimitData(std::vector<LoadControlLimitDataType>{})
	{}
};
/**
 * Convert a LoadControlLimitListDataType to its JSON representation
 * @param src The LoadControlLimitListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitListDataType &dst);

/**
 * Datatype LoadControlLimitListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitListDataSelectorsType { 
	std::optional<LoadControlLimitIdType> limitId;

	LoadControlLimitListDataSelectorsType()
		:
		limitId(LoadControlLimitIdType{})
	{}
};
/**
 * Convert a LoadControlLimitListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitConstraintsDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsDataType { 
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<ScaledNumberType> valueRangeMin;
	std::optional<ScaledNumberType> valueRangeMax;
	std::optional<ScaledNumberType> valueStepSize;

	LoadControlLimitConstraintsDataType()
		:
		limitId(LoadControlLimitIdType{}),
		valueRangeMin(ScaledNumberType{}),
		valueRangeMax(ScaledNumberType{}),
		valueStepSize(ScaledNumberType{})
	{}
};
/**
 * Convert a LoadControlLimitConstraintsDataType to its JSON representation
 * @param src The LoadControlLimitConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsDataType &dst);

/**
 * Datatype LoadControlLimitConstraintsDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsDataElementsType { 
	std::optional<ElementTagType> limitId;
	std::optional<ScaledNumberElementsType> valueRangeMin;
	std::optional<ScaledNumberElementsType> valueRangeMax;
	std::optional<ScaledNumberElementsType> valueStepSize;

	LoadControlLimitConstraintsDataElementsType()
		:
		limitId(ElementTagType{}),
		valueRangeMin(ScaledNumberElementsType{}),
		valueRangeMax(ScaledNumberElementsType{}),
		valueStepSize(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a LoadControlLimitConstraintsDataElementsType to its JSON representation
 * @param src The LoadControlLimitConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsDataElementsType &dst);

/**
 * Datatype LoadControlLimitConstraintsListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsListDataType { 
	std::optional<std::vector<LoadControlLimitConstraintsDataType>> loadControlLimitConstraintsData;

	LoadControlLimitConstraintsListDataType()
		:
		loadControlLimitConstraintsData(std::vector<LoadControlLimitConstraintsDataType>{})
	{}
};
/**
 * Convert a LoadControlLimitConstraintsListDataType to its JSON representation
 * @param src The LoadControlLimitConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsListDataType &dst);

/**
 * Datatype LoadControlLimitConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsListDataSelectorsType { 
	std::optional<LoadControlLimitIdType> limitId;

	LoadControlLimitConstraintsListDataSelectorsType()
		:
		limitId(LoadControlLimitIdType{})
	{}
};
/**
 * Convert a LoadControlLimitConstraintsListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitDescriptionDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionDataType { 
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<LoadControlLimitTypeType> limitType;
	std::optional<LoadControlCategoryType> limitCategory;
	std::optional<EnergyDirectionType> limitDirection;
	std::optional<MeasurementIdType> measurementId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	LoadControlLimitDescriptionDataType()
		:
		limitId(LoadControlLimitIdType{}),
		limitType(LoadControlLimitTypeType{}),
		limitCategory(LoadControlCategoryType{}),
		limitDirection(EnergyDirectionType{}),
		measurementId(MeasurementIdType{}),
		unit(UnitOfMeasurementType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a LoadControlLimitDescriptionDataType to its JSON representation
 * @param src The LoadControlLimitDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionDataType &dst);

/**
 * Datatype LoadControlLimitDescriptionDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionDataElementsType { 
	std::optional<ElementTagType> limitId;
	std::optional<ElementTagType> limitType;
	std::optional<ElementTagType> limitCategory;
	std::optional<ElementTagType> limitDirection;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	LoadControlLimitDescriptionDataElementsType()
		:
		limitId(ElementTagType{}),
		limitType(ElementTagType{}),
		limitCategory(ElementTagType{}),
		limitDirection(ElementTagType{}),
		measurementId(ElementTagType{}),
		unit(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a LoadControlLimitDescriptionDataElementsType to its JSON representation
 * @param src The LoadControlLimitDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionDataElementsType &dst);

/**
 * Datatype LoadControlLimitDescriptionListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionListDataType { 
	std::optional<std::vector<LoadControlLimitDescriptionDataType>> loadControlLimitDescriptionData;

	LoadControlLimitDescriptionListDataType()
		:
		loadControlLimitDescriptionData(std::vector<LoadControlLimitDescriptionDataType>{})
	{}
};
/**
 * Convert a LoadControlLimitDescriptionListDataType to its JSON representation
 * @param src The LoadControlLimitDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionListDataType &dst);

/**
 * Datatype LoadControlLimitDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionListDataSelectorsType { 
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<LoadControlLimitTypeType> limitType;
	std::optional<EnergyDirectionType> limitDirection;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;

	LoadControlLimitDescriptionListDataSelectorsType()
		:
		limitId(LoadControlLimitIdType{}),
		limitType(LoadControlLimitTypeType{}),
		limitDirection(EnergyDirectionType{}),
		measurementId(MeasurementIdType{}),
		scopeType(ScopeTypeType{})
	{}
};
/**
 * Convert a LoadControlLimitDescriptionListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionListDataSelectorsType &dst);

/**
 * Datatype NetworkManagementAddNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAddNodeCallType { 
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	NetworkManagementAddNodeCallType()
		:
		nodeAddress(FeatureAddressType{}),
		nativeSetup(NetworkManagementNativeSetupType{}),
		timeout(NetworkManagementProcessTimeoutType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementAddNodeCallType to its JSON representation
 * @param src The NetworkManagementAddNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAddNodeCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementAddNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAddNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementAddNodeCallType &dst);

/**
 * Datatype NetworkManagementAddNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAddNodeCallElementsType { 
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> timeout;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	NetworkManagementAddNodeCallElementsType()
		:
		nodeAddress(FeatureAddressElementsType{}),
		nativeSetup(ElementTagType{}),
		timeout(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementAddNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementAddNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAddNodeCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementAddNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAddNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementAddNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementRemoveNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementRemoveNodeCallType { 
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementProcessTimeoutType> timeout;

	NetworkManagementRemoveNodeCallType()
		:
		nodeAddress(FeatureAddressType{}),
		timeout(NetworkManagementProcessTimeoutType{})
	{}
};
/**
 * Convert a NetworkManagementRemoveNodeCallType to its JSON representation
 * @param src The NetworkManagementRemoveNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementRemoveNodeCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementRemoveNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementRemoveNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementRemoveNodeCallType &dst);

/**
 * Datatype NetworkManagementRemoveNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementRemoveNodeCallElementsType { 
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> timeout;

	NetworkManagementRemoveNodeCallElementsType()
		:
		nodeAddress(FeatureAddressElementsType{}),
		timeout(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementRemoveNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementRemoveNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementRemoveNodeCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementRemoveNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementRemoveNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementRemoveNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementModifyNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementModifyNodeCallType { 
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	NetworkManagementModifyNodeCallType()
		:
		nodeAddress(FeatureAddressType{}),
		nativeSetup(NetworkManagementNativeSetupType{}),
		timeout(NetworkManagementProcessTimeoutType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementModifyNodeCallType to its JSON representation
 * @param src The NetworkManagementModifyNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementModifyNodeCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementModifyNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementModifyNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementModifyNodeCallType &dst);

/**
 * Datatype NetworkManagementModifyNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementModifyNodeCallElementsType { 
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> timeout;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	NetworkManagementModifyNodeCallElementsType()
		:
		nodeAddress(FeatureAddressElementsType{}),
		nativeSetup(ElementTagType{}),
		timeout(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementModifyNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementModifyNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementModifyNodeCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementModifyNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementModifyNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementModifyNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementScanNetworkCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementScanNetworkCallType { 
	std::optional<NetworkManagementScanSetupType> scanSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;

	NetworkManagementScanNetworkCallType()
		:
		scanSetup(NetworkManagementScanSetupType{}),
		timeout(NetworkManagementProcessTimeoutType{})
	{}
};
/**
 * Convert a NetworkManagementScanNetworkCallType to its JSON representation
 * @param src The NetworkManagementScanNetworkCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementScanNetworkCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementScanNetworkCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementScanNetworkCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementScanNetworkCallType &dst);

/**
 * Datatype NetworkManagementScanNetworkCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementScanNetworkCallElementsType { 
	std::optional<ElementTagType> scanSetup;
	std::optional<ElementTagType> timeout;

	NetworkManagementScanNetworkCallElementsType()
		:
		scanSetup(ElementTagType{}),
		timeout(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementScanNetworkCallElementsType to its JSON representation
 * @param src The NetworkManagementScanNetworkCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementScanNetworkCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementScanNetworkCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementScanNetworkCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementScanNetworkCallElementsType &dst);

/**
 * Datatype NetworkManagementDiscoverCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDiscoverCallType { 
	std::optional<FeatureAddressType> discoverAddress;

	NetworkManagementDiscoverCallType()
		:
		discoverAddress(FeatureAddressType{})
	{}
};
/**
 * Convert a NetworkManagementDiscoverCallType to its JSON representation
 * @param src The NetworkManagementDiscoverCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDiscoverCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDiscoverCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDiscoverCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDiscoverCallType &dst);

/**
 * Datatype NetworkManagementDiscoverCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDiscoverCallElementsType { 
	std::optional<FeatureAddressElementsType> discoverAddress;

	NetworkManagementDiscoverCallElementsType()
		:
		discoverAddress(FeatureAddressElementsType{})
	{}
};
/**
 * Convert a NetworkManagementDiscoverCallElementsType to its JSON representation
 * @param src The NetworkManagementDiscoverCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDiscoverCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDiscoverCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDiscoverCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDiscoverCallElementsType &dst);

/**
 * Datatype NetworkManagementAbortCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAbortCallType { 

	NetworkManagementAbortCallType()
		
	{}
};
/**
 * Convert a NetworkManagementAbortCallType to its JSON representation
 * @param src The NetworkManagementAbortCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAbortCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementAbortCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAbortCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementAbortCallType &dst);

/**
 * Datatype NetworkManagementAbortCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAbortCallElementsType { 

	NetworkManagementAbortCallElementsType()
		
	{}
};
/**
 * Convert a NetworkManagementAbortCallElementsType to its JSON representation
 * @param src The NetworkManagementAbortCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAbortCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementAbortCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAbortCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementAbortCallElementsType &dst);

/**
 * Datatype NetworkManagementProcessStateDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementProcessStateDataType { 
	std::optional<NetworkManagementProcessStateStateType> state;
	std::optional<DescriptionType> description;

	NetworkManagementProcessStateDataType()
		:
		state(NetworkManagementProcessStateStateType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementProcessStateDataType to its JSON representation
 * @param src The NetworkManagementProcessStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementProcessStateDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementProcessStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateDataType &dst);

/**
 * Datatype NetworkManagementProcessStateDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementProcessStateDataElementsType { 
	std::optional<ElementTagType> state;
	std::optional<ElementTagType> description;

	NetworkManagementProcessStateDataElementsType()
		:
		state(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementProcessStateDataElementsType to its JSON representation
 * @param src The NetworkManagementProcessStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementProcessStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementProcessStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateDataElementsType &dst);

/**
 * Datatype NetworkManagementJoiningModeDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementJoiningModeDataType { 
	std::optional<NetworkManagementSetupType> setup;

	NetworkManagementJoiningModeDataType()
		:
		setup(NetworkManagementSetupType{})
	{}
};
/**
 * Convert a NetworkManagementJoiningModeDataType to its JSON representation
 * @param src The NetworkManagementJoiningModeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementJoiningModeDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementJoiningModeDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementJoiningModeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementJoiningModeDataType &dst);

/**
 * Datatype NetworkManagementJoiningModeDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementJoiningModeDataElementsType { 
	std::optional<ElementTagType> setup;

	NetworkManagementJoiningModeDataElementsType()
		:
		setup(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementJoiningModeDataElementsType to its JSON representation
 * @param src The NetworkManagementJoiningModeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementJoiningModeDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementJoiningModeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementJoiningModeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementJoiningModeDataElementsType &dst);

/**
 * Datatype NetworkManagementReportCandidateDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementReportCandidateDataType { 
	std::optional<NetworkManagementCandidateSetupType> candidateSetup;
	std::optional<bool> setupUsableForAdd;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	NetworkManagementReportCandidateDataType()
		:
		candidateSetup(NetworkManagementCandidateSetupType{}),
		setupUsableForAdd(bool{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementReportCandidateDataType to its JSON representation
 * @param src The NetworkManagementReportCandidateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementReportCandidateDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementReportCandidateDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementReportCandidateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementReportCandidateDataType &dst);

/**
 * Datatype NetworkManagementReportCandidateDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementReportCandidateDataElementsType { 
	std::optional<ElementTagType> candidateSetup;
	std::optional<ElementTagType> setupUsableForAdd;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	NetworkManagementReportCandidateDataElementsType()
		:
		candidateSetup(ElementTagType{}),
		setupUsableForAdd(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementReportCandidateDataElementsType to its JSON representation
 * @param src The NetworkManagementReportCandidateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementReportCandidateDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementReportCandidateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementReportCandidateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementReportCandidateDataElementsType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionDataType { 
	std::optional<DeviceAddressType> deviceAddress;
	std::optional<DeviceTypeType> deviceType;
	std::optional<FeatureAddressType> networkManagementResponsibleAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementTechnologyAddressType> technologyAddress;
	std::optional<NetworkManagementCommunicationsTechnologyInformationType> communicationsTechnologyInformation;
	std::optional<NetworkManagementFeatureSetType> networkFeatureSet;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	NetworkManagementDeviceDescriptionDataType()
		:
		deviceAddress(DeviceAddressType{}),
		deviceType(DeviceTypeType{}),
		networkManagementResponsibleAddress(FeatureAddressType{}),
		nativeSetup(NetworkManagementNativeSetupType{}),
		technologyAddress(NetworkManagementTechnologyAddressType{}),
		communicationsTechnologyInformation(NetworkManagementCommunicationsTechnologyInformationType{}),
		networkFeatureSet(NetworkManagementFeatureSetType{}),
		lastStateChange(NetworkManagementStateChangeType{}),
		minimumTrustLevel(NetworkManagementMinimumTrustLevelType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementDeviceDescriptionDataType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionDataType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionDataElementsType { 
	std::optional<DeviceAddressElementsType> deviceAddress;
	std::optional<ElementTagType> deviceType;
	std::optional<ElementTagType> networkManagementResponsibleAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> technologyAddress;
	std::optional<ElementTagType> communicationsTechnologyInformation;
	std::optional<ElementTagType> networkFeatureSet;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	NetworkManagementDeviceDescriptionDataElementsType()
		:
		deviceAddress(DeviceAddressElementsType{}),
		deviceType(ElementTagType{}),
		networkManagementResponsibleAddress(ElementTagType{}),
		nativeSetup(ElementTagType{}),
		technologyAddress(ElementTagType{}),
		communicationsTechnologyInformation(ElementTagType{}),
		networkFeatureSet(ElementTagType{}),
		lastStateChange(ElementTagType{}),
		minimumTrustLevel(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementDeviceDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionListDataType { 
	std::optional<std::vector<NetworkManagementDeviceDescriptionDataType>> networkManagementDeviceDescriptionData;

	NetworkManagementDeviceDescriptionListDataType()
		:
		networkManagementDeviceDescriptionData(std::vector<NetworkManagementDeviceDescriptionDataType>{})
	{}
};
/**
 * Convert a NetworkManagementDeviceDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionListDataSelectorsType { 
	std::optional<DeviceAddressType> deviceAddress;
	std::optional<DeviceTypeType> deviceType;

	NetworkManagementDeviceDescriptionListDataSelectorsType()
		:
		deviceAddress(DeviceAddressType{}),
		deviceType(DeviceTypeType{})
	{}
};
/**
 * Convert a NetworkManagementDeviceDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionListDataSelectorsType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionDataType { 
	std::optional<EntityAddressType> entityAddress;
	std::optional<EntityTypeType> entityType;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	NetworkManagementEntityDescriptionDataType()
		:
		entityAddress(EntityAddressType{}),
		entityType(EntityTypeType{}),
		lastStateChange(NetworkManagementStateChangeType{}),
		minimumTrustLevel(NetworkManagementMinimumTrustLevelType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a NetworkManagementEntityDescriptionDataType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionDataType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionDataElementsType { 
	std::optional<EntityAddressElementsType> entityAddress;
	std::optional<ElementTagType> entityType;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	NetworkManagementEntityDescriptionDataElementsType()
		:
		entityAddress(EntityAddressElementsType{}),
		entityType(ElementTagType{}),
		lastStateChange(ElementTagType{}),
		minimumTrustLevel(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementEntityDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionListDataType { 
	std::optional<std::vector<NetworkManagementEntityDescriptionDataType>> networkManagementEntityDescriptionData;

	NetworkManagementEntityDescriptionListDataType()
		:
		networkManagementEntityDescriptionData(std::vector<NetworkManagementEntityDescriptionDataType>{})
	{}
};
/**
 * Convert a NetworkManagementEntityDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionListDataSelectorsType { 
	std::optional<EntityAddressType> entityAddress;
	std::optional<EntityTypeType> entityType;

	NetworkManagementEntityDescriptionListDataSelectorsType()
		:
		entityAddress(EntityAddressType{}),
		entityType(EntityTypeType{})
	{}
};
/**
 * Convert a NetworkManagementEntityDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionListDataSelectorsType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionDataType { 
	std::optional<FeatureAddressType> featureAddress;
	std::optional<FeatureTypeType> featureType;
	std::optional<std::vector<FeatureSpecificUsageType>> specificUsage;
	std::optional<FeatureGroupType> featureGroup;
	std::optional<RoleType> role;
	std::optional<std::vector<FunctionPropertyType>> supportedFunction;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<MaxResponseDelayType> maxResponseDelay;

	NetworkManagementFeatureDescriptionDataType()
		:
		featureAddress(FeatureAddressType{}),
		featureType(FeatureTypeType{}),
		specificUsage(std::vector<FeatureSpecificUsageType>{}),
		featureGroup(FeatureGroupType{}),
		role(RoleType{}),
		supportedFunction(std::vector<FunctionPropertyType>{}),
		lastStateChange(NetworkManagementStateChangeType{}),
		minimumTrustLevel(NetworkManagementMinimumTrustLevelType{}),
		label(LabelType{}),
		description(DescriptionType{}),
		maxResponseDelay(MaxResponseDelayType{})
	{}
};
/**
 * Convert a NetworkManagementFeatureDescriptionDataType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionDataType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionDataElementsType { 
	std::optional<FeatureAddressElementsType> featureAddress;
	std::optional<ElementTagType> featureType;
	std::optional<ElementTagType> specificUsage;
	std::optional<ElementTagType> featureGroup;
	std::optional<ElementTagType> role;
	std::optional<FunctionPropertyElementsType> supportedFunction;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> maxResponseDelay;

	NetworkManagementFeatureDescriptionDataElementsType()
		:
		featureAddress(FeatureAddressElementsType{}),
		featureType(ElementTagType{}),
		specificUsage(ElementTagType{}),
		featureGroup(ElementTagType{}),
		role(ElementTagType{}),
		supportedFunction(FunctionPropertyElementsType{}),
		lastStateChange(ElementTagType{}),
		minimumTrustLevel(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{}),
		maxResponseDelay(ElementTagType{})
	{}
};
/**
 * Convert a NetworkManagementFeatureDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionListDataType { 
	std::optional<std::vector<NetworkManagementFeatureDescriptionDataType>> networkManagementFeatureDescriptionData;

	NetworkManagementFeatureDescriptionListDataType()
		:
		networkManagementFeatureDescriptionData(std::vector<NetworkManagementFeatureDescriptionDataType>{})
	{}
};
/**
 * Convert a NetworkManagementFeatureDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionListDataSelectorsType { 
	std::optional<FeatureAddressType> featureAddress;
	std::optional<FeatureTypeType> featureType;

	NetworkManagementFeatureDescriptionListDataSelectorsType()
		:
		featureAddress(FeatureAddressType{}),
		featureType(FeatureTypeType{})
	{}
};
/**
 * Convert a NetworkManagementFeatureDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionListDataSelectorsType &dst);

/**
 * Datatype NodeManagementSpecificationVersionListType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSpecificationVersionListType { 
	std::optional<std::vector<SpecificationVersionType>> specificationVersion;

	NodeManagementSpecificationVersionListType()
		:
		specificationVersion(std::vector<SpecificationVersionDataType>{})
	{}
};
/**
 * Convert a NodeManagementSpecificationVersionListType to its JSON representation
 * @param src The NodeManagementSpecificationVersionListType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSpecificationVersionListType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSpecificationVersionListType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSpecificationVersionListType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSpecificationVersionListType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDeviceInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDeviceInformationType { 
	std::optional<NetworkManagementDeviceDescriptionDataType> description;

	NodeManagementDetailedDiscoveryDeviceInformationType()
		:
		description(NetworkManagementDeviceDescriptionDataType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryDeviceInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDeviceInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDeviceInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDeviceInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDeviceInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryEntityInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryEntityInformationType { 
	std::optional<NetworkManagementEntityDescriptionDataType> description;

	NodeManagementDetailedDiscoveryEntityInformationType()
		:
		description(NetworkManagementEntityDescriptionDataType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryEntityInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryEntityInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryEntityInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryEntityInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryEntityInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryFeatureInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryFeatureInformationType { 
	std::optional<NetworkManagementFeatureDescriptionDataType> description;

	NodeManagementDetailedDiscoveryFeatureInformationType()
		:
		description(NetworkManagementFeatureDescriptionDataType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryFeatureInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryFeatureInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryFeatureInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryFeatureInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryFeatureInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataType { 
	std::optional<NodeManagementSpecificationVersionListType> specificationVersionList;
	std::optional<NodeManagementDetailedDiscoveryDeviceInformationType> deviceInformation;
	std::optional<std::vector<NodeManagementDetailedDiscoveryEntityInformationType>> entityInformation;
	std::optional<std::vector<NodeManagementDetailedDiscoveryFeatureInformationType>> featureInformation;

	NodeManagementDetailedDiscoveryDataType()
		:
		specificationVersionList(NodeManagementSpecificationVersionListType{}),
		deviceInformation(NodeManagementDetailedDiscoveryDeviceInformationType{}),
		entityInformation(std::vector<NodeManagementDetailedDiscoveryEntityInformationType>{}),
		featureInformation(std::vector<NodeManagementDetailedDiscoveryFeatureInformationType>{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryDataType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataType &dst);

/**
 * Datatype SpecificationVersionDataElementsType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionDataElementsType { 

	SpecificationVersionDataElementsType()
		
	{}
};
/**
 * Convert a SpecificationVersionDataElementsType to its JSON representation
 * @param src The SpecificationVersionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SpecificationVersionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SpecificationVersionDataElementsType &dst);

/**
 * Datatype NodeManagementSpecificationVersionListElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSpecificationVersionListElementsType { 
	std::optional<SpecificationVersionDataElementsType> specificationVersion;

	NodeManagementSpecificationVersionListElementsType()
		:
		specificationVersion(SpecificationVersionDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementSpecificationVersionListElementsType to its JSON representation
 * @param src The NodeManagementSpecificationVersionListElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSpecificationVersionListElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSpecificationVersionListElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSpecificationVersionListElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSpecificationVersionListElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDeviceInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDeviceInformationElementsType { 
	std::optional<NetworkManagementDeviceDescriptionDataElementsType> description;

	NodeManagementDetailedDiscoveryDeviceInformationElementsType()
		:
		description(NetworkManagementDeviceDescriptionDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryDeviceInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDeviceInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDeviceInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDeviceInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDeviceInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryEntityInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryEntityInformationElementsType { 
	std::optional<NetworkManagementEntityDescriptionDataElementsType> description;

	NodeManagementDetailedDiscoveryEntityInformationElementsType()
		:
		description(NetworkManagementEntityDescriptionDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryEntityInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryEntityInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryEntityInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryEntityInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryEntityInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryFeatureInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryFeatureInformationElementsType { 
	std::optional<NetworkManagementFeatureDescriptionDataElementsType> description;

	NodeManagementDetailedDiscoveryFeatureInformationElementsType()
		:
		description(NetworkManagementFeatureDescriptionDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryFeatureInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryFeatureInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryFeatureInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryFeatureInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryFeatureInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataElementsType { 
	std::optional<NodeManagementSpecificationVersionListElementsType> specificationVersionList;
	std::optional<NodeManagementDetailedDiscoveryDeviceInformationElementsType> deviceInformation;
	std::optional<NodeManagementDetailedDiscoveryEntityInformationElementsType> entityInformation;
	std::optional<NodeManagementDetailedDiscoveryFeatureInformationElementsType> featureInformation;

	NodeManagementDetailedDiscoveryDataElementsType()
		:
		specificationVersionList(NodeManagementSpecificationVersionListElementsType{}),
		deviceInformation(NodeManagementDetailedDiscoveryDeviceInformationElementsType{}),
		entityInformation(NodeManagementDetailedDiscoveryEntityInformationElementsType{}),
		featureInformation(NodeManagementDetailedDiscoveryFeatureInformationElementsType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryDataElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataSelectorsType { 
	std::optional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceInformation;
	std::optional<NetworkManagementEntityDescriptionListDataSelectorsType> entityInformation;
	std::optional<NetworkManagementFeatureDescriptionListDataSelectorsType> featureInformation;

	NodeManagementDetailedDiscoveryDataSelectorsType()
		:
		deviceInformation(NetworkManagementDeviceDescriptionListDataSelectorsType{}),
		entityInformation(NetworkManagementEntityDescriptionListDataSelectorsType{}),
		featureInformation(NetworkManagementFeatureDescriptionListDataSelectorsType{})
	{}
};
/**
 * Convert a NodeManagementDetailedDiscoveryDataSelectorsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataSelectorsType &dst);

/**
 * Datatype NodeManagementBindingDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataType { 
	std::optional<std::vector<BindingManagementEntryDataType>> bindingEntry;

	NodeManagementBindingDataType()
		:
		bindingEntry(std::vector<BindingManagementEntryDataType>{})
	{}
};
/**
 * Convert a NodeManagementBindingDataType to its JSON representation
 * @param src The NodeManagementBindingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataType &dst);

/**
 * Datatype NodeManagementBindingDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataElementsType { 
	std::optional<BindingManagementEntryDataElementsType> bindingEntry;

	NodeManagementBindingDataElementsType()
		:
		bindingEntry(BindingManagementEntryDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementBindingDataElementsType to its JSON representation
 * @param src The NodeManagementBindingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataElementsType &dst);

/**
 * Datatype NodeManagementBindingDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataSelectorsType { 
	std::optional<BindingManagementEntryListDataSelectorsType> bindingEntry;

	NodeManagementBindingDataSelectorsType()
		:
		bindingEntry(BindingManagementEntryListDataSelectorsType{})
	{}
};
/**
 * Convert a NodeManagementBindingDataSelectorsType to its JSON representation
 * @param src The NodeManagementBindingDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataSelectorsType &dst);

/**
 * Datatype NodeManagementBindingRequestCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingRequestCallType { 
	std::optional<BindingManagementRequestCallType> bindingRequest;

	NodeManagementBindingRequestCallType()
		:
		bindingRequest(BindingManagementRequestCallType{})
	{}
};
/**
 * Convert a NodeManagementBindingRequestCallType to its JSON representation
 * @param src The NodeManagementBindingRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingRequestCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingRequestCallType &dst);

/**
 * Datatype NodeManagementBindingRequestCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingRequestCallElementsType { 
	std::optional<BindingManagementRequestCallElementsType> bindingRequest;

	NodeManagementBindingRequestCallElementsType()
		:
		bindingRequest(BindingManagementRequestCallElementsType{})
	{}
};
/**
 * Convert a NodeManagementBindingRequestCallElementsType to its JSON representation
 * @param src The NodeManagementBindingRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingRequestCallElementsType &dst);

/**
 * Datatype NodeManagementBindingDeleteCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDeleteCallType { 
	std::optional<BindingManagementDeleteCallType> bindingDelete;

	NodeManagementBindingDeleteCallType()
		:
		bindingDelete(BindingManagementDeleteCallType{})
	{}
};
/**
 * Convert a NodeManagementBindingDeleteCallType to its JSON representation
 * @param src The NodeManagementBindingDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDeleteCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDeleteCallType &dst);

/**
 * Datatype NodeManagementBindingDeleteCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDeleteCallElementsType { 
	std::optional<BindingManagementDeleteCallElementsType> bindingDelete;

	NodeManagementBindingDeleteCallElementsType()
		:
		bindingDelete(BindingManagementDeleteCallElementsType{})
	{}
};
/**
 * Convert a NodeManagementBindingDeleteCallElementsType to its JSON representation
 * @param src The NodeManagementBindingDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDeleteCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDeleteCallElementsType &dst);

/**
 * Datatype SubscriptionManagementEntryDataType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryDataType { 
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	SubscriptionManagementEntryDataType()
		:
		subscriptionId(SubscriptionIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a SubscriptionManagementEntryDataType to its JSON representation
 * @param src The SubscriptionManagementEntryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryDataType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryDataType &dst);

/**
 * Datatype NodeManagementSubscriptionDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataType { 
	std::optional<std::vector<SubscriptionManagementEntryDataType>> subscriptionEntry;

	NodeManagementSubscriptionDataType()
		:
		subscriptionEntry(std::vector<SubscriptionManagementEntryDataType>{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionDataType to its JSON representation
 * @param src The NodeManagementSubscriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataType &dst);

/**
 * Datatype SubscriptionManagementEntryDataElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryDataElementsType { 
	std::optional<ElementTagType> subscriptionId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	SubscriptionManagementEntryDataElementsType()
		:
		subscriptionId(ElementTagType{}),
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a SubscriptionManagementEntryDataElementsType to its JSON representation
 * @param src The SubscriptionManagementEntryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryDataElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataElementsType { 
	std::optional<SubscriptionManagementEntryDataElementsType> subscriptionEntry;

	NodeManagementSubscriptionDataElementsType()
		:
		subscriptionEntry(SubscriptionManagementEntryDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionDataElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataElementsType &dst);

/**
 * Datatype SubscriptionManagementEntryListDataSelectorsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryListDataSelectorsType { 
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;

	SubscriptionManagementEntryListDataSelectorsType()
		:
		subscriptionId(SubscriptionIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{})
	{}
};
/**
 * Convert a SubscriptionManagementEntryListDataSelectorsType to its JSON representation
 * @param src The SubscriptionManagementEntryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryListDataSelectorsType &dst);

/**
 * Datatype NodeManagementSubscriptionDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataSelectorsType { 
	std::optional<SubscriptionManagementEntryListDataSelectorsType> subscriptionEntry;

	NodeManagementSubscriptionDataSelectorsType()
		:
		subscriptionEntry(SubscriptionManagementEntryListDataSelectorsType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionDataSelectorsType to its JSON representation
 * @param src The NodeManagementSubscriptionDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataSelectorsType &dst);

/**
 * Datatype SubscriptionManagementRequestCallType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementRequestCallType { 
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<FeatureTypeType> serverFeatureType;

	SubscriptionManagementRequestCallType()
		:
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{}),
		serverFeatureType(FeatureTypeType{})
	{}
};
/**
 * Convert a SubscriptionManagementRequestCallType to its JSON representation
 * @param src The SubscriptionManagementRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementRequestCallType &dst);

/**
 * Datatype NodeManagementSubscriptionRequestCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionRequestCallType { 
	std::optional<SubscriptionManagementRequestCallType> subscriptionRequest;

	NodeManagementSubscriptionRequestCallType()
		:
		subscriptionRequest(SubscriptionManagementRequestCallType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionRequestCallType to its JSON representation
 * @param src The NodeManagementSubscriptionRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionRequestCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionRequestCallType &dst);

/**
 * Datatype SubscriptionManagementRequestCallElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementRequestCallElementsType { 
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> serverFeatureType;

	SubscriptionManagementRequestCallElementsType()
		:
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{}),
		serverFeatureType(ElementTagType{})
	{}
};
/**
 * Convert a SubscriptionManagementRequestCallElementsType to its JSON representation
 * @param src The SubscriptionManagementRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementRequestCallElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionRequestCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionRequestCallElementsType { 
	std::optional<SubscriptionManagementRequestCallElementsType> subscriptionRequest;

	NodeManagementSubscriptionRequestCallElementsType()
		:
		subscriptionRequest(SubscriptionManagementRequestCallElementsType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionRequestCallElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionRequestCallElementsType &dst);

/**
 * Datatype SubscriptionManagementDeleteCallType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementDeleteCallType { 
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;

	SubscriptionManagementDeleteCallType()
		:
		subscriptionId(SubscriptionIdType{}),
		clientAddress(FeatureAddressType{}),
		serverAddress(FeatureAddressType{})
	{}
};
/**
 * Convert a SubscriptionManagementDeleteCallType to its JSON representation
 * @param src The SubscriptionManagementDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementDeleteCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementDeleteCallType &dst);

/**
 * Datatype NodeManagementSubscriptionDeleteCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDeleteCallType { 
	std::optional<SubscriptionManagementDeleteCallType> subscriptionDelete;

	NodeManagementSubscriptionDeleteCallType()
		:
		subscriptionDelete(SubscriptionManagementDeleteCallType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionDeleteCallType to its JSON representation
 * @param src The NodeManagementSubscriptionDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDeleteCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDeleteCallType &dst);

/**
 * Datatype SubscriptionManagementDeleteCallElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementDeleteCallElementsType { 
	std::optional<ElementTagType> subscriptionId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;

	SubscriptionManagementDeleteCallElementsType()
		:
		subscriptionId(ElementTagType{}),
		clientAddress(FeatureAddressElementsType{}),
		serverAddress(FeatureAddressElementsType{})
	{}
};
/**
 * Convert a SubscriptionManagementDeleteCallElementsType to its JSON representation
 * @param src The SubscriptionManagementDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementDeleteCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementDeleteCallElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionDeleteCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDeleteCallElementsType { 
	std::optional<SubscriptionManagementDeleteCallElementsType> subscriptionDelete;

	NodeManagementSubscriptionDeleteCallElementsType()
		:
		subscriptionDelete(SubscriptionManagementDeleteCallElementsType{})
	{}
};
/**
 * Convert a NodeManagementSubscriptionDeleteCallElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDeleteCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDeleteCallElementsType &dst);

/**
 * Datatype NodeManagementDestinationDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationDataType { 
	std::optional<NetworkManagementDeviceDescriptionDataType> deviceDescription;

	NodeManagementDestinationDataType()
		:
		deviceDescription(NetworkManagementDeviceDescriptionDataType{})
	{}
};
/**
 * Convert a NodeManagementDestinationDataType to its JSON representation
 * @param src The NodeManagementDestinationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationDataType &dst);

/**
 * Datatype NodeManagementDestinationDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationDataElementsType { 
	std::optional<NetworkManagementDeviceDescriptionDataElementsType> deviceDescription;

	NodeManagementDestinationDataElementsType()
		:
		deviceDescription(NetworkManagementDeviceDescriptionDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementDestinationDataElementsType to its JSON representation
 * @param src The NodeManagementDestinationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationDataElementsType &dst);

/**
 * Datatype NodeManagementDestinationListDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationListDataType { 
	std::optional<std::vector<NodeManagementDestinationDataType>> nodeManagementDestinationData;

	NodeManagementDestinationListDataType()
		:
		nodeManagementDestinationData(std::vector<NodeManagementDestinationDataType>{})
	{}
};
/**
 * Convert a NodeManagementDestinationListDataType to its JSON representation
 * @param src The NodeManagementDestinationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationListDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationListDataType &dst);

/**
 * Datatype NodeManagementDestinationListDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationListDataSelectorsType { 
	std::optional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceDescription;

	NodeManagementDestinationListDataSelectorsType()
		:
		deviceDescription(NetworkManagementDeviceDescriptionListDataSelectorsType{})
	{}
};
/**
 * Convert a NodeManagementDestinationListDataSelectorsType to its JSON representation
 * @param src The NodeManagementDestinationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationListDataSelectorsType &dst);

/**
 * Datatype UseCaseSupportType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportType { 
	std::optional<UseCaseNameType> useCaseName;
	std::optional<SpecificationVersionType> useCaseVersion;
	std::optional<bool> useCaseAvailable;
	std::optional<std::vector<UseCaseScenarioSupportType>> scenarioSupport;
	std::optional<std::string> useCaseDocumentSubRevision;

	UseCaseSupportType()
		:
		useCaseName(UseCaseNameType{}),
		useCaseVersion(SpecificationVersionType{}),
		useCaseAvailable(bool{}),
		scenarioSupport(std::vector<UseCaseScenarioSupportType>{}),
		useCaseDocumentSubRevision(std::string{})
	{}
};
/**
 * Convert a UseCaseSupportType to its JSON representation
 * @param src The UseCaseSupportType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseSupportType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseSupportType &dst);

/**
 * Datatype UseCaseInformationDataType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationDataType { 
	std::optional<FeatureAddressType> address;
	std::optional<UseCaseActorType> actor;
	std::optional<std::vector<UseCaseSupportType>> useCaseSupport;

	UseCaseInformationDataType()
		:
		address(FeatureAddressType{}),
		actor(UseCaseActorType{}),
		useCaseSupport(std::vector<UseCaseSupportType>{})
	{}
};
/**
 * Convert a UseCaseInformationDataType to its JSON representation
 * @param src The UseCaseInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseInformationDataType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseInformationDataType &dst);

/**
 * Datatype NodeManagementUseCaseDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataType { 
	std::optional<std::vector<UseCaseInformationDataType>> useCaseInformation;

	NodeManagementUseCaseDataType()
		:
		useCaseInformation(std::vector<UseCaseInformationDataType>{})
	{}
};
/**
 * Convert a NodeManagementUseCaseDataType to its JSON representation
 * @param src The NodeManagementUseCaseDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataType &dst);

/**
 * Datatype UseCaseSupportElementsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportElementsType { 
	std::optional<ElementTagType> useCaseName;
	std::optional<ElementTagType> useCaseVersion;
	std::optional<ElementTagType> useCaseAvailable;
	std::optional<ElementTagType> scenarioSupport;
	std::optional<ElementTagType> useCaseDocumentSubRevision;

	UseCaseSupportElementsType()
		:
		useCaseName(ElementTagType{}),
		useCaseVersion(ElementTagType{}),
		useCaseAvailable(ElementTagType{}),
		scenarioSupport(ElementTagType{}),
		useCaseDocumentSubRevision(ElementTagType{})
	{}
};
/**
 * Convert a UseCaseSupportElementsType to its JSON representation
 * @param src The UseCaseSupportElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseSupportElementsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseSupportElementsType &dst);

/**
 * Datatype UseCaseInformationDataElementsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationDataElementsType { 
	std::optional<FeatureAddressElementsType> address;
	std::optional<ElementTagType> actor;
	std::optional<UseCaseSupportElementsType> useCaseSupport;

	UseCaseInformationDataElementsType()
		:
		address(FeatureAddressElementsType{}),
		actor(ElementTagType{}),
		useCaseSupport(UseCaseSupportElementsType{})
	{}
};
/**
 * Convert a UseCaseInformationDataElementsType to its JSON representation
 * @param src The UseCaseInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseInformationDataElementsType &dst);

/**
 * Datatype NodeManagementUseCaseDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataElementsType { 
	std::optional<UseCaseInformationDataElementsType> useCaseInformation;

	NodeManagementUseCaseDataElementsType()
		:
		useCaseInformation(UseCaseInformationDataElementsType{})
	{}
};
/**
 * Convert a NodeManagementUseCaseDataElementsType to its JSON representation
 * @param src The NodeManagementUseCaseDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataElementsType &dst);

/**
 * Datatype UseCaseSupportSelectorsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportSelectorsType { 
	std::optional<UseCaseNameType> useCaseName;
	std::optional<SpecificationVersionType> useCaseVersion;
	std::optional<UseCaseScenarioSupportType> scenarioSupport;

	UseCaseSupportSelectorsType()
		:
		useCaseName(UseCaseNameType{}),
		useCaseVersion(SpecificationVersionType{}),
		scenarioSupport(UseCaseScenarioSupportType{})
	{}
};
/**
 * Convert a UseCaseSupportSelectorsType to its JSON representation
 * @param src The UseCaseSupportSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseSupportSelectorsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseSupportSelectorsType &dst);

/**
 * Datatype UseCaseInformationListDataSelectorsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationListDataSelectorsType { 
	std::optional<FeatureAddressType> address;
	std::optional<UseCaseActorType> actor;
	std::optional<UseCaseSupportSelectorsType> useCaseSupport;

	UseCaseInformationListDataSelectorsType()
		:
		address(FeatureAddressType{}),
		actor(UseCaseActorType{}),
		useCaseSupport(UseCaseSupportSelectorsType{})
	{}
};
/**
 * Convert a UseCaseInformationListDataSelectorsType to its JSON representation
 * @param src The UseCaseInformationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseInformationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseInformationListDataSelectorsType &dst);

/**
 * Datatype NodeManagementUseCaseDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataSelectorsType { 
	std::optional<UseCaseInformationListDataSelectorsType> useCaseInformation;

	NodeManagementUseCaseDataSelectorsType()
		:
		useCaseInformation(UseCaseInformationListDataSelectorsType{})
	{}
};
/**
 * Convert a NodeManagementUseCaseDataSelectorsType to its JSON representation
 * @param src The NodeManagementUseCaseDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataSelectorsType &dst);

/**
 * Datatype SubscriptionManagementEntryListDataType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryListDataType { 
	std::optional<std::vector<SubscriptionManagementEntryDataType>> subscriptionManagementEntryData;

	SubscriptionManagementEntryListDataType()
		:
		subscriptionManagementEntryData(std::vector<SubscriptionManagementEntryDataType>{})
	{}
};
/**
 * Convert a SubscriptionManagementEntryListDataType to its JSON representation
 * @param src The SubscriptionManagementEntryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryListDataType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryListDataType &dst);

/**
 * Datatype UseCaseInformationListDataType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationListDataType { 
	std::optional<std::vector<UseCaseInformationDataType>> useCaseInformationData;

	UseCaseInformationListDataType()
		:
		useCaseInformationData(std::vector<UseCaseInformationDataType>{})
	{}
};
/**
 * Convert a UseCaseInformationListDataType to its JSON representation
 * @param src The UseCaseInformationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a UseCaseInformationListDataType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, UseCaseInformationListDataType &dst);

/**
 * Datatype SpecificationVersionListDataType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionListDataType { 
	std::optional<std::vector<SpecificationVersionType>> specificationVersionData;

	SpecificationVersionListDataType()
		:
		specificationVersionData(std::vector<SpecificationVersionDataType>{})
	{}
};
/**
 * Convert a SpecificationVersionListDataType to its JSON representation
 * @param src The SpecificationVersionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SpecificationVersionListDataType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SpecificationVersionListDataType &dst);

/**
 * Datatype SpecificationVersionListDataSelectorsType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionListDataSelectorsType { 

	SpecificationVersionListDataSelectorsType()
		
	{}
};
/**
 * Convert a SpecificationVersionListDataSelectorsType to its JSON representation
 * @param src The SpecificationVersionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SpecificationVersionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SpecificationVersionListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsInterruptDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<bool> isPausable;
	std::optional<bool> isStoppable;
	std::optional<bool> notInterruptibleAtHighPower;
	std::optional<uint32_t> maxCyclesPerDay;

	OperatingConstraintsInterruptDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		isPausable(bool{}),
		isStoppable(bool{}),
		notInterruptibleAtHighPower(bool{}),
		maxCyclesPerDay(uint32_t{})
	{}
};
/**
 * Convert a OperatingConstraintsInterruptDataType to its JSON representation
 * @param src The OperatingConstraintsInterruptDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptDataType &dst);

/**
 * Datatype OperatingConstraintsInterruptDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> isPausable;
	std::optional<ElementTagType> isStoppable;
	std::optional<ElementTagType> notInterruptibleAtHighPower;
	std::optional<ElementTagType> maxCyclesPerDay;

	OperatingConstraintsInterruptDataElementsType()
		:
		sequenceId(ElementTagType{}),
		isPausable(ElementTagType{}),
		isStoppable(ElementTagType{}),
		notInterruptibleAtHighPower(ElementTagType{}),
		maxCyclesPerDay(ElementTagType{})
	{}
};
/**
 * Convert a OperatingConstraintsInterruptDataElementsType to its JSON representation
 * @param src The OperatingConstraintsInterruptDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptDataElementsType &dst);

/**
 * Datatype OperatingConstraintsInterruptListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptListDataType { 
	std::optional<std::vector<OperatingConstraintsInterruptDataType>> operatingConstraintsInterruptData;

	OperatingConstraintsInterruptListDataType()
		:
		operatingConstraintsInterruptData(std::vector<OperatingConstraintsInterruptDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsInterruptListDataType to its JSON representation
 * @param src The OperatingConstraintsInterruptListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptListDataType &dst);

/**
 * Datatype OperatingConstraintsInterruptListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsInterruptListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsInterruptListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsInterruptListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsDurationDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<std::string> activeDurationMin;
	std::optional<std::string> activeDurationMax;
	std::optional<std::string> pauseDurationMin;
	std::optional<std::string> pauseDurationMax;
	std::optional<std::string> activeDurationSumMin;
	std::optional<std::string> activeDurationSumMax;

	OperatingConstraintsDurationDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		activeDurationMin(std::string{}),
		activeDurationMax(std::string{}),
		pauseDurationMin(std::string{}),
		pauseDurationMax(std::string{}),
		activeDurationSumMin(std::string{}),
		activeDurationSumMax(std::string{})
	{}
};
/**
 * Convert a OperatingConstraintsDurationDataType to its JSON representation
 * @param src The OperatingConstraintsDurationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationDataType &dst);

/**
 * Datatype OperatingConstraintsDurationDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> activeDurationMin;
	std::optional<ElementTagType> activeDurationMax;
	std::optional<ElementTagType> pauseDurationMin;
	std::optional<ElementTagType> pauseDurationMax;
	std::optional<ElementTagType> activeDurationSumMin;
	std::optional<ElementTagType> activeDurationSumMax;

	OperatingConstraintsDurationDataElementsType()
		:
		sequenceId(ElementTagType{}),
		activeDurationMin(ElementTagType{}),
		activeDurationMax(ElementTagType{}),
		pauseDurationMin(ElementTagType{}),
		pauseDurationMax(ElementTagType{}),
		activeDurationSumMin(ElementTagType{}),
		activeDurationSumMax(ElementTagType{})
	{}
};
/**
 * Convert a OperatingConstraintsDurationDataElementsType to its JSON representation
 * @param src The OperatingConstraintsDurationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationDataElementsType &dst);

/**
 * Datatype OperatingConstraintsDurationListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationListDataType { 
	std::optional<std::vector<OperatingConstraintsDurationDataType>> operatingConstraintsDurationData;

	OperatingConstraintsDurationListDataType()
		:
		operatingConstraintsDurationData(std::vector<OperatingConstraintsDurationDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsDurationListDataType to its JSON representation
 * @param src The OperatingConstraintsDurationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationListDataType &dst);

/**
 * Datatype OperatingConstraintsDurationListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsDurationListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsDurationListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsDurationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<DescriptionType> description;

	OperatingConstraintsPowerDescriptionDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		positiveEnergyDirection(EnergyDirectionType{}),
		powerUnit(UnitOfMeasurementType{}),
		energyUnit(UnitOfMeasurementType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerDescriptionDataType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionDataType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;
	std::optional<ElementTagType> description;

	OperatingConstraintsPowerDescriptionDataElementsType()
		:
		sequenceId(ElementTagType{}),
		positiveEnergyDirection(ElementTagType{}),
		powerUnit(ElementTagType{}),
		energyUnit(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerDescriptionDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionListDataType { 
	std::optional<std::vector<OperatingConstraintsPowerDescriptionDataType>> operatingConstraintsPowerDescriptionData;

	OperatingConstraintsPowerDescriptionListDataType()
		:
		operatingConstraintsPowerDescriptionData(std::vector<OperatingConstraintsPowerDescriptionDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerDescriptionListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsPowerDescriptionListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerDescriptionListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<ScaledNumberType> powerMin;
	std::optional<ScaledNumberType> powerMax;
	std::optional<ScaledNumberType> energyMin;
	std::optional<ScaledNumberType> energyMax;

	OperatingConstraintsPowerRangeDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		powerMin(ScaledNumberType{}),
		powerMax(ScaledNumberType{}),
		energyMin(ScaledNumberType{}),
		energyMax(ScaledNumberType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerRangeDataType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeDataType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> powerMin;
	std::optional<ScaledNumberElementsType> powerMax;
	std::optional<ScaledNumberElementsType> energyMin;
	std::optional<ScaledNumberElementsType> energyMax;

	OperatingConstraintsPowerRangeDataElementsType()
		:
		sequenceId(ElementTagType{}),
		powerMin(ScaledNumberElementsType{}),
		powerMax(ScaledNumberElementsType{}),
		energyMin(ScaledNumberElementsType{}),
		energyMax(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerRangeDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeListDataType { 
	std::optional<std::vector<OperatingConstraintsPowerRangeDataType>> operatingConstraintsPowerRangeData;

	OperatingConstraintsPowerRangeListDataType()
		:
		operatingConstraintsPowerRangeData(std::vector<OperatingConstraintsPowerRangeDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerRangeListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsPowerRangeListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerRangeListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<std::vector<ScaledNumberType>> power;

	OperatingConstraintsPowerLevelDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		power(std::vector<ScaledNumberType>{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerLevelDataType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelDataType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> power;

	OperatingConstraintsPowerLevelDataElementsType()
		:
		sequenceId(ElementTagType{}),
		power(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerLevelDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelListDataType { 
	std::optional<std::vector<OperatingConstraintsPowerLevelDataType>> operatingConstraintsPowerLevelData;

	OperatingConstraintsPowerLevelListDataType()
		:
		operatingConstraintsPowerLevelData(std::vector<OperatingConstraintsPowerLevelDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerLevelListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsPowerLevelListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsPowerLevelListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationDataType { 
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<ScaledNumberType> resumeEnergyEstimated;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<ScaledNumberType> resumeCostEstimated;
	std::optional<CurrencyType> currency;

	OperatingConstraintsResumeImplicationDataType()
		:
		sequenceId(PowerSequenceIdType{}),
		resumeEnergyEstimated(ScaledNumberType{}),
		energyUnit(UnitOfMeasurementType{}),
		resumeCostEstimated(ScaledNumberType{}),
		currency(CurrencyType{})
	{}
};
/**
 * Convert a OperatingConstraintsResumeImplicationDataType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationDataType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationDataElementsType { 
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> resumeEnergyEstimated;
	std::optional<ElementTagType> energyUnit;
	std::optional<ScaledNumberElementsType> resumeCostEstimated;
	std::optional<ElementTagType> currency;

	OperatingConstraintsResumeImplicationDataElementsType()
		:
		sequenceId(ElementTagType{}),
		resumeEnergyEstimated(ScaledNumberElementsType{}),
		energyUnit(ElementTagType{}),
		resumeCostEstimated(ScaledNumberElementsType{}),
		currency(ElementTagType{})
	{}
};
/**
 * Convert a OperatingConstraintsResumeImplicationDataElementsType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationDataElementsType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationListDataType { 
	std::optional<std::vector<OperatingConstraintsResumeImplicationDataType>> operatingConstraintsResumeImplicationData;

	OperatingConstraintsResumeImplicationListDataType()
		:
		operatingConstraintsResumeImplicationData(std::vector<OperatingConstraintsResumeImplicationDataType>{})
	{}
};
/**
 * Convert a OperatingConstraintsResumeImplicationListDataType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationListDataType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationListDataSelectorsType { 
	std::optional<PowerSequenceIdType> sequenceId;

	OperatingConstraintsResumeImplicationListDataSelectorsType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a OperatingConstraintsResumeImplicationListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationListDataSelectorsType &dst);

/**
 * Datatype SensingDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDataType { 
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<SensingStateType> state;
	std::optional<ScaledNumberType> value;

	SensingDataType()
		:
		timestamp(AbsoluteOrRelativeTimeType{}),
		state(SensingStateType{}),
		value(ScaledNumberType{})
	{}
};
/**
 * Convert a SensingDataType to its JSON representation
 * @param src The SensingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingDataType
 * @param src The JSON variant to convert
 * @param dst The SensingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingDataType &dst);

/**
 * Datatype SensingDataElementsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDataElementsType { 
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> state;
	std::optional<ScaledNumberElementsType> value;

	SensingDataElementsType()
		:
		timestamp(ElementTagType{}),
		state(ElementTagType{}),
		value(ScaledNumberElementsType{})
	{}
};
/**
 * Convert a SensingDataElementsType to its JSON representation
 * @param src The SensingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SensingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingDataElementsType &dst);

/**
 * Datatype SensingListDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingListDataType { 
	std::optional<std::vector<SensingDataType>> sensingData;

	SensingListDataType()
		:
		sensingData(std::vector<SensingDataType>{})
	{}
};
/**
 * Convert a SensingListDataType to its JSON representation
 * @param src The SensingListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingListDataType
 * @param src The JSON variant to convert
 * @param dst The SensingListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingListDataType &dst);

/**
 * Datatype SensingListDataSelectorsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingListDataSelectorsType { 
	std::optional<TimestampIntervalType> timestampInterval;

	SensingListDataSelectorsType()
		:
		timestampInterval(TimestampIntervalType{})
	{}
};
/**
 * Convert a SensingListDataSelectorsType to its JSON representation
 * @param src The SensingListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SensingListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingListDataSelectorsType &dst);

/**
 * Datatype SensingDescriptionDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDescriptionDataType { 
	std::optional<SensingTypeType> sensingType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	SensingDescriptionDataType()
		:
		sensingType(SensingTypeType{}),
		unit(UnitOfMeasurementType{}),
		scopeType(ScopeTypeType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a SensingDescriptionDataType to its JSON representation
 * @param src The SensingDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SensingDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingDescriptionDataType &dst);

/**
 * Datatype SensingDescriptionDataElementsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDescriptionDataElementsType { 
	std::optional<ElementTagType> sensingType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	SensingDescriptionDataElementsType()
		:
		sensingType(ElementTagType{}),
		unit(ElementTagType{}),
		scopeType(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a SensingDescriptionDataElementsType to its JSON representation
 * @param src The SensingDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SensingDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SensingDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SensingDescriptionDataElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesRelationType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesRelationType { 
	std::optional<AlternativesIdType> alternativesId;

	SmartEnergyManagementPsAlternativesRelationType()
		:
		alternativesId(AlternativesIdType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsAlternativesRelationType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesRelationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesRelationType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesRelationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesRelationType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotValueListType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotValueListType { 
	std::optional<std::vector<PowerTimeSlotValueDataType>> value;

	SmartEnergyManagementPsPowerTimeSlotValueListType()
		:
		value(std::vector<PowerTimeSlotValueDataType>{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotValueListType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotValueListType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotValueListType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotValueListType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotValueListType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotType { 
	std::optional<PowerTimeSlotScheduleDataType> schedule;
	std::optional<SmartEnergyManagementPsPowerTimeSlotValueListType> valueList;
	std::optional<PowerTimeSlotScheduleConstraintsDataType> scheduleConstraints;

	SmartEnergyManagementPsPowerTimeSlotType()
		:
		schedule(PowerTimeSlotScheduleDataType{}),
		valueList(SmartEnergyManagementPsPowerTimeSlotValueListType{}),
		scheduleConstraints(PowerTimeSlotScheduleConstraintsDataType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerSequenceType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerSequenceType { 
	std::optional<PowerSequenceDescriptionDataType> description;
	std::optional<PowerSequenceStateDataType> state;
	std::optional<PowerSequenceScheduleDataType> schedule;
	std::optional<PowerSequenceScheduleConstraintsDataType> scheduleConstraints;
	std::optional<PowerSequenceSchedulePreferenceDataType> schedulePreference;
	std::optional<OperatingConstraintsInterruptDataType> operatingConstraintsInterrupt;
	std::optional<OperatingConstraintsDurationDataType> operatingConstraintsDuration;
	std::optional<OperatingConstraintsResumeImplicationDataType> operatingConstraintsResumeImplication;
	std::optional<std::vector<SmartEnergyManagementPsPowerTimeSlotType>> powerTimeSlot;

	SmartEnergyManagementPsPowerSequenceType()
		:
		description(PowerSequenceDescriptionDataType{}),
		state(PowerSequenceStateDataType{}),
		schedule(PowerSequenceScheduleDataType{}),
		scheduleConstraints(PowerSequenceScheduleConstraintsDataType{}),
		schedulePreference(PowerSequenceSchedulePreferenceDataType{}),
		operatingConstraintsInterrupt(OperatingConstraintsInterruptDataType{}),
		operatingConstraintsDuration(OperatingConstraintsDurationDataType{}),
		operatingConstraintsResumeImplication(OperatingConstraintsResumeImplicationDataType{}),
		powerTimeSlot(std::vector<SmartEnergyManagementPsPowerTimeSlotType>{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerSequenceType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerSequenceType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerSequenceType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerSequenceType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerSequenceType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerSequenceType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesType { 
	std::optional<SmartEnergyManagementPsAlternativesRelationType> relation;
	std::optional<std::vector<SmartEnergyManagementPsPowerSequenceType>> powerSequence;

	SmartEnergyManagementPsAlternativesType()
		:
		relation(SmartEnergyManagementPsAlternativesRelationType{}),
		powerSequence(std::vector<SmartEnergyManagementPsPowerSequenceType>{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsAlternativesType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesType &dst);

/**
 * Datatype SmartEnergyManagementPsDataType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataType { 
	std::optional<PowerSequenceNodeScheduleInformationDataType> nodeScheduleInformation;
	std::optional<std::vector<SmartEnergyManagementPsAlternativesType>> alternatives;

	SmartEnergyManagementPsDataType()
		:
		nodeScheduleInformation(PowerSequenceNodeScheduleInformationDataType{}),
		alternatives(std::vector<SmartEnergyManagementPsAlternativesType>{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsDataType to its JSON representation
 * @param src The SmartEnergyManagementPsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesRelationElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesRelationElementsType { 
	std::optional<ElementTagType> alternativesId;

	SmartEnergyManagementPsAlternativesRelationElementsType()
		:
		alternativesId(ElementTagType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsAlternativesRelationElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesRelationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesRelationElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesRelationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesRelationElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotValueListElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotValueListElementsType { 
	std::optional<PowerTimeSlotValueDataElementsType> value;

	SmartEnergyManagementPsPowerTimeSlotValueListElementsType()
		:
		value(PowerTimeSlotValueDataElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotValueListElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotValueListElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotValueListElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotValueListElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotValueListElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotElementsType { 
	std::optional<PowerTimeSlotScheduleDataElementsType> schedule;
	std::optional<SmartEnergyManagementPsPowerTimeSlotValueListElementsType> valueList;
	std::optional<PowerTimeSlotScheduleConstraintsDataElementsType> scheduleConstraints;

	SmartEnergyManagementPsPowerTimeSlotElementsType()
		:
		schedule(PowerTimeSlotScheduleDataElementsType{}),
		valueList(SmartEnergyManagementPsPowerTimeSlotValueListElementsType{}),
		scheduleConstraints(PowerTimeSlotScheduleConstraintsDataElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerSequenceElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerSequenceElementsType { 
	std::optional<PowerSequenceDescriptionDataElementsType> description;
	std::optional<PowerSequenceStateDataElementsType> state;
	std::optional<PowerSequenceScheduleDataElementsType> schedule;
	std::optional<PowerSequenceScheduleConstraintsDataElementsType> scheduleConstraints;
	std::optional<PowerSequenceSchedulePreferenceDataElementsType> schedulePreference;
	std::optional<OperatingConstraintsInterruptDataElementsType> operatingConstraintsInterrupt;
	std::optional<OperatingConstraintsDurationDataElementsType> operatingConstraintsDuration;
	std::optional<OperatingConstraintsResumeImplicationDataElementsType> operatingConstraintsResumeImplication;
	std::optional<SmartEnergyManagementPsPowerTimeSlotElementsType> powerTimeSlot;

	SmartEnergyManagementPsPowerSequenceElementsType()
		:
		description(PowerSequenceDescriptionDataElementsType{}),
		state(PowerSequenceStateDataElementsType{}),
		schedule(PowerSequenceScheduleDataElementsType{}),
		scheduleConstraints(PowerSequenceScheduleConstraintsDataElementsType{}),
		schedulePreference(PowerSequenceSchedulePreferenceDataElementsType{}),
		operatingConstraintsInterrupt(OperatingConstraintsInterruptDataElementsType{}),
		operatingConstraintsDuration(OperatingConstraintsDurationDataElementsType{}),
		operatingConstraintsResumeImplication(OperatingConstraintsResumeImplicationDataElementsType{}),
		powerTimeSlot(SmartEnergyManagementPsPowerTimeSlotElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPowerSequenceElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerSequenceElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerSequenceElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerSequenceElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerSequenceElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerSequenceElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesElementsType { 
	std::optional<SmartEnergyManagementPsAlternativesRelationElementsType> relation;
	std::optional<SmartEnergyManagementPsPowerSequenceElementsType> powerSequence;

	SmartEnergyManagementPsAlternativesElementsType()
		:
		relation(SmartEnergyManagementPsAlternativesRelationElementsType{}),
		powerSequence(SmartEnergyManagementPsPowerSequenceElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsAlternativesElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsDataElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataElementsType { 
	std::optional<PowerSequenceNodeScheduleInformationDataElementsType> nodeScheduleInformation;
	std::optional<SmartEnergyManagementPsAlternativesElementsType> alternatives;

	SmartEnergyManagementPsDataElementsType()
		:
		nodeScheduleInformation(PowerSequenceNodeScheduleInformationDataElementsType{}),
		alternatives(SmartEnergyManagementPsAlternativesElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsDataElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsDataSelectorsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataSelectorsType { 
	std::optional<PowerSequenceAlternativesRelationListDataSelectorsType> alternativesRelation;
	std::optional<PowerSequenceDescriptionListDataSelectorsType> powerSequenceDescription;
	std::optional<PowerTimeSlotScheduleListDataSelectorsType> powerTimeSlotSchedule;
	std::optional<PowerTimeSlotValueListDataSelectorsType> powerTimeSlotValue;

	SmartEnergyManagementPsDataSelectorsType()
		:
		alternativesRelation(PowerSequenceAlternativesRelationListDataSelectorsType{}),
		powerSequenceDescription(PowerSequenceDescriptionListDataSelectorsType{}),
		powerTimeSlotSchedule(PowerTimeSlotScheduleListDataSelectorsType{}),
		powerTimeSlotValue(PowerTimeSlotValueListDataSelectorsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsDataSelectorsType to its JSON representation
 * @param src The SmartEnergyManagementPsDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataSelectorsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataType { 
	std::optional<std::vector<PowerSequencePriceDataType>> price;

	SmartEnergyManagementPsPriceDataType()
		:
		price(std::vector<PowerSequencePriceDataType>{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPriceDataType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataElementsType { 
	std::optional<PowerSequencePriceDataElementsType> price;

	SmartEnergyManagementPsPriceDataElementsType()
		:
		price(PowerSequencePriceDataElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPriceDataElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataSelectorsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataSelectorsType { 
	std::optional<PowerSequencePriceListDataSelectorsType> price;

	SmartEnergyManagementPsPriceDataSelectorsType()
		:
		price(PowerSequencePriceListDataSelectorsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPriceDataSelectorsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataSelectorsType &dst);

/**
 * Datatype SmartEnergyManagementPsConfigurationRequestCallType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsConfigurationRequestCallType { 
	std::optional<PowerSequenceScheduleConfigurationRequestCallType> scheduleConfigurationRequest;

	SmartEnergyManagementPsConfigurationRequestCallType()
		:
		scheduleConfigurationRequest(PowerSequenceScheduleConfigurationRequestCallType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsConfigurationRequestCallType to its JSON representation
 * @param src The SmartEnergyManagementPsConfigurationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsConfigurationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsConfigurationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsConfigurationRequestCallType &dst);

/**
 * Datatype SmartEnergyManagementPsConfigurationRequestCallElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsConfigurationRequestCallElementsType { 
	std::optional<PowerSequenceScheduleConfigurationRequestCallElementsType> scheduleConfigurationRequest;

	SmartEnergyManagementPsConfigurationRequestCallElementsType()
		:
		scheduleConfigurationRequest(PowerSequenceScheduleConfigurationRequestCallElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsConfigurationRequestCallElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsConfigurationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsConfigurationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsConfigurationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsConfigurationRequestCallElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceCalculationRequestCallType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceCalculationRequestCallType { 
	std::optional<PowerSequencePriceCalculationRequestCallType> priceCalculationRequest;

	SmartEnergyManagementPsPriceCalculationRequestCallType()
		:
		priceCalculationRequest(PowerSequencePriceCalculationRequestCallType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPriceCalculationRequestCallType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceCalculationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceCalculationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceCalculationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceCalculationRequestCallType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceCalculationRequestCallElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceCalculationRequestCallElementsType { 
	std::optional<PowerSequencePriceCalculationRequestCallElementsType> priceCalculationRequest;

	SmartEnergyManagementPsPriceCalculationRequestCallElementsType()
		:
		priceCalculationRequest(PowerSequencePriceCalculationRequestCallElementsType{})
	{}
};
/**
 * Convert a SmartEnergyManagementPsPriceCalculationRequestCallElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceCalculationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceCalculationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceCalculationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceCalculationRequestCallElementsType &dst);

/**
 * Datatype StateInformationDataType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationDataType { 
	std::optional<stateInformationIdType> stateInformationId;
	std::optional<StateInformationType> stateInformation;
	std::optional<bool> isActive;
	std::optional<StateInformationCategoryType> category;
	std::optional<AbsoluteOrRelativeTimeType> timeOfLastChange;

	StateInformationDataType()
		:
		stateInformationId(stateInformationIdType{}),
		stateInformation(StateInformationType{}),
		isActive(bool{}),
		category(StateInformationCategoryType{}),
		timeOfLastChange(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a StateInformationDataType to its JSON representation
 * @param src The StateInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a StateInformationDataType
 * @param src The JSON variant to convert
 * @param dst The StateInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationDataType &dst);

/**
 * Datatype StateInformationDataElementsType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationDataElementsType { 
	std::optional<ElementTagType> stateInformationId;
	std::optional<ElementTagType> stateInformation;
	std::optional<ElementTagType> isActive;
	std::optional<ElementTagType> category;
	std::optional<ElementTagType> timeOfLastChange;

	StateInformationDataElementsType()
		:
		stateInformationId(ElementTagType{}),
		stateInformation(ElementTagType{}),
		isActive(ElementTagType{}),
		category(ElementTagType{}),
		timeOfLastChange(ElementTagType{})
	{}
};
/**
 * Convert a StateInformationDataElementsType to its JSON representation
 * @param src The StateInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a StateInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The StateInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationDataElementsType &dst);

/**
 * Datatype StateInformationListDataType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationListDataType { 
	std::optional<std::vector<StateInformationDataType>> stateInformationData;

	StateInformationListDataType()
		:
		stateInformationData(std::vector<StateInformationDataType>{})
	{}
};
/**
 * Convert a StateInformationListDataType to its JSON representation
 * @param src The StateInformationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a StateInformationListDataType
 * @param src The JSON variant to convert
 * @param dst The StateInformationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationListDataType &dst);

/**
 * Datatype StateInformationListDataSelectorsType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationListDataSelectorsType { 
	std::optional<stateInformationIdType> stateInformationId;
	std::optional<StateInformationType> stateInformation;
	std::optional<bool> isActive;
	std::optional<StateInformationCategoryType> category;

	StateInformationListDataSelectorsType()
		:
		stateInformationId(stateInformationIdType{}),
		stateInformation(StateInformationType{}),
		isActive(bool{}),
		category(StateInformationCategoryType{})
	{}
};
/**
 * Convert a StateInformationListDataSelectorsType to its JSON representation
 * @param src The StateInformationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a StateInformationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The StateInformationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, StateInformationListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDataType { 
	std::optional<ConditionIdType> conditionId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<SupplyConditionEventTypeType> eventType;
	std::optional<SupplyConditionOriginatorType> originator;
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdPercentage;
	std::optional<TimePeriodType> relevantPeriod;
	std::optional<DescriptionType> description;
	std::optional<GridConditionType> gridCondition;

	SupplyConditionDataType()
		:
		conditionId(ConditionIdType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		eventType(SupplyConditionEventTypeType{}),
		originator(SupplyConditionOriginatorType{}),
		thresholdId(ThresholdIdType{}),
		thresholdPercentage(ScaledNumberType{}),
		relevantPeriod(TimePeriodType{}),
		description(DescriptionType{}),
		gridCondition(GridConditionType{})
	{}
};
/**
 * Convert a SupplyConditionDataType to its JSON representation
 * @param src The SupplyConditionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDataType &dst);

/**
 * Datatype SupplyConditionDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDataElementsType { 
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventType;
	std::optional<ElementTagType> originator;
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdPercentage;
	std::optional<TimePeriodElementsType> relevantPeriod;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> gridCondition;

	SupplyConditionDataElementsType()
		:
		conditionId(ElementTagType{}),
		timestamp(ElementTagType{}),
		eventType(ElementTagType{}),
		originator(ElementTagType{}),
		thresholdId(ElementTagType{}),
		thresholdPercentage(ScaledNumberElementsType{}),
		relevantPeriod(TimePeriodElementsType{}),
		description(ElementTagType{}),
		gridCondition(ElementTagType{})
	{}
};
/**
 * Convert a SupplyConditionDataElementsType to its JSON representation
 * @param src The SupplyConditionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDataElementsType &dst);

/**
 * Datatype SupplyConditionListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionListDataType { 
	std::optional<std::vector<SupplyConditionDataType>> supplyConditionData;

	SupplyConditionListDataType()
		:
		supplyConditionData(std::vector<SupplyConditionDataType>{})
	{}
};
/**
 * Convert a SupplyConditionListDataType to its JSON representation
 * @param src The SupplyConditionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionListDataType &dst);

/**
 * Datatype SupplyConditionListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionListDataSelectorsType { 
	std::optional<ConditionIdType> conditionId;
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<SupplyConditionEventTypeType> eventType;
	std::optional<SupplyConditionOriginatorType> originator;

	SupplyConditionListDataSelectorsType()
		:
		conditionId(ConditionIdType{}),
		timestampInterval(TimestampIntervalType{}),
		eventType(SupplyConditionEventTypeType{}),
		originator(SupplyConditionOriginatorType{})
	{}
};
/**
 * Convert a SupplyConditionListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionDescriptionDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionDataType { 
	std::optional<ConditionIdType> conditionId;
	std::optional<CommodityTypeType> commodityType;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	SupplyConditionDescriptionDataType()
		:
		conditionId(ConditionIdType{}),
		commodityType(CommodityTypeType{}),
		positiveEnergyDirection(EnergyDirectionType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a SupplyConditionDescriptionDataType to its JSON representation
 * @param src The SupplyConditionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionDataType &dst);

/**
 * Datatype SupplyConditionDescriptionDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionDataElementsType { 
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	SupplyConditionDescriptionDataElementsType()
		:
		conditionId(ElementTagType{}),
		commodityType(ElementTagType{}),
		positiveEnergyDirection(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a SupplyConditionDescriptionDataElementsType to its JSON representation
 * @param src The SupplyConditionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionDataElementsType &dst);

/**
 * Datatype SupplyConditionDescriptionListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionListDataType { 
	std::optional<std::vector<SupplyConditionDescriptionDataType>> supplyConditionDescriptionData;

	SupplyConditionDescriptionListDataType()
		:
		supplyConditionDescriptionData(std::vector<SupplyConditionDescriptionDataType>{})
	{}
};
/**
 * Convert a SupplyConditionDescriptionListDataType to its JSON representation
 * @param src The SupplyConditionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionListDataType &dst);

/**
 * Datatype SupplyConditionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionListDataSelectorsType { 
	std::optional<ConditionIdType> conditionId;

	SupplyConditionDescriptionListDataSelectorsType()
		:
		conditionId(ConditionIdType{})
	{}
};
/**
 * Convert a SupplyConditionDescriptionListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionThresholdRelationDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationDataType { 
	std::optional<ConditionIdType> conditionId;
	std::optional<std::vector<ThresholdIdType>> thresholdId;

	SupplyConditionThresholdRelationDataType()
		:
		conditionId(ConditionIdType{}),
		thresholdId(std::vector<ThresholdIdType>{})
	{}
};
/**
 * Convert a SupplyConditionThresholdRelationDataType to its JSON representation
 * @param src The SupplyConditionThresholdRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationDataType &dst);

/**
 * Datatype SupplyConditionThresholdRelationDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationDataElementsType { 
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> thresholdId;

	SupplyConditionThresholdRelationDataElementsType()
		:
		conditionId(ElementTagType{}),
		thresholdId(ElementTagType{})
	{}
};
/**
 * Convert a SupplyConditionThresholdRelationDataElementsType to its JSON representation
 * @param src The SupplyConditionThresholdRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationDataElementsType &dst);

/**
 * Datatype SupplyConditionThresholdRelationListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationListDataType { 
	std::optional<std::vector<SupplyConditionThresholdRelationDataType>> supplyConditionThresholdRelationData;

	SupplyConditionThresholdRelationListDataType()
		:
		supplyConditionThresholdRelationData(std::vector<SupplyConditionThresholdRelationDataType>{})
	{}
};
/**
 * Convert a SupplyConditionThresholdRelationListDataType to its JSON representation
 * @param src The SupplyConditionThresholdRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationListDataType &dst);

/**
 * Datatype SupplyConditionThresholdRelationListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationListDataSelectorsType { 
	std::optional<ConditionIdType> conditionId;
	std::optional<ThresholdIdType> thresholdId;

	SupplyConditionThresholdRelationListDataSelectorsType()
		:
		conditionId(ConditionIdType{}),
		thresholdId(ThresholdIdType{})
	{}
};
/**
 * Convert a SupplyConditionThresholdRelationListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionThresholdRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationListDataSelectorsType &dst);

/**
 * Datatype TaskManagementDirectControlRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementDirectControlRelatedType { 

	TaskManagementDirectControlRelatedType()
		
	{}
};
/**
 * Convert a TaskManagementDirectControlRelatedType to its JSON representation
 * @param src The TaskManagementDirectControlRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementDirectControlRelatedType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementDirectControlRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementDirectControlRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementDirectControlRelatedType &dst);

/**
 * Datatype TaskManagementDirectControlRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementDirectControlRelatedElementsType { 

	TaskManagementDirectControlRelatedElementsType()
		
	{}
};
/**
 * Convert a TaskManagementDirectControlRelatedElementsType to its JSON representation
 * @param src The TaskManagementDirectControlRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementDirectControlRelatedElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementDirectControlRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementDirectControlRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementDirectControlRelatedElementsType &dst);

/**
 * Datatype TaskManagementHvacRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementHvacRelatedType { 
	std::optional<HvacOverrunIdType> overrunId;

	TaskManagementHvacRelatedType()
		:
		overrunId(HvacOverrunIdType{})
	{}
};
/**
 * Convert a TaskManagementHvacRelatedType to its JSON representation
 * @param src The TaskManagementHvacRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementHvacRelatedType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementHvacRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementHvacRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementHvacRelatedType &dst);

/**
 * Datatype TaskManagementHvacRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementHvacRelatedElementsType { 
	std::optional<ElementTagType> overrunId;

	TaskManagementHvacRelatedElementsType()
		:
		overrunId(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementHvacRelatedElementsType to its JSON representation
 * @param src The TaskManagementHvacRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementHvacRelatedElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementHvacRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementHvacRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementHvacRelatedElementsType &dst);

/**
 * Datatype TaskManagementLoadControlReleatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementLoadControlReleatedType { 
	std::optional<LoadControlEventIdType> eventId;

	TaskManagementLoadControlReleatedType()
		:
		eventId(LoadControlEventIdType{})
	{}
};
/**
 * Convert a TaskManagementLoadControlReleatedType to its JSON representation
 * @param src The TaskManagementLoadControlReleatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementLoadControlReleatedType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementLoadControlReleatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementLoadControlReleatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementLoadControlReleatedType &dst);

/**
 * Datatype TaskManagementLoadControlReleatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementLoadControlReleatedElementsType { 
	std::optional<ElementTagType> eventId;

	TaskManagementLoadControlReleatedElementsType()
		:
		eventId(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementLoadControlReleatedElementsType to its JSON representation
 * @param src The TaskManagementLoadControlReleatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementLoadControlReleatedElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementLoadControlReleatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementLoadControlReleatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementLoadControlReleatedElementsType &dst);

/**
 * Datatype TaskManagementPowerSequencesRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementPowerSequencesRelatedType { 
	std::optional<PowerSequenceIdType> sequenceId;

	TaskManagementPowerSequencesRelatedType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a TaskManagementPowerSequencesRelatedType to its JSON representation
 * @param src The TaskManagementPowerSequencesRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementPowerSequencesRelatedType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementPowerSequencesRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementPowerSequencesRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementPowerSequencesRelatedType &dst);

/**
 * Datatype TaskManagementPowerSequencesRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementPowerSequencesRelatedElementsType { 
	std::optional<ElementTagType> sequenceId;

	TaskManagementPowerSequencesRelatedElementsType()
		:
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementPowerSequencesRelatedElementsType to its JSON representation
 * @param src The TaskManagementPowerSequencesRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementPowerSequencesRelatedElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementPowerSequencesRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementPowerSequencesRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementPowerSequencesRelatedElementsType &dst);

/**
 * Datatype TaskManagementSmartEnergyManagementPsRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementSmartEnergyManagementPsRelatedType { 
	std::optional<PowerSequenceIdType> sequenceId;

	TaskManagementSmartEnergyManagementPsRelatedType()
		:
		sequenceId(PowerSequenceIdType{})
	{}
};
/**
 * Convert a TaskManagementSmartEnergyManagementPsRelatedType to its JSON representation
 * @param src The TaskManagementSmartEnergyManagementPsRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementSmartEnergyManagementPsRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementSmartEnergyManagementPsRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementSmartEnergyManagementPsRelatedType &dst);

/**
 * Datatype TaskManagementSmartEnergyManagementPsRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementSmartEnergyManagementPsRelatedElementsType { 
	std::optional<ElementTagType> sequenceId;

	TaskManagementSmartEnergyManagementPsRelatedElementsType()
		:
		sequenceId(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementSmartEnergyManagementPsRelatedElementsType to its JSON representation
 * @param src The TaskManagementSmartEnergyManagementPsRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementSmartEnergyManagementPsRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementSmartEnergyManagementPsRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementSmartEnergyManagementPsRelatedElementsType &dst);

/**
 * Datatype TaskManagementJobDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDataType { 
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<TaskManagementJobStateType> jobState;
	std::optional<std::string> elapsedTime;
	std::optional<std::string> remainingTime;

	TaskManagementJobDataType()
		:
		jobId(TaskManagementJobIdType{}),
		timestamp(AbsoluteOrRelativeTimeType{}),
		jobState(TaskManagementJobStateType{}),
		elapsedTime(std::string{}),
		remainingTime(std::string{})
	{}
};
/**
 * Convert a TaskManagementJobDataType to its JSON representation
 * @param src The TaskManagementJobDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDataType &dst);

/**
 * Datatype TaskManagementJobDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDataElementsType { 
	std::optional<ElementTagType> jobId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> jobState;
	std::optional<ElementTagType> elapsedTime;
	std::optional<ElementTagType> remainingTime;

	TaskManagementJobDataElementsType()
		:
		jobId(ElementTagType{}),
		timestamp(ElementTagType{}),
		jobState(ElementTagType{}),
		elapsedTime(ElementTagType{}),
		remainingTime(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementJobDataElementsType to its JSON representation
 * @param src The TaskManagementJobDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDataElementsType &dst);

/**
 * Datatype TaskManagementJobListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobListDataType { 
	std::optional<std::vector<TaskManagementJobDataType>> taskManagementJobData;

	TaskManagementJobListDataType()
		:
		taskManagementJobData(std::vector<TaskManagementJobDataType>{})
	{}
};
/**
 * Convert a TaskManagementJobListDataType to its JSON representation
 * @param src The TaskManagementJobListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobListDataType &dst);

/**
 * Datatype TaskManagementJobListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobListDataSelectorsType { 
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobStateType> jobState;

	TaskManagementJobListDataSelectorsType()
		:
		jobId(TaskManagementJobIdType{}),
		jobState(TaskManagementJobStateType{})
	{}
};
/**
 * Convert a TaskManagementJobListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobListDataSelectorsType &dst);

/**
 * Datatype TaskManagementJobRelationDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationDataType { 
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementDirectControlRelatedType> directControlRelated;
	std::optional<TaskManagementHvacRelatedType> hvacRelated;
	std::optional<TaskManagementLoadControlReleatedType> loadControlReleated;
	std::optional<TaskManagementPowerSequencesRelatedType> powerSequencesRelated;
	std::optional<TaskManagementSmartEnergyManagementPsRelatedType> smartEnergyManagementPsRelated;

	TaskManagementJobRelationDataType()
		:
		jobId(TaskManagementJobIdType{}),
		directControlRelated(TaskManagementDirectControlRelatedType{}),
		hvacRelated(TaskManagementHvacRelatedType{}),
		loadControlReleated(TaskManagementLoadControlReleatedType{}),
		powerSequencesRelated(TaskManagementPowerSequencesRelatedType{}),
		smartEnergyManagementPsRelated(TaskManagementSmartEnergyManagementPsRelatedType{})
	{}
};
/**
 * Convert a TaskManagementJobRelationDataType to its JSON representation
 * @param src The TaskManagementJobRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationDataType &dst);

/**
 * Datatype TaskManagementJobRelationDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationDataElementsType { 
	std::optional<ElementTagType> jobId;
	std::optional<TaskManagementDirectControlRelatedElementsType> directControlRelated;
	std::optional<TaskManagementHvacRelatedElementsType> hvacRelated;
	std::optional<TaskManagementLoadControlReleatedElementsType> loadControlReleated;
	std::optional<TaskManagementPowerSequencesRelatedElementsType> powerSequencesRelated;
	std::optional<TaskManagementSmartEnergyManagementPsRelatedElementsType> smartEnergyManagementPsRelated;

	TaskManagementJobRelationDataElementsType()
		:
		jobId(ElementTagType{}),
		directControlRelated(TaskManagementDirectControlRelatedElementsType{}),
		hvacRelated(TaskManagementHvacRelatedElementsType{}),
		loadControlReleated(TaskManagementLoadControlReleatedElementsType{}),
		powerSequencesRelated(TaskManagementPowerSequencesRelatedElementsType{}),
		smartEnergyManagementPsRelated(TaskManagementSmartEnergyManagementPsRelatedElementsType{})
	{}
};
/**
 * Convert a TaskManagementJobRelationDataElementsType to its JSON representation
 * @param src The TaskManagementJobRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationDataElementsType &dst);

/**
 * Datatype TaskManagementJobRelationListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationListDataType { 
	std::optional<std::vector<TaskManagementJobRelationDataType>> taskManagementJobRelationData;

	TaskManagementJobRelationListDataType()
		:
		taskManagementJobRelationData(std::vector<TaskManagementJobRelationDataType>{})
	{}
};
/**
 * Convert a TaskManagementJobRelationListDataType to its JSON representation
 * @param src The TaskManagementJobRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationListDataType &dst);

/**
 * Datatype TaskManagementJobRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationListDataSelectorsType { 
	std::optional<TaskManagementJobIdType> jobId;

	TaskManagementJobRelationListDataSelectorsType()
		:
		jobId(TaskManagementJobIdType{})
	{}
};
/**
 * Convert a TaskManagementJobRelationListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationListDataSelectorsType &dst);

/**
 * Datatype TaskManagementJobDescriptionDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionDataType { 
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobSourceType> jobSource;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;

	TaskManagementJobDescriptionDataType()
		:
		jobId(TaskManagementJobIdType{}),
		jobSource(TaskManagementJobSourceType{}),
		label(LabelType{}),
		description(DescriptionType{})
	{}
};
/**
 * Convert a TaskManagementJobDescriptionDataType to its JSON representation
 * @param src The TaskManagementJobDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionDataType &dst);

/**
 * Datatype TaskManagementJobDescriptionDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionDataElementsType { 
	std::optional<ElementTagType> jobId;
	std::optional<ElementTagType> jobSource;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;

	TaskManagementJobDescriptionDataElementsType()
		:
		jobId(ElementTagType{}),
		jobSource(ElementTagType{}),
		label(ElementTagType{}),
		description(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementJobDescriptionDataElementsType to its JSON representation
 * @param src The TaskManagementJobDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionDataElementsType &dst);

/**
 * Datatype TaskManagementJobDescriptionListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionListDataType { 
	std::optional<std::vector<TaskManagementJobDescriptionDataType>> taskManagementJobDescriptionData;

	TaskManagementJobDescriptionListDataType()
		:
		taskManagementJobDescriptionData(std::vector<TaskManagementJobDescriptionDataType>{})
	{}
};
/**
 * Convert a TaskManagementJobDescriptionListDataType to its JSON representation
 * @param src The TaskManagementJobDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionListDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionListDataType &dst);

/**
 * Datatype TaskManagementJobDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionListDataSelectorsType { 
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobSourceType> jobSource;

	TaskManagementJobDescriptionListDataSelectorsType()
		:
		jobId(TaskManagementJobIdType{}),
		jobSource(TaskManagementJobSourceType{})
	{}
};
/**
 * Convert a TaskManagementJobDescriptionListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionListDataSelectorsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionListDataSelectorsType &dst);

/**
 * Datatype TaskManagementOverviewDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementOverviewDataType { 
	std::optional<bool> remoteControllable;
	std::optional<bool> jobsActive;

	TaskManagementOverviewDataType()
		:
		remoteControllable(bool{}),
		jobsActive(bool{})
	{}
};
/**
 * Convert a TaskManagementOverviewDataType to its JSON representation
 * @param src The TaskManagementOverviewDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementOverviewDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementOverviewDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementOverviewDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementOverviewDataType &dst);

/**
 * Datatype TaskManagementOverviewDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementOverviewDataElementsType { 
	std::optional<ElementTagType> remoteControllable;
	std::optional<ElementTagType> jobsActive;

	TaskManagementOverviewDataElementsType()
		:
		remoteControllable(ElementTagType{}),
		jobsActive(ElementTagType{})
	{}
};
/**
 * Convert a TaskManagementOverviewDataElementsType to its JSON representation
 * @param src The TaskManagementOverviewDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementOverviewDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TaskManagementOverviewDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementOverviewDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TaskManagementOverviewDataElementsType &dst);

/**
 * Datatype TimeInformationDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeInformationDataType { 
	std::optional<std::string> utc;
	std::optional<std::string> utcOffset;
	std::optional<DayOfWeekType> dayOfWeek;
	std::optional<CalendarWeekType> calendarWeek;

	TimeInformationDataType()
		:
		utc(std::string{}),
		utcOffset(std::string{}),
		dayOfWeek(DayOfWeekType{}),
		calendarWeek(CalendarWeekType{})
	{}
};
/**
 * Convert a TimeInformationDataType to its JSON representation
 * @param src The TimeInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeInformationDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeInformationDataType
 * @param src The JSON variant to convert
 * @param dst The TimeInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeInformationDataType &dst);

/**
 * Datatype TimeInformationDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeInformationDataElementsType { 
	std::optional<ElementTagType> utc;
	std::optional<ElementTagType> utcOffset;
	std::optional<ElementTagType> dayOfWeek;
	std::optional<ElementTagType> calendarWeek;

	TimeInformationDataElementsType()
		:
		utc(ElementTagType{}),
		utcOffset(ElementTagType{}),
		dayOfWeek(ElementTagType{}),
		calendarWeek(ElementTagType{})
	{}
};
/**
 * Convert a TimeInformationDataElementsType to its JSON representation
 * @param src The TimeInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeInformationDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeInformationDataElementsType &dst);

/**
 * Datatype TimeDistributorDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorDataType { 
	std::optional<bool> isTimeDistributor;
	std::optional<uint32_t> distributorPriority;

	TimeDistributorDataType()
		:
		isTimeDistributor(bool{}),
		distributorPriority(uint32_t{})
	{}
};
/**
 * Convert a TimeDistributorDataType to its JSON representation
 * @param src The TimeDistributorDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeDistributorDataType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeDistributorDataType &dst);

/**
 * Datatype TimeDistributorDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorDataElementsType { 
	std::optional<ElementTagType> isTimeDistributor;
	std::optional<ElementTagType> distributorPriority;

	TimeDistributorDataElementsType()
		:
		isTimeDistributor(ElementTagType{}),
		distributorPriority(ElementTagType{})
	{}
};
/**
 * Convert a TimeDistributorDataElementsType to its JSON representation
 * @param src The TimeDistributorDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeDistributorDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeDistributorDataElementsType &dst);

/**
 * Datatype TimePrecisionDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimePrecisionDataType { 
	std::optional<bool> isSynchronised;
	std::optional<std::string> lastSyncAt;
	std::optional<int> clockDrift;

	TimePrecisionDataType()
		:
		isSynchronised(bool{}),
		lastSyncAt(std::string{}),
		clockDrift(int{})
	{}
};
/**
 * Convert a TimePrecisionDataType to its JSON representation
 * @param src The TimePrecisionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePrecisionDataType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimePrecisionDataType
 * @param src The JSON variant to convert
 * @param dst The TimePrecisionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimePrecisionDataType &dst);

/**
 * Datatype TimePrecisionDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimePrecisionDataElementsType { 
	std::optional<ElementTagType> isSynchronised;
	std::optional<ElementTagType> lastSyncAt;
	std::optional<ElementTagType> clockDrift;

	TimePrecisionDataElementsType()
		:
		isSynchronised(ElementTagType{}),
		lastSyncAt(ElementTagType{}),
		clockDrift(ElementTagType{})
	{}
};
/**
 * Convert a TimePrecisionDataElementsType to its JSON representation
 * @param src The TimePrecisionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePrecisionDataElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimePrecisionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimePrecisionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimePrecisionDataElementsType &dst);

/**
 * Datatype TimeDistributorEnquiryCallType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorEnquiryCallType { 

	TimeDistributorEnquiryCallType()
		
	{}
};
/**
 * Convert a TimeDistributorEnquiryCallType to its JSON representation
 * @param src The TimeDistributorEnquiryCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorEnquiryCallType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeDistributorEnquiryCallType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorEnquiryCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeDistributorEnquiryCallType &dst);

/**
 * Datatype TimeDistributorEnquiryCallElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorEnquiryCallElementsType { 

	TimeDistributorEnquiryCallElementsType()
		
	{}
};
/**
 * Convert a TimeDistributorEnquiryCallElementsType to its JSON representation
 * @param src The TimeDistributorEnquiryCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorEnquiryCallElementsType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a TimeDistributorEnquiryCallElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorEnquiryCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, TimeDistributorEnquiryCallElementsType &dst);

/**
 * Datatype HeaderType as defined in EEBus_SPINE_TS_Datagram.xsd
*/
struct HeaderType { 
	std::optional<SpecificationVersionType> specificationVersion;
	std::optional<FeatureAddressType> addressSource;
	std::optional<FeatureAddressType> addressDestination;
	std::optional<FeatureAddressType> addressOriginator;
	std::optional<MsgCounterType> msgCounter;
	std::optional<MsgCounterType> msgCounterReference;
	std::optional<CmdClassifierType> cmdClassifier;
	std::optional<bool> ackRequest;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;

	HeaderType()
		:
		specificationVersion(SpecificationVersionType{}),
		addressSource(FeatureAddressType{}),
		addressDestination(FeatureAddressType{}),
		addressOriginator(FeatureAddressType{}),
		msgCounter(MsgCounterType{}),
		msgCounterReference(MsgCounterType{}),
		cmdClassifier(CmdClassifierType{}),
		ackRequest(bool{}),
		timestamp(AbsoluteOrRelativeTimeType{})
	{}
};
/**
 * Convert a HeaderType to its JSON representation
 * @param src The HeaderType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HeaderType &src, JsonVariant& dst);
/**
 * Convert a JSON representation to a HeaderType
 * @param src The JSON variant to convert
 * @param dst The HeaderType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst& src, HeaderType &dst);






class SpineDataTypeHandler {
    public:

        
		std::optional<MessagingNumberType> messagingnumbertype;
		std::optional<MessagingTypeType> messagingtypetype;
		std::optional<MessagingDataTextType> messagingdatatexttype;
		std::optional<LabelType> labeltype;
		std::optional<DescriptionType> descriptiontype;
		std::optional<SpecificationVersionType> specificationversiontype;
		std::optional<EnumExtendType> enumextendtype;
		std::optional<AbsoluteOrRelativeTimeType> absoluteorrelativetimetype;
		std::optional<RecurringIntervalType> recurringintervaltype;
		std::optional<DayOfMonthType> dayofmonthtype;
		std::optional<CalendarWeekType> calendarweektype;
		std::optional<OccurrenceType> occurrencetype;
		std::optional<NumberType> numbertype;
		std::optional<ScaleType> scaletype;
		std::optional<MaxResponseDelayType> maxresponsedelaytype;
		std::optional<CommodityTypeType> commoditytypetype;
		std::optional<EnergyDirectionType> energydirectiontype;
		std::optional<EnergyModeType> energymodetype;
		std::optional<UnitOfMeasurementType> unitofmeasurementtype;
		std::optional<CurrencyType> currencytype;
		std::optional<AddressDeviceType> addressdevicetype;
		std::optional<AddressEntityType> addressentitytype;
		std::optional<AddressFeatureType> addressfeaturetype;
		std::optional<ScopeTypeType> scopetypetype;
		std::optional<FeatureGroupType> featuregrouptype;
		std::optional<DeviceTypeType> devicetypetype;
		std::optional<EntityTypeType> entitytypetype;
		std::optional<FeatureTypeType> featuretypetype;
		std::optional<FeatureSpecificUsageType> featurespecificusagetype;
		std::optional<FeatureSpecificUsageEnumType> featurespecificusageenumtype;
		std::optional<FunctionType> functiontype;
		std::optional<TimeSeriesIdType> timeseriesidtype;
		std::optional<TimeSeriesSlotIdType> timeseriesslotidtype;
		std::optional<TimeSeriesSlotCountType> timeseriesslotcounttype;
		std::optional<TimeSeriesTypeType> timeseriestypetype;
		std::optional<MeasurementIdType> measurementidtype;
		std::optional<MeasurementTypeType> measurementtypetype;
		std::optional<MeasurementValueTypeType> measurementvaluetypetype;
		std::optional<MeasurementValueSourceType> measurementvaluesourcetype;
		std::optional<MeasurementValueTendencyType> measurementvaluetendencytype;
		std::optional<MeasurementValueStateType> measurementvaluestatetype;
		std::optional<ThresholdIdType> thresholdidtype;
		std::optional<ThresholdTypeType> thresholdtypetype;
		std::optional<DirectControlActivityStateType> directcontrolactivitystatetype;
		std::optional<AlternativesIdType> alternativesidtype;
		std::optional<PowerSequenceIdType> powersequenceidtype;
		std::optional<PowerTimeSlotNumberType> powertimeslotnumbertype;
		std::optional<PowerTimeSlotValueTypeType> powertimeslotvaluetypetype;
		std::optional<PowerSequenceScopeType> powersequencescopetype;
		std::optional<PowerSequenceStateType> powersequencestatetype;
		std::optional<ErrorNumberType> errornumbertype;
		std::optional<BindingIdType> bindingidtype;
		std::optional<ActuatorLevelFctType> actuatorlevelfcttype;
		std::optional<MsgCounterType> msgcountertype;
		std::optional<FilterIdType> filteridtype;
		std::optional<ActuatorSwitchFctType> actuatorswitchfcttype;
		std::optional<AlarmIdType> alarmidtype;
		std::optional<AlarmTypeType> alarmtypetype;
		std::optional<BillIdType> billidtype;
		std::optional<BillTypeType> billtypetype;
		std::optional<BillPositionIdType> billpositionidtype;
		std::optional<BillPositionCountType> billpositioncounttype;
		std::optional<BillPositionTypeType> billpositiontypetype;
		std::optional<BillValueIdType> billvalueidtype;
		std::optional<BillCostIdType> billcostidtype;
		std::optional<BillCostTypeType> billcosttypetype;
		std::optional<IdentificationIdType> identificationidtype;
		std::optional<IdentificationTypeType> identificationtypetype;
		std::optional<IdentificationValueType> identificationvaluetype;
		std::optional<SessionIdType> sessionidtype;
		std::optional<PurposeIdType> purposeidtype;
		std::optional<ChannelIdType> channelidtype;
		std::optional<DeviceClassificationStringType> deviceclassificationstringtype;
		std::optional<PowerSourceType> powersourcetype;
		std::optional<DeviceConfigurationKeyIdType> deviceconfigurationkeyidtype;
		std::optional<DeviceConfigurationKeyValueStringType> deviceconfigurationkeyvaluestringtype;
		std::optional<DeviceConfigurationKeyNameType> deviceconfigurationkeynametype;
		std::optional<VendorStateCodeType> vendorstatecodetype;
		std::optional<LastErrorCodeType> lasterrorcodetype;
		std::optional<DeviceDiagnosisOperatingStateType> devicediagnosisoperatingstatetype;
		std::optional<PowerSupplyConditionType> powersupplyconditiontype;
		std::optional<ElectricalConnectionIdType> electricalconnectionidtype;
		std::optional<ElectricalConnectionParameterIdType> electricalconnectionparameteridtype;
		std::optional<ElectricalConnectionMeasurandVariantType> electricalconnectionmeasurandvarianttype;
		std::optional<ElectricalConnectionVoltageTypeType> electricalconnectionvoltagetypetype;
		std::optional<ElectricalConnectionAcMeasurementTypeType> electricalconnectionacmeasurementtypetype;
		std::optional<ElectricalConnectionPhaseNameType> electricalconnectionphasenametype;
		std::optional<ElectricalConnectionCharacteristicIdType> electricalconnectioncharacteristicidtype;
		std::optional<ElectricalConnectionCharacteristicContextType> electricalconnectioncharacteristiccontexttype;
		std::optional<ElectricalConnectionCharacteristicTypeType> electricalconnectioncharacteristictypetype;
		std::optional<HvacSystemFunctionIdType> hvacsystemfunctionidtype;
		std::optional<HvacSystemFunctionTypeType> hvacsystemfunctiontypetype;
		std::optional<HvacOperationModeIdType> hvacoperationmodeidtype;
		std::optional<HvacOperationModeTypeType> hvacoperationmodetypetype;
		std::optional<HvacOverrunIdType> hvacoverrunidtype;
		std::optional<HvacOverrunTypeType> hvacoverruntypetype;
		std::optional<HvacOverrunStatusType> hvacoverrunstatustype;
		std::optional<SetpointIdType> setpointidtype;
		std::optional<SetpointTypeType> setpointtypetype;
		std::optional<TimeTableIdType> timetableidtype;
		std::optional<TimeSlotIdType> timeslotidtype;
		std::optional<TimeSlotCountType> timeslotcounttype;
		std::optional<TimeSlotTimeModeType> timeslottimemodetype;
		std::optional<TariffIdType> tariffidtype;
		std::optional<TariffCountType> tariffcounttype;
		std::optional<TierBoundaryIdType> tierboundaryidtype;
		std::optional<TierBoundaryCountType> tierboundarycounttype;
		std::optional<TierBoundaryTypeType> tierboundarytypetype;
		std::optional<CommodityIdType> commodityidtype;
		std::optional<TierIdType> tieridtype;
		std::optional<TierCountType> tiercounttype;
		std::optional<TierTypeType> tiertypetype;
		std::optional<IncentiveIdType> incentiveidtype;
		std::optional<IncentiveCountType> incentivecounttype;
		std::optional<IncentiveTypeType> incentivetypetype;
		std::optional<IncentivePriorityType> incentiveprioritytype;
		std::optional<IncentiveValueTypeType> incentivevaluetypetype;
		std::optional<LoadControlEventIdType> loadcontroleventidtype;
		std::optional<LoadControlEventActionType> loadcontroleventactiontype;
		std::optional<LoadControlEventStateType> loadcontroleventstatetype;
		std::optional<LoadControlLimitIdType> loadcontrollimitidtype;
		std::optional<LoadControlLimitTypeType> loadcontrollimittypetype;
		std::optional<LoadControlCategoryType> loadcontrolcategorytype;
		std::optional<NetworkManagementNativeSetupType> networkmanagementnativesetuptype;
		std::optional<NetworkManagementScanSetupType> networkmanagementscansetuptype;
		std::optional<NetworkManagementSetupType> networkmanagementsetuptype;
		std::optional<NetworkManagementCandidateSetupType> networkmanagementcandidatesetuptype;
		std::optional<NetworkManagementTechnologyAddressType> networkmanagementtechnologyaddresstype;
		std::optional<NetworkManagementCommunicationsTechnologyInformationType> networkmanagementcommunicationstechnologyinformationtype;
		std::optional<NetworkManagementMinimumTrustLevelType> networkmanagementminimumtrustleveltype;
		std::optional<NetworkManagementProcessTimeoutType> networkmanagementprocesstimeouttype;
		std::optional<SubscriptionIdType> subscriptionidtype;
		std::optional<UseCaseActorType> usecaseactortype;
		std::optional<UseCaseActorEnumType> usecaseactorenumtype;
		std::optional<UseCaseNameType> usecasenametype;
		std::optional<UseCaseNameEnumType> usecasenameenumtype;
		std::optional<UseCaseScenarioSupportType> usecasescenariosupporttype;
		std::optional<SensingStateType> sensingstatetype;
		std::optional<SensingTypeType> sensingtypetype;
		std::optional<stateInformationIdType> stateinformationidtype;
		std::optional<StateInformationType> stateinformationtype;
		std::optional<StateInformationCategoryType> stateinformationcategorytype;
		std::optional<ConditionIdType> conditionidtype;
		std::optional<SupplyConditionEventTypeType> supplyconditioneventtypetype;
		std::optional<SupplyConditionOriginatorType> supplyconditionoriginatortype;
		std::optional<GridConditionType> gridconditiontype;
		std::optional<TaskManagementJobIdType> taskmanagementjobidtype;
		std::optional<TaskManagementJobStateType> taskmanagementjobstatetype;
		std::optional<TaskManagementJobSourceType> taskmanagementjobsourcetype;
		std::optional<SpecificationVersionDataType> specificationversiondatatype;
		std::optional<MessagingTypeEnumType> messagingtypeenumtype;
		std::optional<RecurringIntervalEnumType> recurringintervalenumtype;
		std::optional<MonthType> monthtype;
		std::optional<DayOfWeekType> dayofweektype;
		std::optional<OccurrenceEnumType> occurrenceenumtype;
		std::optional<CommodityTypeEnumType> commoditytypeenumtype;
		std::optional<EnergyDirectionEnumType> energydirectionenumtype;
		std::optional<EnergyModeEnumType> energymodeenumtype;
		std::optional<UnitOfMeasurementEnumType> unitofmeasurementenumtype;
		std::optional<CurrencyEnumType> currencyenumtype;
		std::optional<ScopeTypeEnumType> scopetypeenumtype;
		std::optional<RoleType> roletype;
		std::optional<DeviceTypeEnumType> devicetypeenumtype;
		std::optional<EntityTypeEnumType> entitytypeenumtype;
		std::optional<FeatureTypeEnumType> featuretypeenumtype;
		std::optional<FeatureDirectControlSpecificUsageEnumType> featuredirectcontrolspecificusageenumtype;
		std::optional<FeatureHvacSpecificUsageEnumType> featurehvacspecificusageenumtype;
		std::optional<FeatureMeasurementSpecificUsageEnumType> featuremeasurementspecificusageenumtype;
		std::optional<FeatureSetpointSpecificUsageEnumType> featuresetpointspecificusageenumtype;
		std::optional<FeatureSmartEnergyManagementPsSpecificUsageEnumType> featuresmartenergymanagementpsspecificusageenumtype;
		std::optional<FunctionEnumType> functionenumtype;
		std::optional<TimeSeriesTypeEnumType> timeseriestypeenumtype;
		std::optional<MeasurementTypeEnumType> measurementtypeenumtype;
		std::optional<MeasurementValueTypeEnumType> measurementvaluetypeenumtype;
		std::optional<MeasurementValueSourceEnumType> measurementvaluesourceenumtype;
		std::optional<MeasurementValueTendencyEnumType> measurementvaluetendencyenumtype;
		std::optional<MeasurementValueStateEnumType> measurementvaluestateenumtype;
		std::optional<ThresholdTypeEnumType> thresholdtypeenumtype;
		std::optional<DirectControlActivityStateEnumType> directcontrolactivitystateenumtype;
		std::optional<PowerTimeSlotValueTypeEnumType> powertimeslotvaluetypeenumtype;
		std::optional<PowerSequenceScopeEnumType> powersequencescopeenumtype;
		std::optional<PowerSequenceStateEnumType> powersequencestateenumtype;
		std::optional<ActuatorLevelFctEnumType> actuatorlevelfctenumtype;
		std::optional<CmdClassifierType> cmdclassifiertype;
		std::optional<ActuatorSwitchFctEnumType> actuatorswitchfctenumtype;
		std::optional<AlarmTypeEnumType> alarmtypeenumtype;
		std::optional<BillTypeEnumType> billtypeenumtype;
		std::optional<BillPositionTypeEnumType> billpositiontypeenumtype;
		std::optional<BillCostTypeEnumType> billcosttypeenumtype;
		std::optional<IdentificationTypeEnumType> identificationtypeenumtype;
		std::optional<PowerSourceEnumType> powersourceenumtype;
		std::optional<DeviceConfigurationKeyNameEnumType> deviceconfigurationkeynameenumtype;
		std::optional<DeviceConfigurationKeyValueTypeType> deviceconfigurationkeyvaluetypetype;
		std::optional<DeviceDiagnosisOperatingStateEnumType> devicediagnosisoperatingstateenumtype;
		std::optional<PowerSupplyConditionEnumType> powersupplyconditionenumtype;
		std::optional<ElectricalConnectionMeasurandVariantEnumType> electricalconnectionmeasurandvariantenumtype;
		std::optional<ElectricalConnectionVoltageTypeEnumType> electricalconnectionvoltagetypeenumtype;
		std::optional<ElectricalConnectionAcMeasurementTypeEnumType> electricalconnectionacmeasurementtypeenumtype;
		std::optional<ElectricalConnectionPhaseNameEnumType> electricalconnectionphasenameenumtype;
		std::optional<ElectricalConnectionConnectionPointType> electricalconnectionconnectionpointtype;
		std::optional<ElectricalConnectionCharacteristicContextEnumType> electricalconnectioncharacteristiccontextenumtype;
		std::optional<ElectricalConnectionCharacteristicTypeEnumType> electricalconnectioncharacteristictypeenumtype;
		std::optional<HvacSystemFunctionTypeEnumType> hvacsystemfunctiontypeenumtype;
		std::optional<HvacOperationModeTypeEnumType> hvacoperationmodetypeenumtype;
		std::optional<HvacOverrunTypeEnumType> hvacoverruntypeenumtype;
		std::optional<HvacOverrunStatusEnumType> hvacoverrunstatusenumtype;
		std::optional<SetpointTypeEnumType> setpointtypeenumtype;
		std::optional<TimeSlotTimeModeEnumType> timeslottimemodeenumtype;
		std::optional<TierBoundaryTypeEnumType> tierboundarytypeenumtype;
		std::optional<TierTypeEnumType> tiertypeenumtype;
		std::optional<IncentiveTypeEnumType> incentivetypeenumtype;
		std::optional<IncentiveValueTypeEnumType> incentivevaluetypeenumtype;
		std::optional<LoadControlEventActionEnumType> loadcontroleventactionenumtype;
		std::optional<LoadControlEventStateEnumType> loadcontroleventstateenumtype;
		std::optional<LoadControlLimitTypeEnumType> loadcontrollimittypeenumtype;
		std::optional<LoadControlCategoryEnumType> loadcontrolcategoryenumtype;
		std::optional<NetworkManagementFeatureSetType> networkmanagementfeaturesettype;
		std::optional<NetworkManagementProcessStateStateType> networkmanagementprocessstatestatetype;
		std::optional<NetworkManagementStateChangeType> networkmanagementstatechangetype;
		std::optional<SensingStateEnumType> sensingstateenumtype;
		std::optional<SensingTypeEnumType> sensingtypeenumtype;
		std::optional<StateInformationFunctionalityEnumType> stateinformationfunctionalityenumtype;
		std::optional<StateInformationFailureEnumType> stateinformationfailureenumtype;
		std::optional<StateInformationCategoryEnumType> stateinformationcategoryenumtype;
		std::optional<SupplyConditionEventTypeEnumType> supplyconditioneventtypeenumtype;
		std::optional<SupplyConditionOriginatorEnumType> supplyconditionoriginatorenumtype;
		std::optional<GridConditionEnumType> gridconditionenumtype;
		std::optional<TaskManagementJobSourceEnumType> taskmanagementjobsourceenumtype;
		std::optional<MessagingDataType> messagingdatatype;
		std::optional<ElementTagType> elementtagtype;
		std::optional<MessagingDataElementsType> messagingdataelementstype;
		std::optional<MessagingListDataType> messaginglistdatatype;
		std::optional<TimestampIntervalType> timestampintervaltype;
		std::optional<MessagingListDataSelectorsType> messaginglistdataselectorstype;
		std::optional<TimePeriodType> timeperiodtype;
		std::optional<TimePeriodElementsType> timeperiodelementstype;
		std::optional<DaysOfWeekType> daysofweektype;
		std::optional<AbsoluteOrRecurringTimeType> absoluteorrecurringtimetype;
		std::optional<AbsoluteOrRecurringTimeElementsType> absoluteorrecurringtimeelementstype;
		std::optional<RecurrenceInformationType> recurrenceinformationtype;
		std::optional<RecurrenceInformationElementsType> recurrenceinformationelementstype;
		std::optional<ScaledNumberType> scalednumbertype;
		std::optional<ScaledNumberRangeType> scalednumberrangetype;
		std::optional<ScaledNumberElementsType> scalednumberelementstype;
		std::optional<ScaledNumberRangeElementsType> scalednumberrangeelementstype;
		std::optional<ScaledNumberSetType> scalednumbersettype;
		std::optional<ScaledNumberSetElementsType> scalednumbersetelementstype;
		std::optional<DeviceAddressType> deviceaddresstype;
		std::optional<DeviceAddressElementsType> deviceaddresselementstype;
		std::optional<EntityAddressType> entityaddresstype;
		std::optional<EntityAddressElementsType> entityaddresselementstype;
		std::optional<FeatureAddressType> featureaddresstype;
		std::optional<FeatureAddressElementsType> featureaddresselementstype;
		std::optional<PossibleOperationsClassifierType> possibleoperationsclassifiertype;
		std::optional<PossibleOperationsReadType> possibleoperationsreadtype;
		std::optional<PossibleOperationsWriteType> possibleoperationswritetype;
		std::optional<PossibleOperationsType> possibleoperationstype;
		std::optional<PossibleOperationsElementsType> possibleoperationselementstype;
		std::optional<FunctionPropertyType> functionpropertytype;
		std::optional<FunctionPropertyElementsType> functionpropertyelementstype;
		std::optional<TimeSeriesSlotType> timeseriesslottype;
		std::optional<TimeSeriesSlotElementsType> timeseriesslotelementstype;
		std::optional<TimeSeriesDataType> timeseriesdatatype;
		std::optional<TimeSeriesDataElementsType> timeseriesdataelementstype;
		std::optional<TimeSeriesListDataType> timeserieslistdatatype;
		std::optional<TimeSeriesListDataSelectorsType> timeserieslistdataselectorstype;
		std::optional<TimeSeriesDescriptionDataType> timeseriesdescriptiondatatype;
		std::optional<TimeSeriesDescriptionDataElementsType> timeseriesdescriptiondataelementstype;
		std::optional<TimeSeriesDescriptionListDataType> timeseriesdescriptionlistdatatype;
		std::optional<TimeSeriesDescriptionListDataSelectorsType> timeseriesdescriptionlistdataselectorstype;
		std::optional<TimeSeriesConstraintsDataType> timeseriesconstraintsdatatype;
		std::optional<TimeSeriesConstraintsDataElementsType> timeseriesconstraintsdataelementstype;
		std::optional<TimeSeriesConstraintsListDataType> timeseriesconstraintslistdatatype;
		std::optional<TimeSeriesConstraintsListDataSelectorsType> timeseriesconstraintslistdataselectorstype;
		std::optional<MeasurementDataType> measurementdatatype;
		std::optional<MeasurementDataElementsType> measurementdataelementstype;
		std::optional<MeasurementListDataType> measurementlistdatatype;
		std::optional<MeasurementListDataSelectorsType> measurementlistdataselectorstype;
		std::optional<MeasurementSeriesDataType> measurementseriesdatatype;
		std::optional<MeasurementSeriesDataElementsType> measurementseriesdataelementstype;
		std::optional<MeasurementSeriesListDataType> measurementserieslistdatatype;
		std::optional<MeasurementSeriesListDataSelectorsType> measurementserieslistdataselectorstype;
		std::optional<MeasurementConstraintsDataType> measurementconstraintsdatatype;
		std::optional<MeasurementConstraintsDataElementsType> measurementconstraintsdataelementstype;
		std::optional<MeasurementConstraintsListDataType> measurementconstraintslistdatatype;
		std::optional<MeasurementConstraintsListDataSelectorsType> measurementconstraintslistdataselectorstype;
		std::optional<MeasurementDescriptionDataType> measurementdescriptiondatatype;
		std::optional<MeasurementDescriptionDataElementsType> measurementdescriptiondataelementstype;
		std::optional<MeasurementDescriptionListDataType> measurementdescriptionlistdatatype;
		std::optional<MeasurementDescriptionListDataSelectorsType> measurementdescriptionlistdataselectorstype;
		std::optional<MeasurementThresholdRelationDataType> measurementthresholdrelationdatatype;
		std::optional<MeasurementThresholdRelationDataElementsType> measurementthresholdrelationdataelementstype;
		std::optional<MeasurementThresholdRelationListDataType> measurementthresholdrelationlistdatatype;
		std::optional<MeasurementThresholdRelationListDataSelectorsType> measurementthresholdrelationlistdataselectorstype;
		std::optional<ThresholdDataType> thresholddatatype;
		std::optional<ThresholdDataElementsType> thresholddataelementstype;
		std::optional<ThresholdListDataType> thresholdlistdatatype;
		std::optional<ThresholdListDataSelectorsType> thresholdlistdataselectorstype;
		std::optional<ThresholdConstraintsDataType> thresholdconstraintsdatatype;
		std::optional<ThresholdConstraintsDataElementsType> thresholdconstraintsdataelementstype;
		std::optional<ThresholdConstraintsListDataType> thresholdconstraintslistdatatype;
		std::optional<ThresholdConstraintsListDataSelectorsType> thresholdconstraintslistdataselectorstype;
		std::optional<ThresholdDescriptionDataType> thresholddescriptiondatatype;
		std::optional<ThresholdDescriptionDataElementsType> thresholddescriptiondataelementstype;
		std::optional<ThresholdDescriptionListDataType> thresholddescriptionlistdatatype;
		std::optional<ThresholdDescriptionListDataSelectorsType> thresholddescriptionlistdataselectorstype;
		std::optional<DirectControlActivityDataType> directcontrolactivitydatatype;
		std::optional<DirectControlActivityDataElementsType> directcontrolactivitydataelementstype;
		std::optional<DirectControlActivityListDataType> directcontrolactivitylistdatatype;
		std::optional<DirectControlActivityListDataSelectorsType> directcontrolactivitylistdataselectorstype;
		std::optional<DirectControlDescriptionDataType> directcontroldescriptiondatatype;
		std::optional<DirectControlDescriptionDataElementsType> directcontroldescriptiondataelementstype;
		std::optional<PowerTimeSlotScheduleDataType> powertimeslotscheduledatatype;
		std::optional<PowerTimeSlotScheduleDataElementsType> powertimeslotscheduledataelementstype;
		std::optional<PowerTimeSlotScheduleListDataType> powertimeslotschedulelistdatatype;
		std::optional<PowerTimeSlotScheduleListDataSelectorsType> powertimeslotschedulelistdataselectorstype;
		std::optional<PowerTimeSlotValueDataType> powertimeslotvaluedatatype;
		std::optional<PowerTimeSlotValueDataElementsType> powertimeslotvaluedataelementstype;
		std::optional<PowerTimeSlotValueListDataType> powertimeslotvaluelistdatatype;
		std::optional<PowerTimeSlotValueListDataSelectorsType> powertimeslotvaluelistdataselectorstype;
		std::optional<PowerTimeSlotScheduleConstraintsDataType> powertimeslotscheduleconstraintsdatatype;
		std::optional<PowerTimeSlotScheduleConstraintsDataElementsType> powertimeslotscheduleconstraintsdataelementstype;
		std::optional<PowerTimeSlotScheduleConstraintsListDataType> powertimeslotscheduleconstraintslistdatatype;
		std::optional<PowerTimeSlotScheduleConstraintsListDataSelectorsType> powertimeslotscheduleconstraintslistdataselectorstype;
		std::optional<PowerSequenceAlternativesRelationDataType> powersequencealternativesrelationdatatype;
		std::optional<PowerSequenceAlternativesRelationDataElementsType> powersequencealternativesrelationdataelementstype;
		std::optional<PowerSequenceAlternativesRelationListDataType> powersequencealternativesrelationlistdatatype;
		std::optional<PowerSequenceAlternativesRelationListDataSelectorsType> powersequencealternativesrelationlistdataselectorstype;
		std::optional<PowerSequenceDescriptionDataType> powersequencedescriptiondatatype;
		std::optional<PowerSequenceDescriptionDataElementsType> powersequencedescriptiondataelementstype;
		std::optional<PowerSequenceDescriptionListDataType> powersequencedescriptionlistdatatype;
		std::optional<PowerSequenceDescriptionListDataSelectorsType> powersequencedescriptionlistdataselectorstype;
		std::optional<PowerSequenceStateDataType> powersequencestatedatatype;
		std::optional<PowerSequenceStateDataElementsType> powersequencestatedataelementstype;
		std::optional<PowerSequenceStateListDataType> powersequencestatelistdatatype;
		std::optional<PowerSequenceStateListDataSelectorsType> powersequencestatelistdataselectorstype;
		std::optional<PowerSequenceScheduleDataType> powersequencescheduledatatype;
		std::optional<PowerSequenceScheduleDataElementsType> powersequencescheduledataelementstype;
		std::optional<PowerSequenceScheduleListDataType> powersequenceschedulelistdatatype;
		std::optional<PowerSequenceScheduleListDataSelectorsType> powersequenceschedulelistdataselectorstype;
		std::optional<PowerSequenceScheduleConstraintsDataType> powersequencescheduleconstraintsdatatype;
		std::optional<PowerSequenceScheduleConstraintsDataElementsType> powersequencescheduleconstraintsdataelementstype;
		std::optional<PowerSequenceScheduleConstraintsListDataType> powersequencescheduleconstraintslistdatatype;
		std::optional<PowerSequenceScheduleConstraintsListDataSelectorsType> powersequencescheduleconstraintslistdataselectorstype;
		std::optional<PowerSequencePriceDataType> powersequencepricedatatype;
		std::optional<PowerSequencePriceDataElementsType> powersequencepricedataelementstype;
		std::optional<PowerSequencePriceListDataType> powersequencepricelistdatatype;
		std::optional<PowerSequencePriceListDataSelectorsType> powersequencepricelistdataselectorstype;
		std::optional<PowerSequenceSchedulePreferenceDataType> powersequenceschedulepreferencedatatype;
		std::optional<PowerSequenceSchedulePreferenceDataElementsType> powersequenceschedulepreferencedataelementstype;
		std::optional<PowerSequenceSchedulePreferenceListDataType> powersequenceschedulepreferencelistdatatype;
		std::optional<PowerSequenceSchedulePreferenceListDataSelectorsType> powersequenceschedulepreferencelistdataselectorstype;
		std::optional<PowerSequenceNodeScheduleInformationDataType> powersequencenodescheduleinformationdatatype;
		std::optional<PowerSequenceNodeScheduleInformationDataElementsType> powersequencenodescheduleinformationdataelementstype;
		std::optional<PowerSequenceScheduleConfigurationRequestCallType> powersequencescheduleconfigurationrequestcalltype;
		std::optional<PowerSequenceScheduleConfigurationRequestCallElementsType> powersequencescheduleconfigurationrequestcallelementstype;
		std::optional<PowerSequencePriceCalculationRequestCallType> powersequencepricecalculationrequestcalltype;
		std::optional<PowerSequencePriceCalculationRequestCallElementsType> powersequencepricecalculationrequestcallelementstype;
		std::optional<ResultDataType> resultdatatype;
		std::optional<BindingManagementEntryDataType> bindingmanagemententrydatatype;
		std::optional<BindingManagementEntryDataElementsType> bindingmanagemententrydataelementstype;
		std::optional<BindingManagementEntryListDataType> bindingmanagemententrylistdatatype;
		std::optional<BindingManagementEntryListDataSelectorsType> bindingmanagemententrylistdataselectorstype;
		std::optional<BindingManagementRequestCallType> bindingmanagementrequestcalltype;
		std::optional<BindingManagementRequestCallElementsType> bindingmanagementrequestcallelementstype;
		std::optional<BindingManagementDeleteCallType> bindingmanagementdeletecalltype;
		std::optional<BindingManagementDeleteCallElementsType> bindingmanagementdeletecallelementstype;
		std::optional<ActuatorLevelDataType> actuatorleveldatatype;
		std::optional<ActuatorLevelDataElementsType> actuatorleveldataelementstype;
		std::optional<ActuatorLevelDescriptionDataType> actuatorleveldescriptiondatatype;
		std::optional<ActuatorLevelDescriptionDataElementsType> actuatorleveldescriptiondataelementstype;
		std::optional<CmdControlType> cmdcontroltype;
		std::optional<ActuatorSwitchDataType> actuatorswitchdatatype;
		std::optional<ActuatorSwitchDataElementsType> actuatorswitchdataelementstype;
		std::optional<ActuatorSwitchDescriptionDataType> actuatorswitchdescriptiondatatype;
		std::optional<ActuatorSwitchDescriptionDataElementsType> actuatorswitchdescriptiondataelementstype;
		std::optional<AlarmDataType> alarmdatatype;
		std::optional<AlarmDataElementsType> alarmdataelementstype;
		std::optional<AlarmListDataType> alarmlistdatatype;
		std::optional<AlarmListDataSelectorsType> alarmlistdataselectorstype;
		std::optional<BillValueType> billvaluetype;
		std::optional<BillValueElementsType> billvalueelementstype;
		std::optional<BillCostType> billcosttype;
		std::optional<BillCostElementsType> billcostelementstype;
		std::optional<BillPositionType> billpositiontype;
		std::optional<BillPositionElementsType> billpositionelementstype;
		std::optional<BillDataType> billdatatype;
		std::optional<BillDataElementsType> billdataelementstype;
		std::optional<BillListDataType> billlistdatatype;
		std::optional<BillListDataSelectorsType> billlistdataselectorstype;
		std::optional<BillConstraintsDataType> billconstraintsdatatype;
		std::optional<BillConstraintsDataElementsType> billconstraintsdataelementstype;
		std::optional<BillConstraintsListDataType> billconstraintslistdatatype;
		std::optional<BillConstraintsListDataSelectorsType> billconstraintslistdataselectorstype;
		std::optional<BillDescriptionDataType> billdescriptiondatatype;
		std::optional<BillDescriptionDataElementsType> billdescriptiondataelementstype;
		std::optional<BillDescriptionListDataType> billdescriptionlistdatatype;
		std::optional<BillDescriptionListDataSelectorsType> billdescriptionlistdataselectorstype;
		std::optional<IdentificationDataType> identificationdatatype;
		std::optional<IdentificationDataElementsType> identificationdataelementstype;
		std::optional<IdentificationListDataType> identificationlistdatatype;
		std::optional<IdentificationListDataSelectorsType> identificationlistdataselectorstype;
		std::optional<SessionIdentificationDataType> sessionidentificationdatatype;
		std::optional<SessionIdentificationDataElementsType> sessionidentificationdataelementstype;
		std::optional<SessionIdentificationListDataType> sessionidentificationlistdatatype;
		std::optional<SessionIdentificationListDataSelectorsType> sessionidentificationlistdataselectorstype;
		std::optional<SessionMeasurementRelationDataType> sessionmeasurementrelationdatatype;
		std::optional<SessionMeasurementRelationDataElementsType> sessionmeasurementrelationdataelementstype;
		std::optional<SessionMeasurementRelationListDataType> sessionmeasurementrelationlistdatatype;
		std::optional<SessionMeasurementRelationListDataSelectorsType> sessionmeasurementrelationlistdataselectorstype;
		std::optional<DataTunnelingHeaderType> datatunnelingheadertype;
		std::optional<DataTunnelingHeaderElementsType> datatunnelingheaderelementstype;
		std::optional<DataTunnelingCallType> datatunnelingcalltype;
		std::optional<DataTunnelingCallElementsType> datatunnelingcallelementstype;
		std::optional<DeviceClassificationManufacturerDataType> deviceclassificationmanufacturerdatatype;
		std::optional<DeviceClassificationManufacturerDataElementsType> deviceclassificationmanufacturerdataelementstype;
		std::optional<DeviceClassificationUserDataType> deviceclassificationuserdatatype;
		std::optional<DeviceClassificationUserDataElementsType> deviceclassificationuserdataelementstype;
		std::optional<DeviceConfigurationKeyValueValueType> deviceconfigurationkeyvaluevaluetype;
		std::optional<DeviceConfigurationKeyValueValueElementsType> deviceconfigurationkeyvaluevalueelementstype;
		std::optional<DeviceConfigurationKeyValueDataType> deviceconfigurationkeyvaluedatatype;
		std::optional<DeviceConfigurationKeyValueDataElementsType> deviceconfigurationkeyvaluedataelementstype;
		std::optional<DeviceConfigurationKeyValueListDataType> deviceconfigurationkeyvaluelistdatatype;
		std::optional<DeviceConfigurationKeyValueListDataSelectorsType> deviceconfigurationkeyvaluelistdataselectorstype;
		std::optional<DeviceConfigurationKeyValueDescriptionDataType> deviceconfigurationkeyvaluedescriptiondatatype;
		std::optional<DeviceConfigurationKeyValueDescriptionDataElementsType> deviceconfigurationkeyvaluedescriptiondataelementstype;
		std::optional<DeviceConfigurationKeyValueDescriptionListDataType> deviceconfigurationkeyvaluedescriptionlistdatatype;
		std::optional<DeviceConfigurationKeyValueDescriptionListDataSelectorsType> deviceconfigurationkeyvaluedescriptionlistdataselectorstype;
		std::optional<DeviceConfigurationKeyValueConstraintsDataType> deviceconfigurationkeyvalueconstraintsdatatype;
		std::optional<DeviceConfigurationKeyValueConstraintsDataElementsType> deviceconfigurationkeyvalueconstraintsdataelementstype;
		std::optional<DeviceConfigurationKeyValueConstraintsListDataType> deviceconfigurationkeyvalueconstraintslistdatatype;
		std::optional<DeviceConfigurationKeyValueConstraintsListDataSelectorsType> deviceconfigurationkeyvalueconstraintslistdataselectorstype;
		std::optional<DeviceDiagnosisStateDataType> devicediagnosisstatedatatype;
		std::optional<DeviceDiagnosisStateDataElementsType> devicediagnosisstatedataelementstype;
		std::optional<DeviceDiagnosisHeartbeatDataType> devicediagnosisheartbeatdatatype;
		std::optional<DeviceDiagnosisHeartbeatDataElementsType> devicediagnosisheartbeatdataelementstype;
		std::optional<DeviceDiagnosisServiceDataType> devicediagnosisservicedatatype;
		std::optional<DeviceDiagnosisServiceDataElementsType> devicediagnosisservicedataelementstype;
		std::optional<ElectricalConnectionParameterDescriptionDataType> electricalconnectionparameterdescriptiondatatype;
		std::optional<ElectricalConnectionParameterDescriptionDataElementsType> electricalconnectionparameterdescriptiondataelementstype;
		std::optional<ElectricalConnectionParameterDescriptionListDataType> electricalconnectionparameterdescriptionlistdatatype;
		std::optional<ElectricalConnectionParameterDescriptionListDataSelectorsType> electricalconnectionparameterdescriptionlistdataselectorstype;
		std::optional<ElectricalConnectionPermittedValueSetDataType> electricalconnectionpermittedvaluesetdatatype;
		std::optional<ElectricalConnectionPermittedValueSetDataElementsType> electricalconnectionpermittedvaluesetdataelementstype;
		std::optional<ElectricalConnectionPermittedValueSetListDataType> electricalconnectionpermittedvaluesetlistdatatype;
		std::optional<ElectricalConnectionPermittedValueSetListDataSelectorsType> electricalconnectionpermittedvaluesetlistdataselectorstype;
		std::optional<ElectricalConnectionCharacteristicDataType> electricalconnectioncharacteristicdatatype;
		std::optional<ElectricalConnectionCharacteristicDataElementsType> electricalconnectioncharacteristicdataelementstype;
		std::optional<ElectricalConnectionCharacteristicListDataType> electricalconnectioncharacteristiclistdatatype;
		std::optional<ElectricalConnectionCharacteristicListDataSelectorsType> electricalconnectioncharacteristiclistdataselectorstype;
		std::optional<ElectricalConnectionStateDataType> electricalconnectionstatedatatype;
		std::optional<ElectricalConnectionStateDataElementsType> electricalconnectionstatedataelementstype;
		std::optional<ElectricalConnectionStateListDataType> electricalconnectionstatelistdatatype;
		std::optional<ElectricalConnectionStateListDataSelectorsType> electricalconnectionstatelistdataselectorstype;
		std::optional<ElectricalConnectionDescriptionDataType> electricalconnectiondescriptiondatatype;
		std::optional<ElectricalConnectionDescriptionDataElementsType> electricalconnectiondescriptiondataelementstype;
		std::optional<ElectricalConnectionDescriptionListDataType> electricalconnectiondescriptionlistdatatype;
		std::optional<ElectricalConnectionDescriptionListDataSelectorsType> electricalconnectiondescriptionlistdataselectorstype;
		std::optional<HvacSystemFunctionDataType> hvacsystemfunctiondatatype;
		std::optional<HvacSystemFunctionDataElementsType> hvacsystemfunctiondataelementstype;
		std::optional<HvacSystemFunctionListDataType> hvacsystemfunctionlistdatatype;
		std::optional<HvacSystemFunctionListDataSelectorsType> hvacsystemfunctionlistdataselectorstype;
		std::optional<HvacSystemFunctionOperationModeRelationDataType> hvacsystemfunctionoperationmoderelationdatatype;
		std::optional<HvacSystemFunctionOperationModeRelationDataElementsType> hvacsystemfunctionoperationmoderelationdataelementstype;
		std::optional<HvacSystemFunctionOperationModeRelationListDataType> hvacsystemfunctionoperationmoderelationlistdatatype;
		std::optional<HvacSystemFunctionOperationModeRelationListDataSelectorsType> hvacsystemfunctionoperationmoderelationlistdataselectorstype;
		std::optional<HvacSystemFunctionSetpointRelationDataType> hvacsystemfunctionsetpointrelationdatatype;
		std::optional<HvacSystemFunctionSetpointRelationDataElementsType> hvacsystemfunctionsetpointrelationdataelementstype;
		std::optional<HvacSystemFunctionSetpointRelationListDataType> hvacsystemfunctionsetpointrelationlistdatatype;
		std::optional<HvacSystemFunctionSetpointRelationListDataSelectorsType> hvacsystemfunctionsetpointrelationlistdataselectorstype;
		std::optional<HvacSystemFunctionPowerSequenceRelationDataType> hvacsystemfunctionpowersequencerelationdatatype;
		std::optional<HvacSystemFunctionPowerSequenceRelationDataElementsType> hvacsystemfunctionpowersequencerelationdataelementstype;
		std::optional<HvacSystemFunctionPowerSequenceRelationListDataType> hvacsystemfunctionpowersequencerelationlistdatatype;
		std::optional<HvacSystemFunctionPowerSequenceRelationListDataSelectorsType> hvacsystemfunctionpowersequencerelationlistdataselectorstype;
		std::optional<HvacSystemFunctionDescriptionDataType> hvacsystemfunctiondescriptiondatatype;
		std::optional<HvacSystemFunctionDescriptionDataElementsType> hvacsystemfunctiondescriptiondataelementstype;
		std::optional<HvacSystemFunctionDescriptionListDataType> hvacsystemfunctiondescriptionlistdatatype;
		std::optional<HvacSystemFunctionDescriptionListDataSelectorsType> hvacsystemfunctiondescriptionlistdataselectorstype;
		std::optional<HvacOperationModeDescriptionDataType> hvacoperationmodedescriptiondatatype;
		std::optional<HvacOperationModeDescriptionDataElementsType> hvacoperationmodedescriptiondataelementstype;
		std::optional<HvacOperationModeDescriptionListDataType> hvacoperationmodedescriptionlistdatatype;
		std::optional<HvacOperationModeDescriptionListDataSelectorsType> hvacoperationmodedescriptionlistdataselectorstype;
		std::optional<HvacOverrunDataType> hvacoverrundatatype;
		std::optional<HvacOverrunDataElementsType> hvacoverrundataelementstype;
		std::optional<HvacOverrunListDataType> hvacoverrunlistdatatype;
		std::optional<HvacOverrunListDataSelectorsType> hvacoverrunlistdataselectorstype;
		std::optional<HvacOverrunDescriptionDataType> hvacoverrundescriptiondatatype;
		std::optional<HvacOverrunDescriptionDataElementsType> hvacoverrundescriptiondataelementstype;
		std::optional<HvacOverrunDescriptionListDataType> hvacoverrundescriptionlistdatatype;
		std::optional<HvacOverrunDescriptionListDataSelectorsType> hvacoverrundescriptionlistdataselectorstype;
		std::optional<SetpointDataType> setpointdatatype;
		std::optional<SetpointDataElementsType> setpointdataelementstype;
		std::optional<SetpointListDataType> setpointlistdatatype;
		std::optional<SetpointListDataSelectorsType> setpointlistdataselectorstype;
		std::optional<SetpointConstraintsDataType> setpointconstraintsdatatype;
		std::optional<SetpointConstraintsDataElementsType> setpointconstraintsdataelementstype;
		std::optional<SetpointConstraintsListDataType> setpointconstraintslistdatatype;
		std::optional<SetpointConstraintsListDataSelectorsType> setpointconstraintslistdataselectorstype;
		std::optional<SetpointDescriptionDataType> setpointdescriptiondatatype;
		std::optional<SetpointDescriptionDataElementsType> setpointdescriptiondataelementstype;
		std::optional<SetpointDescriptionListDataType> setpointdescriptionlistdatatype;
		std::optional<SetpointDescriptionListDataSelectorsType> setpointdescriptionlistdataselectorstype;
		std::optional<TimeTableDataType> timetabledatatype;
		std::optional<TimeTableDataElementsType> timetabledataelementstype;
		std::optional<TimeTableListDataType> timetablelistdatatype;
		std::optional<TimeTableListDataSelectorsType> timetablelistdataselectorstype;
		std::optional<TimeTableConstraintsDataType> timetableconstraintsdatatype;
		std::optional<TimeTableConstraintsDataElementsType> timetableconstraintsdataelementstype;
		std::optional<TimeTableConstraintsListDataType> timetableconstraintslistdatatype;
		std::optional<TimeTableConstraintsListDataSelectorsType> timetableconstraintslistdataselectorstype;
		std::optional<TimeTableDescriptionDataType> timetabledescriptiondatatype;
		std::optional<TimeTableDescriptionDataElementsType> timetabledescriptiondataelementstype;
		std::optional<TimeTableDescriptionListDataType> timetabledescriptionlistdatatype;
		std::optional<TimeTableDescriptionListDataSelectorsType> timetabledescriptionlistdataselectorstype;
		std::optional<TariffDataType> tariffdatatype;
		std::optional<TierDataType> tierdatatype;
		std::optional<TierBoundaryDataType> tierboundarydatatype;
		std::optional<IncentiveDataType> incentivedatatype;
		std::optional<IncentiveTableTierType> incentivetabletiertype;
		std::optional<IncentiveTableIncentiveSlotType> incentivetableincentiveslottype;
		std::optional<IncentiveTableType> incentivetabletype;
		std::optional<IncentiveTableDataType> incentivetabledatatype;
		std::optional<TariffDataElementsType> tariffdataelementstype;
		std::optional<TierDataElementsType> tierdataelementstype;
		std::optional<TierBoundaryDataElementsType> tierboundarydataelementstype;
		std::optional<IncentiveDataElementsType> incentivedataelementstype;
		std::optional<IncentiveTableTierElementsType> incentivetabletierelementstype;
		std::optional<IncentiveTableIncentiveSlotElementsType> incentivetableincentiveslotelementstype;
		std::optional<IncentiveTableElementsType> incentivetableelementstype;
		std::optional<IncentiveTableDataElementsType> incentivetabledataelementstype;
		std::optional<TariffListDataSelectorsType> tarifflistdataselectorstype;
		std::optional<IncentiveTableDataSelectorsType> incentivetabledataselectorstype;
		std::optional<TariffDescriptionDataType> tariffdescriptiondatatype;
		std::optional<TierDescriptionDataType> tierdescriptiondatatype;
		std::optional<TierBoundaryDescriptionDataType> tierboundarydescriptiondatatype;
		std::optional<IncentiveDescriptionDataType> incentivedescriptiondatatype;
		std::optional<IncentiveTableDescriptionTierType> incentivetabledescriptiontiertype;
		std::optional<IncentiveTableDescriptionType> incentivetabledescriptiontype;
		std::optional<IncentiveTableDescriptionDataType> incentivetabledescriptiondatatype;
		std::optional<TariffDescriptionDataElementsType> tariffdescriptiondataelementstype;
		std::optional<TierDescriptionDataElementsType> tierdescriptiondataelementstype;
		std::optional<TierBoundaryDescriptionDataElementsType> tierboundarydescriptiondataelementstype;
		std::optional<IncentiveDescriptionDataElementsType> incentivedescriptiondataelementstype;
		std::optional<IncentiveTableDescriptionTierElementsType> incentivetabledescriptiontierelementstype;
		std::optional<IncentiveTableDescriptionElementsType> incentivetabledescriptionelementstype;
		std::optional<IncentiveTableDescriptionDataElementsType> incentivetabledescriptiondataelementstype;
		std::optional<TariffDescriptionListDataSelectorsType> tariffdescriptionlistdataselectorstype;
		std::optional<IncentiveTableDescriptionDataSelectorsType> incentivetabledescriptiondataselectorstype;
		std::optional<TariffOverallConstraintsDataType> tariffoverallconstraintsdatatype;
		std::optional<IncentiveTableConstraintsType> incentivetableconstraintstype;
		std::optional<IncentiveTableConstraintsDataType> incentivetableconstraintsdatatype;
		std::optional<TariffOverallConstraintsDataElementsType> tariffoverallconstraintsdataelementstype;
		std::optional<IncentiveTableConstraintsElementsType> incentivetableconstraintselementstype;
		std::optional<IncentiveTableConstraintsDataElementsType> incentivetableconstraintsdataelementstype;
		std::optional<IncentiveTableConstraintsDataSelectorsType> incentivetableconstraintsdataselectorstype;
		std::optional<TariffListDataType> tarifflistdatatype;
		std::optional<TariffTierRelationDataType> tarifftierrelationdatatype;
		std::optional<TariffTierRelationDataElementsType> tarifftierrelationdataelementstype;
		std::optional<TariffTierRelationListDataType> tarifftierrelationlistdatatype;
		std::optional<TariffTierRelationListDataSelectorsType> tarifftierrelationlistdataselectorstype;
		std::optional<TariffBoundaryRelationDataType> tariffboundaryrelationdatatype;
		std::optional<TariffBoundaryRelationDataElementsType> tariffboundaryrelationdataelementstype;
		std::optional<TariffBoundaryRelationListDataType> tariffboundaryrelationlistdatatype;
		std::optional<TariffBoundaryRelationListDataSelectorsType> tariffboundaryrelationlistdataselectorstype;
		std::optional<TariffDescriptionListDataType> tariffdescriptionlistdatatype;
		std::optional<TierBoundaryListDataType> tierboundarylistdatatype;
		std::optional<TierBoundaryListDataSelectorsType> tierboundarylistdataselectorstype;
		std::optional<TierBoundaryDescriptionListDataType> tierboundarydescriptionlistdatatype;
		std::optional<TierBoundaryDescriptionListDataSelectorsType> tierboundarydescriptionlistdataselectorstype;
		std::optional<CommodityDataType> commoditydatatype;
		std::optional<CommodityDataElementsType> commoditydataelementstype;
		std::optional<CommodityListDataType> commoditylistdatatype;
		std::optional<CommodityListDataSelectorsType> commoditylistdataselectorstype;
		std::optional<TierListDataType> tierlistdatatype;
		std::optional<TierListDataSelectorsType> tierlistdataselectorstype;
		std::optional<TierIncentiveRelationDataType> tierincentiverelationdatatype;
		std::optional<TierIncentiveRelationDataElementsType> tierincentiverelationdataelementstype;
		std::optional<TierIncentiveRelationListDataType> tierincentiverelationlistdatatype;
		std::optional<TierIncentiveRelationListDataSelectorsType> tierincentiverelationlistdataselectorstype;
		std::optional<TierDescriptionListDataType> tierdescriptionlistdatatype;
		std::optional<TierDescriptionListDataSelectorsType> tierdescriptionlistdataselectorstype;
		std::optional<IncentiveListDataType> incentivelistdatatype;
		std::optional<IncentiveListDataSelectorsType> incentivelistdataselectorstype;
		std::optional<IncentiveDescriptionListDataType> incentivedescriptionlistdatatype;
		std::optional<IncentiveDescriptionListDataSelectorsType> incentivedescriptionlistdataselectorstype;
		std::optional<LoadControlNodeDataType> loadcontrolnodedatatype;
		std::optional<LoadControlNodeDataElementsType> loadcontrolnodedataelementstype;
		std::optional<LoadControlEventDataType> loadcontroleventdatatype;
		std::optional<LoadControlEventDataElementsType> loadcontroleventdataelementstype;
		std::optional<LoadControlEventListDataType> loadcontroleventlistdatatype;
		std::optional<LoadControlEventListDataSelectorsType> loadcontroleventlistdataselectorstype;
		std::optional<LoadControlStateDataType> loadcontrolstatedatatype;
		std::optional<LoadControlStateDataElementsType> loadcontrolstatedataelementstype;
		std::optional<LoadControlStateListDataType> loadcontrolstatelistdatatype;
		std::optional<LoadControlStateListDataSelectorsType> loadcontrolstatelistdataselectorstype;
		std::optional<LoadControlLimitDataType> loadcontrollimitdatatype;
		std::optional<LoadControlLimitDataElementsType> loadcontrollimitdataelementstype;
		std::optional<LoadControlLimitListDataType> loadcontrollimitlistdatatype;
		std::optional<LoadControlLimitListDataSelectorsType> loadcontrollimitlistdataselectorstype;
		std::optional<LoadControlLimitConstraintsDataType> loadcontrollimitconstraintsdatatype;
		std::optional<LoadControlLimitConstraintsDataElementsType> loadcontrollimitconstraintsdataelementstype;
		std::optional<LoadControlLimitConstraintsListDataType> loadcontrollimitconstraintslistdatatype;
		std::optional<LoadControlLimitConstraintsListDataSelectorsType> loadcontrollimitconstraintslistdataselectorstype;
		std::optional<LoadControlLimitDescriptionDataType> loadcontrollimitdescriptiondatatype;
		std::optional<LoadControlLimitDescriptionDataElementsType> loadcontrollimitdescriptiondataelementstype;
		std::optional<LoadControlLimitDescriptionListDataType> loadcontrollimitdescriptionlistdatatype;
		std::optional<LoadControlLimitDescriptionListDataSelectorsType> loadcontrollimitdescriptionlistdataselectorstype;
		std::optional<NetworkManagementAddNodeCallType> networkmanagementaddnodecalltype;
		std::optional<NetworkManagementAddNodeCallElementsType> networkmanagementaddnodecallelementstype;
		std::optional<NetworkManagementRemoveNodeCallType> networkmanagementremovenodecalltype;
		std::optional<NetworkManagementRemoveNodeCallElementsType> networkmanagementremovenodecallelementstype;
		std::optional<NetworkManagementModifyNodeCallType> networkmanagementmodifynodecalltype;
		std::optional<NetworkManagementModifyNodeCallElementsType> networkmanagementmodifynodecallelementstype;
		std::optional<NetworkManagementScanNetworkCallType> networkmanagementscannetworkcalltype;
		std::optional<NetworkManagementScanNetworkCallElementsType> networkmanagementscannetworkcallelementstype;
		std::optional<NetworkManagementDiscoverCallType> networkmanagementdiscovercalltype;
		std::optional<NetworkManagementDiscoverCallElementsType> networkmanagementdiscovercallelementstype;
		std::optional<NetworkManagementAbortCallType> networkmanagementabortcalltype;
		std::optional<NetworkManagementAbortCallElementsType> networkmanagementabortcallelementstype;
		std::optional<NetworkManagementProcessStateDataType> networkmanagementprocessstatedatatype;
		std::optional<NetworkManagementProcessStateDataElementsType> networkmanagementprocessstatedataelementstype;
		std::optional<NetworkManagementJoiningModeDataType> networkmanagementjoiningmodedatatype;
		std::optional<NetworkManagementJoiningModeDataElementsType> networkmanagementjoiningmodedataelementstype;
		std::optional<NetworkManagementReportCandidateDataType> networkmanagementreportcandidatedatatype;
		std::optional<NetworkManagementReportCandidateDataElementsType> networkmanagementreportcandidatedataelementstype;
		std::optional<NetworkManagementDeviceDescriptionDataType> networkmanagementdevicedescriptiondatatype;
		std::optional<NetworkManagementDeviceDescriptionDataElementsType> networkmanagementdevicedescriptiondataelementstype;
		std::optional<NetworkManagementDeviceDescriptionListDataType> networkmanagementdevicedescriptionlistdatatype;
		std::optional<NetworkManagementDeviceDescriptionListDataSelectorsType> networkmanagementdevicedescriptionlistdataselectorstype;
		std::optional<NetworkManagementEntityDescriptionDataType> networkmanagemententitydescriptiondatatype;
		std::optional<NetworkManagementEntityDescriptionDataElementsType> networkmanagemententitydescriptiondataelementstype;
		std::optional<NetworkManagementEntityDescriptionListDataType> networkmanagemententitydescriptionlistdatatype;
		std::optional<NetworkManagementEntityDescriptionListDataSelectorsType> networkmanagemententitydescriptionlistdataselectorstype;
		std::optional<NetworkManagementFeatureDescriptionDataType> networkmanagementfeaturedescriptiondatatype;
		std::optional<NetworkManagementFeatureDescriptionDataElementsType> networkmanagementfeaturedescriptiondataelementstype;
		std::optional<NetworkManagementFeatureDescriptionListDataType> networkmanagementfeaturedescriptionlistdatatype;
		std::optional<NetworkManagementFeatureDescriptionListDataSelectorsType> networkmanagementfeaturedescriptionlistdataselectorstype;
		std::optional<NodeManagementSpecificationVersionListType> nodemanagementspecificationversionlisttype;
		std::optional<NodeManagementDetailedDiscoveryDeviceInformationType> nodemanagementdetaileddiscoverydeviceinformationtype;
		std::optional<NodeManagementDetailedDiscoveryEntityInformationType> nodemanagementdetaileddiscoveryentityinformationtype;
		std::optional<NodeManagementDetailedDiscoveryFeatureInformationType> nodemanagementdetaileddiscoveryfeatureinformationtype;
		std::optional<NodeManagementDetailedDiscoveryDataType> nodemanagementdetaileddiscoverydatatype;
		std::optional<SpecificationVersionDataElementsType> specificationversiondataelementstype;
		std::optional<NodeManagementSpecificationVersionListElementsType> nodemanagementspecificationversionlistelementstype;
		std::optional<NodeManagementDetailedDiscoveryDeviceInformationElementsType> nodemanagementdetaileddiscoverydeviceinformationelementstype;
		std::optional<NodeManagementDetailedDiscoveryEntityInformationElementsType> nodemanagementdetaileddiscoveryentityinformationelementstype;
		std::optional<NodeManagementDetailedDiscoveryFeatureInformationElementsType> nodemanagementdetaileddiscoveryfeatureinformationelementstype;
		std::optional<NodeManagementDetailedDiscoveryDataElementsType> nodemanagementdetaileddiscoverydataelementstype;
		std::optional<NodeManagementDetailedDiscoveryDataSelectorsType> nodemanagementdetaileddiscoverydataselectorstype;
		std::optional<NodeManagementBindingDataType> nodemanagementbindingdatatype;
		std::optional<NodeManagementBindingDataElementsType> nodemanagementbindingdataelementstype;
		std::optional<NodeManagementBindingDataSelectorsType> nodemanagementbindingdataselectorstype;
		std::optional<NodeManagementBindingRequestCallType> nodemanagementbindingrequestcalltype;
		std::optional<NodeManagementBindingRequestCallElementsType> nodemanagementbindingrequestcallelementstype;
		std::optional<NodeManagementBindingDeleteCallType> nodemanagementbindingdeletecalltype;
		std::optional<NodeManagementBindingDeleteCallElementsType> nodemanagementbindingdeletecallelementstype;
		std::optional<SubscriptionManagementEntryDataType> subscriptionmanagemententrydatatype;
		std::optional<NodeManagementSubscriptionDataType> nodemanagementsubscriptiondatatype;
		std::optional<SubscriptionManagementEntryDataElementsType> subscriptionmanagemententrydataelementstype;
		std::optional<NodeManagementSubscriptionDataElementsType> nodemanagementsubscriptiondataelementstype;
		std::optional<SubscriptionManagementEntryListDataSelectorsType> subscriptionmanagemententrylistdataselectorstype;
		std::optional<NodeManagementSubscriptionDataSelectorsType> nodemanagementsubscriptiondataselectorstype;
		std::optional<SubscriptionManagementRequestCallType> subscriptionmanagementrequestcalltype;
		std::optional<NodeManagementSubscriptionRequestCallType> nodemanagementsubscriptionrequestcalltype;
		std::optional<SubscriptionManagementRequestCallElementsType> subscriptionmanagementrequestcallelementstype;
		std::optional<NodeManagementSubscriptionRequestCallElementsType> nodemanagementsubscriptionrequestcallelementstype;
		std::optional<SubscriptionManagementDeleteCallType> subscriptionmanagementdeletecalltype;
		std::optional<NodeManagementSubscriptionDeleteCallType> nodemanagementsubscriptiondeletecalltype;
		std::optional<SubscriptionManagementDeleteCallElementsType> subscriptionmanagementdeletecallelementstype;
		std::optional<NodeManagementSubscriptionDeleteCallElementsType> nodemanagementsubscriptiondeletecallelementstype;
		std::optional<NodeManagementDestinationDataType> nodemanagementdestinationdatatype;
		std::optional<NodeManagementDestinationDataElementsType> nodemanagementdestinationdataelementstype;
		std::optional<NodeManagementDestinationListDataType> nodemanagementdestinationlistdatatype;
		std::optional<NodeManagementDestinationListDataSelectorsType> nodemanagementdestinationlistdataselectorstype;
		std::optional<UseCaseSupportType> usecasesupporttype;
		std::optional<UseCaseInformationDataType> usecaseinformationdatatype;
		std::optional<NodeManagementUseCaseDataType> nodemanagementusecasedatatype;
		std::optional<UseCaseSupportElementsType> usecasesupportelementstype;
		std::optional<UseCaseInformationDataElementsType> usecaseinformationdataelementstype;
		std::optional<NodeManagementUseCaseDataElementsType> nodemanagementusecasedataelementstype;
		std::optional<UseCaseSupportSelectorsType> usecasesupportselectorstype;
		std::optional<UseCaseInformationListDataSelectorsType> usecaseinformationlistdataselectorstype;
		std::optional<NodeManagementUseCaseDataSelectorsType> nodemanagementusecasedataselectorstype;
		std::optional<SubscriptionManagementEntryListDataType> subscriptionmanagemententrylistdatatype;
		std::optional<UseCaseInformationListDataType> usecaseinformationlistdatatype;
		std::optional<SpecificationVersionListDataType> specificationversionlistdatatype;
		std::optional<SpecificationVersionListDataSelectorsType> specificationversionlistdataselectorstype;
		std::optional<OperatingConstraintsInterruptDataType> operatingconstraintsinterruptdatatype;
		std::optional<OperatingConstraintsInterruptDataElementsType> operatingconstraintsinterruptdataelementstype;
		std::optional<OperatingConstraintsInterruptListDataType> operatingconstraintsinterruptlistdatatype;
		std::optional<OperatingConstraintsInterruptListDataSelectorsType> operatingconstraintsinterruptlistdataselectorstype;
		std::optional<OperatingConstraintsDurationDataType> operatingconstraintsdurationdatatype;
		std::optional<OperatingConstraintsDurationDataElementsType> operatingconstraintsdurationdataelementstype;
		std::optional<OperatingConstraintsDurationListDataType> operatingconstraintsdurationlistdatatype;
		std::optional<OperatingConstraintsDurationListDataSelectorsType> operatingconstraintsdurationlistdataselectorstype;
		std::optional<OperatingConstraintsPowerDescriptionDataType> operatingconstraintspowerdescriptiondatatype;
		std::optional<OperatingConstraintsPowerDescriptionDataElementsType> operatingconstraintspowerdescriptiondataelementstype;
		std::optional<OperatingConstraintsPowerDescriptionListDataType> operatingconstraintspowerdescriptionlistdatatype;
		std::optional<OperatingConstraintsPowerDescriptionListDataSelectorsType> operatingconstraintspowerdescriptionlistdataselectorstype;
		std::optional<OperatingConstraintsPowerRangeDataType> operatingconstraintspowerrangedatatype;
		std::optional<OperatingConstraintsPowerRangeDataElementsType> operatingconstraintspowerrangedataelementstype;
		std::optional<OperatingConstraintsPowerRangeListDataType> operatingconstraintspowerrangelistdatatype;
		std::optional<OperatingConstraintsPowerRangeListDataSelectorsType> operatingconstraintspowerrangelistdataselectorstype;
		std::optional<OperatingConstraintsPowerLevelDataType> operatingconstraintspowerleveldatatype;
		std::optional<OperatingConstraintsPowerLevelDataElementsType> operatingconstraintspowerleveldataelementstype;
		std::optional<OperatingConstraintsPowerLevelListDataType> operatingconstraintspowerlevellistdatatype;
		std::optional<OperatingConstraintsPowerLevelListDataSelectorsType> operatingconstraintspowerlevellistdataselectorstype;
		std::optional<OperatingConstraintsResumeImplicationDataType> operatingconstraintsresumeimplicationdatatype;
		std::optional<OperatingConstraintsResumeImplicationDataElementsType> operatingconstraintsresumeimplicationdataelementstype;
		std::optional<OperatingConstraintsResumeImplicationListDataType> operatingconstraintsresumeimplicationlistdatatype;
		std::optional<OperatingConstraintsResumeImplicationListDataSelectorsType> operatingconstraintsresumeimplicationlistdataselectorstype;
		std::optional<SensingDataType> sensingdatatype;
		std::optional<SensingDataElementsType> sensingdataelementstype;
		std::optional<SensingListDataType> sensinglistdatatype;
		std::optional<SensingListDataSelectorsType> sensinglistdataselectorstype;
		std::optional<SensingDescriptionDataType> sensingdescriptiondatatype;
		std::optional<SensingDescriptionDataElementsType> sensingdescriptiondataelementstype;
		std::optional<SmartEnergyManagementPsAlternativesRelationType> smartenergymanagementpsalternativesrelationtype;
		std::optional<SmartEnergyManagementPsPowerTimeSlotValueListType> smartenergymanagementpspowertimeslotvaluelisttype;
		std::optional<SmartEnergyManagementPsPowerTimeSlotType> smartenergymanagementpspowertimeslottype;
		std::optional<SmartEnergyManagementPsPowerSequenceType> smartenergymanagementpspowersequencetype;
		std::optional<SmartEnergyManagementPsAlternativesType> smartenergymanagementpsalternativestype;
		std::optional<SmartEnergyManagementPsDataType> smartenergymanagementpsdatatype;
		std::optional<SmartEnergyManagementPsAlternativesRelationElementsType> smartenergymanagementpsalternativesrelationelementstype;
		std::optional<SmartEnergyManagementPsPowerTimeSlotValueListElementsType> smartenergymanagementpspowertimeslotvaluelistelementstype;
		std::optional<SmartEnergyManagementPsPowerTimeSlotElementsType> smartenergymanagementpspowertimeslotelementstype;
		std::optional<SmartEnergyManagementPsPowerSequenceElementsType> smartenergymanagementpspowersequenceelementstype;
		std::optional<SmartEnergyManagementPsAlternativesElementsType> smartenergymanagementpsalternativeselementstype;
		std::optional<SmartEnergyManagementPsDataElementsType> smartenergymanagementpsdataelementstype;
		std::optional<SmartEnergyManagementPsDataSelectorsType> smartenergymanagementpsdataselectorstype;
		std::optional<SmartEnergyManagementPsPriceDataType> smartenergymanagementpspricedatatype;
		std::optional<SmartEnergyManagementPsPriceDataElementsType> smartenergymanagementpspricedataelementstype;
		std::optional<SmartEnergyManagementPsPriceDataSelectorsType> smartenergymanagementpspricedataselectorstype;
		std::optional<SmartEnergyManagementPsConfigurationRequestCallType> smartenergymanagementpsconfigurationrequestcalltype;
		std::optional<SmartEnergyManagementPsConfigurationRequestCallElementsType> smartenergymanagementpsconfigurationrequestcallelementstype;
		std::optional<SmartEnergyManagementPsPriceCalculationRequestCallType> smartenergymanagementpspricecalculationrequestcalltype;
		std::optional<SmartEnergyManagementPsPriceCalculationRequestCallElementsType> smartenergymanagementpspricecalculationrequestcallelementstype;
		std::optional<StateInformationDataType> stateinformationdatatype;
		std::optional<StateInformationDataElementsType> stateinformationdataelementstype;
		std::optional<StateInformationListDataType> stateinformationlistdatatype;
		std::optional<StateInformationListDataSelectorsType> stateinformationlistdataselectorstype;
		std::optional<SupplyConditionDataType> supplyconditiondatatype;
		std::optional<SupplyConditionDataElementsType> supplyconditiondataelementstype;
		std::optional<SupplyConditionListDataType> supplyconditionlistdatatype;
		std::optional<SupplyConditionListDataSelectorsType> supplyconditionlistdataselectorstype;
		std::optional<SupplyConditionDescriptionDataType> supplyconditiondescriptiondatatype;
		std::optional<SupplyConditionDescriptionDataElementsType> supplyconditiondescriptiondataelementstype;
		std::optional<SupplyConditionDescriptionListDataType> supplyconditiondescriptionlistdatatype;
		std::optional<SupplyConditionDescriptionListDataSelectorsType> supplyconditiondescriptionlistdataselectorstype;
		std::optional<SupplyConditionThresholdRelationDataType> supplyconditionthresholdrelationdatatype;
		std::optional<SupplyConditionThresholdRelationDataElementsType> supplyconditionthresholdrelationdataelementstype;
		std::optional<SupplyConditionThresholdRelationListDataType> supplyconditionthresholdrelationlistdatatype;
		std::optional<SupplyConditionThresholdRelationListDataSelectorsType> supplyconditionthresholdrelationlistdataselectorstype;
		std::optional<TaskManagementDirectControlRelatedType> taskmanagementdirectcontrolrelatedtype;
		std::optional<TaskManagementDirectControlRelatedElementsType> taskmanagementdirectcontrolrelatedelementstype;
		std::optional<TaskManagementHvacRelatedType> taskmanagementhvacrelatedtype;
		std::optional<TaskManagementHvacRelatedElementsType> taskmanagementhvacrelatedelementstype;
		std::optional<TaskManagementLoadControlReleatedType> taskmanagementloadcontrolreleatedtype;
		std::optional<TaskManagementLoadControlReleatedElementsType> taskmanagementloadcontrolreleatedelementstype;
		std::optional<TaskManagementPowerSequencesRelatedType> taskmanagementpowersequencesrelatedtype;
		std::optional<TaskManagementPowerSequencesRelatedElementsType> taskmanagementpowersequencesrelatedelementstype;
		std::optional<TaskManagementSmartEnergyManagementPsRelatedType> taskmanagementsmartenergymanagementpsrelatedtype;
		std::optional<TaskManagementSmartEnergyManagementPsRelatedElementsType> taskmanagementsmartenergymanagementpsrelatedelementstype;
		std::optional<TaskManagementJobDataType> taskmanagementjobdatatype;
		std::optional<TaskManagementJobDataElementsType> taskmanagementjobdataelementstype;
		std::optional<TaskManagementJobListDataType> taskmanagementjoblistdatatype;
		std::optional<TaskManagementJobListDataSelectorsType> taskmanagementjoblistdataselectorstype;
		std::optional<TaskManagementJobRelationDataType> taskmanagementjobrelationdatatype;
		std::optional<TaskManagementJobRelationDataElementsType> taskmanagementjobrelationdataelementstype;
		std::optional<TaskManagementJobRelationListDataType> taskmanagementjobrelationlistdatatype;
		std::optional<TaskManagementJobRelationListDataSelectorsType> taskmanagementjobrelationlistdataselectorstype;
		std::optional<TaskManagementJobDescriptionDataType> taskmanagementjobdescriptiondatatype;
		std::optional<TaskManagementJobDescriptionDataElementsType> taskmanagementjobdescriptiondataelementstype;
		std::optional<TaskManagementJobDescriptionListDataType> taskmanagementjobdescriptionlistdatatype;
		std::optional<TaskManagementJobDescriptionListDataSelectorsType> taskmanagementjobdescriptionlistdataselectorstype;
		std::optional<TaskManagementOverviewDataType> taskmanagementoverviewdatatype;
		std::optional<TaskManagementOverviewDataElementsType> taskmanagementoverviewdataelementstype;
		std::optional<TimeInformationDataType> timeinformationdatatype;
		std::optional<TimeInformationDataElementsType> timeinformationdataelementstype;
		std::optional<TimeDistributorDataType> timedistributordatatype;
		std::optional<TimeDistributorDataElementsType> timedistributordataelementstype;
		std::optional<TimePrecisionDataType> timeprecisiondatatype;
		std::optional<TimePrecisionDataElementsType> timeprecisiondataelementstype;
		std::optional<TimeDistributorEnquiryCallType> timedistributorenquirycalltype;
		std::optional<TimeDistributorEnquiryCallElementsType> timedistributorenquirycallelementstype;
		std::optional<HeaderType> headertype;
        enum class Function {
			messagingData,
			messagingDataElements,
			messagingListData,
			messagingListDataSelectors,
			timeSeriesData,
			timeSeriesDataElements,
			timeSeriesListData,
			timeSeriesListDataSelectors,
			timeSeriesDescriptionData,
			timeSeriesDescriptionDataElements,
			timeSeriesDescriptionListData,
			timeSeriesDescriptionListDataSelectors,
			timeSeriesConstraintsData,
			timeSeriesConstraintsDataElements,
			timeSeriesConstraintsListData,
			timeSeriesConstraintsListDataSelectors,
			measurementData,
			measurementDataElements,
			measurementListData,
			measurementListDataSelectors,
			measurementSeriesData,
			measurementSeriesDataElements,
			measurementSeriesListData,
			measurementSeriesListDataSelectors,
			measurementConstraintsData,
			measurementConstraintsDataElements,
			measurementConstraintsListData,
			measurementConstraintsListDataSelectors,
			measurementDescriptionData,
			measurementDescriptionDataElements,
			measurementDescriptionListData,
			measurementDescriptionListDataSelectors,
			measurementThresholdRelationData,
			measurementThresholdRelationDataElements,
			measurementThresholdRelationListData,
			measurementThresholdRelationListDataSelectors,
			thresholdData,
			thresholdDataElements,
			thresholdListData,
			thresholdListDataSelectors,
			thresholdConstraintsData,
			thresholdConstraintsDataElements,
			thresholdConstraintsListData,
			thresholdConstraintsListDataSelectors,
			thresholdDescriptionData,
			thresholdDescriptionDataElements,
			thresholdDescriptionListData,
			thresholdDescriptionListDataSelectors,
			directControlActivityData,
			directControlActivityDataElements,
			directControlActivityListData,
			directControlActivityListDataSelectors,
			directControlDescriptionData,
			directControlDescriptionDataElements,
			powerTimeSlotScheduleData,
			powerTimeSlotScheduleDataElements,
			powerTimeSlotScheduleListData,
			powerTimeSlotScheduleListDataSelectors,
			powerTimeSlotValueData,
			powerTimeSlotValueDataElements,
			powerTimeSlotValueListData,
			powerTimeSlotValueListDataSelectors,
			powerTimeSlotScheduleConstraintsData,
			powerTimeSlotScheduleConstraintsDataElements,
			powerTimeSlotScheduleConstraintsListData,
			powerTimeSlotScheduleConstraintsListDataSelectors,
			powerSequenceAlternativesRelationData,
			powerSequenceAlternativesRelationDataElements,
			powerSequenceAlternativesRelationListData,
			powerSequenceAlternativesRelationListDataSelectors,
			powerSequenceDescriptionData,
			powerSequenceDescriptionDataElements,
			powerSequenceDescriptionListData,
			powerSequenceDescriptionListDataSelectors,
			powerSequenceStateData,
			powerSequenceStateDataElements,
			powerSequenceStateListData,
			powerSequenceStateListDataSelectors,
			powerSequenceScheduleData,
			powerSequenceScheduleDataElements,
			powerSequenceScheduleListData,
			powerSequenceScheduleListDataSelectors,
			powerSequenceScheduleConstraintsData,
			powerSequenceScheduleConstraintsDataElements,
			powerSequenceScheduleConstraintsListData,
			powerSequenceScheduleConstraintsListDataSelectors,
			powerSequencePriceData,
			powerSequencePriceDataElements,
			powerSequencePriceListData,
			powerSequencePriceListDataSelectors,
			powerSequenceSchedulePreferenceData,
			powerSequenceSchedulePreferenceDataElements,
			powerSequenceSchedulePreferenceListData,
			powerSequenceSchedulePreferenceListDataSelectors,
			powerSequenceNodeScheduleInformationData,
			powerSequenceNodeScheduleInformationDataElements,
			powerSequenceScheduleConfigurationRequestCall,
			powerSequenceScheduleConfigurationRequestCallElements,
			powerSequencePriceCalculationRequestCall,
			powerSequencePriceCalculationRequestCallElements,
			resultData,
			bindingManagementEntryData,
			bindingManagementEntryDataElements,
			bindingManagementEntryListData,
			bindingManagementEntryListDataSelectors,
			bindingManagementRequestCall,
			bindingManagementRequestCallElements,
			bindingManagementDeleteCall,
			bindingManagementDeleteCallElements,
			actuatorLevelData,
			actuatorLevelDataElements,
			actuatorLevelDescriptionData,
			actuatorLevelDescriptionDataElements,
			cmdClassifier,
			lastUpdateAt,
			function,
			cmdControl,
			actuatorSwitchData,
			actuatorSwitchDataElements,
			actuatorSwitchDescriptionData,
			actuatorSwitchDescriptionDataElements,
			alarmData,
			alarmDataElements,
			alarmListData,
			alarmListDataSelectors,
			billData,
			billDataElements,
			billListData,
			billListDataSelectors,
			billConstraintsData,
			billConstraintsDataElements,
			billConstraintsListData,
			billConstraintsListDataSelectors,
			billDescriptionData,
			billDescriptionDataElements,
			billDescriptionListData,
			billDescriptionListDataSelectors,
			identificationData,
			identificationDataElements,
			identificationListData,
			identificationListDataSelectors,
			sessionIdentificationData,
			sessionIdentificationDataElements,
			sessionIdentificationListData,
			sessionIdentificationListDataSelectors,
			sessionMeasurementRelationData,
			sessionMeasurementRelationDataElements,
			sessionMeasurementRelationListData,
			sessionMeasurementRelationListDataSelectors,
			dataTunnelingCall,
			dataTunnelingCallElements,
			deviceClassificationManufacturerData,
			deviceClassificationManufacturerDataElements,
			deviceClassificationUserData,
			deviceClassificationUserDataElements,
			deviceConfigurationKeyValueData,
			deviceConfigurationKeyValueDataElements,
			deviceConfigurationKeyValueListData,
			deviceConfigurationKeyValueListDataSelectors,
			deviceConfigurationKeyValueDescriptionData,
			deviceConfigurationKeyValueDescriptionDataElements,
			deviceConfigurationKeyValueDescriptionListData,
			deviceConfigurationKeyValueDescriptionListDataSelectors,
			deviceConfigurationKeyValueConstraintsData,
			deviceConfigurationKeyValueConstraintsDataElements,
			deviceConfigurationKeyValueConstraintsListData,
			deviceConfigurationKeyValueConstraintsListDataSelectors,
			deviceDiagnosisStateData,
			deviceDiagnosisStateDataElements,
			deviceDiagnosisHeartbeatData,
			deviceDiagnosisHeartbeatDataElements,
			deviceDiagnosisServiceData,
			deviceDiagnosisServiceDataElements,
			electricalConnectionParameterDescriptionData,
			electricalConnectionParameterDescriptionDataElements,
			electricalConnectionParameterDescriptionListData,
			electricalConnectionParameterDescriptionListDataSelectors,
			electricalConnectionPermittedValueSetData,
			electricalConnectionPermittedValueSetDataElements,
			electricalConnectionPermittedValueSetListData,
			electricalConnectionPermittedValueSetListDataSelectors,
			electricalConnectionCharacteristicData,
			electricalConnectionCharacteristicDataElements,
			electricalConnectionCharacteristicListData,
			electricalConnectionCharacteristicListDataSelectors,
			electricalConnectionStateData,
			electricalConnectionStateDataElements,
			electricalConnectionStateListData,
			electricalConnectionStateListDataSelectors,
			electricalConnectionDescriptionData,
			electricalConnectionDescriptionDataElements,
			electricalConnectionDescriptionListData,
			electricalConnectionDescriptionListDataSelectors,
			hvacSystemFunctionData,
			hvacSystemFunctionDataElements,
			hvacSystemFunctionListData,
			hvacSystemFunctionListDataSelectors,
			hvacSystemFunctionOperationModeRelationData,
			hvacSystemFunctionOperationModeRelationDataElements,
			hvacSystemFunctionOperationModeRelationListData,
			hvacSystemFunctionOperationModeRelationListDataSelectors,
			hvacSystemFunctionSetpointRelationData,
			hvacSystemFunctionSetpointRelationDataElements,
			hvacSystemFunctionSetpointRelationListData,
			hvacSystemFunctionSetpointRelationListDataSelectors,
			hvacSystemFunctionPowerSequenceRelationData,
			hvacSystemFunctionPowerSequenceRelationDataElements,
			hvacSystemFunctionPowerSequenceRelationListData,
			hvacSystemFunctionPowerSequenceRelationListDataSelectors,
			hvacSystemFunctionDescriptionData,
			hvacSystemFunctionDescriptionDataElements,
			hvacSystemFunctionDescriptionListData,
			hvacSystemFunctionDescriptionListDataSelectors,
			hvacOperationModeDescriptionData,
			hvacOperationModeDescriptionDataElements,
			hvacOperationModeDescriptionListData,
			hvacOperationModeDescriptionListDataSelectors,
			hvacOverrunData,
			hvacOverrunDataElements,
			hvacOverrunListData,
			hvacOverrunListDataSelectors,
			hvacOverrunDescriptionData,
			hvacOverrunDescriptionDataElements,
			hvacOverrunDescriptionListData,
			hvacOverrunDescriptionListDataSelectors,
			setpointData,
			setpointDataElements,
			setpointListData,
			setpointListDataSelectors,
			setpointConstraintsData,
			setpointConstraintsDataElements,
			setpointConstraintsListData,
			setpointConstraintsListDataSelectors,
			setpointDescriptionData,
			setpointDescriptionDataElements,
			setpointDescriptionListData,
			setpointDescriptionListDataSelectors,
			timeTableData,
			timeTableDataElements,
			timeTableListData,
			timeTableListDataSelectors,
			timeTableConstraintsData,
			timeTableConstraintsDataElements,
			timeTableConstraintsListData,
			timeTableConstraintsListDataSelectors,
			timeTableDescriptionData,
			timeTableDescriptionDataElements,
			timeTableDescriptionListData,
			timeTableDescriptionListDataSelectors,
			incentiveTableData,
			incentiveTableDataElements,
			incentiveTableDataSelectors,
			incentiveTableDescriptionData,
			incentiveTableDescriptionDataElements,
			incentiveTableDescriptionDataSelectors,
			incentiveTableConstraintsData,
			incentiveTableConstraintsDataElements,
			incentiveTableConstraintsDataSelectors,
			tariffOverallConstraintsData,
			tariffOverallConstraintsDataElements,
			tariffData,
			tariffDataElements,
			tariffListData,
			tariffListDataSelectors,
			tariffTierRelationData,
			tariffTierRelationDataElements,
			tariffTierRelationListData,
			tariffTierRelationListDataSelectors,
			tariffBoundaryRelationData,
			tariffBoundaryRelationDataElements,
			tariffBoundaryRelationListData,
			tariffBoundaryRelationListDataSelectors,
			tariffDescriptionData,
			tariffDescriptionDataElements,
			tariffDescriptionListData,
			tariffDescriptionListDataSelectors,
			tierBoundaryData,
			tierBoundaryDataElements,
			tierBoundaryListData,
			tierBoundaryListDataSelectors,
			tierBoundaryDescriptionData,
			tierBoundaryDescriptionDataElements,
			tierBoundaryDescriptionListData,
			tierBoundaryDescriptionListDataSelectors,
			commodityData,
			commodityDataElements,
			commodityListData,
			commodityListDataSelectors,
			tierData,
			tierDataElements,
			tierListData,
			tierListDataSelectors,
			tierIncentiveRelationData,
			tierIncentiveRelationDataElements,
			tierIncentiveRelationListData,
			tierIncentiveRelationListDataSelectors,
			tierDescriptionData,
			tierDescriptionDataElements,
			tierDescriptionListData,
			tierDescriptionListDataSelectors,
			incentiveData,
			incentiveDataElements,
			incentiveListData,
			incentiveListDataSelectors,
			incentiveDescriptionData,
			incentiveDescriptionDataElements,
			incentiveDescriptionListData,
			incentiveDescriptionListDataSelectors,
			loadControlNodeData,
			loadControlNodeDataElements,
			loadControlEventData,
			loadControlEventDataElements,
			loadControlEventListData,
			loadControlEventListDataSelectors,
			loadControlStateData,
			loadControlStateDataElements,
			loadControlStateListData,
			loadControlStateListDataSelectors,
			loadControlLimitData,
			loadControlLimitDataElements,
			loadControlLimitListData,
			loadControlLimitListDataSelectors,
			loadControlLimitConstraintsData,
			loadControlLimitConstraintsDataElements,
			loadControlLimitConstraintsListData,
			loadControlLimitConstraintsListDataSelectors,
			loadControlLimitDescriptionData,
			loadControlLimitDescriptionDataElements,
			loadControlLimitDescriptionListData,
			loadControlLimitDescriptionListDataSelectors,
			networkManagementAddNodeCall,
			networkManagementAddNodeCallElements,
			networkManagementRemoveNodeCall,
			networkManagementRemoveNodeCallElements,
			networkManagementModifyNodeCall,
			networkManagementModifyNodeCallElements,
			networkManagementScanNetworkCall,
			networkManagementScanNetworkCallElements,
			networkManagementDiscoverCall,
			networkManagementDiscoverCallElements,
			networkManagementAbortCall,
			networkManagementAbortCallElements,
			networkManagementProcessStateData,
			networkManagementProcessStateDataElements,
			networkManagementJoiningModeData,
			networkManagementJoiningModeDataElements,
			networkManagementReportCandidateData,
			networkManagementReportCandidateDataElements,
			networkManagementDeviceDescriptionData,
			networkManagementDeviceDescriptionDataElements,
			networkManagementDeviceDescriptionListData,
			networkManagementDeviceDescriptionListDataSelectors,
			networkManagementEntityDescriptionData,
			networkManagementEntityDescriptionDataElements,
			networkManagementEntityDescriptionListData,
			networkManagementEntityDescriptionListDataSelectors,
			networkManagementFeatureDescriptionData,
			networkManagementFeatureDescriptionDataElements,
			networkManagementFeatureDescriptionListData,
			networkManagementFeatureDescriptionListDataSelectors,
			nodeManagementDetailedDiscoveryData,
			nodeManagementDetailedDiscoveryDataElements,
			nodeManagementDetailedDiscoveryDataSelectors,
			nodeManagementBindingData,
			nodeManagementBindingDataElements,
			nodeManagementBindingDataSelectors,
			nodeManagementBindingRequestCall,
			nodeManagementBindingRequestCallElements,
			nodeManagementBindingDeleteCall,
			nodeManagementBindingDeleteCallElements,
			nodeManagementSubscriptionData,
			nodeManagementSubscriptionDataElements,
			nodeManagementSubscriptionDataSelectors,
			nodeManagementSubscriptionRequestCall,
			nodeManagementSubscriptionRequestCallElements,
			nodeManagementSubscriptionDeleteCall,
			nodeManagementSubscriptionDeleteCallElements,
			nodeManagementDestinationData,
			nodeManagementDestinationDataElements,
			nodeManagementDestinationListData,
			nodeManagementDestinationListDataSelectors,
			nodeManagementUseCaseData,
			nodeManagementUseCaseDataElements,
			nodeManagementUseCaseDataSelectors,
			subscriptionManagementEntryData,
			subscriptionManagementEntryDataElements,
			subscriptionManagementEntryListData,
			subscriptionManagementEntryListDataSelectors,
			subscriptionManagementRequestCall,
			subscriptionManagementRequestCallElements,
			subscriptionManagementDeleteCall,
			subscriptionManagementDeleteCallElements,
			useCaseInformationData,
			useCaseInformationDataElements,
			useCaseInformationListData,
			useCaseInformationListDataSelectors,
			specificationVersionData,
			specificationVersionDataElements,
			specificationVersionListData,
			specificationVersionListDataSelectors,
			operatingConstraintsInterruptData,
			operatingConstraintsInterruptDataElements,
			operatingConstraintsInterruptListData,
			operatingConstraintsInterruptListDataSelectors,
			operatingConstraintsDurationData,
			operatingConstraintsDurationDataElements,
			operatingConstraintsDurationListData,
			operatingConstraintsDurationListDataSelectors,
			operatingConstraintsPowerDescriptionData,
			operatingConstraintsPowerDescriptionDataElements,
			operatingConstraintsPowerDescriptionListData,
			operatingConstraintsPowerDescriptionListDataSelectors,
			operatingConstraintsPowerRangeData,
			operatingConstraintsPowerRangeDataElements,
			operatingConstraintsPowerRangeListData,
			operatingConstraintsPowerRangeListDataSelectors,
			operatingConstraintsPowerLevelData,
			operatingConstraintsPowerLevelDataElements,
			operatingConstraintsPowerLevelListData,
			operatingConstraintsPowerLevelListDataSelectors,
			operatingConstraintsResumeImplicationData,
			operatingConstraintsResumeImplicationDataElements,
			operatingConstraintsResumeImplicationListData,
			operatingConstraintsResumeImplicationListDataSelectors,
			sensingData,
			sensingDataElements,
			sensingListData,
			sensingListDataSelectors,
			sensingDescriptionData,
			sensingDescriptionDataElements,
			smartEnergyManagementPsData,
			smartEnergyManagementPsDataElements,
			smartEnergyManagementPsDataSelectors,
			smartEnergyManagementPsPriceData,
			smartEnergyManagementPsPriceDataElements,
			smartEnergyManagementPsPriceDataSelectors,
			smartEnergyManagementPsConfigurationRequestCall,
			smartEnergyManagementPsConfigurationRequestCallElements,
			smartEnergyManagementPsPriceCalculationRequestCall,
			smartEnergyManagementPsPriceCalculationRequestCallElements,
			stateInformationData,
			stateInformationDataElements,
			stateInformationListData,
			stateInformationListDataSelectors,
			supplyConditionData,
			supplyConditionDataElements,
			supplyConditionListData,
			supplyConditionListDataSelectors,
			supplyConditionDescriptionData,
			supplyConditionDescriptionDataElements,
			supplyConditionDescriptionListData,
			supplyConditionDescriptionListDataSelectors,
			supplyConditionThresholdRelationData,
			supplyConditionThresholdRelationDataElements,
			supplyConditionThresholdRelationListData,
			supplyConditionThresholdRelationListDataSelectors,
			taskManagementJobData,
			taskManagementJobDataElements,
			taskManagementJobListData,
			taskManagementJobListDataSelectors,
			taskManagementJobRelationData,
			taskManagementJobRelationDataElements,
			taskManagementJobRelationListData,
			taskManagementJobRelationListDataSelectors,
			taskManagementJobDescriptionData,
			taskManagementJobDescriptionDataElements,
			taskManagementJobDescriptionListData,
			taskManagementJobDescriptionListDataSelectors,
			taskManagementOverviewData,
			taskManagementOverviewDataElements,
			timeInformationData,
			timeInformationDataElements,
			timeDistributorData,
			timeDistributorDataElements,
			timePrecisionData,
			timePrecisionDataElements,
			timeDistributorEnquiryCall,
			timeDistributorEnquiryCallElements,
			header,
        None
        };  
        enum class Type {
			MessagingDataType,
			MessagingDataElementsType,
			MessagingListDataType,
			MessagingListDataSelectorsType,
			TimeSeriesDataType,
			TimeSeriesDataElementsType,
			TimeSeriesListDataType,
			TimeSeriesListDataSelectorsType,
			TimeSeriesDescriptionDataType,
			TimeSeriesDescriptionDataElementsType,
			TimeSeriesDescriptionListDataType,
			TimeSeriesDescriptionListDataSelectorsType,
			TimeSeriesConstraintsDataType,
			TimeSeriesConstraintsDataElementsType,
			TimeSeriesConstraintsListDataType,
			TimeSeriesConstraintsListDataSelectorsType,
			MeasurementDataType,
			MeasurementDataElementsType,
			MeasurementListDataType,
			MeasurementListDataSelectorsType,
			MeasurementSeriesDataType,
			MeasurementSeriesDataElementsType,
			MeasurementSeriesListDataType,
			MeasurementSeriesListDataSelectorsType,
			MeasurementConstraintsDataType,
			MeasurementConstraintsDataElementsType,
			MeasurementConstraintsListDataType,
			MeasurementConstraintsListDataSelectorsType,
			MeasurementDescriptionDataType,
			MeasurementDescriptionDataElementsType,
			MeasurementDescriptionListDataType,
			MeasurementDescriptionListDataSelectorsType,
			MeasurementThresholdRelationDataType,
			MeasurementThresholdRelationDataElementsType,
			MeasurementThresholdRelationListDataType,
			MeasurementThresholdRelationListDataSelectorsType,
			ThresholdDataType,
			ThresholdDataElementsType,
			ThresholdListDataType,
			ThresholdListDataSelectorsType,
			ThresholdConstraintsDataType,
			ThresholdConstraintsDataElementsType,
			ThresholdConstraintsListDataType,
			ThresholdConstraintsListDataSelectorsType,
			ThresholdDescriptionDataType,
			ThresholdDescriptionDataElementsType,
			ThresholdDescriptionListDataType,
			ThresholdDescriptionListDataSelectorsType,
			DirectControlActivityDataType,
			DirectControlActivityDataElementsType,
			DirectControlActivityListDataType,
			DirectControlActivityListDataSelectorsType,
			DirectControlDescriptionDataType,
			DirectControlDescriptionDataElementsType,
			PowerTimeSlotScheduleDataType,
			PowerTimeSlotScheduleDataElementsType,
			PowerTimeSlotScheduleListDataType,
			PowerTimeSlotScheduleListDataSelectorsType,
			PowerTimeSlotValueDataType,
			PowerTimeSlotValueDataElementsType,
			PowerTimeSlotValueListDataType,
			PowerTimeSlotValueListDataSelectorsType,
			PowerTimeSlotScheduleConstraintsDataType,
			PowerTimeSlotScheduleConstraintsDataElementsType,
			PowerTimeSlotScheduleConstraintsListDataType,
			PowerTimeSlotScheduleConstraintsListDataSelectorsType,
			PowerSequenceAlternativesRelationDataType,
			PowerSequenceAlternativesRelationDataElementsType,
			PowerSequenceAlternativesRelationListDataType,
			PowerSequenceAlternativesRelationListDataSelectorsType,
			PowerSequenceDescriptionDataType,
			PowerSequenceDescriptionDataElementsType,
			PowerSequenceDescriptionListDataType,
			PowerSequenceDescriptionListDataSelectorsType,
			PowerSequenceStateDataType,
			PowerSequenceStateDataElementsType,
			PowerSequenceStateListDataType,
			PowerSequenceStateListDataSelectorsType,
			PowerSequenceScheduleDataType,
			PowerSequenceScheduleDataElementsType,
			PowerSequenceScheduleListDataType,
			PowerSequenceScheduleListDataSelectorsType,
			PowerSequenceScheduleConstraintsDataType,
			PowerSequenceScheduleConstraintsDataElementsType,
			PowerSequenceScheduleConstraintsListDataType,
			PowerSequenceScheduleConstraintsListDataSelectorsType,
			PowerSequencePriceDataType,
			PowerSequencePriceDataElementsType,
			PowerSequencePriceListDataType,
			PowerSequencePriceListDataSelectorsType,
			PowerSequenceSchedulePreferenceDataType,
			PowerSequenceSchedulePreferenceDataElementsType,
			PowerSequenceSchedulePreferenceListDataType,
			PowerSequenceSchedulePreferenceListDataSelectorsType,
			PowerSequenceNodeScheduleInformationDataType,
			PowerSequenceNodeScheduleInformationDataElementsType,
			PowerSequenceScheduleConfigurationRequestCallType,
			PowerSequenceScheduleConfigurationRequestCallElementsType,
			PowerSequencePriceCalculationRequestCallType,
			PowerSequencePriceCalculationRequestCallElementsType,
			ResultDataType,
			BindingManagementEntryDataType,
			BindingManagementEntryDataElementsType,
			BindingManagementEntryListDataType,
			BindingManagementEntryListDataSelectorsType,
			BindingManagementRequestCallType,
			BindingManagementRequestCallElementsType,
			BindingManagementDeleteCallType,
			BindingManagementDeleteCallElementsType,
			ActuatorLevelDataType,
			ActuatorLevelDataElementsType,
			ActuatorLevelDescriptionDataType,
			ActuatorLevelDescriptionDataElementsType,
			CmdClassifierType,
			AbsoluteOrRelativeTimeType,
			FunctionType,
			CmdControlType,
			ActuatorSwitchDataType,
			ActuatorSwitchDataElementsType,
			ActuatorSwitchDescriptionDataType,
			ActuatorSwitchDescriptionDataElementsType,
			AlarmDataType,
			AlarmDataElementsType,
			AlarmListDataType,
			AlarmListDataSelectorsType,
			BillDataType,
			BillDataElementsType,
			BillListDataType,
			BillListDataSelectorsType,
			BillConstraintsDataType,
			BillConstraintsDataElementsType,
			BillConstraintsListDataType,
			BillConstraintsListDataSelectorsType,
			BillDescriptionDataType,
			BillDescriptionDataElementsType,
			BillDescriptionListDataType,
			BillDescriptionListDataSelectorsType,
			IdentificationDataType,
			IdentificationDataElementsType,
			IdentificationListDataType,
			IdentificationListDataSelectorsType,
			SessionIdentificationDataType,
			SessionIdentificationDataElementsType,
			SessionIdentificationListDataType,
			SessionIdentificationListDataSelectorsType,
			SessionMeasurementRelationDataType,
			SessionMeasurementRelationDataElementsType,
			SessionMeasurementRelationListDataType,
			SessionMeasurementRelationListDataSelectorsType,
			DataTunnelingCallType,
			DataTunnelingCallElementsType,
			DeviceClassificationManufacturerDataType,
			DeviceClassificationManufacturerDataElementsType,
			DeviceClassificationUserDataType,
			DeviceClassificationUserDataElementsType,
			DeviceConfigurationKeyValueDataType,
			DeviceConfigurationKeyValueDataElementsType,
			DeviceConfigurationKeyValueListDataType,
			DeviceConfigurationKeyValueListDataSelectorsType,
			DeviceConfigurationKeyValueDescriptionDataType,
			DeviceConfigurationKeyValueDescriptionDataElementsType,
			DeviceConfigurationKeyValueDescriptionListDataType,
			DeviceConfigurationKeyValueDescriptionListDataSelectorsType,
			DeviceConfigurationKeyValueConstraintsDataType,
			DeviceConfigurationKeyValueConstraintsDataElementsType,
			DeviceConfigurationKeyValueConstraintsListDataType,
			DeviceConfigurationKeyValueConstraintsListDataSelectorsType,
			DeviceDiagnosisStateDataType,
			DeviceDiagnosisStateDataElementsType,
			DeviceDiagnosisHeartbeatDataType,
			DeviceDiagnosisHeartbeatDataElementsType,
			DeviceDiagnosisServiceDataType,
			DeviceDiagnosisServiceDataElementsType,
			ElectricalConnectionParameterDescriptionDataType,
			ElectricalConnectionParameterDescriptionDataElementsType,
			ElectricalConnectionParameterDescriptionListDataType,
			ElectricalConnectionParameterDescriptionListDataSelectorsType,
			ElectricalConnectionPermittedValueSetDataType,
			ElectricalConnectionPermittedValueSetDataElementsType,
			ElectricalConnectionPermittedValueSetListDataType,
			ElectricalConnectionPermittedValueSetListDataSelectorsType,
			ElectricalConnectionCharacteristicDataType,
			ElectricalConnectionCharacteristicDataElementsType,
			ElectricalConnectionCharacteristicListDataType,
			ElectricalConnectionCharacteristicListDataSelectorsType,
			ElectricalConnectionStateDataType,
			ElectricalConnectionStateDataElementsType,
			ElectricalConnectionStateListDataType,
			ElectricalConnectionStateListDataSelectorsType,
			ElectricalConnectionDescriptionDataType,
			ElectricalConnectionDescriptionDataElementsType,
			ElectricalConnectionDescriptionListDataType,
			ElectricalConnectionDescriptionListDataSelectorsType,
			HvacSystemFunctionDataType,
			HvacSystemFunctionDataElementsType,
			HvacSystemFunctionListDataType,
			HvacSystemFunctionListDataSelectorsType,
			HvacSystemFunctionOperationModeRelationDataType,
			HvacSystemFunctionOperationModeRelationDataElementsType,
			HvacSystemFunctionOperationModeRelationListDataType,
			HvacSystemFunctionOperationModeRelationListDataSelectorsType,
			HvacSystemFunctionSetpointRelationDataType,
			HvacSystemFunctionSetpointRelationDataElementsType,
			HvacSystemFunctionSetpointRelationListDataType,
			HvacSystemFunctionSetpointRelationListDataSelectorsType,
			HvacSystemFunctionPowerSequenceRelationDataType,
			HvacSystemFunctionPowerSequenceRelationDataElementsType,
			HvacSystemFunctionPowerSequenceRelationListDataType,
			HvacSystemFunctionPowerSequenceRelationListDataSelectorsType,
			HvacSystemFunctionDescriptionDataType,
			HvacSystemFunctionDescriptionDataElementsType,
			HvacSystemFunctionDescriptionListDataType,
			HvacSystemFunctionDescriptionListDataSelectorsType,
			HvacOperationModeDescriptionDataType,
			HvacOperationModeDescriptionDataElementsType,
			HvacOperationModeDescriptionListDataType,
			HvacOperationModeDescriptionListDataSelectorsType,
			HvacOverrunDataType,
			HvacOverrunDataElementsType,
			HvacOverrunListDataType,
			HvacOverrunListDataSelectorsType,
			HvacOverrunDescriptionDataType,
			HvacOverrunDescriptionDataElementsType,
			HvacOverrunDescriptionListDataType,
			HvacOverrunDescriptionListDataSelectorsType,
			SetpointDataType,
			SetpointDataElementsType,
			SetpointListDataType,
			SetpointListDataSelectorsType,
			SetpointConstraintsDataType,
			SetpointConstraintsDataElementsType,
			SetpointConstraintsListDataType,
			SetpointConstraintsListDataSelectorsType,
			SetpointDescriptionDataType,
			SetpointDescriptionDataElementsType,
			SetpointDescriptionListDataType,
			SetpointDescriptionListDataSelectorsType,
			TimeTableDataType,
			TimeTableDataElementsType,
			TimeTableListDataType,
			TimeTableListDataSelectorsType,
			TimeTableConstraintsDataType,
			TimeTableConstraintsDataElementsType,
			TimeTableConstraintsListDataType,
			TimeTableConstraintsListDataSelectorsType,
			TimeTableDescriptionDataType,
			TimeTableDescriptionDataElementsType,
			TimeTableDescriptionListDataType,
			TimeTableDescriptionListDataSelectorsType,
			IncentiveTableDataType,
			IncentiveTableDataElementsType,
			IncentiveTableDataSelectorsType,
			IncentiveTableDescriptionDataType,
			IncentiveTableDescriptionDataElementsType,
			IncentiveTableDescriptionDataSelectorsType,
			IncentiveTableConstraintsDataType,
			IncentiveTableConstraintsDataElementsType,
			IncentiveTableConstraintsDataSelectorsType,
			TariffOverallConstraintsDataType,
			TariffOverallConstraintsDataElementsType,
			TariffDataType,
			TariffDataElementsType,
			TariffListDataType,
			TariffListDataSelectorsType,
			TariffTierRelationDataType,
			TariffTierRelationDataElementsType,
			TariffTierRelationListDataType,
			TariffTierRelationListDataSelectorsType,
			TariffBoundaryRelationDataType,
			TariffBoundaryRelationDataElementsType,
			TariffBoundaryRelationListDataType,
			TariffBoundaryRelationListDataSelectorsType,
			TariffDescriptionDataType,
			TariffDescriptionDataElementsType,
			TariffDescriptionListDataType,
			TariffDescriptionListDataSelectorsType,
			TierBoundaryDataType,
			TierBoundaryDataElementsType,
			TierBoundaryListDataType,
			TierBoundaryListDataSelectorsType,
			TierBoundaryDescriptionDataType,
			TierBoundaryDescriptionDataElementsType,
			TierBoundaryDescriptionListDataType,
			TierBoundaryDescriptionListDataSelectorsType,
			CommodityDataType,
			CommodityDataElementsType,
			CommodityListDataType,
			CommodityListDataSelectorsType,
			TierDataType,
			TierDataElementsType,
			TierListDataType,
			TierListDataSelectorsType,
			TierIncentiveRelationDataType,
			TierIncentiveRelationDataElementsType,
			TierIncentiveRelationListDataType,
			TierIncentiveRelationListDataSelectorsType,
			TierDescriptionDataType,
			TierDescriptionDataElementsType,
			TierDescriptionListDataType,
			TierDescriptionListDataSelectorsType,
			IncentiveDataType,
			IncentiveDataElementsType,
			IncentiveListDataType,
			IncentiveListDataSelectorsType,
			IncentiveDescriptionDataType,
			IncentiveDescriptionDataElementsType,
			IncentiveDescriptionListDataType,
			IncentiveDescriptionListDataSelectorsType,
			LoadControlNodeDataType,
			LoadControlNodeDataElementsType,
			LoadControlEventDataType,
			LoadControlEventDataElementsType,
			LoadControlEventListDataType,
			LoadControlEventListDataSelectorsType,
			LoadControlStateDataType,
			LoadControlStateDataElementsType,
			LoadControlStateListDataType,
			LoadControlStateListDataSelectorsType,
			LoadControlLimitDataType,
			LoadControlLimitDataElementsType,
			LoadControlLimitListDataType,
			LoadControlLimitListDataSelectorsType,
			LoadControlLimitConstraintsDataType,
			LoadControlLimitConstraintsDataElementsType,
			LoadControlLimitConstraintsListDataType,
			LoadControlLimitConstraintsListDataSelectorsType,
			LoadControlLimitDescriptionDataType,
			LoadControlLimitDescriptionDataElementsType,
			LoadControlLimitDescriptionListDataType,
			LoadControlLimitDescriptionListDataSelectorsType,
			NetworkManagementAddNodeCallType,
			NetworkManagementAddNodeCallElementsType,
			NetworkManagementRemoveNodeCallType,
			NetworkManagementRemoveNodeCallElementsType,
			NetworkManagementModifyNodeCallType,
			NetworkManagementModifyNodeCallElementsType,
			NetworkManagementScanNetworkCallType,
			NetworkManagementScanNetworkCallElementsType,
			NetworkManagementDiscoverCallType,
			NetworkManagementDiscoverCallElementsType,
			NetworkManagementAbortCallType,
			NetworkManagementAbortCallElementsType,
			NetworkManagementProcessStateDataType,
			NetworkManagementProcessStateDataElementsType,
			NetworkManagementJoiningModeDataType,
			NetworkManagementJoiningModeDataElementsType,
			NetworkManagementReportCandidateDataType,
			NetworkManagementReportCandidateDataElementsType,
			NetworkManagementDeviceDescriptionDataType,
			NetworkManagementDeviceDescriptionDataElementsType,
			NetworkManagementDeviceDescriptionListDataType,
			NetworkManagementDeviceDescriptionListDataSelectorsType,
			NetworkManagementEntityDescriptionDataType,
			NetworkManagementEntityDescriptionDataElementsType,
			NetworkManagementEntityDescriptionListDataType,
			NetworkManagementEntityDescriptionListDataSelectorsType,
			NetworkManagementFeatureDescriptionDataType,
			NetworkManagementFeatureDescriptionDataElementsType,
			NetworkManagementFeatureDescriptionListDataType,
			NetworkManagementFeatureDescriptionListDataSelectorsType,
			NodeManagementDetailedDiscoveryDataType,
			NodeManagementDetailedDiscoveryDataElementsType,
			NodeManagementDetailedDiscoveryDataSelectorsType,
			NodeManagementBindingDataType,
			NodeManagementBindingDataElementsType,
			NodeManagementBindingDataSelectorsType,
			NodeManagementBindingRequestCallType,
			NodeManagementBindingRequestCallElementsType,
			NodeManagementBindingDeleteCallType,
			NodeManagementBindingDeleteCallElementsType,
			NodeManagementSubscriptionDataType,
			NodeManagementSubscriptionDataElementsType,
			NodeManagementSubscriptionDataSelectorsType,
			NodeManagementSubscriptionRequestCallType,
			NodeManagementSubscriptionRequestCallElementsType,
			NodeManagementSubscriptionDeleteCallType,
			NodeManagementSubscriptionDeleteCallElementsType,
			NodeManagementDestinationDataType,
			NodeManagementDestinationDataElementsType,
			NodeManagementDestinationListDataType,
			NodeManagementDestinationListDataSelectorsType,
			NodeManagementUseCaseDataType,
			NodeManagementUseCaseDataElementsType,
			NodeManagementUseCaseDataSelectorsType,
			SubscriptionManagementEntryDataType,
			SubscriptionManagementEntryDataElementsType,
			SubscriptionManagementEntryListDataType,
			SubscriptionManagementEntryListDataSelectorsType,
			SubscriptionManagementRequestCallType,
			SubscriptionManagementRequestCallElementsType,
			SubscriptionManagementDeleteCallType,
			SubscriptionManagementDeleteCallElementsType,
			UseCaseInformationDataType,
			UseCaseInformationDataElementsType,
			UseCaseInformationListDataType,
			UseCaseInformationListDataSelectorsType,
			SpecificationVersionDataType,
			SpecificationVersionDataElementsType,
			SpecificationVersionListDataType,
			SpecificationVersionListDataSelectorsType,
			OperatingConstraintsInterruptDataType,
			OperatingConstraintsInterruptDataElementsType,
			OperatingConstraintsInterruptListDataType,
			OperatingConstraintsInterruptListDataSelectorsType,
			OperatingConstraintsDurationDataType,
			OperatingConstraintsDurationDataElementsType,
			OperatingConstraintsDurationListDataType,
			OperatingConstraintsDurationListDataSelectorsType,
			OperatingConstraintsPowerDescriptionDataType,
			OperatingConstraintsPowerDescriptionDataElementsType,
			OperatingConstraintsPowerDescriptionListDataType,
			OperatingConstraintsPowerDescriptionListDataSelectorsType,
			OperatingConstraintsPowerRangeDataType,
			OperatingConstraintsPowerRangeDataElementsType,
			OperatingConstraintsPowerRangeListDataType,
			OperatingConstraintsPowerRangeListDataSelectorsType,
			OperatingConstraintsPowerLevelDataType,
			OperatingConstraintsPowerLevelDataElementsType,
			OperatingConstraintsPowerLevelListDataType,
			OperatingConstraintsPowerLevelListDataSelectorsType,
			OperatingConstraintsResumeImplicationDataType,
			OperatingConstraintsResumeImplicationDataElementsType,
			OperatingConstraintsResumeImplicationListDataType,
			OperatingConstraintsResumeImplicationListDataSelectorsType,
			SensingDataType,
			SensingDataElementsType,
			SensingListDataType,
			SensingListDataSelectorsType,
			SensingDescriptionDataType,
			SensingDescriptionDataElementsType,
			SmartEnergyManagementPsDataType,
			SmartEnergyManagementPsDataElementsType,
			SmartEnergyManagementPsDataSelectorsType,
			SmartEnergyManagementPsPriceDataType,
			SmartEnergyManagementPsPriceDataElementsType,
			SmartEnergyManagementPsPriceDataSelectorsType,
			SmartEnergyManagementPsConfigurationRequestCallType,
			SmartEnergyManagementPsConfigurationRequestCallElementsType,
			SmartEnergyManagementPsPriceCalculationRequestCallType,
			SmartEnergyManagementPsPriceCalculationRequestCallElementsType,
			StateInformationDataType,
			StateInformationDataElementsType,
			StateInformationListDataType,
			StateInformationListDataSelectorsType,
			SupplyConditionDataType,
			SupplyConditionDataElementsType,
			SupplyConditionListDataType,
			SupplyConditionListDataSelectorsType,
			SupplyConditionDescriptionDataType,
			SupplyConditionDescriptionDataElementsType,
			SupplyConditionDescriptionListDataType,
			SupplyConditionDescriptionListDataSelectorsType,
			SupplyConditionThresholdRelationDataType,
			SupplyConditionThresholdRelationDataElementsType,
			SupplyConditionThresholdRelationListDataType,
			SupplyConditionThresholdRelationListDataSelectorsType,
			TaskManagementJobDataType,
			TaskManagementJobDataElementsType,
			TaskManagementJobListDataType,
			TaskManagementJobListDataSelectorsType,
			TaskManagementJobRelationDataType,
			TaskManagementJobRelationDataElementsType,
			TaskManagementJobRelationListDataType,
			TaskManagementJobRelationListDataSelectorsType,
			TaskManagementJobDescriptionDataType,
			TaskManagementJobDescriptionDataElementsType,
			TaskManagementJobDescriptionListDataType,
			TaskManagementJobDescriptionListDataSelectorsType,
			TaskManagementOverviewDataType,
			TaskManagementOverviewDataElementsType,
			TimeInformationDataType,
			TimeInformationDataElementsType,
			TimeDistributorDataType,
			TimeDistributorDataElementsType,
			TimePrecisionDataType,
			TimePrecisionDataElementsType,
			TimeDistributorEnquiryCallType,
			TimeDistributorEnquiryCallElementsType,
			HeaderType,
        None
        };
        
        
        Function last_cmd;
        
        Type type_from_function(Function function);
        Function function_from_string(const String function_name);
        Function handle_cmd(JsonObjectConst obj);
        String function_to_string(Function function);
};
    