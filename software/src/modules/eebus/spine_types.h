// This file is generated by generator.py. Changes will be overwritten

#pragma once

#include "module.h"
#include "config.h"
#include <string>
#include <vector>
#include <optional>

namespace ArduinoJson
{
template <typename T> struct Converter<std::vector<T>>
{
    static void toJson(const std::vector<T> &src, JsonVariant dst);
    static std::vector<T> fromJson(JsonVariantConst src);
    static bool checkJson(JsonVariantConst src);
};
} // namespace ArduinoJson

/**
 * An alternative optional implementation that automatically fills itself if needed.
 * @tparam T The typename of the optional value.
 */
template <typename T>
class SpineOptional
{
    mutable T value{};
    mutable bool is_set = false;

public:
    using value_type = T;
    SpineOptional() = default;

    SpineOptional(const T &v) : value(v), is_set(true)
    {
    }

    /**
     * Assign value to the optional and mark it as set.
     * @param v the value assigned
     * @return
     */
    SpineOptional &operator=(const T &v)
    {
        value = v;
        is_set = true;
        return *this;
    }

    explicit operator bool() const noexcept
    {
        return is_set;
    }

    /**
     *
     * @return The value contained in the optional.
     */
    T &operator*()
    {
        return value;
    }

    /**
     *
     * @return The value contained in the optional.
     */
    const T &operator*() const
    {
        return value;
    }

    /**
     *
     * @return The pointer to the value contained in the optional. If the optional is not set, it will be default constructed and set.
     */
    T *operator->()
    {
        if (!is_set) {
            value = T{};
        }
        is_set = true;
        return &value;
    }

    /**
     *
     * @return The pointer to the value contained in the optional. If the optional is not set, it will be default constructed and set.
     */
    const T *operator->() const
    {
        if (!is_set) {
            value = T{};
        }
        is_set = true;
        return &value;
    }

    T &get()
    {
        is_set = true;
        return value;
    }

    const T &get() const
    {
        is_set = true;
        return value;
    }

    bool has_value() const
    {
        return is_set;
    }

    /**
     * Resets the optional to an unset state and clears the value.
     */
    void reset()
    {
        is_set = false;
        value = T{};
    }

    bool isNull() const
    {
        return !is_set;
    }

    /**
     * Resets the optional to a set state and default constructs the value.
     */
    void emplace()
    {
        is_set = true;
        value = T{};
    }

    friend bool operator==(const SpineOptional<T> &opt, const T &v)
    {
        return opt.is_set && opt.value == v;
    }

    friend bool operator==(const T &v, const SpineOptional<T> &opt)
    {
        return opt.is_set && opt.value == v;
    }

    friend bool operator!=(const SpineOptional<T> &opt, const T &v)
    {
        return !(opt == v);
    }

    friend bool operator!=(const T &v, const SpineOptional<T> &opt)
    {
        return !(v == opt);
    }
};

struct DateTimeStruct
{
    // Added manually
    SpineOptional<uint16_t> year;
    SpineOptional<uint8_t> month;
    SpineOptional<uint8_t> day;
    SpineOptional<uint8_t> hour;
    SpineOptional<uint8_t> minute;
    SpineOptional<uint8_t> second;
    SpineOptional<uint16_t> millisecond;
    SpineOptional<int8_t> timezone; // Offset from UTC in hours, 0 if time is UTC, empty if no TZ is given
};


using EnumExtendType = std::string;
using DirectControlActivityStateType = std::string;
using LabelType = std::string;
using DescriptionType = std::string;
using SpecificationVersionType = std::string;
using AbsoluteOrRelativeTimeType = std::string;
using RecurringIntervalType = std::string;
using DayOfMonthType = int;
using CalendarWeekType = int;
using OccurrenceType = std::string;
using NumberType = int;
using ScaleType = int;
using MaxResponseDelayType = std::string;
using CommodityTypeType = std::string;
using EnergyDirectionType = std::string;
using EnergyModeType = std::string;
using UnitOfMeasurementType = std::string;
using CurrencyType = std::string;
using AddressDeviceType = std::string;
using AddressEntityType = int;
using AddressFeatureType = int;
using ScopeTypeType = std::string;
using FeatureGroupType = std::string;
using DeviceTypeType = std::string;
using EntityTypeType = std::string;
using FeatureTypeType = std::string;
using FeatureSpecificUsageEnumType = std::string;
using FeatureSpecificUsageType = std::string;
using FunctionType = std::string;
using AlternativesIdType = int;
using PowerSequenceIdType = int;
using PowerTimeSlotNumberType = int;
using PowerTimeSlotValueTypeType = std::string;
using PowerSequenceScopeType = std::string;
using PowerSequenceStateType = std::string;
using MeasurementIdType = int;
using MeasurementTypeType = std::string;
using MeasurementValueTypeType = std::string;
using MeasurementValueSourceType = std::string;
using MeasurementValueTendencyType = std::string;
using MeasurementValueStateType = std::string;
using ThresholdIdType = int;
using ThresholdTypeType = std::string;
using BillIdType = int;
using BillTypeType = std::string;
using BillPositionIdType = int;
using BillPositionCountType = std::string;
using BillPositionTypeType = std::string;
using BillValueIdType = int;
using BillCostIdType = int;
using BillCostTypeType = std::string;
using IdentificationIdType = int;
using IdentificationTypeType = std::string;
using IdentificationValueType = std::string;
using SessionIdType = int;
using SetpointIdType = int;
using SetpointTypeType = std::string;
using TimeTableIdType = int;
using TimeSlotIdType = int;
using TimeSlotCountType = std::string;
using TimeSlotTimeModeType = std::string;
using SensingStateType = std::string;
using SensingTypeType = std::string;
using ErrorNumberType = int;
using ActuatorSwitchFctType = std::string;
using NetworkManagementNativeSetupType = std::string;
using NetworkManagementScanSetupType = std::string;
using NetworkManagementSetupType = std::string;
using NetworkManagementCandidateSetupType = std::string;
using NetworkManagementTechnologyAddressType = std::string;
using NetworkManagementCommunicationsTechnologyInformationType = std::string;
using NetworkManagementMinimumTrustLevelType = std::string;
using NetworkManagementProcessTimeoutType = std::string;
using ConditionIdType = int;
using SupplyConditionEventTypeType = std::string;
using SupplyConditionOriginatorType = std::string;
using GridConditionType = std::string;
using AlarmIdType = int;
using AlarmTypeType = std::string;
using BindingIdType = int;
using SubscriptionIdType = int;
using UseCaseActorEnumType = std::string;
using UseCaseActorType = std::string;
using UseCaseNameEnumType = std::string;
using UseCaseNameType = std::string;
using UseCaseScenarioSupportType = int;
using SpecificationVersionDataType = std::string;
using TaskManagementJobIdType = int;
using TaskManagementJobStateType = std::string;
using TaskManagementJobSourceType = std::string;
using HvacSystemFunctionIdType = int;
using HvacSystemFunctionTypeType = std::string;
using HvacOperationModeIdType = int;
using HvacOperationModeTypeType = std::string;
using HvacOverrunIdType = int;
using HvacOverrunTypeType = std::string;
using HvacOverrunStatusType = std::string;
using LoadControlEventIdType = int;
using LoadControlEventActionType = std::string;
using LoadControlEventStateType = std::string;
using LoadControlLimitIdType = int;
using LoadControlLimitTypeType = std::string;
using LoadControlCategoryType = std::string;
using DeviceClassificationStringType = std::string;
using PowerSourceType = std::string;
using ActuatorLevelFctType = std::string;
using TimeSeriesIdType = int;
using TimeSeriesSlotIdType = int;
using TimeSeriesSlotCountType = std::string;
using TimeSeriesTypeType = std::string;
using MessagingNumberType = int;
using MessagingTypeType = std::string;
using MessagingDataTextType = std::string;
using TariffIdType = int;
using TariffCountType = std::string;
using TierBoundaryIdType = int;
using TierBoundaryCountType = std::string;
using TierBoundaryTypeType = std::string;
using CommodityIdType = int;
using TierIdType = int;
using TierCountType = std::string;
using TierTypeType = std::string;
using IncentiveIdType = int;
using IncentiveCountType = std::string;
using IncentiveTypeType = std::string;
using IncentivePriorityType = int;
using IncentiveValueTypeType = std::string;
using stateInformationIdType = int;
using StateInformationType = std::string;
using StateInformationCategoryType = std::string;
using ElectricalConnectionIdType = int;
using ElectricalConnectionParameterIdType = int;
using ElectricalConnectionMeasurandVariantType = std::string;
using ElectricalConnectionVoltageTypeType = std::string;
using ElectricalConnectionAcMeasurementTypeType = std::string;
using ElectricalConnectionPhaseNameType = std::string;
using ElectricalConnectionCharacteristicIdType = int;
using ElectricalConnectionCharacteristicContextType = std::string;
using ElectricalConnectionCharacteristicTypeType = std::string;
using VendorStateCodeType = std::string;
using LastErrorCodeType = std::string;
using DeviceDiagnosisOperatingStateType = std::string;
using PowerSupplyConditionType = std::string;
using DeviceConfigurationKeyIdType = int;
using DeviceConfigurationKeyValueStringType = std::string;
using DeviceConfigurationKeyNameType = std::string;
using MsgCounterType = int;
using FilterIdType = int;
using PurposeIdType = std::string;
using ChannelIdType = int;
/**
* Datatype DirectControlActivityStateEnumType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
enum class DirectControlActivityStateEnumType
{
    running,
    paused,
    inactive,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DirectControlActivityStateEnumType to its String representation
 * @param src The source DirectControlActivityStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a DirectControlActivityStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DirectControlActivityStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlActivityStateEnumType &dst);

/**
* Datatype RecurringIntervalEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class RecurringIntervalEnumType
{
    yearly,
    monthly,
    weekly,
    daily,
    hourly,
    everyMinute,
    everySecond,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum RecurringIntervalEnumType to its String representation
 * @param src The source RecurringIntervalEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurringIntervalEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a RecurringIntervalEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination RecurringIntervalEnumType.
 */
void convertFromJson(const JsonVariantConst &src, RecurringIntervalEnumType &dst);

/**
* Datatype MonthType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class MonthType
{
    january,
    february,
    march,
    april,
    may,
    june,
    july,
    august,
    september,
    october,
    november,
    december,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MonthType to its String representation
 * @param src The source MonthType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MonthType &src, JsonVariant &dst);
/**
 * Convert a string to a MonthType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MonthType.
 */
void convertFromJson(const JsonVariantConst &src, MonthType &dst);

/**
* Datatype DayOfWeekType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class DayOfWeekType
{
    monday,
    tuesday,
    wednesday,
    thursday,
    friday,
    saturday,
    sunday,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DayOfWeekType to its String representation
 * @param src The source DayOfWeekType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DayOfWeekType &src, JsonVariant &dst);
/**
 * Convert a string to a DayOfWeekType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DayOfWeekType.
 */
void convertFromJson(const JsonVariantConst &src, DayOfWeekType &dst);

/**
* Datatype OccurrenceEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class OccurrenceEnumType
{
    first,
    second,
    third,
    fourth,
    last,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum OccurrenceEnumType to its String representation
 * @param src The source OccurrenceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OccurrenceEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a OccurrenceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination OccurrenceEnumType.
 */
void convertFromJson(const JsonVariantConst &src, OccurrenceEnumType &dst);

/**
* Datatype CommodityTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class CommodityTypeEnumType
{
    electricity,
    gas,
    oil,
    water,
    wasteWater,
    domesticHotWater,
    heatingWater,
    steam,
    heat,
    coolingLoad,
    air,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum CommodityTypeEnumType to its String representation
 * @param src The source CommodityTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a CommodityTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CommodityTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, CommodityTypeEnumType &dst);

/**
* Datatype EnergyDirectionEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EnergyDirectionEnumType
{
    consume,
    produce,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum EnergyDirectionEnumType to its String representation
 * @param src The source EnergyDirectionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EnergyDirectionEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a EnergyDirectionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EnergyDirectionEnumType.
 */
void convertFromJson(const JsonVariantConst &src, EnergyDirectionEnumType &dst);

/**
* Datatype EnergyModeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EnergyModeEnumType
{
    consume,
    produce,
    idle,
    var_auto,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum EnergyModeEnumType to its String representation
 * @param src The source EnergyModeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EnergyModeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a EnergyModeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EnergyModeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, EnergyModeEnumType &dst);

/**
* Datatype UnitOfMeasurementEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class UnitOfMeasurementEnumType
{
    unknown,
    var_1,
    m,
    kg,
    s,
    A,
    K,
    mol,
    cd,
    V,
    W,
    Wh,
    VA,
    VAh,
    var,
    varh,
    degC,
    degF,
    Lm,
    lx,
    Ohm,
    Hz,
    dB,
    dBm,
    pct,
    ppm,
    l,
    l_s,
    l_h,
    deg,
    rad,
    rad_s,
    sr,
    Gy,
    Bq,
    Bq_m_3,
    Sv,
    Rd,
    C,
    F,
    H,
    J,
    N,
    N_m,
    N_s,
    Wb,
    T,
    Pa,
    bar,
    atm,
    psi,
    mmHg,
    m_2,
    m_3,
    m_3_h,
    m_s,
    m_s_2,
    m_3_s,
    m_m_3,
    kg_m_3,
    kg_m,
    m_2_s,
    W_m_K,
    J_K,
    var_1_s,
    W_m_2,
    J_m_2,
    S,
    S_m,
    K_s,
    Pa_s,
    J_kg_K,
    Vs,
    V_m,
    V_Hz,
    As,
    A_m,
    Hz_s,
    kg_s,
    kg_m_2,
    J_Wh,
    W_s,
    ft_3,
    ft_3_h,
    ccf,
    ccf_h,
    US_liq_gal,
    US_liq_gal_h,
    Imp_gal,
    Imp_gal_h,
    Btu,
    Btu_h,
    Ah,
    kg_Wh,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum UnitOfMeasurementEnumType to its String representation
 * @param src The source UnitOfMeasurementEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UnitOfMeasurementEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a UnitOfMeasurementEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination UnitOfMeasurementEnumType.
 */
void convertFromJson(const JsonVariantConst &src, UnitOfMeasurementEnumType &dst);

/**
* Datatype CurrencyEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class CurrencyEnumType
{
    AED,
    AFN,
    ALL,
    AMD,
    ANG,
    AOA,
    ARS,
    AUD,
    AWG,
    AZN,
    BAM,
    BBD,
    BDT,
    BGN,
    BHD,
    BIF,
    BMD,
    BND,
    BOB,
    BOV,
    BRL,
    BSD,
    BTN,
    BWP,
    BYR,
    BZD,
    CAD,
    CDF,
    CHE,
    CHF,
    CHW,
    CLF,
    CLP,
    CNY,
    COP,
    COU,
    CRC,
    CUC,
    CUP,
    CVE,
    CZK,
    DJF,
    DKK,
    DOP,
    DZD,
    EGP,
    ERN,
    ETB,
    EUR,
    FJD,
    FKP,
    GBP,
    GEL,
    GHS,
    GIP,
    GMD,
    GNF,
    GTQ,
    GYD,
    HKD,
    HNL,
    HRK,
    HTG,
    HUF,
    IDR,
    ILS,
    INR,
    IQD,
    IRR,
    ISK,
    JMD,
    JOD,
    JPY,
    KES,
    KGS,
    KHR,
    KMF,
    KPW,
    KRW,
    KWD,
    KYD,
    KZT,
    LAK,
    LBP,
    LKR,
    LRD,
    LSL,
    LYD,
    MAD,
    MDL,
    MGA,
    MKD,
    MMK,
    MNT,
    MOP,
    MRO,
    MUR,
    MVR,
    MWK,
    MXN,
    MXV,
    MYR,
    MZN,
    NAD,
    NGN,
    NIO,
    NOK,
    NPR,
    NZD,
    OMR,
    PAB,
    PEN,
    PGK,
    PHP,
    PKR,
    PLN,
    PYG,
    QAR,
    RON,
    RSD,
    RUB,
    RWF,
    var_SAR,
    SBD,
    SCR,
    SDG,
    SEK,
    SGD,
    SHP,
    SLL,
    SOS,
    SRD,
    SSP,
    STD,
    SVC,
    SYP,
    SZL,
    THB,
    TJS,
    TMT,
    TND,
    TOP,
    TRY,
    TTD,
    TWD,
    TZS,
    UAH,
    UGX,
    USD,
    USN,
    UYI,
    UYU,
    UZS,
    VEF,
    VND,
    VUV,
    WST,
    XAF,
    XAG,
    XAU,
    XBA,
    XBB,
    XBC,
    XBD,
    XCD,
    XDR,
    XOF,
    XPD,
    XPF,
    XPT,
    XSU,
    XTS,
    XUA,
    XXX,
    YER,
    ZAR,
    ZMW,
    ZWL,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum CurrencyEnumType to its String representation
 * @param src The source CurrencyEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CurrencyEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a CurrencyEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CurrencyEnumType.
 */
void convertFromJson(const JsonVariantConst &src, CurrencyEnumType &dst);

/**
* Datatype ScopeTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class ScopeTypeEnumType
{
    ac,
    acCosPhiGrid,
    acCurrentA,
    acCurrentB,
    acCurrentC,
    acFrequencyGrid,
    acPowerA,
    acPowerB,
    acPowerC,
    acPowerLimitPct,
    acPowerTotal,
    acVoltageA,
    acVoltageB,
    acVoltageC,
    acYieldDay,
    acYieldTotal,
    dcCurrent,
    dcPower,
    dcString1,
    dcString2,
    dcString3,
    dcString4,
    dcString5,
    dcString6,
    dcTotal,
    dcVoltage,
    dhwTemperature,
    flowTemperature,
    outsideAirTemperature,
    returnTemperature,
    roomAirTemperature,
    charge,
    stateOfCharge,
    discharge,
    gridConsumption,
    gridFeedIn,
    selfConsumption,
    overloadProtection,
    acPower,
    acEnergy,
    acCurrent,
    acVoltage,
    batteryControl,
    simpleIncentiveTable,
    stateOfHealth,
    travelRange,
    nominalEnergyCapacity,
    acPowerReal,
    acPowerApparent,
    acPowerReactive,
    acYieldMonth,
    acYieldYear,
    acFrequency,
    acCosPhi,
    dcEnergy,
    insulationResistance,
    stateOfEnergy,
    useableCapacity,
    dcChargeEnergy,
    dcDischargeEnergy,
    loadCycleCount,
    componentTemperature,
    gridLimit,
    gridLimitFallback,
    acPowerApparentTotal,
    acPowerReactiveTotal,
    acCurrentTotal,
    acEnergyConsumed,
    acEnergyProduced,
    batteryAcPower,
    batteryAcPowerPhaseSpecific,
    batteryDcPower,
    pccPower,
    activePowerLimit,
    activePowerLimitPercentage,
    simpleCommittedIncentiveTable,
    simplePreliminaryIncentiveTable,
    committedPowerPlan,
    preliminaryPowerPlan,
    incentiveTableEnConsWithPoETF,
    incentiveTableEnProdWithPoETF,
    incentiveTableEnConsWithPoE,
    incentiveTableEnProdWithPoE,
    incentiveTableEnConsWithTF,
    incentiveTableEnProdWithTF,
    activePowerForecast,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ScopeTypeEnumType to its String representation
 * @param src The source ScopeTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScopeTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ScopeTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ScopeTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ScopeTypeEnumType &dst);

/**
* Datatype RoleType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class RoleType
{
    client,
    server,
    special,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum RoleType to its String representation
 * @param src The source RoleType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RoleType &src, JsonVariant &dst);
/**
 * Convert a string to a RoleType 
 * @param src The JSON variant containing the string.
 * @param dst The destination RoleType.
 */
void convertFromJson(const JsonVariantConst &src, RoleType &dst);

/**
* Datatype DeviceTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class DeviceTypeEnumType
{
    Dishwasher,
    Dryer,
    EnvironmentSensor,
    Generic,
    HeatGenerationSystem,
    HeatSinkSystem,
    HeatStorageSystem,
    HVACController,
    SubMeter,
    Washer,
    ElectricitySupplySystem,
    EnergyManagementSystem,
    Inverter,
    ChargingStation,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DeviceTypeEnumType to its String representation
 * @param src The source DeviceTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a DeviceTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, DeviceTypeEnumType &dst);

/**
* Datatype EntityTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class EntityTypeEnumType
{
    Battery,
    Compressor,
    DeviceInformation,
    DHWCircuit,
    DHWStorage,
    Dishwasher,
    Dryer,
    ElectricalImmersionHeater,
    Fan,
    GasHeatingAppliance,
    Generic,
    HeatingBufferStorage,
    HeatingCircuit,
    HeatingObject,
    HeatingZone,
    HeatPumpAppliance,
    HeatSinkCircuit,
    HeatSourceCircuit,
    HeatSourceUnit,
    HVACController,
    HVACRoom,
    InstantDHWHeater,
    Inverter,
    OilHeatingAppliance,
    Pump,
    RefrigerantCircuit,
    SmartEnergyAppliance,
    SolarDHWStorage,
    SolarThermalCircuit,
    SubMeterElectricity,
    TemperatureSensor,
    Washer,
    BatterySystem,
    ElectricityGenerationSystem,
    ElectricityStorageSystem,
    GridConnectionPointOfPremises,
    Household,
    PVSystem,
    EV,
    EVSE,
    ChargingOutlet,
    CEM,
    PV,
    PVESHybrid,
    ElectricalStorage,
    PVString,
    GridGuard,
    ControllableSystem,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum EntityTypeEnumType to its String representation
 * @param src The source EntityTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a EntityTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination EntityTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, EntityTypeEnumType &dst);

/**
* Datatype FeatureTypeEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureTypeEnumType
{
    ActuatorLevel,
    ActuatorSwitch,
    Alarm,
    DataTunneling,
    DeviceClassification,
    DeviceDiagnosis,
    DirectControl,
    ElectricalConnection,
    Generic,
    HVAC,
    LoadControl,
    Measurement,
    Messaging,
    NetworkManagement,
    NodeManagement,
    OperatingConstraints,
    PowerSequences,
    Sensing,
    Setpoint,
    SmartEnergyManagementPs,
    TaskManagement,
    Threshold,
    TimeInformation,
    TimeTable,
    DeviceConfiguration,
    SupplyCondition,
    TimeSeries,
    TariffInformation,
    IncentiveTable,
    Bill,
    Identification,
    StateInformation,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureTypeEnumType to its String representation
 * @param src The source FeatureTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureTypeEnumType &dst);

/**
* Datatype FeatureDirectControlSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureDirectControlSpecificUsageEnumType
{
    History,
    RealTime,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureDirectControlSpecificUsageEnumType to its String representation
 * @param src The source FeatureDirectControlSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureDirectControlSpecificUsageEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureDirectControlSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureDirectControlSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureDirectControlSpecificUsageEnumType &dst);

/**
* Datatype FeatureHvacSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureHvacSpecificUsageEnumType
{
    OperationMode,
    Overrun,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureHvacSpecificUsageEnumType to its String representation
 * @param src The source FeatureHvacSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureHvacSpecificUsageEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureHvacSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureHvacSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureHvacSpecificUsageEnumType &dst);

/**
* Datatype FeatureMeasurementSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureMeasurementSpecificUsageEnumType
{
    Contact,
    Electrical,
    Heat,
    Level,
    Pressure,
    Temperature,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureMeasurementSpecificUsageEnumType to its String representation
 * @param src The source FeatureMeasurementSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureMeasurementSpecificUsageEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureMeasurementSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureMeasurementSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureMeasurementSpecificUsageEnumType &dst);

/**
* Datatype FeatureSetpointSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureSetpointSpecificUsageEnumType
{
    Contact,
    Electrical,
    Heat,
    Level,
    Pressure,
    Temperature,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureSetpointSpecificUsageEnumType to its String representation
 * @param src The source FeatureSetpointSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureSetpointSpecificUsageEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureSetpointSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureSetpointSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureSetpointSpecificUsageEnumType &dst);

/**
* Datatype FeatureSmartEnergyManagementPsSpecificUsageEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FeatureSmartEnergyManagementPsSpecificUsageEnumType
{
    FixedForecast,
    FlexibleChosenForecast,
    FlexibleOptionalForecast,
    OptionalSequenceBasedImmediateControl,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FeatureSmartEnergyManagementPsSpecificUsageEnumType to its String representation
 * @param src The source FeatureSmartEnergyManagementPsSpecificUsageEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureSmartEnergyManagementPsSpecificUsageEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FeatureSmartEnergyManagementPsSpecificUsageEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FeatureSmartEnergyManagementPsSpecificUsageEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FeatureSmartEnergyManagementPsSpecificUsageEnumType &dst);

/**
* Datatype FunctionEnumType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
enum class FunctionEnumType
{
    actuatorLevelData,
    actuatorLevelDescriptionData,
    actuatorSwitchData,
    actuatorSwitchDescriptionData,
    alarmListData,
    bindingManagementDeleteCall,
    bindingManagementEntryListData,
    bindingManagementRequestCall,
    dataTunnelingCall,
    deviceClassificationManufacturerData,
    deviceClassificationUserData,
    deviceDiagnosisHeartbeatData,
    deviceDiagnosisServiceData,
    deviceDiagnosisStateData,
    directControlActivityListData,
    directControlDescriptionData,
    electricalConnectionDescriptionListData,
    electricalConnectionParameterDescriptionListData,
    electricalConnectionStateListData,
    hvacOperationModeDescriptionListData,
    hvacOverrunDescriptionListData,
    hvacOverrunListData,
    hvacSystemFunctionDescriptionListData,
    hvacSystemFunctionListData,
    hvacSystemFunctionOperationModeRelationListData,
    hvacSystemFunctionPowerSequenceRelationListData,
    hvacSystemFunctionSetpointRelationListData,
    loadControlEventListData,
    loadControlStateListData,
    measurementConstraintsListData,
    measurementDescriptionListData,
    measurementListData,
    measurementThresholdRelationListData,
    messagingListData,
    networkManagementAbortCall,
    networkManagementAddNodeCall,
    networkManagementDeviceDescriptionListData,
    networkManagementDiscoverCall,
    networkManagementEntityDescriptionListData,
    networkManagementFeatureDescriptionListData,
    networkManagementJoiningModeData,
    networkManagementModifyNodeCall,
    networkManagementProcessStateData,
    networkManagementRemoveNodeCall,
    networkManagementReportCandidateData,
    networkManagementScanNetworkCall,
    nodeManagementBindingData,
    nodeManagementBindingDeleteCall,
    nodeManagementBindingRequestCall,
    nodeManagementDestinationListData,
    nodeManagementDetailedDiscoveryData,
    nodeManagementSubscriptionData,
    nodeManagementSubscriptionDeleteCall,
    nodeManagementSubscriptionRequestCall,
    operatingConstraintsDurationListData,
    operatingConstraintsInterruptListData,
    operatingConstraintsPowerDescriptionListData,
    operatingConstraintsPowerLevelListData,
    operatingConstraintsPowerRangeListData,
    operatingConstraintsResumeImplicationListData,
    powerSequenceAlternativesRelationListData,
    powerSequenceDescriptionListData,
    powerSequenceNodeScheduleInformationData,
    powerSequencePriceCalculationRequestCall,
    powerSequencePriceListData,
    powerSequenceScheduleConfigurationRequestCall,
    powerSequenceScheduleConstraintsListData,
    powerSequenceScheduleListData,
    powerSequenceSchedulePreferenceListData,
    powerSequenceStateListData,
    powerTimeSlotScheduleConstraintsListData,
    powerTimeSlotScheduleListData,
    powerTimeSlotValueListData,
    resultData,
    sensingDescriptionData,
    sensingListData,
    sessionIdentificationListData,
    sessionMeasurementRelationListData,
    setpointConstraintsListData,
    setpointDescriptionListData,
    setpointListData,
    smartEnergyManagementPsConfigurationRequestCall,
    smartEnergyManagementPsData,
    smartEnergyManagementPsPriceCalculationRequestCall,
    smartEnergyManagementPsPriceData,
    specificationVersionListData,
    subscriptionManagementDeleteCall,
    subscriptionManagementEntryListData,
    subscriptionManagementRequestCall,
    supplyConditionDescriptionListData,
    supplyConditionListData,
    supplyConditionThresholdRelationListData,
    taskManagementJobDescriptionListData,
    taskManagementJobListData,
    taskManagementJobRelationListData,
    taskManagementOverviewData,
    thresholdConstraintsListData,
    thresholdDescriptionListData,
    thresholdListData,
    timeDistributorData,
    timeDistributorEnquiryCall,
    timeInformationData,
    timePrecisionData,
    timeTableConstraintsListData,
    timeTableDescriptionListData,
    timeTableListData,
    deviceConfigurationKeyValueConstraintsListData,
    deviceConfigurationKeyValueListData,
    deviceConfigurationKeyValueDescriptionListData,
    loadControlLimitConstraintsListData,
    loadControlLimitDescriptionListData,
    loadControlLimitListData,
    loadControlNodeData,
    timeSeriesConstraintsListData,
    timeSeriesDescriptionListData,
    timeSeriesListData,
    tariffOverallConstraintsData,
    tariffListData,
    tariffBoundaryRelationListData,
    tariffTierRelationListData,
    tariffDescriptionListData,
    tierBoundaryListData,
    tierBoundaryDescriptionListData,
    commodityListData,
    tierListData,
    tierIncentiveRelationListData,
    tierDescriptionListData,
    incentiveListData,
    incentiveDescriptionListData,
    incentiveTableData,
    incentiveTableDescriptionData,
    incentiveTableConstraintsData,
    electricalConnectionPermittedValueSetListData,
    useCaseInformationListData,
    nodeManagementUseCaseData,
    billConstraintsListData,
    billDescriptionListData,
    billListData,
    identificationListData,
    measurementSeriesListData,
    electricalConnectionCharacteristicListData,
    stateInformationListData,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum FunctionEnumType to its String representation
 * @param src The source FunctionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a FunctionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination FunctionEnumType.
 */
void convertFromJson(const JsonVariantConst &src, FunctionEnumType &dst);

/**
* Datatype PowerTimeSlotValueTypeEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerTimeSlotValueTypeEnumType
{
    power,
    powerMin,
    powerMax,
    powerExpectedValue,
    powerStandardDeviation,
    powerSkewness,
    energy,
    energyMin,
    energyMax,
    energyExpectedValue,
    energyStandardDeviation,
    energySkewness,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum PowerTimeSlotValueTypeEnumType to its String representation
 * @param src The source PowerTimeSlotValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a PowerTimeSlotValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerTimeSlotValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueTypeEnumType &dst);

/**
* Datatype PowerSequenceScopeEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerSequenceScopeEnumType
{
    forecast,
    measurement,
    recommendation,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum PowerSequenceScopeEnumType to its String representation
 * @param src The source PowerSequenceScopeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScopeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a PowerSequenceScopeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSequenceScopeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScopeEnumType &dst);

/**
* Datatype PowerSequenceStateEnumType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
enum class PowerSequenceStateEnumType
{
    running,
    paused,
    scheduled,
    scheduledPaused,
    pending,
    inactive,
    completed,
    invalid,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum PowerSequenceStateEnumType to its String representation
 * @param src The source PowerSequenceStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a PowerSequenceStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSequenceStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateEnumType &dst);

/**
* Datatype MeasurementTypeEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementTypeEnumType
{
    acceleration,
    angle,
    angularVelocity,
    area,
    atmosphericPressure,
    capacity,
    concentration,
    count,
    current,
    density,
    distance,
    electricField,
    energy,
    force,
    frequency,
    harmonicDistortion,
    heat,
    heatFlux,
    illuminance,
    impulse,
    level,
    magneticField,
    mass,
    massFlow,
    particles,
    percentage,
    power,
    powerFactor,
    pressure,
    radonActivity,
    relativeHumidity,
    resistance,
    solarRadiation,
    speed,
    temperature,
    time,
    torque,
    unknown,
    velocity,
    voltage,
    volume,
    volumetricFlow,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MeasurementTypeEnumType to its String representation
 * @param src The source MeasurementTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MeasurementTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementTypeEnumType &dst);

/**
* Datatype MeasurementValueTypeEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueTypeEnumType
{
    value,
    averageValue,
    minValue,
    maxValue,
    standardDeviation,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MeasurementValueTypeEnumType to its String representation
 * @param src The source MeasurementValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MeasurementValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementValueTypeEnumType &dst);

/**
* Datatype MeasurementValueSourceEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueSourceEnumType
{
    measuredValue,
    calculatedValue,
    empiricalValue,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MeasurementValueSourceEnumType to its String representation
 * @param src The source MeasurementValueSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueSourceEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MeasurementValueSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueSourceEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementValueSourceEnumType &dst);

/**
* Datatype MeasurementValueTendencyEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueTendencyEnumType
{
    rising,
    stable,
    falling,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MeasurementValueTendencyEnumType to its String representation
 * @param src The source MeasurementValueTendencyEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueTendencyEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MeasurementValueTendencyEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueTendencyEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementValueTendencyEnumType &dst);

/**
* Datatype MeasurementValueStateEnumType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
enum class MeasurementValueStateEnumType
{
    normal,
    outOfRange,
    error,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MeasurementValueStateEnumType to its String representation
 * @param src The source MeasurementValueStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementValueStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MeasurementValueStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MeasurementValueStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementValueStateEnumType &dst);

/**
* Datatype ThresholdTypeEnumType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
enum class ThresholdTypeEnumType
{
    goodAbove,
    badAbove,
    goodBelow,
    badBelow,
    minValueThreshold,
    maxValueThreshold,
    minValueThresholdExtreme,
    maxValueThresholdExtreme,
    sagThreshold,
    swellThreshold,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ThresholdTypeEnumType to its String representation
 * @param src The source ThresholdTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ThresholdTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ThresholdTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdTypeEnumType &dst);

/**
* Datatype BillTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillTypeEnumType
{
    chargingSummary,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum BillTypeEnumType to its String representation
 * @param src The source BillTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a BillTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, BillTypeEnumType &dst);

/**
* Datatype BillPositionTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillPositionTypeEnumType
{
    gridElectricEnergy,
    selfProducedElectricEnergy,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum BillPositionTypeEnumType to its String representation
 * @param src The source BillPositionTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a BillPositionTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillPositionTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, BillPositionTypeEnumType &dst);

/**
* Datatype BillCostTypeEnumType as defined in EEBus_SPINE_TS_Bill.xsd
*/
enum class BillCostTypeEnumType
{
    absolutePrice,
    relativePrice,
    co2Emission,
    renewableEnergy,
    radioactiveWaste,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum BillCostTypeEnumType to its String representation
 * @param src The source BillCostTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a BillCostTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination BillCostTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, BillCostTypeEnumType &dst);

/**
* Datatype IdentificationTypeEnumType as defined in EEBus_SPINE_TS_Identification.xsd
*/
enum class IdentificationTypeEnumType
{
    eui48,
    eui64,
    userRfidTag,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum IdentificationTypeEnumType to its String representation
 * @param src The source IdentificationTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a IdentificationTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IdentificationTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, IdentificationTypeEnumType &dst);

/**
* Datatype SetpointTypeEnumType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
enum class SetpointTypeEnumType
{
    valueAbsolute,
    valueRelative,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum SetpointTypeEnumType to its String representation
 * @param src The source SetpointTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a SetpointTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SetpointTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, SetpointTypeEnumType &dst);

/**
* Datatype TimeSlotTimeModeEnumType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
enum class TimeSlotTimeModeEnumType
{
    absolute,
    recurring,
    both,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum TimeSlotTimeModeEnumType to its String representation
 * @param src The source TimeSlotTimeModeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSlotTimeModeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a TimeSlotTimeModeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TimeSlotTimeModeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, TimeSlotTimeModeEnumType &dst);

/**
* Datatype SensingStateEnumType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
enum class SensingStateEnumType
{
    on,
    off,
    toggle,
    level,
    levelUp,
    levelDown,
    levelStart,
    levelStop,
    levelAbsolute,
    levelRelative,
    levelPercentageAbsolute,
    levelPercentageRelative,
    pressed,
    longPressed,
    released,
    changed,
    started,
    stopped,
    paused,
    middle,
    up,
    down,
    forward,
    backwards,
    open,
    closed,
    opening,
    closing,
    high,
    low,
    day,
    night,
    detected,
    notDetected,
    alarmed,
    notAlarmed,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum SensingStateEnumType to its String representation
 * @param src The source SensingStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a SensingStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SensingStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, SensingStateEnumType &dst);

/**
* Datatype SensingTypeEnumType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
enum class SensingTypeEnumType
{
    var_switch,
    button,
    level,
    levelSwitch,
    windowHandle,
    contactSensor,
    occupancySensor,
    motionDetector,
    fireDetector,
    smokeDetector,
    heatDetector,
    waterDetector,
    gasDetector,
    alarmSensor,
    powerAlarmSensor,
    dayNightIndicator,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum SensingTypeEnumType to its String representation
 * @param src The source SensingTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a SensingTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SensingTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, SensingTypeEnumType &dst);

/**
* Datatype ActuatorSwitchFctEnumType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
enum class ActuatorSwitchFctEnumType
{
    on,
    off,
    toggle,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ActuatorSwitchFctEnumType to its String representation
 * @param src The source ActuatorSwitchFctEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchFctEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ActuatorSwitchFctEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ActuatorSwitchFctEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchFctEnumType &dst);

/**
* Datatype NetworkManagementFeatureSetType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementFeatureSetType
{
    gateway,
    router,
    smart,
    simple,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum NetworkManagementFeatureSetType to its String representation
 * @param src The source NetworkManagementFeatureSetType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureSetType &src, JsonVariant &dst);
/**
 * Convert a string to a NetworkManagementFeatureSetType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementFeatureSetType.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureSetType &dst);

/**
* Datatype NetworkManagementProcessStateStateType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementProcessStateStateType
{
    succeeded,
    failed,
    aborted,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum NetworkManagementProcessStateStateType to its String representation
 * @param src The source NetworkManagementProcessStateStateType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateStateType &src, JsonVariant &dst);
/**
 * Convert a string to a NetworkManagementProcessStateStateType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementProcessStateStateType.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateStateType &dst);

/**
* Datatype NetworkManagementStateChangeType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
enum class NetworkManagementStateChangeType
{
    added,
    removed,
    modified,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum NetworkManagementStateChangeType to its String representation
 * @param src The source NetworkManagementStateChangeType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementStateChangeType &src, JsonVariant &dst);
/**
 * Convert a string to a NetworkManagementStateChangeType 
 * @param src The JSON variant containing the string.
 * @param dst The destination NetworkManagementStateChangeType.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementStateChangeType &dst);

/**
* Datatype SupplyConditionEventTypeEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class SupplyConditionEventTypeEnumType
{
    thesholdExceeded,
    fallenBelowThreshold,
    supplyInterrupt,
    releaseOfLimitations,
    otherProblem,
    gridConditionUpdate,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum SupplyConditionEventTypeEnumType to its String representation
 * @param src The source SupplyConditionEventTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionEventTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a SupplyConditionEventTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SupplyConditionEventTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionEventTypeEnumType &dst);

/**
* Datatype SupplyConditionOriginatorEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class SupplyConditionOriginatorEnumType
{
    externDSO,
    externSupplier,
    internalLimit,
    internalService,
    internalUser,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum SupplyConditionOriginatorEnumType to its String representation
 * @param src The source SupplyConditionOriginatorEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionOriginatorEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a SupplyConditionOriginatorEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination SupplyConditionOriginatorEnumType.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionOriginatorEnumType &dst);

/**
* Datatype GridConditionEnumType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
enum class GridConditionEnumType
{
    consumptionRed,
    consumptionYellow,
    good,
    productionYellow,
    productionRed,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum GridConditionEnumType to its String representation
 * @param src The source GridConditionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const GridConditionEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a GridConditionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination GridConditionEnumType.
 */
void convertFromJson(const JsonVariantConst &src, GridConditionEnumType &dst);

/**
* Datatype AlarmTypeEnumType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
enum class AlarmTypeEnumType
{
    alarmCancelled,
    underThreshold,
    overThreshold,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum AlarmTypeEnumType to its String representation
 * @param src The source AlarmTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a AlarmTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination AlarmTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, AlarmTypeEnumType &dst);

/**
* Datatype HvacOverrunStatusEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOverrunStatusEnumType
{
    active,
    running,
    finished,
    inactive,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum HvacOverrunStatusEnumType to its String representation
 * @param src The source HvacOverrunStatusEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunStatusEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a HvacOverrunStatusEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOverrunStatusEnumType.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunStatusEnumType &dst);

/**
* Datatype LoadControlEventStateEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlEventStateEnumType
{
    eventAccepted,
    eventStarted,
    eventStopped,
    eventRejected,
    eventCancelled,
    eventError,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum LoadControlEventStateEnumType to its String representation
 * @param src The source LoadControlEventStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a LoadControlEventStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlEventStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventStateEnumType &dst);

/**
* Datatype TaskManagementJobSourceEnumType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
enum class TaskManagementJobSourceEnumType
{
    internalMechanism,
    userInteraction,
    externalConfiguration,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum TaskManagementJobSourceEnumType to its String representation
 * @param src The source TaskManagementJobSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobSourceEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a TaskManagementJobSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TaskManagementJobSourceEnumType.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobSourceEnumType &dst);

/**
* Datatype HvacSystemFunctionTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacSystemFunctionTypeEnumType
{
    heating,
    cooling,
    ventilation,
    dhw,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum HvacSystemFunctionTypeEnumType to its String representation
 * @param src The source HvacSystemFunctionTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a HvacSystemFunctionTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacSystemFunctionTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionTypeEnumType &dst);

/**
* Datatype HvacOperationModeTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOperationModeTypeEnumType
{
    var_auto,
    on,
    off,
    eco,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum HvacOperationModeTypeEnumType to its String representation
 * @param src The source HvacOperationModeTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a HvacOperationModeTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOperationModeTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, HvacOperationModeTypeEnumType &dst);

/**
* Datatype HvacOverrunTypeEnumType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
enum class HvacOverrunTypeEnumType
{
    oneTimeDhw,
    party,
    sgReadyCondition1,
    sgReadyCondition3,
    sgReadyCondition4,
    oneDayAway,
    oneDayAtHome,
    oneTimeVentilation,
    hvacSystemOff,
    valveKick,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum HvacOverrunTypeEnumType to its String representation
 * @param src The source HvacOverrunTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a HvacOverrunTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination HvacOverrunTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunTypeEnumType &dst);

/**
* Datatype LoadControlEventActionEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlEventActionEnumType
{
    pause,
    resume,
    reduce,
    increase,
    emergency,
    normal,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum LoadControlEventActionEnumType to its String representation
 * @param src The source LoadControlEventActionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventActionEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a LoadControlEventActionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlEventActionEnumType.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventActionEnumType &dst);

/**
* Datatype LoadControlLimitTypeEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlLimitTypeEnumType
{
    minValueLimit,
    maxValueLimit,
    signDependentAbsValueLimit,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum LoadControlLimitTypeEnumType to its String representation
 * @param src The source LoadControlLimitTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a LoadControlLimitTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlLimitTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitTypeEnumType &dst);

/**
* Datatype LoadControlCategoryEnumType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
enum class LoadControlCategoryEnumType
{
    obligation,
    recommendation,
    optimization,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum LoadControlCategoryEnumType to its String representation
 * @param src The source LoadControlCategoryEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlCategoryEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a LoadControlCategoryEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination LoadControlCategoryEnumType.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlCategoryEnumType &dst);

/**
* Datatype PowerSourceEnumType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
enum class PowerSourceEnumType
{
    unknown,
    mainsSinglePhase,
    mains3Phase,
    battery,
    dc,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum PowerSourceEnumType to its String representation
 * @param src The source PowerSourceEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSourceEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a PowerSourceEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSourceEnumType.
 */
void convertFromJson(const JsonVariantConst &src, PowerSourceEnumType &dst);

/**
* Datatype ActuatorLevelFctEnumType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
enum class ActuatorLevelFctEnumType
{
    start,
    up,
    down,
    stop,
    percentageAbsolute,
    percentageRelative,
    absolute,
    relative,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ActuatorLevelFctEnumType to its String representation
 * @param src The source ActuatorLevelFctEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelFctEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ActuatorLevelFctEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ActuatorLevelFctEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorLevelFctEnumType &dst);

/**
* Datatype TimeSeriesTypeEnumType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
enum class TimeSeriesTypeEnumType
{
    plan,
    singleDemand,
    constraints,
    energyRequest,
    dischargingEnergyRequest,
    consumptionLimitCurve,
    productionLimitCurve,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum TimeSeriesTypeEnumType to its String representation
 * @param src The source TimeSeriesTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a TimeSeriesTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TimeSeriesTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesTypeEnumType &dst);

/**
* Datatype MessagingTypeEnumType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
enum class MessagingTypeEnumType
{
    logging,
    information,
    warning,
    alarm,
    emergency,
    obsolete,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum MessagingTypeEnumType to its String representation
 * @param src The source MessagingTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a MessagingTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination MessagingTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, MessagingTypeEnumType &dst);

/**
* Datatype TierBoundaryTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class TierBoundaryTypeEnumType
{
    powerBoundary,
    energyBoundary,
    countBoundary,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum TierBoundaryTypeEnumType to its String representation
 * @param src The source TierBoundaryTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a TierBoundaryTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TierBoundaryTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryTypeEnumType &dst);

/**
* Datatype TierTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class TierTypeEnumType
{
    fixedCost,
    dynamicCost,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum TierTypeEnumType to its String representation
 * @param src The source TierTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a TierTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination TierTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, TierTypeEnumType &dst);

/**
* Datatype IncentiveTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class IncentiveTypeEnumType
{
    absoluteCost,
    relativeCost,
    renewableEnergyPercentage,
    co2Emission,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum IncentiveTypeEnumType to its String representation
 * @param src The source IncentiveTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a IncentiveTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IncentiveTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTypeEnumType &dst);

/**
* Datatype IncentiveValueTypeEnumType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
enum class IncentiveValueTypeEnumType
{
    value,
    averageValue,
    minValue,
    maxValue,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum IncentiveValueTypeEnumType to its String representation
 * @param src The source IncentiveValueTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveValueTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a IncentiveValueTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination IncentiveValueTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveValueTypeEnumType &dst);

/**
* Datatype StateInformationFunctionalityEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationFunctionalityEnumType
{
    externalOverrideFromGrid,
    autonomousGridSupport,
    islandingMode,
    balancing,
    trickleCharging,
    calibration,
    commissioningMissing,
    sleeping,
    starting,
    mppt,
    throttled,
    shuttingDown,
    manualShutdown,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum StateInformationFunctionalityEnumType to its String representation
 * @param src The source StateInformationFunctionalityEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationFunctionalityEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a StateInformationFunctionalityEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationFunctionalityEnumType.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationFunctionalityEnumType &dst);

/**
* Datatype StateInformationFailureEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationFailureEnumType
{
    inverterDefective,
    batteryOvercurrentProtection,
    pvStringOvercurrentProtection,
    gridFault,
    groundFault,
    acDisconnected,
    dcDisconnected,
    cabinetOpen,
    overTemperature,
    underTemperature,
    frequencyAboveLimit,
    frequencyBelowLimit,
    acVoltageAboveLimit,
    acVoltageBelowLimit,
    dcVoltageAboveLimit,
    dcVoltageBelowLimit,
    hardwareTestFailure,
    genericInternalError,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum StateInformationFailureEnumType to its String representation
 * @param src The source StateInformationFailureEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationFailureEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a StateInformationFailureEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationFailureEnumType.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationFailureEnumType &dst);

/**
* Datatype StateInformationCategoryEnumType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
enum class StateInformationCategoryEnumType
{
    functionality,
    failure,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum StateInformationCategoryEnumType to its String representation
 * @param src The source StateInformationCategoryEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationCategoryEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a StateInformationCategoryEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination StateInformationCategoryEnumType.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationCategoryEnumType &dst);

/**
* Datatype ElectricalConnectionMeasurandVariantEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionMeasurandVariantEnumType
{
    amplitude,
    rms,
    instantaneous,
    angle,
    cosPhi,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionMeasurandVariantEnumType to its String representation
 * @param src The source ElectricalConnectionMeasurandVariantEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionMeasurandVariantEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionMeasurandVariantEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionMeasurandVariantEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionMeasurandVariantEnumType &dst);

/**
* Datatype ElectricalConnectionVoltageTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionVoltageTypeEnumType
{
    ac,
    dc,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionVoltageTypeEnumType to its String representation
 * @param src The source ElectricalConnectionVoltageTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionVoltageTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionVoltageTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionVoltageTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionVoltageTypeEnumType &dst);

/**
* Datatype ElectricalConnectionAcMeasurementTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionAcMeasurementTypeEnumType
{
    real,
    reactive,
    apparent,
    phase,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionAcMeasurementTypeEnumType to its String representation
 * @param src The source ElectricalConnectionAcMeasurementTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionAcMeasurementTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionAcMeasurementTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionAcMeasurementTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionAcMeasurementTypeEnumType &dst);

/**
* Datatype ElectricalConnectionPhaseNameEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionPhaseNameEnumType
{
    a,
    b,
    c,
    ab,
    bc,
    ac,
    abc,
    neutral,
    ground,
    none,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionPhaseNameEnumType to its String representation
 * @param src The source ElectricalConnectionPhaseNameEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPhaseNameEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionPhaseNameEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionPhaseNameEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPhaseNameEnumType &dst);

/**
* Datatype ElectricalConnectionConnectionPointType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionConnectionPointType
{
    grid,
    home,
    pv,
    sd,
    other,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionConnectionPointType to its String representation
 * @param src The source ElectricalConnectionConnectionPointType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionConnectionPointType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionConnectionPointType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionConnectionPointType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionConnectionPointType &dst);

/**
* Datatype ElectricalConnectionCharacteristicContextEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionCharacteristicContextEnumType
{
    device,
    entity,
    inverter,
    pvString,
    battery,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionCharacteristicContextEnumType to its String representation
 * @param src The source ElectricalConnectionCharacteristicContextEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicContextEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionCharacteristicContextEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionCharacteristicContextEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicContextEnumType &dst);

/**
* Datatype ElectricalConnectionCharacteristicTypeEnumType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
enum class ElectricalConnectionCharacteristicTypeEnumType
{
    powerConsumptionMin,
    powerConsumptionMax,
    powerConsumptionNominalMin,
    powerConsumptionNominalMax,
    powerProductionMin,
    powerProductionMax,
    powerProductionNominalMin,
    powerProductionNominalMax,
    energyCapacityNominalMax,
    contractualConsumptionNominalMax,
    contractualProductionNominalMax,
    apparentPowerProductionNominalMax,
    apparentPowerConsumptionNominalMax,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum ElectricalConnectionCharacteristicTypeEnumType to its String representation
 * @param src The source ElectricalConnectionCharacteristicTypeEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicTypeEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a ElectricalConnectionCharacteristicTypeEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination ElectricalConnectionCharacteristicTypeEnumType.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicTypeEnumType &dst);

/**
* Datatype DeviceDiagnosisOperatingStateEnumType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
enum class DeviceDiagnosisOperatingStateEnumType
{
    normalOperation,
    standby,
    failure,
    serviceNeeded,
    overrideDetected,
    inAlarm,
    notReachable,
    finished,
    temporarilyNotReady,
    off,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DeviceDiagnosisOperatingStateEnumType to its String representation
 * @param src The source DeviceDiagnosisOperatingStateEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisOperatingStateEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a DeviceDiagnosisOperatingStateEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceDiagnosisOperatingStateEnumType.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisOperatingStateEnumType &dst);

/**
* Datatype PowerSupplyConditionEnumType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
enum class PowerSupplyConditionEnumType
{
    good,
    low,
    critical,
    unknown,
    error,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum PowerSupplyConditionEnumType to its String representation
 * @param src The source PowerSupplyConditionEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSupplyConditionEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a PowerSupplyConditionEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination PowerSupplyConditionEnumType.
 */
void convertFromJson(const JsonVariantConst &src, PowerSupplyConditionEnumType &dst);

/**
* Datatype DeviceConfigurationKeyNameEnumType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
enum class DeviceConfigurationKeyNameEnumType
{
    peakPowerOfPvSystem,
    pvCurtailmentLimitFactor,
    asymmetricChargingSupported,
    communicationsStandard,
    inverterGridCode,
    pvStringAvailabilityStatus,
    batteryAvailabilityStatus,
    gridConnectionStatus,
    timeToAcChargePowerMax,
    timeToAcDischargePowerMax,
    tilt,
    azimuth,
    batteryType,
    maxCycleCountPerDay,
    failsafeConsumptionActivePowerLimit,
    failsafeProductionActivePowerLimit,
    failsafePositiveReactivePowerLimit,
    failsafeNegativeReactivePowerLimit,
    failsafePositiveCosPhiLimit,
    failsafeNegativeCosPhiLimit,
    maxAcChargePower,
    maxAcDischargePower,
    maxDcChargePower,
    maxDcDischargePower,
    batteryActiveControlMode,
    defaultAcPower,
    defaultDcPower,
    defaultPccPower,
    failsafeAcPowerSetpoint,
    failsafeDcPowerSetpoint,
    failsafePccPowerSetpoint,
    failsafeDurationMinimum,
    dischargingBelowTargetEnergyRequestPermitted,
    incentivesSimulationCyclesMax,
    incentivesSimulationConcurrent,
    incentivesTimeoutIncentiveRequest,
    incentivesWaitIncentiveWriteable,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DeviceConfigurationKeyNameEnumType to its String representation
 * @param src The source DeviceConfigurationKeyNameEnumType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyNameEnumType &src, JsonVariant &dst);
/**
 * Convert a string to a DeviceConfigurationKeyNameEnumType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceConfigurationKeyNameEnumType.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyNameEnumType &dst);

/**
* Datatype DeviceConfigurationKeyValueTypeType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
enum class DeviceConfigurationKeyValueTypeType
{
    boolean,
    date,
    dateTime,
    duration,
    string,
    time,
    scaledNumber,
    integer,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum DeviceConfigurationKeyValueTypeType to its String representation
 * @param src The source DeviceConfigurationKeyValueTypeType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueTypeType &src, JsonVariant &dst);
/**
 * Convert a string to a DeviceConfigurationKeyValueTypeType 
 * @param src The JSON variant containing the string.
 * @param dst The destination DeviceConfigurationKeyValueTypeType.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueTypeType &dst);

/**
* Datatype CmdClassifierType as defined in EEBus_SPINE_TS_CommandFrame.xsd
*/
enum class CmdClassifierType
{
    read,
    reply,
    notify,
    write,
    call,
    result,
    EnumUndefined, // This is not part of the spec but its needed for error handling
};

/**
 * Convert the enum CmdClassifierType to its String representation
 * @param src The source CmdClassifierType value to convert.
 * @param dst The destination JsonVariant where the string will be stored.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CmdClassifierType &src, JsonVariant &dst);
/**
 * Convert a string to a CmdClassifierType 
 * @param src The JSON variant containing the string.
 * @param dst The destination CmdClassifierType.
 */
void convertFromJson(const JsonVariantConst &src, CmdClassifierType &dst);

/**
 * Datatype ScaledNumberType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberType
{
    SpineOptional<NumberType> number;
    SpineOptional<ScaleType> scale;

    ScaledNumberType() = default;
};

/**
 * Convert a ScaledNumberType to its JSON representation
 * @param src The ScaledNumberType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberType &dst);

/**
 * Datatype DirectControlActivityDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<DirectControlActivityStateEnumType> activityState;
    SpineOptional<bool> isActivityStateChangeable;
    SpineOptional<EnergyModeEnumType> energyMode;
    SpineOptional<bool> isEnergyModeChangeable;
    SpineOptional<ScaledNumberType> power;
    SpineOptional<bool> isPowerChangeable;
    SpineOptional<ScaledNumberType> energy;
    SpineOptional<bool> isEnergyChangeable;
    SpineOptional<PowerSequenceIdType> sequenceId;

    DirectControlActivityDataType() = default;
};

/**
 * Convert a DirectControlActivityDataType to its JSON representation
 * @param src The DirectControlActivityDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlActivityDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlActivityDataType &dst);

/**
 * Datatype ElementTagType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ElementTagType
{

    ElementTagType() = default;
};

/**
 * Convert a ElementTagType to its JSON representation
 * @param src The ElementTagType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElementTagType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElementTagType
 * @param src The JSON variant to convert
 * @param dst The ElementTagType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElementTagType &dst);

/**
 * Datatype ScaledNumberElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberElementsType
{
    SpineOptional<ElementTagType> number;
    SpineOptional<ElementTagType> scale;

    ScaledNumberElementsType() = default;
};

/**
 * Convert a ScaledNumberElementsType to its JSON representation
 * @param src The ScaledNumberElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberElementsType &dst);

/**
 * Datatype DirectControlActivityDataElementsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> activityState;
    SpineOptional<ElementTagType> isActivityStateChangeable;
    SpineOptional<ElementTagType> energyMode;
    SpineOptional<ElementTagType> isEnergyModeChangeable;
    SpineOptional<ScaledNumberElementsType> power;
    SpineOptional<ElementTagType> isPowerChangeable;
    SpineOptional<ScaledNumberElementsType> energy;
    SpineOptional<ElementTagType> isEnergyChangeable;
    SpineOptional<ElementTagType> sequenceId;

    DirectControlActivityDataElementsType() = default;
};

/**
 * Convert a DirectControlActivityDataElementsType to its JSON representation
 * @param src The DirectControlActivityDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlActivityDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlActivityDataElementsType &dst);

/**
 * Datatype DirectControlActivityListDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityListDataType
{
    SpineOptional<std::vector<DirectControlActivityDataType>> directControlActivityData;

    DirectControlActivityListDataType() = default;
};

/**
 * Convert a DirectControlActivityListDataType to its JSON representation
 * @param src The DirectControlActivityListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlActivityListDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlActivityListDataType &dst);

/**
 * Datatype TimestampIntervalType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimestampIntervalType
{
    SpineOptional<AbsoluteOrRelativeTimeType> startTime;
    SpineOptional<AbsoluteOrRelativeTimeType> endTime;

    TimestampIntervalType() = default;
};

/**
 * Convert a TimestampIntervalType to its JSON representation
 * @param src The TimestampIntervalType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimestampIntervalType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimestampIntervalType
 * @param src The JSON variant to convert
 * @param dst The TimestampIntervalType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimestampIntervalType &dst);

/**
 * Datatype DirectControlActivityListDataSelectorsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlActivityListDataSelectorsType
{
    SpineOptional<TimestampIntervalType> timestampInterval;

    DirectControlActivityListDataSelectorsType() = default;
};

/**
 * Convert a DirectControlActivityListDataSelectorsType to its JSON representation
 * @param src The DirectControlActivityListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlActivityListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlActivityListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlActivityListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlActivityListDataSelectorsType &dst);

/**
 * Datatype DirectControlDescriptionDataType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlDescriptionDataType
{
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<UnitOfMeasurementEnumType> powerUnit;
    SpineOptional<UnitOfMeasurementEnumType> energyUnit;

    DirectControlDescriptionDataType() = default;
};

/**
 * Convert a DirectControlDescriptionDataType to its JSON representation
 * @param src The DirectControlDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The DirectControlDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlDescriptionDataType &dst);

/**
 * Datatype DirectControlDescriptionDataElementsType as defined in EEBus_SPINE_TS_DirectControl.xsd
*/
struct DirectControlDescriptionDataElementsType
{
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> powerUnit;
    SpineOptional<ElementTagType> energyUnit;

    DirectControlDescriptionDataElementsType() = default;
};

/**
 * Convert a DirectControlDescriptionDataElementsType to its JSON representation
 * @param src The DirectControlDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DirectControlDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DirectControlDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DirectControlDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DirectControlDescriptionDataElementsType &dst);

/**
 * Datatype TimePeriodType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimePeriodType
{
    SpineOptional<AbsoluteOrRelativeTimeType> startTime;
    SpineOptional<AbsoluteOrRelativeTimeType> endTime;

    TimePeriodType() = default;
};

/**
 * Convert a TimePeriodType to its JSON representation
 * @param src The TimePeriodType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePeriodType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimePeriodType
 * @param src The JSON variant to convert
 * @param dst The TimePeriodType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimePeriodType &dst);

/**
 * Datatype TimePeriodElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct TimePeriodElementsType
{
    SpineOptional<ElementTagType> startTime;
    SpineOptional<ElementTagType> endTime;

    TimePeriodElementsType() = default;
};

/**
 * Convert a TimePeriodElementsType to its JSON representation
 * @param src The TimePeriodElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePeriodElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimePeriodElementsType
 * @param src The JSON variant to convert
 * @param dst The TimePeriodElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimePeriodElementsType &dst);

/**
 * Datatype DaysOfWeekType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DaysOfWeekType
{
    SpineOptional<ElementTagType> monday;
    SpineOptional<ElementTagType> tuesday;
    SpineOptional<ElementTagType> wednesday;
    SpineOptional<ElementTagType> thursday;
    SpineOptional<ElementTagType> friday;
    SpineOptional<ElementTagType> saturday;
    SpineOptional<ElementTagType> sunday;

    DaysOfWeekType() = default;
};

/**
 * Convert a DaysOfWeekType to its JSON representation
 * @param src The DaysOfWeekType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DaysOfWeekType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DaysOfWeekType
 * @param src The JSON variant to convert
 * @param dst The DaysOfWeekType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DaysOfWeekType &dst);

/**
 * Datatype AbsoluteOrRecurringTimeType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct AbsoluteOrRecurringTimeType
{
    SpineOptional<std::string> dateTime;
    SpineOptional<MonthType> month;
    SpineOptional<DayOfMonthType> dayOfMonth;
    SpineOptional<CalendarWeekType> calendarWeek;
    SpineOptional<OccurrenceEnumType> dayOfWeekOccurrence;
    SpineOptional<DaysOfWeekType> daysOfWeek;
    SpineOptional<std::string> time;
    SpineOptional<std::string> relative;

    AbsoluteOrRecurringTimeType() = default;
};

/**
 * Convert a AbsoluteOrRecurringTimeType to its JSON representation
 * @param src The AbsoluteOrRecurringTimeType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AbsoluteOrRecurringTimeType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AbsoluteOrRecurringTimeType
 * @param src The JSON variant to convert
 * @param dst The AbsoluteOrRecurringTimeType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AbsoluteOrRecurringTimeType &dst);

/**
 * Datatype AbsoluteOrRecurringTimeElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct AbsoluteOrRecurringTimeElementsType
{
    SpineOptional<ElementTagType> dateTime;
    SpineOptional<ElementTagType> month;
    SpineOptional<ElementTagType> dayOfMonth;
    SpineOptional<ElementTagType> calendarWeek;
    SpineOptional<ElementTagType> dayOfWeekOccurrence;
    SpineOptional<ElementTagType> daysOfWeek;
    SpineOptional<ElementTagType> time;
    SpineOptional<ElementTagType> relative;

    AbsoluteOrRecurringTimeElementsType() = default;
};

/**
 * Convert a AbsoluteOrRecurringTimeElementsType to its JSON representation
 * @param src The AbsoluteOrRecurringTimeElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AbsoluteOrRecurringTimeElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AbsoluteOrRecurringTimeElementsType
 * @param src The JSON variant to convert
 * @param dst The AbsoluteOrRecurringTimeElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AbsoluteOrRecurringTimeElementsType &dst);

/**
 * Datatype RecurrenceInformationType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct RecurrenceInformationType
{
    SpineOptional<RecurringIntervalEnumType> recurringInterval;
    SpineOptional<uint32_t> recurringIntervalStep;
    SpineOptional<std::string> firstExecution;
    SpineOptional<uint32_t> executionCount;
    SpineOptional<std::string> lastExecution;

    RecurrenceInformationType() = default;
};

/**
 * Convert a RecurrenceInformationType to its JSON representation
 * @param src The RecurrenceInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurrenceInformationType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a RecurrenceInformationType
 * @param src The JSON variant to convert
 * @param dst The RecurrenceInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, RecurrenceInformationType &dst);

/**
 * Datatype RecurrenceInformationElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct RecurrenceInformationElementsType
{
    SpineOptional<ElementTagType> recurringInterval;
    SpineOptional<ElementTagType> recurringIntervalStep;
    SpineOptional<ElementTagType> firstExecution;
    SpineOptional<ElementTagType> executionCount;
    SpineOptional<ElementTagType> lastExecution;

    RecurrenceInformationElementsType() = default;
};

/**
 * Convert a RecurrenceInformationElementsType to its JSON representation
 * @param src The RecurrenceInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const RecurrenceInformationElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a RecurrenceInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The RecurrenceInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, RecurrenceInformationElementsType &dst);

/**
 * Datatype ScaledNumberRangeType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberRangeType
{
    SpineOptional<ScaledNumberType> min;
    SpineOptional<ScaledNumberType> max;

    ScaledNumberRangeType() = default;
};

/**
 * Convert a ScaledNumberRangeType to its JSON representation
 * @param src The ScaledNumberRangeType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberRangeType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberRangeType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberRangeType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberRangeType &dst);

/**
 * Datatype ScaledNumberRangeElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberRangeElementsType
{
    SpineOptional<ScaledNumberElementsType> min;
    SpineOptional<ScaledNumberElementsType> max;

    ScaledNumberRangeElementsType() = default;
};

/**
 * Convert a ScaledNumberRangeElementsType to its JSON representation
 * @param src The ScaledNumberRangeElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberRangeElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberRangeElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberRangeElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberRangeElementsType &dst);

/**
 * Datatype ScaledNumberSetType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberSetType
{
    SpineOptional<std::vector<ScaledNumberType>> value;
    SpineOptional<std::vector<ScaledNumberRangeType>> range;

    ScaledNumberSetType() = default;
};

/**
 * Convert a ScaledNumberSetType to its JSON representation
 * @param src The ScaledNumberSetType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberSetType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberSetType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberSetType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberSetType &dst);

/**
 * Datatype ScaledNumberSetElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct ScaledNumberSetElementsType
{
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<ScaledNumberRangeElementsType> range;

    ScaledNumberSetElementsType() = default;
};

/**
 * Convert a ScaledNumberSetElementsType to its JSON representation
 * @param src The ScaledNumberSetElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ScaledNumberSetElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ScaledNumberSetElementsType
 * @param src The JSON variant to convert
 * @param dst The ScaledNumberSetElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ScaledNumberSetElementsType &dst);

/**
 * Datatype DeviceAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DeviceAddressType
{
    SpineOptional<AddressDeviceType> device;

    DeviceAddressType() = default;
};

/**
 * Convert a DeviceAddressType to its JSON representation
 * @param src The DeviceAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceAddressType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceAddressType
 * @param src The JSON variant to convert
 * @param dst The DeviceAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceAddressType &dst);

/**
 * Datatype DeviceAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct DeviceAddressElementsType
{
    SpineOptional<ElementTagType> device;

    DeviceAddressElementsType() = default;
};

/**
 * Convert a DeviceAddressElementsType to its JSON representation
 * @param src The DeviceAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceAddressElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceAddressElementsType &dst);

/**
 * Datatype EntityAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct EntityAddressType
{
    SpineOptional<AddressDeviceType> device;
    SpineOptional<std::vector<AddressEntityType>> entity;

    EntityAddressType() = default;
};

/**
 * Convert a EntityAddressType to its JSON representation
 * @param src The EntityAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityAddressType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a EntityAddressType
 * @param src The JSON variant to convert
 * @param dst The EntityAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, EntityAddressType &dst);

/**
 * Datatype EntityAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct EntityAddressElementsType
{
    SpineOptional<ElementTagType> device;
    SpineOptional<ElementTagType> entity;

    EntityAddressElementsType() = default;
};

/**
 * Convert a EntityAddressElementsType to its JSON representation
 * @param src The EntityAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const EntityAddressElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a EntityAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The EntityAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, EntityAddressElementsType &dst);

/**
 * Datatype FeatureAddressType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FeatureAddressType
{
    SpineOptional<AddressDeviceType> device;
    SpineOptional<std::vector<AddressEntityType>> entity;
    SpineOptional<AddressFeatureType> feature;

    FeatureAddressType() = default;
};

/**
 * Convert a FeatureAddressType to its JSON representation
 * @param src The FeatureAddressType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureAddressType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a FeatureAddressType
 * @param src The JSON variant to convert
 * @param dst The FeatureAddressType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, FeatureAddressType &dst);

/**
 * Datatype FeatureAddressElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FeatureAddressElementsType
{
    SpineOptional<ElementTagType> device;
    SpineOptional<ElementTagType> entity;
    SpineOptional<ElementTagType> feature;

    FeatureAddressElementsType() = default;
};

/**
 * Convert a FeatureAddressElementsType to its JSON representation
 * @param src The FeatureAddressElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FeatureAddressElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a FeatureAddressElementsType
 * @param src The JSON variant to convert
 * @param dst The FeatureAddressElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, FeatureAddressElementsType &dst);

/**
 * Datatype PossibleOperationsClassifierType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsClassifierType
{
    SpineOptional<ElementTagType> partial;

    PossibleOperationsClassifierType() = default;
};

/**
 * Convert a PossibleOperationsClassifierType to its JSON representation
 * @param src The PossibleOperationsClassifierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsClassifierType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PossibleOperationsClassifierType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsClassifierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PossibleOperationsClassifierType &dst);

/**
 * Datatype PossibleOperationsReadType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsReadType
{
    SpineOptional<ElementTagType> partial;

    PossibleOperationsReadType() = default;
};

/**
 * Convert a PossibleOperationsReadType to its JSON representation
 * @param src The PossibleOperationsReadType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsReadType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PossibleOperationsReadType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsReadType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PossibleOperationsReadType &dst);

/**
 * Datatype PossibleOperationsWriteType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsWriteType
{
    SpineOptional<ElementTagType> partial;

    PossibleOperationsWriteType() = default;
};

/**
 * Convert a PossibleOperationsWriteType to its JSON representation
 * @param src The PossibleOperationsWriteType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsWriteType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PossibleOperationsWriteType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsWriteType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PossibleOperationsWriteType &dst);

/**
 * Datatype PossibleOperationsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsType
{
    SpineOptional<PossibleOperationsReadType> read;
    SpineOptional<PossibleOperationsWriteType> write;

    PossibleOperationsType() = default;
};

/**
 * Convert a PossibleOperationsType to its JSON representation
 * @param src The PossibleOperationsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PossibleOperationsType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PossibleOperationsType &dst);

/**
 * Datatype PossibleOperationsElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct PossibleOperationsElementsType
{
    SpineOptional<ElementTagType> read;
    SpineOptional<ElementTagType> write;

    PossibleOperationsElementsType() = default;
};

/**
 * Convert a PossibleOperationsElementsType to its JSON representation
 * @param src The PossibleOperationsElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PossibleOperationsElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PossibleOperationsElementsType
 * @param src The JSON variant to convert
 * @param dst The PossibleOperationsElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PossibleOperationsElementsType &dst);

/**
 * Datatype FunctionPropertyType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FunctionPropertyType
{
    SpineOptional<FunctionEnumType> function;
    SpineOptional<PossibleOperationsType> possibleOperations;

    FunctionPropertyType() = default;
};

/**
 * Convert a FunctionPropertyType to its JSON representation
 * @param src The FunctionPropertyType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionPropertyType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a FunctionPropertyType
 * @param src The JSON variant to convert
 * @param dst The FunctionPropertyType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, FunctionPropertyType &dst);

/**
 * Datatype FunctionPropertyElementsType as defined in EEBus_SPINE_TS_CommonDataTypes.xsd
*/
struct FunctionPropertyElementsType
{
    SpineOptional<ElementTagType> function;
    SpineOptional<PossibleOperationsElementsType> possibleOperations;

    FunctionPropertyElementsType() = default;
};

/**
 * Convert a FunctionPropertyElementsType to its JSON representation
 * @param src The FunctionPropertyElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const FunctionPropertyElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a FunctionPropertyElementsType
 * @param src The JSON variant to convert
 * @param dst The FunctionPropertyElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, FunctionPropertyElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<std::string> defaultDuration;
    SpineOptional<std::string> durationUncertainty;
    SpineOptional<bool> slotActivated;
    SpineOptional<DescriptionType> description;

    PowerTimeSlotScheduleDataType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> slotNumber;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ElementTagType> defaultDuration;
    SpineOptional<ElementTagType> durationUncertainty;
    SpineOptional<ElementTagType> slotActivated;
    SpineOptional<ElementTagType> description;

    PowerTimeSlotScheduleDataElementsType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleDataElementsType to its JSON representation
 * @param src The PowerTimeSlotScheduleDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleDataElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleListDataType
{
    SpineOptional<std::vector<PowerTimeSlotScheduleDataType>> powerTimeSlotScheduleData;

    PowerTimeSlotScheduleListDataType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleListDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleListDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;

    PowerTimeSlotScheduleListDataSelectorsType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotScheduleListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleListDataSelectorsType &dst);

/**
 * Datatype PowerTimeSlotValueDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;
    SpineOptional<PowerTimeSlotValueTypeEnumType> valueType;
    SpineOptional<ScaledNumberType> value;

    PowerTimeSlotValueDataType() = default;
};

/**
 * Convert a PowerTimeSlotValueDataType to its JSON representation
 * @param src The PowerTimeSlotValueDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueDataType &dst);

/**
 * Datatype PowerTimeSlotValueDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> slotNumber;
    SpineOptional<ElementTagType> valueType;
    SpineOptional<ScaledNumberElementsType> value;

    PowerTimeSlotValueDataElementsType() = default;
};

/**
 * Convert a PowerTimeSlotValueDataElementsType to its JSON representation
 * @param src The PowerTimeSlotValueDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueDataElementsType &dst);

/**
 * Datatype PowerTimeSlotValueListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueListDataType
{
    SpineOptional<std::vector<PowerTimeSlotValueDataType>> powerTimeSlotValueData;

    PowerTimeSlotValueListDataType() = default;
};

/**
 * Convert a PowerTimeSlotValueListDataType to its JSON representation
 * @param src The PowerTimeSlotValueListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueListDataType &dst);

/**
 * Datatype PowerTimeSlotValueListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotValueListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;
    SpineOptional<PowerTimeSlotValueTypeEnumType> valueType;

    PowerTimeSlotValueListDataSelectorsType() = default;
};

/**
 * Convert a PowerTimeSlotValueListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotValueListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotValueListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotValueListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotValueListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueListDataSelectorsType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;
    SpineOptional<AbsoluteOrRelativeTimeType> earliestStartTime;
    SpineOptional<AbsoluteOrRelativeTimeType> latestEndTime;
    SpineOptional<std::string> minDuration;
    SpineOptional<std::string> maxDuration;
    SpineOptional<bool> optionalSlot;

    PowerTimeSlotScheduleConstraintsDataType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleConstraintsDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> slotNumber;
    SpineOptional<ElementTagType> earliestStartTime;
    SpineOptional<ElementTagType> latestEndTime;
    SpineOptional<ElementTagType> minDuration;
    SpineOptional<ElementTagType> maxDuration;
    SpineOptional<ElementTagType> optionalSlot;

    PowerTimeSlotScheduleConstraintsDataElementsType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleConstraintsDataElementsType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsDataElementsType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsListDataType
{
    SpineOptional<std::vector<PowerTimeSlotScheduleConstraintsDataType>> powerTimeSlotScheduleConstraintsData;

    PowerTimeSlotScheduleConstraintsListDataType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleConstraintsListDataType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsListDataType &dst);

/**
 * Datatype PowerTimeSlotScheduleConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerTimeSlotScheduleConstraintsListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerTimeSlotNumberType> slotNumber;

    PowerTimeSlotScheduleConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a PowerTimeSlotScheduleConstraintsListDataSelectorsType to its JSON representation
 * @param src The PowerTimeSlotScheduleConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerTimeSlotScheduleConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerTimeSlotScheduleConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationDataType
{
    SpineOptional<AlternativesIdType> alternativesId;
    SpineOptional<std::vector<PowerSequenceIdType>> sequenceId;

    PowerSequenceAlternativesRelationDataType() = default;
};

/**
 * Convert a PowerSequenceAlternativesRelationDataType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationDataType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationDataElementsType
{
    SpineOptional<ElementTagType> alternativesId;
    SpineOptional<ElementTagType> sequenceId;

    PowerSequenceAlternativesRelationDataElementsType() = default;
};

/**
 * Convert a PowerSequenceAlternativesRelationDataElementsType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationDataElementsType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationListDataType
{
    SpineOptional<std::vector<PowerSequenceAlternativesRelationDataType>> powerSequenceAlternativesRelationData;

    PowerSequenceAlternativesRelationListDataType() = default;
};

/**
 * Convert a PowerSequenceAlternativesRelationListDataType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationListDataType &dst);

/**
 * Datatype PowerSequenceAlternativesRelationListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceAlternativesRelationListDataSelectorsType
{
    SpineOptional<AlternativesIdType> alternativesId;
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceAlternativesRelationListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceAlternativesRelationListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceAlternativesRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceAlternativesRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceAlternativesRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceAlternativesRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceDescriptionDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<DescriptionType> description;
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<UnitOfMeasurementEnumType> powerUnit;
    SpineOptional<UnitOfMeasurementEnumType> energyUnit;
    SpineOptional<MeasurementValueSourceEnumType> valueSource;
    SpineOptional<PowerSequenceScopeEnumType> scope;
    SpineOptional<uint32_t> taskIdentifier;
    SpineOptional<uint32_t> repetitionsTotal;

    PowerSequenceDescriptionDataType() = default;
};

/**
 * Convert a PowerSequenceDescriptionDataType to its JSON representation
 * @param src The PowerSequenceDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionDataType &dst);

/**
 * Datatype PowerSequenceDescriptionDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> powerUnit;
    SpineOptional<ElementTagType> energyUnit;
    SpineOptional<ElementTagType> valueSource;
    SpineOptional<ElementTagType> scope;
    SpineOptional<ElementTagType> taskIdentifier;
    SpineOptional<ElementTagType> repetitionsTotal;

    PowerSequenceDescriptionDataElementsType() = default;
};

/**
 * Convert a PowerSequenceDescriptionDataElementsType to its JSON representation
 * @param src The PowerSequenceDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionDataElementsType &dst);

/**
 * Datatype PowerSequenceDescriptionListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionListDataType
{
    SpineOptional<std::vector<PowerSequenceDescriptionDataType>> powerSequenceDescriptionData;

    PowerSequenceDescriptionListDataType() = default;
};

/**
 * Convert a PowerSequenceDescriptionListDataType to its JSON representation
 * @param src The PowerSequenceDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionListDataType &dst);

/**
 * Datatype PowerSequenceDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceDescriptionListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceDescriptionListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceStateDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<PowerSequenceStateEnumType> state;
    SpineOptional<PowerTimeSlotNumberType> activeSlotNumber;
    SpineOptional<std::string> elapsedSlotTime;
    SpineOptional<std::string> remainingSlotTime;
    SpineOptional<bool> sequenceRemoteControllable;
    SpineOptional<uint32_t> activeRepetitionNumber;
    SpineOptional<std::string> remainingPauseTime;

    PowerSequenceStateDataType() = default;
};

/**
 * Convert a PowerSequenceStateDataType to its JSON representation
 * @param src The PowerSequenceStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceStateDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateDataType &dst);

/**
 * Datatype PowerSequenceStateDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> state;
    SpineOptional<ElementTagType> activeSlotNumber;
    SpineOptional<ElementTagType> elapsedSlotTime;
    SpineOptional<ElementTagType> remainingSlotTime;
    SpineOptional<ElementTagType> sequenceRemoteControllable;
    SpineOptional<ElementTagType> activeRepetitionNumber;
    SpineOptional<ElementTagType> remainingPauseTime;

    PowerSequenceStateDataElementsType() = default;
};

/**
 * Convert a PowerSequenceStateDataElementsType to its JSON representation
 * @param src The PowerSequenceStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateDataElementsType &dst);

/**
 * Datatype PowerSequenceStateListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateListDataType
{
    SpineOptional<std::vector<PowerSequenceStateDataType>> powerSequenceStateData;

    PowerSequenceStateListDataType() = default;
};

/**
 * Convert a PowerSequenceStateListDataType to its JSON representation
 * @param src The PowerSequenceStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceStateListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateListDataType &dst);

/**
 * Datatype PowerSequenceStateListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceStateListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceStateListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceStateListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceStateListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceScheduleDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<AbsoluteOrRelativeTimeType> startTime;
    SpineOptional<AbsoluteOrRelativeTimeType> endTime;

    PowerSequenceScheduleDataType() = default;
};

/**
 * Convert a PowerSequenceScheduleDataType to its JSON representation
 * @param src The PowerSequenceScheduleDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleDataType &dst);

/**
 * Datatype PowerSequenceScheduleDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> startTime;
    SpineOptional<ElementTagType> endTime;

    PowerSequenceScheduleDataElementsType() = default;
};

/**
 * Convert a PowerSequenceScheduleDataElementsType to its JSON representation
 * @param src The PowerSequenceScheduleDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleListDataType
{
    SpineOptional<std::vector<PowerSequenceScheduleDataType>> powerSequenceScheduleData;

    PowerSequenceScheduleListDataType() = default;
};

/**
 * Convert a PowerSequenceScheduleListDataType to its JSON representation
 * @param src The PowerSequenceScheduleListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleListDataType &dst);

/**
 * Datatype PowerSequenceScheduleListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceScheduleListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceScheduleListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceScheduleListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<AbsoluteOrRelativeTimeType> earliestStartTime;
    SpineOptional<AbsoluteOrRelativeTimeType> latestStartTime;
    SpineOptional<AbsoluteOrRelativeTimeType> earliestEndTime;
    SpineOptional<AbsoluteOrRelativeTimeType> latestEndTime;
    SpineOptional<bool> optionalSequence;

    PowerSequenceScheduleConstraintsDataType() = default;
};

/**
 * Convert a PowerSequenceScheduleConstraintsDataType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsDataType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> earliestStartTime;
    SpineOptional<ElementTagType> latestStartTime;
    SpineOptional<ElementTagType> earliestEndTime;
    SpineOptional<ElementTagType> latestEndTime;
    SpineOptional<ElementTagType> optionalSequence;

    PowerSequenceScheduleConstraintsDataElementsType() = default;
};

/**
 * Convert a PowerSequenceScheduleConstraintsDataElementsType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsListDataType
{
    SpineOptional<std::vector<PowerSequenceScheduleConstraintsDataType>> powerSequenceScheduleConstraintsData;

    PowerSequenceScheduleConstraintsListDataType() = default;
};

/**
 * Convert a PowerSequenceScheduleConstraintsListDataType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsListDataType &dst);

/**
 * Datatype PowerSequenceScheduleConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConstraintsListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceScheduleConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceScheduleConstraintsListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceScheduleConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsListDataSelectorsType &dst);

/**
 * Datatype PowerSequencePriceDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<AbsoluteOrRelativeTimeType> potentialStartTime;
    SpineOptional<ScaledNumberType> price;
    SpineOptional<CurrencyEnumType> currency;

    PowerSequencePriceDataType() = default;
};

/**
 * Convert a PowerSequencePriceDataType to its JSON representation
 * @param src The PowerSequencePriceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceDataType &dst);

/**
 * Datatype PowerSequencePriceDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> potentialStartTime;
    SpineOptional<ScaledNumberElementsType> price;
    SpineOptional<ElementTagType> currency;

    PowerSequencePriceDataElementsType() = default;
};

/**
 * Convert a PowerSequencePriceDataElementsType to its JSON representation
 * @param src The PowerSequencePriceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceDataElementsType &dst);

/**
 * Datatype PowerSequencePriceListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceListDataType
{
    SpineOptional<std::vector<PowerSequencePriceDataType>> powerSequencePriceData;

    PowerSequencePriceListDataType() = default;
};

/**
 * Convert a PowerSequencePriceListDataType to its JSON representation
 * @param src The PowerSequencePriceListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceListDataType &dst);

/**
 * Datatype PowerSequencePriceListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<TimestampIntervalType> potentialStartTimeInterval;

    PowerSequencePriceListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequencePriceListDataSelectorsType to its JSON representation
 * @param src The PowerSequencePriceListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<bool> greenest;
    SpineOptional<bool> cheapest;

    PowerSequenceSchedulePreferenceDataType() = default;
};

/**
 * Convert a PowerSequenceSchedulePreferenceDataType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceDataType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> greenest;
    SpineOptional<ElementTagType> cheapest;

    PowerSequenceSchedulePreferenceDataElementsType() = default;
};

/**
 * Convert a PowerSequenceSchedulePreferenceDataElementsType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceDataElementsType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceListDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceListDataType
{
    SpineOptional<std::vector<PowerSequenceSchedulePreferenceDataType>> powerSequenceSchedulePreferenceData;

    PowerSequenceSchedulePreferenceListDataType() = default;
};

/**
 * Convert a PowerSequenceSchedulePreferenceListDataType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceListDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceListDataType &dst);

/**
 * Datatype PowerSequenceSchedulePreferenceListDataSelectorsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceSchedulePreferenceListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceSchedulePreferenceListDataSelectorsType() = default;
};

/**
 * Convert a PowerSequenceSchedulePreferenceListDataSelectorsType to its JSON representation
 * @param src The PowerSequenceSchedulePreferenceListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceSchedulePreferenceListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceSchedulePreferenceListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceSchedulePreferenceListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceListDataSelectorsType &dst);

/**
 * Datatype PowerSequenceNodeScheduleInformationDataType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceNodeScheduleInformationDataType
{
    SpineOptional<bool> nodeRemoteControllable;
    SpineOptional<bool> supportsSingleSlotSchedulingOnly;
    SpineOptional<uint32_t> alternativesCount;
    SpineOptional<uint32_t> totalSequencesCountMax;
    SpineOptional<bool> supportsReselection;

    PowerSequenceNodeScheduleInformationDataType() = default;
};

/**
 * Convert a PowerSequenceNodeScheduleInformationDataType to its JSON representation
 * @param src The PowerSequenceNodeScheduleInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceNodeScheduleInformationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceNodeScheduleInformationDataType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceNodeScheduleInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceNodeScheduleInformationDataType &dst);

/**
 * Datatype PowerSequenceNodeScheduleInformationDataElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceNodeScheduleInformationDataElementsType
{
    SpineOptional<ElementTagType> nodeRemoteControllable;
    SpineOptional<ElementTagType> supportsSingleSlotSchedulingOnly;
    SpineOptional<ElementTagType> alternativesCount;
    SpineOptional<ElementTagType> totalSequencesCountMax;
    SpineOptional<ElementTagType> supportsReselection;

    PowerSequenceNodeScheduleInformationDataElementsType() = default;
};

/**
 * Convert a PowerSequenceNodeScheduleInformationDataElementsType to its JSON representation
 * @param src The PowerSequenceNodeScheduleInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceNodeScheduleInformationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceNodeScheduleInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceNodeScheduleInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceNodeScheduleInformationDataElementsType &dst);

/**
 * Datatype PowerSequenceScheduleConfigurationRequestCallType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConfigurationRequestCallType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    PowerSequenceScheduleConfigurationRequestCallType() = default;
};

/**
 * Convert a PowerSequenceScheduleConfigurationRequestCallType to its JSON representation
 * @param src The PowerSequenceScheduleConfigurationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConfigurationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConfigurationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConfigurationRequestCallType &dst);

/**
 * Datatype PowerSequenceScheduleConfigurationRequestCallElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequenceScheduleConfigurationRequestCallElementsType
{
    SpineOptional<ElementTagType> sequenceId;

    PowerSequenceScheduleConfigurationRequestCallElementsType() = default;
};

/**
 * Convert a PowerSequenceScheduleConfigurationRequestCallElementsType to its JSON representation
 * @param src The PowerSequenceScheduleConfigurationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequenceScheduleConfigurationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequenceScheduleConfigurationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConfigurationRequestCallElementsType &dst);

/**
 * Datatype PowerSequencePriceCalculationRequestCallType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceCalculationRequestCallType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<AbsoluteOrRelativeTimeType> potentialStartTime;

    PowerSequencePriceCalculationRequestCallType() = default;
};

/**
 * Convert a PowerSequencePriceCalculationRequestCallType to its JSON representation
 * @param src The PowerSequencePriceCalculationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceCalculationRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceCalculationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceCalculationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceCalculationRequestCallType &dst);

/**
 * Datatype PowerSequencePriceCalculationRequestCallElementsType as defined in EEBus_SPINE_TS_PowerSequences.xsd
*/
struct PowerSequencePriceCalculationRequestCallElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> potentialStartTime;

    PowerSequencePriceCalculationRequestCallElementsType() = default;
};

/**
 * Convert a PowerSequencePriceCalculationRequestCallElementsType to its JSON representation
 * @param src The PowerSequencePriceCalculationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const PowerSequencePriceCalculationRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a PowerSequencePriceCalculationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The PowerSequencePriceCalculationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceCalculationRequestCallElementsType &dst);

/**
 * Datatype MeasurementDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDataType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementValueTypeEnumType> valueType;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<TimePeriodType> evaluationPeriod;
    SpineOptional<MeasurementValueSourceEnumType> valueSource;
    SpineOptional<MeasurementValueTendencyEnumType> valueTendency;
    SpineOptional<MeasurementValueStateEnumType> valueState;

    MeasurementDataType() = default;
};

/**
 * Convert a MeasurementDataType to its JSON representation
 * @param src The MeasurementDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDataType &dst);

/**
 * Datatype MeasurementDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDataElementsType
{
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> valueType;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<TimePeriodElementsType> evaluationPeriod;
    SpineOptional<ElementTagType> valueSource;
    SpineOptional<ElementTagType> valueTendency;
    SpineOptional<ElementTagType> valueState;

    MeasurementDataElementsType() = default;
};

/**
 * Convert a MeasurementDataElementsType to its JSON representation
 * @param src The MeasurementDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDataElementsType &dst);

/**
 * Datatype MeasurementListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementListDataType
{
    SpineOptional<std::vector<MeasurementDataType>> measurementData;

    MeasurementListDataType() = default;
};

/**
 * Convert a MeasurementListDataType to its JSON representation
 * @param src The MeasurementListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementListDataType &dst);

/**
 * Datatype MeasurementListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementListDataSelectorsType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementValueTypeEnumType> valueType;
    SpineOptional<TimestampIntervalType> timestampInterval;

    MeasurementListDataSelectorsType() = default;
};

/**
 * Convert a MeasurementListDataSelectorsType to its JSON representation
 * @param src The MeasurementListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementListDataSelectorsType &dst);

/**
 * Datatype MeasurementSeriesDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesDataType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementValueTypeEnumType> valueType;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<TimePeriodType> evaluationPeriod;
    SpineOptional<MeasurementValueSourceEnumType> valueSource;
    SpineOptional<MeasurementValueTendencyEnumType> valueTendency;
    SpineOptional<MeasurementValueStateEnumType> valueState;

    MeasurementSeriesDataType() = default;
};

/**
 * Convert a MeasurementSeriesDataType to its JSON representation
 * @param src The MeasurementSeriesDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementSeriesDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesDataType &dst);

/**
 * Datatype MeasurementSeriesDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesDataElementsType
{
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> valueType;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<TimePeriodElementsType> evaluationPeriod;
    SpineOptional<ElementTagType> valueSource;
    SpineOptional<ElementTagType> valueTendency;
    SpineOptional<ElementTagType> valueState;

    MeasurementSeriesDataElementsType() = default;
};

/**
 * Convert a MeasurementSeriesDataElementsType to its JSON representation
 * @param src The MeasurementSeriesDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementSeriesDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesDataElementsType &dst);

/**
 * Datatype MeasurementSeriesListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesListDataType
{
    SpineOptional<std::vector<MeasurementSeriesDataType>> measurementSeriesData;

    MeasurementSeriesListDataType() = default;
};

/**
 * Convert a MeasurementSeriesListDataType to its JSON representation
 * @param src The MeasurementSeriesListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementSeriesListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesListDataType &dst);

/**
 * Datatype MeasurementSeriesListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementSeriesListDataSelectorsType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementValueTypeEnumType> valueType;
    SpineOptional<TimestampIntervalType> timestampInterval;

    MeasurementSeriesListDataSelectorsType() = default;
};

/**
 * Convert a MeasurementSeriesListDataSelectorsType to its JSON representation
 * @param src The MeasurementSeriesListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementSeriesListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementSeriesListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementSeriesListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesListDataSelectorsType &dst);

/**
 * Datatype MeasurementConstraintsDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsDataType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ScaledNumberType> valueRangeMin;
    SpineOptional<ScaledNumberType> valueRangeMax;
    SpineOptional<ScaledNumberType> valueStepSize;

    MeasurementConstraintsDataType() = default;
};

/**
 * Convert a MeasurementConstraintsDataType to its JSON representation
 * @param src The MeasurementConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsDataType &dst);

/**
 * Datatype MeasurementConstraintsDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsDataElementsType
{
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ScaledNumberElementsType> valueRangeMin;
    SpineOptional<ScaledNumberElementsType> valueRangeMax;
    SpineOptional<ScaledNumberElementsType> valueStepSize;

    MeasurementConstraintsDataElementsType() = default;
};

/**
 * Convert a MeasurementConstraintsDataElementsType to its JSON representation
 * @param src The MeasurementConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsDataElementsType &dst);

/**
 * Datatype MeasurementConstraintsListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsListDataType
{
    SpineOptional<std::vector<MeasurementConstraintsDataType>> measurementConstraintsData;

    MeasurementConstraintsListDataType() = default;
};

/**
 * Convert a MeasurementConstraintsListDataType to its JSON representation
 * @param src The MeasurementConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsListDataType &dst);

/**
 * Datatype MeasurementConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementConstraintsListDataSelectorsType
{
    SpineOptional<MeasurementIdType> measurementId;

    MeasurementConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a MeasurementConstraintsListDataSelectorsType to its JSON representation
 * @param src The MeasurementConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsListDataSelectorsType &dst);

/**
 * Datatype MeasurementDescriptionDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionDataType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementTypeEnumType> measurementType;
    SpineOptional<CommodityTypeEnumType> commodityType;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScaledNumberType> calibrationValue;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    MeasurementDescriptionDataType() = default;
};

/**
 * Convert a MeasurementDescriptionDataType to its JSON representation
 * @param src The MeasurementDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionDataType &dst);

/**
 * Datatype MeasurementDescriptionDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionDataElementsType
{
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> measurementType;
    SpineOptional<ElementTagType> commodityType;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ScaledNumberElementsType> calibrationValue;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    MeasurementDescriptionDataElementsType() = default;
};

/**
 * Convert a MeasurementDescriptionDataElementsType to its JSON representation
 * @param src The MeasurementDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionDataElementsType &dst);

/**
 * Datatype MeasurementDescriptionListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionListDataType
{
    SpineOptional<std::vector<MeasurementDescriptionDataType>> measurementDescriptionData;

    MeasurementDescriptionListDataType() = default;
};

/**
 * Convert a MeasurementDescriptionListDataType to its JSON representation
 * @param src The MeasurementDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionListDataType &dst);

/**
 * Datatype MeasurementDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementDescriptionListDataSelectorsType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<MeasurementTypeEnumType> measurementType;
    SpineOptional<CommodityTypeEnumType> commodityType;
    SpineOptional<ScopeTypeEnumType> scopeType;

    MeasurementDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a MeasurementDescriptionListDataSelectorsType to its JSON representation
 * @param src The MeasurementDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionListDataSelectorsType &dst);

/**
 * Datatype MeasurementThresholdRelationDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationDataType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<std::vector<ThresholdIdType>> thresholdId;

    MeasurementThresholdRelationDataType() = default;
};

/**
 * Convert a MeasurementThresholdRelationDataType to its JSON representation
 * @param src The MeasurementThresholdRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationDataType &dst);

/**
 * Datatype MeasurementThresholdRelationDataElementsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationDataElementsType
{
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> thresholdId;

    MeasurementThresholdRelationDataElementsType() = default;
};

/**
 * Convert a MeasurementThresholdRelationDataElementsType to its JSON representation
 * @param src The MeasurementThresholdRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationDataElementsType &dst);

/**
 * Datatype MeasurementThresholdRelationListDataType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationListDataType
{
    SpineOptional<std::vector<MeasurementThresholdRelationDataType>> measurementThresholdRelationData;

    MeasurementThresholdRelationListDataType() = default;
};

/**
 * Convert a MeasurementThresholdRelationListDataType to its JSON representation
 * @param src The MeasurementThresholdRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationListDataType &dst);

/**
 * Datatype MeasurementThresholdRelationListDataSelectorsType as defined in EEBus_SPINE_TS_Measurement.xsd
*/
struct MeasurementThresholdRelationListDataSelectorsType
{
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ThresholdIdType> thresholdId;

    MeasurementThresholdRelationListDataSelectorsType() = default;
};

/**
 * Convert a MeasurementThresholdRelationListDataSelectorsType to its JSON representation
 * @param src The MeasurementThresholdRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MeasurementThresholdRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MeasurementThresholdRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MeasurementThresholdRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationListDataSelectorsType &dst);

/**
 * Datatype ThresholdDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDataType
{
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<ScaledNumberType> thresholdValue;

    ThresholdDataType() = default;
};

/**
 * Convert a ThresholdDataType to its JSON representation
 * @param src The ThresholdDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDataType &dst);

/**
 * Datatype ThresholdDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDataElementsType
{
    SpineOptional<ElementTagType> thresholdId;
    SpineOptional<ScaledNumberElementsType> thresholdValue;

    ThresholdDataElementsType() = default;
};

/**
 * Convert a ThresholdDataElementsType to its JSON representation
 * @param src The ThresholdDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDataElementsType &dst);

/**
 * Datatype ThresholdListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdListDataType
{
    SpineOptional<std::vector<ThresholdDataType>> thresholdData;

    ThresholdListDataType() = default;
};

/**
 * Convert a ThresholdListDataType to its JSON representation
 * @param src The ThresholdListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdListDataType &dst);

/**
 * Datatype ThresholdListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdListDataSelectorsType
{
    SpineOptional<ThresholdIdType> thresholdId;

    ThresholdListDataSelectorsType() = default;
};

/**
 * Convert a ThresholdListDataSelectorsType to its JSON representation
 * @param src The ThresholdListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdListDataSelectorsType &dst);

/**
 * Datatype ThresholdConstraintsDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsDataType
{
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<ScaledNumberType> thresholdRangeMin;
    SpineOptional<ScaledNumberType> thresholdRangeMax;
    SpineOptional<ScaledNumberType> thresholdStepSize;

    ThresholdConstraintsDataType() = default;
};

/**
 * Convert a ThresholdConstraintsDataType to its JSON representation
 * @param src The ThresholdConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsDataType &dst);

/**
 * Datatype ThresholdConstraintsDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsDataElementsType
{
    SpineOptional<ElementTagType> thresholdId;
    SpineOptional<ScaledNumberElementsType> thresholdRangeMin;
    SpineOptional<ScaledNumberElementsType> thresholdRangeMax;
    SpineOptional<ScaledNumberElementsType> thresholdStepSize;

    ThresholdConstraintsDataElementsType() = default;
};

/**
 * Convert a ThresholdConstraintsDataElementsType to its JSON representation
 * @param src The ThresholdConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsDataElementsType &dst);

/**
 * Datatype ThresholdConstraintsListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsListDataType
{
    SpineOptional<std::vector<ThresholdConstraintsDataType>> thresholdConstraintsData;

    ThresholdConstraintsListDataType() = default;
};

/**
 * Convert a ThresholdConstraintsListDataType to its JSON representation
 * @param src The ThresholdConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsListDataType &dst);

/**
 * Datatype ThresholdConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdConstraintsListDataSelectorsType
{
    SpineOptional<ThresholdIdType> thresholdId;

    ThresholdConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a ThresholdConstraintsListDataSelectorsType to its JSON representation
 * @param src The ThresholdConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsListDataSelectorsType &dst);

/**
 * Datatype ThresholdDescriptionDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionDataType
{
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<ThresholdTypeEnumType> thresholdType;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    ThresholdDescriptionDataType() = default;
};

/**
 * Convert a ThresholdDescriptionDataType to its JSON representation
 * @param src The ThresholdDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionDataType &dst);

/**
 * Datatype ThresholdDescriptionDataElementsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionDataElementsType
{
    SpineOptional<ElementTagType> thresholdId;
    SpineOptional<ElementTagType> thresholdType;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    ThresholdDescriptionDataElementsType() = default;
};

/**
 * Convert a ThresholdDescriptionDataElementsType to its JSON representation
 * @param src The ThresholdDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionDataElementsType &dst);

/**
 * Datatype ThresholdDescriptionListDataType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionListDataType
{
    SpineOptional<std::vector<ThresholdDescriptionDataType>> thresholdDescriptionData;

    ThresholdDescriptionListDataType() = default;
};

/**
 * Convert a ThresholdDescriptionListDataType to its JSON representation
 * @param src The ThresholdDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionListDataType &dst);

/**
 * Datatype ThresholdDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Threshold.xsd
*/
struct ThresholdDescriptionListDataSelectorsType
{
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    ThresholdDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a ThresholdDescriptionListDataSelectorsType to its JSON representation
 * @param src The ThresholdDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ThresholdDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ThresholdDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ThresholdDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsInterruptDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<bool> isPausable;
    SpineOptional<bool> isStoppable;
    SpineOptional<bool> notInterruptibleAtHighPower;
    SpineOptional<uint32_t> maxCyclesPerDay;

    OperatingConstraintsInterruptDataType() = default;
};

/**
 * Convert a OperatingConstraintsInterruptDataType to its JSON representation
 * @param src The OperatingConstraintsInterruptDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptDataType &dst);

/**
 * Datatype OperatingConstraintsInterruptDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> isPausable;
    SpineOptional<ElementTagType> isStoppable;
    SpineOptional<ElementTagType> notInterruptibleAtHighPower;
    SpineOptional<ElementTagType> maxCyclesPerDay;

    OperatingConstraintsInterruptDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsInterruptDataElementsType to its JSON representation
 * @param src The OperatingConstraintsInterruptDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptDataElementsType &dst);

/**
 * Datatype OperatingConstraintsInterruptListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptListDataType
{
    SpineOptional<std::vector<OperatingConstraintsInterruptDataType>> operatingConstraintsInterruptData;

    OperatingConstraintsInterruptListDataType() = default;
};

/**
 * Convert a OperatingConstraintsInterruptListDataType to its JSON representation
 * @param src The OperatingConstraintsInterruptListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptListDataType &dst);

/**
 * Datatype OperatingConstraintsInterruptListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsInterruptListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsInterruptListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsInterruptListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsInterruptListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsInterruptListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsInterruptListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsInterruptListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsDurationDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<std::string> activeDurationMin;
    SpineOptional<std::string> activeDurationMax;
    SpineOptional<std::string> pauseDurationMin;
    SpineOptional<std::string> pauseDurationMax;
    SpineOptional<std::string> activeDurationSumMin;
    SpineOptional<std::string> activeDurationSumMax;

    OperatingConstraintsDurationDataType() = default;
};

/**
 * Convert a OperatingConstraintsDurationDataType to its JSON representation
 * @param src The OperatingConstraintsDurationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationDataType &dst);

/**
 * Datatype OperatingConstraintsDurationDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> activeDurationMin;
    SpineOptional<ElementTagType> activeDurationMax;
    SpineOptional<ElementTagType> pauseDurationMin;
    SpineOptional<ElementTagType> pauseDurationMax;
    SpineOptional<ElementTagType> activeDurationSumMin;
    SpineOptional<ElementTagType> activeDurationSumMax;

    OperatingConstraintsDurationDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsDurationDataElementsType to its JSON representation
 * @param src The OperatingConstraintsDurationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationDataElementsType &dst);

/**
 * Datatype OperatingConstraintsDurationListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationListDataType
{
    SpineOptional<std::vector<OperatingConstraintsDurationDataType>> operatingConstraintsDurationData;

    OperatingConstraintsDurationListDataType() = default;
};

/**
 * Convert a OperatingConstraintsDurationListDataType to its JSON representation
 * @param src The OperatingConstraintsDurationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationListDataType &dst);

/**
 * Datatype OperatingConstraintsDurationListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsDurationListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsDurationListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsDurationListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsDurationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsDurationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsDurationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsDurationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<UnitOfMeasurementEnumType> powerUnit;
    SpineOptional<UnitOfMeasurementEnumType> energyUnit;
    SpineOptional<DescriptionType> description;

    OperatingConstraintsPowerDescriptionDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerDescriptionDataType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionDataType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> powerUnit;
    SpineOptional<ElementTagType> energyUnit;
    SpineOptional<ElementTagType> description;

    OperatingConstraintsPowerDescriptionDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerDescriptionDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionListDataType
{
    SpineOptional<std::vector<OperatingConstraintsPowerDescriptionDataType>> operatingConstraintsPowerDescriptionData;

    OperatingConstraintsPowerDescriptionListDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerDescriptionListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerDescriptionListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsPowerDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerDescriptionListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<ScaledNumberType> powerMin;
    SpineOptional<ScaledNumberType> powerMax;
    SpineOptional<ScaledNumberType> energyMin;
    SpineOptional<ScaledNumberType> energyMax;

    OperatingConstraintsPowerRangeDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerRangeDataType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeDataType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ScaledNumberElementsType> powerMin;
    SpineOptional<ScaledNumberElementsType> powerMax;
    SpineOptional<ScaledNumberElementsType> energyMin;
    SpineOptional<ScaledNumberElementsType> energyMax;

    OperatingConstraintsPowerRangeDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerRangeDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeListDataType
{
    SpineOptional<std::vector<OperatingConstraintsPowerRangeDataType>> operatingConstraintsPowerRangeData;

    OperatingConstraintsPowerRangeListDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerRangeListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerRangeListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerRangeListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsPowerRangeListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerRangeListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerRangeListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerRangeListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerRangeListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerRangeListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<std::vector<ScaledNumberType>> power;

    OperatingConstraintsPowerLevelDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerLevelDataType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelDataType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ScaledNumberElementsType> power;

    OperatingConstraintsPowerLevelDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerLevelDataElementsType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelDataElementsType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelListDataType
{
    SpineOptional<std::vector<OperatingConstraintsPowerLevelDataType>> operatingConstraintsPowerLevelData;

    OperatingConstraintsPowerLevelListDataType() = default;
};

/**
 * Convert a OperatingConstraintsPowerLevelListDataType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelListDataType &dst);

/**
 * Datatype OperatingConstraintsPowerLevelListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsPowerLevelListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsPowerLevelListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsPowerLevelListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsPowerLevelListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsPowerLevelListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsPowerLevelListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsPowerLevelListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelListDataSelectorsType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationDataType
{
    SpineOptional<PowerSequenceIdType> sequenceId;
    SpineOptional<ScaledNumberType> resumeEnergyEstimated;
    SpineOptional<UnitOfMeasurementEnumType> energyUnit;
    SpineOptional<ScaledNumberType> resumeCostEstimated;
    SpineOptional<CurrencyEnumType> currency;

    OperatingConstraintsResumeImplicationDataType() = default;
};

/**
 * Convert a OperatingConstraintsResumeImplicationDataType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationDataType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationDataElementsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationDataElementsType
{
    SpineOptional<ElementTagType> sequenceId;
    SpineOptional<ScaledNumberElementsType> resumeEnergyEstimated;
    SpineOptional<ElementTagType> energyUnit;
    SpineOptional<ScaledNumberElementsType> resumeCostEstimated;
    SpineOptional<ElementTagType> currency;

    OperatingConstraintsResumeImplicationDataElementsType() = default;
};

/**
 * Convert a OperatingConstraintsResumeImplicationDataElementsType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationDataElementsType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationListDataType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationListDataType
{
    SpineOptional<std::vector<OperatingConstraintsResumeImplicationDataType>> operatingConstraintsResumeImplicationData;

    OperatingConstraintsResumeImplicationListDataType() = default;
};

/**
 * Convert a OperatingConstraintsResumeImplicationListDataType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationListDataType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationListDataType &dst);

/**
 * Datatype OperatingConstraintsResumeImplicationListDataSelectorsType as defined in EEBus_SPINE_TS_OperatingConstraints.xsd
*/
struct OperatingConstraintsResumeImplicationListDataSelectorsType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    OperatingConstraintsResumeImplicationListDataSelectorsType() = default;
};

/**
 * Convert a OperatingConstraintsResumeImplicationListDataSelectorsType to its JSON representation
 * @param src The OperatingConstraintsResumeImplicationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const OperatingConstraintsResumeImplicationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a OperatingConstraintsResumeImplicationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The OperatingConstraintsResumeImplicationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationListDataSelectorsType &dst);

/**
 * Datatype BillValueType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillValueType
{
    SpineOptional<BillValueIdType> valueId;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<ScaledNumberType> valuePercentage;

    BillValueType() = default;
};

/**
 * Convert a BillValueType to its JSON representation
 * @param src The BillValueType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillValueType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillValueType
 * @param src The JSON variant to convert
 * @param dst The BillValueType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillValueType &dst);

/**
 * Datatype BillValueElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillValueElementsType
{
    SpineOptional<ElementTagType> valueId;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<ScaledNumberElementsType> valuePercentage;

    BillValueElementsType() = default;
};

/**
 * Convert a BillValueElementsType to its JSON representation
 * @param src The BillValueElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillValueElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillValueElementsType
 * @param src The JSON variant to convert
 * @param dst The BillValueElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillValueElementsType &dst);

/**
 * Datatype BillCostType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillCostType
{
    SpineOptional<BillCostIdType> costId;
    SpineOptional<BillCostTypeEnumType> costType;
    SpineOptional<BillValueIdType> valueId;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<CurrencyEnumType> currency;
    SpineOptional<ScaledNumberType> cost;
    SpineOptional<ScaledNumberType> costPercentage;

    BillCostType() = default;
};

/**
 * Convert a BillCostType to its JSON representation
 * @param src The BillCostType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillCostType
 * @param src The JSON variant to convert
 * @param dst The BillCostType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillCostType &dst);

/**
 * Datatype BillCostElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillCostElementsType
{
    SpineOptional<ElementTagType> costId;
    SpineOptional<ElementTagType> costType;
    SpineOptional<ElementTagType> valueId;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> currency;
    SpineOptional<ScaledNumberElementsType> cost;
    SpineOptional<ScaledNumberElementsType> costPercentage;

    BillCostElementsType() = default;
};

/**
 * Convert a BillCostElementsType to its JSON representation
 * @param src The BillCostElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillCostElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillCostElementsType
 * @param src The JSON variant to convert
 * @param dst The BillCostElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillCostElementsType &dst);

/**
 * Datatype BillPositionType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillPositionType
{
    SpineOptional<BillPositionIdType> positionId;
    SpineOptional<BillPositionTypeEnumType> positionType;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<std::vector<BillValueType>> value;
    SpineOptional<std::vector<BillCostType>> cost;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    BillPositionType() = default;
};

/**
 * Convert a BillPositionType to its JSON representation
 * @param src The BillPositionType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillPositionType
 * @param src The JSON variant to convert
 * @param dst The BillPositionType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillPositionType &dst);

/**
 * Datatype BillPositionElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillPositionElementsType
{
    SpineOptional<ElementTagType> positionId;
    SpineOptional<ElementTagType> positionType;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<BillValueElementsType> value;
    SpineOptional<BillCostElementsType> cost;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    BillPositionElementsType() = default;
};

/**
 * Convert a BillPositionElementsType to its JSON representation
 * @param src The BillPositionElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillPositionElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillPositionElementsType
 * @param src The JSON variant to convert
 * @param dst The BillPositionElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillPositionElementsType &dst);

/**
 * Datatype BillDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDataType
{
    SpineOptional<BillIdType> billId;
    SpineOptional<BillTypeEnumType> billType;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<BillPositionType> total;
    SpineOptional<std::vector<BillPositionType>> position;

    BillDataType() = default;
};

/**
 * Convert a BillDataType to its JSON representation
 * @param src The BillDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDataType
 * @param src The JSON variant to convert
 * @param dst The BillDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDataType &dst);

/**
 * Datatype BillDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDataElementsType
{
    SpineOptional<ElementTagType> billId;
    SpineOptional<ElementTagType> billType;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<BillPositionElementsType> total;
    SpineOptional<BillPositionElementsType> position;

    BillDataElementsType() = default;
};

/**
 * Convert a BillDataElementsType to its JSON representation
 * @param src The BillDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDataElementsType &dst);

/**
 * Datatype BillListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillListDataType
{
    SpineOptional<std::vector<BillDataType>> billData;

    BillListDataType() = default;
};

/**
 * Convert a BillListDataType to its JSON representation
 * @param src The BillListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillListDataType
 * @param src The JSON variant to convert
 * @param dst The BillListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillListDataType &dst);

/**
 * Datatype BillListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillListDataSelectorsType
{
    SpineOptional<BillIdType> billId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    BillListDataSelectorsType() = default;
};

/**
 * Convert a BillListDataSelectorsType to its JSON representation
 * @param src The BillListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillListDataSelectorsType &dst);

/**
 * Datatype BillConstraintsDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsDataType
{
    SpineOptional<BillIdType> billId;
    SpineOptional<BillPositionCountType> positionCountMin;
    SpineOptional<BillPositionCountType> positionCountMax;

    BillConstraintsDataType() = default;
};

/**
 * Convert a BillConstraintsDataType to its JSON representation
 * @param src The BillConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillConstraintsDataType &dst);

/**
 * Datatype BillConstraintsDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsDataElementsType
{
    SpineOptional<ElementTagType> billId;
    SpineOptional<ElementTagType> positionCountMin;
    SpineOptional<ElementTagType> positionCountMax;

    BillConstraintsDataElementsType() = default;
};

/**
 * Convert a BillConstraintsDataElementsType to its JSON representation
 * @param src The BillConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillConstraintsDataElementsType &dst);

/**
 * Datatype BillConstraintsListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsListDataType
{
    SpineOptional<std::vector<BillConstraintsDataType>> billConstraintsData;

    BillConstraintsListDataType() = default;
};

/**
 * Convert a BillConstraintsListDataType to its JSON representation
 * @param src The BillConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillConstraintsListDataType &dst);

/**
 * Datatype BillConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillConstraintsListDataSelectorsType
{
    SpineOptional<BillIdType> billId;

    BillConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a BillConstraintsListDataSelectorsType to its JSON representation
 * @param src The BillConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillConstraintsListDataSelectorsType &dst);

/**
 * Datatype BillDescriptionDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionDataType
{
    SpineOptional<BillIdType> billId;
    SpineOptional<bool> billWriteable;
    SpineOptional<bool> updateRequired;
    SpineOptional<std::vector<BillTypeEnumType>> supportedBillType;
    SpineOptional<SessionIdType> sessionId;

    BillDescriptionDataType() = default;
};

/**
 * Convert a BillDescriptionDataType to its JSON representation
 * @param src The BillDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDescriptionDataType &dst);

/**
 * Datatype BillDescriptionDataElementsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionDataElementsType
{
    SpineOptional<ElementTagType> billId;
    SpineOptional<ElementTagType> billWriteable;
    SpineOptional<ElementTagType> updateRequired;
    SpineOptional<ElementTagType> supportedBillType;
    SpineOptional<ElementTagType> sessionId;

    BillDescriptionDataElementsType() = default;
};

/**
 * Convert a BillDescriptionDataElementsType to its JSON representation
 * @param src The BillDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDescriptionDataElementsType &dst);

/**
 * Datatype BillDescriptionListDataType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionListDataType
{
    SpineOptional<std::vector<BillDescriptionDataType>> billDescriptionData;

    BillDescriptionListDataType() = default;
};

/**
 * Convert a BillDescriptionListDataType to its JSON representation
 * @param src The BillDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDescriptionListDataType &dst);

/**
 * Datatype BillDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Bill.xsd
*/
struct BillDescriptionListDataSelectorsType
{
    SpineOptional<BillIdType> billId;

    BillDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a BillDescriptionListDataSelectorsType to its JSON representation
 * @param src The BillDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BillDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BillDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BillDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BillDescriptionListDataSelectorsType &dst);

/**
 * Datatype IdentificationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationDataType
{
    SpineOptional<IdentificationIdType> identificationId;
    SpineOptional<IdentificationTypeEnumType> identificationType;
    SpineOptional<IdentificationValueType> identificationValue;
    SpineOptional<bool> authorized;

    IdentificationDataType() = default;
};

/**
 * Convert a IdentificationDataType to its JSON representation
 * @param src The IdentificationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IdentificationDataType
 * @param src The JSON variant to convert
 * @param dst The IdentificationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IdentificationDataType &dst);

/**
 * Datatype IdentificationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationDataElementsType
{
    SpineOptional<ElementTagType> identificationId;
    SpineOptional<ElementTagType> identificationType;
    SpineOptional<ElementTagType> identificationValue;
    SpineOptional<ElementTagType> authorized;

    IdentificationDataElementsType() = default;
};

/**
 * Convert a IdentificationDataElementsType to its JSON representation
 * @param src The IdentificationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IdentificationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IdentificationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IdentificationDataElementsType &dst);

/**
 * Datatype IdentificationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationListDataType
{
    SpineOptional<std::vector<IdentificationDataType>> identificationData;

    IdentificationListDataType() = default;
};

/**
 * Convert a IdentificationListDataType to its JSON representation
 * @param src The IdentificationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IdentificationListDataType
 * @param src The JSON variant to convert
 * @param dst The IdentificationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IdentificationListDataType &dst);

/**
 * Datatype IdentificationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct IdentificationListDataSelectorsType
{
    SpineOptional<IdentificationIdType> identificationId;
    SpineOptional<IdentificationTypeEnumType> identificationType;

    IdentificationListDataSelectorsType() = default;
};

/**
 * Convert a IdentificationListDataSelectorsType to its JSON representation
 * @param src The IdentificationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IdentificationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IdentificationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IdentificationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IdentificationListDataSelectorsType &dst);

/**
 * Datatype SessionIdentificationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationDataType
{
    SpineOptional<SessionIdType> sessionId;
    SpineOptional<IdentificationIdType> identificationId;
    SpineOptional<bool> isLatestSession;
    SpineOptional<TimePeriodType> timePeriod;

    SessionIdentificationDataType() = default;
};

/**
 * Convert a SessionIdentificationDataType to its JSON representation
 * @param src The SessionIdentificationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionIdentificationDataType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionIdentificationDataType &dst);

/**
 * Datatype SessionIdentificationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationDataElementsType
{
    SpineOptional<ElementTagType> sessionId;
    SpineOptional<ElementTagType> identificationId;
    SpineOptional<ElementTagType> isLatestSession;
    SpineOptional<TimePeriodElementsType> timePeriod;

    SessionIdentificationDataElementsType() = default;
};

/**
 * Convert a SessionIdentificationDataElementsType to its JSON representation
 * @param src The SessionIdentificationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionIdentificationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionIdentificationDataElementsType &dst);

/**
 * Datatype SessionIdentificationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationListDataType
{
    SpineOptional<std::vector<SessionIdentificationDataType>> sessionIdentificationData;

    SessionIdentificationListDataType() = default;
};

/**
 * Convert a SessionIdentificationListDataType to its JSON representation
 * @param src The SessionIdentificationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionIdentificationListDataType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionIdentificationListDataType &dst);

/**
 * Datatype SessionIdentificationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionIdentificationListDataSelectorsType
{
    SpineOptional<SessionIdType> sessionId;
    SpineOptional<IdentificationIdType> identificationId;
    SpineOptional<bool> isLatestSession;
    SpineOptional<TimePeriodType> timePeriod;

    SessionIdentificationListDataSelectorsType() = default;
};

/**
 * Convert a SessionIdentificationListDataSelectorsType to its JSON representation
 * @param src The SessionIdentificationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionIdentificationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionIdentificationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SessionIdentificationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionIdentificationListDataSelectorsType &dst);

/**
 * Datatype SessionMeasurementRelationDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationDataType
{
    SpineOptional<SessionIdType> sessionId;
    SpineOptional<std::vector<MeasurementIdType>> measurementId;

    SessionMeasurementRelationDataType() = default;
};

/**
 * Convert a SessionMeasurementRelationDataType to its JSON representation
 * @param src The SessionMeasurementRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationDataType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationDataType &dst);

/**
 * Datatype SessionMeasurementRelationDataElementsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationDataElementsType
{
    SpineOptional<ElementTagType> sessionId;
    SpineOptional<ElementTagType> measurementId;

    SessionMeasurementRelationDataElementsType() = default;
};

/**
 * Convert a SessionMeasurementRelationDataElementsType to its JSON representation
 * @param src The SessionMeasurementRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationDataElementsType &dst);

/**
 * Datatype SessionMeasurementRelationListDataType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationListDataType
{
    SpineOptional<std::vector<SessionMeasurementRelationDataType>> sessionMeasurementRelationData;

    SessionMeasurementRelationListDataType() = default;
};

/**
 * Convert a SessionMeasurementRelationListDataType to its JSON representation
 * @param src The SessionMeasurementRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationListDataType &dst);

/**
 * Datatype SessionMeasurementRelationListDataSelectorsType as defined in EEBus_SPINE_TS_Identification.xsd
*/
struct SessionMeasurementRelationListDataSelectorsType
{
    SpineOptional<SessionIdType> sessionId;
    SpineOptional<MeasurementIdType> measurementId;

    SessionMeasurementRelationListDataSelectorsType() = default;
};

/**
 * Convert a SessionMeasurementRelationListDataSelectorsType to its JSON representation
 * @param src The SessionMeasurementRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SessionMeasurementRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SessionMeasurementRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SessionMeasurementRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationListDataSelectorsType &dst);

/**
 * Datatype SetpointDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDataType
{
    SpineOptional<SetpointIdType> setpointId;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<ScaledNumberType> valueMin;
    SpineOptional<ScaledNumberType> valueMax;
    SpineOptional<ScaledNumberType> valueToleranceAbsolute;
    SpineOptional<ScaledNumberType> valueTolerancePercentage;
    SpineOptional<bool> isSetpointChangeable;
    SpineOptional<bool> isSetpointActive;
    SpineOptional<TimePeriodType> timePeriod;

    SetpointDataType() = default;
};

/**
 * Convert a SetpointDataType to its JSON representation
 * @param src The SetpointDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDataType &dst);

/**
 * Datatype SetpointDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDataElementsType
{
    SpineOptional<ElementTagType> setpointId;
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<ScaledNumberElementsType> valueMin;
    SpineOptional<ScaledNumberElementsType> valueMax;
    SpineOptional<ScaledNumberElementsType> valueToleranceAbsolute;
    SpineOptional<ScaledNumberElementsType> valueTolerancePercentage;
    SpineOptional<ElementTagType> isSetpointChangeable;
    SpineOptional<ElementTagType> isSetpointActive;
    SpineOptional<TimePeriodElementsType> timePeriod;

    SetpointDataElementsType() = default;
};

/**
 * Convert a SetpointDataElementsType to its JSON representation
 * @param src The SetpointDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDataElementsType &dst);

/**
 * Datatype SetpointListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointListDataType
{
    SpineOptional<std::vector<SetpointDataType>> setpointData;

    SetpointListDataType() = default;
};

/**
 * Convert a SetpointListDataType to its JSON representation
 * @param src The SetpointListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointListDataType &dst);

/**
 * Datatype SetpointListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointListDataSelectorsType
{
    SpineOptional<SetpointIdType> setpointId;

    SetpointListDataSelectorsType() = default;
};

/**
 * Convert a SetpointListDataSelectorsType to its JSON representation
 * @param src The SetpointListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointListDataSelectorsType &dst);

/**
 * Datatype SetpointConstraintsDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsDataType
{
    SpineOptional<SetpointIdType> setpointId;
    SpineOptional<ScaledNumberType> setpointRangeMin;
    SpineOptional<ScaledNumberType> setpointRangeMax;
    SpineOptional<ScaledNumberType> setpointStepSize;

    SetpointConstraintsDataType() = default;
};

/**
 * Convert a SetpointConstraintsDataType to its JSON representation
 * @param src The SetpointConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsDataType &dst);

/**
 * Datatype SetpointConstraintsDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsDataElementsType
{
    SpineOptional<ElementTagType> setpointId;
    SpineOptional<ScaledNumberElementsType> setpointRangeMin;
    SpineOptional<ScaledNumberElementsType> setpointRangeMax;
    SpineOptional<ScaledNumberElementsType> setpointStepSize;

    SetpointConstraintsDataElementsType() = default;
};

/**
 * Convert a SetpointConstraintsDataElementsType to its JSON representation
 * @param src The SetpointConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsDataElementsType &dst);

/**
 * Datatype SetpointConstraintsListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsListDataType
{
    SpineOptional<std::vector<SetpointConstraintsDataType>> setpointConstraintsData;

    SetpointConstraintsListDataType() = default;
};

/**
 * Convert a SetpointConstraintsListDataType to its JSON representation
 * @param src The SetpointConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsListDataType &dst);

/**
 * Datatype SetpointConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointConstraintsListDataSelectorsType
{
    SpineOptional<SetpointIdType> setpointId;

    SetpointConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a SetpointConstraintsListDataSelectorsType to its JSON representation
 * @param src The SetpointConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsListDataSelectorsType &dst);

/**
 * Datatype SetpointDescriptionDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionDataType
{
    SpineOptional<SetpointIdType> setpointId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<SetpointTypeEnumType> setpointType;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    SetpointDescriptionDataType() = default;
};

/**
 * Convert a SetpointDescriptionDataType to its JSON representation
 * @param src The SetpointDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionDataType &dst);

/**
 * Datatype SetpointDescriptionDataElementsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionDataElementsType
{
    SpineOptional<ElementTagType> setpointId;
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> setpointType;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    SetpointDescriptionDataElementsType() = default;
};

/**
 * Convert a SetpointDescriptionDataElementsType to its JSON representation
 * @param src The SetpointDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionDataElementsType &dst);

/**
 * Datatype SetpointDescriptionListDataType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionListDataType
{
    SpineOptional<std::vector<SetpointDescriptionDataType>> setpointDescriptionData;

    SetpointDescriptionListDataType() = default;
};

/**
 * Convert a SetpointDescriptionListDataType to its JSON representation
 * @param src The SetpointDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionListDataType &dst);

/**
 * Datatype SetpointDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_Setpoint.xsd
*/
struct SetpointDescriptionListDataSelectorsType
{
    SpineOptional<SetpointIdType> setpointId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<SetpointTypeEnumType> setpointType;
    SpineOptional<ScopeTypeEnumType> scopeType;

    SetpointDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a SetpointDescriptionListDataSelectorsType to its JSON representation
 * @param src The SetpointDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SetpointDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SetpointDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SetpointDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionListDataSelectorsType &dst);

/**
 * Datatype TimeTableDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDataType
{
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<TimeSlotIdType> timeSlotId;
    SpineOptional<RecurrenceInformationType> recurrenceInformation;
    SpineOptional<AbsoluteOrRecurringTimeType> startTime;
    SpineOptional<AbsoluteOrRecurringTimeType> endTime;

    TimeTableDataType() = default;
};

/**
 * Convert a TimeTableDataType to its JSON representation
 * @param src The TimeTableDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDataType &dst);

/**
 * Datatype TimeTableDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDataElementsType
{
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> timeSlotId;
    SpineOptional<RecurrenceInformationElementsType> recurrenceInformation;
    SpineOptional<AbsoluteOrRecurringTimeElementsType> startTime;
    SpineOptional<AbsoluteOrRecurringTimeElementsType> endTime;

    TimeTableDataElementsType() = default;
};

/**
 * Convert a TimeTableDataElementsType to its JSON representation
 * @param src The TimeTableDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDataElementsType &dst);

/**
 * Datatype TimeTableListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableListDataType
{
    SpineOptional<std::vector<TimeTableDataType>> timeTableData;

    TimeTableListDataType() = default;
};

/**
 * Convert a TimeTableListDataType to its JSON representation
 * @param src The TimeTableListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableListDataType &dst);

/**
 * Datatype TimeTableListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableListDataSelectorsType
{
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<TimeSlotIdType> timeSlotId;

    TimeTableListDataSelectorsType() = default;
};

/**
 * Convert a TimeTableListDataSelectorsType to its JSON representation
 * @param src The TimeTableListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableListDataSelectorsType &dst);

/**
 * Datatype TimeTableConstraintsDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsDataType
{
    SpineOptional<uint32_t> timeTableId;
    SpineOptional<TimeSlotCountType> slotCountMin;
    SpineOptional<TimeSlotCountType> slotCountMax;
    SpineOptional<std::string> slotDurationMin;
    SpineOptional<std::string> slotDurationMax;
    SpineOptional<std::string> slotDurationStepSize;
    SpineOptional<std::string> slotShiftStepSize;
    SpineOptional<std::string> firstSlotBeginsAt;

    TimeTableConstraintsDataType() = default;
};

/**
 * Convert a TimeTableConstraintsDataType to its JSON representation
 * @param src The TimeTableConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsDataType &dst);

/**
 * Datatype TimeTableConstraintsDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsDataElementsType
{
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> slotCountMin;
    SpineOptional<ElementTagType> slotCountMax;
    SpineOptional<ElementTagType> slotDurationMin;
    SpineOptional<ElementTagType> slotDurationMax;
    SpineOptional<ElementTagType> slotDurationStepSize;
    SpineOptional<ElementTagType> slotShiftStepSize;
    SpineOptional<ElementTagType> firstSlotBeginsAt;

    TimeTableConstraintsDataElementsType() = default;
};

/**
 * Convert a TimeTableConstraintsDataElementsType to its JSON representation
 * @param src The TimeTableConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsDataElementsType &dst);

/**
 * Datatype TimeTableConstraintsListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsListDataType
{
    SpineOptional<std::vector<TimeTableConstraintsDataType>> timeTableConstraintsData;

    TimeTableConstraintsListDataType() = default;
};

/**
 * Convert a TimeTableConstraintsListDataType to its JSON representation
 * @param src The TimeTableConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsListDataType &dst);

/**
 * Datatype TimeTableConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableConstraintsListDataSelectorsType
{
    SpineOptional<TimeTableIdType> timeTableId;

    TimeTableConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a TimeTableConstraintsListDataSelectorsType to its JSON representation
 * @param src The TimeTableConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsListDataSelectorsType &dst);

/**
 * Datatype TimeTableDescriptionDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionDataType
{
    SpineOptional<uint32_t> timeTableId;
    SpineOptional<bool> timeSlotCountChangeable;
    SpineOptional<bool> timeSlotTimesChangeable;
    SpineOptional<TimeSlotTimeModeEnumType> timeSlotTimeMode;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    TimeTableDescriptionDataType() = default;
};

/**
 * Convert a TimeTableDescriptionDataType to its JSON representation
 * @param src The TimeTableDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionDataType &dst);

/**
 * Datatype TimeTableDescriptionDataElementsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionDataElementsType
{
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> timeSlotCountChangeable;
    SpineOptional<ElementTagType> timeSlotTimesChangeable;
    SpineOptional<ElementTagType> timeSlotTimeMode;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    TimeTableDescriptionDataElementsType() = default;
};

/**
 * Convert a TimeTableDescriptionDataElementsType to its JSON representation
 * @param src The TimeTableDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionDataElementsType &dst);

/**
 * Datatype TimeTableDescriptionListDataType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionListDataType
{
    SpineOptional<std::vector<TimeTableDescriptionDataType>> timeTableDescriptionData;

    TimeTableDescriptionListDataType() = default;
};

/**
 * Convert a TimeTableDescriptionListDataType to its JSON representation
 * @param src The TimeTableDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionListDataType &dst);

/**
 * Datatype TimeTableDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TimeTable.xsd
*/
struct TimeTableDescriptionListDataSelectorsType
{
    SpineOptional<TimeTableIdType> timeTableId;

    TimeTableDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TimeTableDescriptionListDataSelectorsType to its JSON representation
 * @param src The TimeTableDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeTableDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeTableDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeTableDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionListDataSelectorsType &dst);

/**
 * Datatype SensingDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<SensingStateEnumType> state;
    SpineOptional<ScaledNumberType> value;

    SensingDataType() = default;
};

/**
 * Convert a SensingDataType to its JSON representation
 * @param src The SensingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingDataType
 * @param src The JSON variant to convert
 * @param dst The SensingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingDataType &dst);

/**
 * Datatype SensingDataElementsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> state;
    SpineOptional<ScaledNumberElementsType> value;

    SensingDataElementsType() = default;
};

/**
 * Convert a SensingDataElementsType to its JSON representation
 * @param src The SensingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SensingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingDataElementsType &dst);

/**
 * Datatype SensingListDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingListDataType
{
    SpineOptional<std::vector<SensingDataType>> sensingData;

    SensingListDataType() = default;
};

/**
 * Convert a SensingListDataType to its JSON representation
 * @param src The SensingListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingListDataType
 * @param src The JSON variant to convert
 * @param dst The SensingListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingListDataType &dst);

/**
 * Datatype SensingListDataSelectorsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingListDataSelectorsType
{
    SpineOptional<TimestampIntervalType> timestampInterval;

    SensingListDataSelectorsType() = default;
};

/**
 * Convert a SensingListDataSelectorsType to its JSON representation
 * @param src The SensingListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SensingListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingListDataSelectorsType &dst);

/**
 * Datatype SensingDescriptionDataType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDescriptionDataType
{
    SpineOptional<SensingTypeEnumType> sensingType;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    SensingDescriptionDataType() = default;
};

/**
 * Convert a SensingDescriptionDataType to its JSON representation
 * @param src The SensingDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SensingDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingDescriptionDataType &dst);

/**
 * Datatype SensingDescriptionDataElementsType as defined in EEBus_SPINE_TS_Sensing.xsd
*/
struct SensingDescriptionDataElementsType
{
    SpineOptional<ElementTagType> sensingType;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    SensingDescriptionDataElementsType() = default;
};

/**
 * Convert a SensingDescriptionDataElementsType to its JSON representation
 * @param src The SensingDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SensingDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SensingDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SensingDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SensingDescriptionDataElementsType &dst);

/**
 * Datatype ResultDataType as defined in EEBus_SPINE_TS_Result.xsd
*/
struct ResultDataType
{
    SpineOptional<ErrorNumberType> errorNumber;
    SpineOptional<DescriptionType> description;

    ResultDataType() = default;
};

/**
 * Convert a ResultDataType to its JSON representation
 * @param src The ResultDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ResultDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ResultDataType
 * @param src The JSON variant to convert
 * @param dst The ResultDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ResultDataType &dst);

/**
 * Datatype ActuatorSwitchDataType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDataType
{
    SpineOptional<ActuatorSwitchFctEnumType> function;

    ActuatorSwitchDataType() = default;
};

/**
 * Convert a ActuatorSwitchDataType to its JSON representation
 * @param src The ActuatorSwitchDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDataType &dst);

/**
 * Datatype ActuatorSwitchDataElementsType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDataElementsType
{
    SpineOptional<ElementTagType> function;

    ActuatorSwitchDataElementsType() = default;
};

/**
 * Convert a ActuatorSwitchDataElementsType to its JSON representation
 * @param src The ActuatorSwitchDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDataElementsType &dst);

/**
 * Datatype ActuatorSwitchDescriptionDataType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDescriptionDataType
{
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    ActuatorSwitchDescriptionDataType() = default;
};

/**
 * Convert a ActuatorSwitchDescriptionDataType to its JSON representation
 * @param src The ActuatorSwitchDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDescriptionDataType &dst);

/**
 * Datatype ActuatorSwitchDescriptionDataElementsType as defined in EEBus_SPINE_TS_ActuatorSwitch.xsd
*/
struct ActuatorSwitchDescriptionDataElementsType
{
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    ActuatorSwitchDescriptionDataElementsType() = default;
};

/**
 * Convert a ActuatorSwitchDescriptionDataElementsType to its JSON representation
 * @param src The ActuatorSwitchDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorSwitchDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorSwitchDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorSwitchDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementAddNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAddNodeCallType
{
    SpineOptional<FeatureAddressType> nodeAddress;
    SpineOptional<NetworkManagementNativeSetupType> nativeSetup;
    SpineOptional<NetworkManagementProcessTimeoutType> timeout;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    NetworkManagementAddNodeCallType() = default;
};

/**
 * Convert a NetworkManagementAddNodeCallType to its JSON representation
 * @param src The NetworkManagementAddNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAddNodeCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementAddNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAddNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementAddNodeCallType &dst);

/**
 * Datatype NetworkManagementAddNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAddNodeCallElementsType
{
    SpineOptional<FeatureAddressElementsType> nodeAddress;
    SpineOptional<ElementTagType> nativeSetup;
    SpineOptional<ElementTagType> timeout;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    NetworkManagementAddNodeCallElementsType() = default;
};

/**
 * Convert a NetworkManagementAddNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementAddNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAddNodeCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementAddNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAddNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementAddNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementRemoveNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementRemoveNodeCallType
{
    SpineOptional<FeatureAddressType> nodeAddress;
    SpineOptional<NetworkManagementProcessTimeoutType> timeout;

    NetworkManagementRemoveNodeCallType() = default;
};

/**
 * Convert a NetworkManagementRemoveNodeCallType to its JSON representation
 * @param src The NetworkManagementRemoveNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementRemoveNodeCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementRemoveNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementRemoveNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementRemoveNodeCallType &dst);

/**
 * Datatype NetworkManagementRemoveNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementRemoveNodeCallElementsType
{
    SpineOptional<FeatureAddressElementsType> nodeAddress;
    SpineOptional<ElementTagType> timeout;

    NetworkManagementRemoveNodeCallElementsType() = default;
};

/**
 * Convert a NetworkManagementRemoveNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementRemoveNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementRemoveNodeCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementRemoveNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementRemoveNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementRemoveNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementModifyNodeCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementModifyNodeCallType
{
    SpineOptional<FeatureAddressType> nodeAddress;
    SpineOptional<NetworkManagementNativeSetupType> nativeSetup;
    SpineOptional<NetworkManagementProcessTimeoutType> timeout;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    NetworkManagementModifyNodeCallType() = default;
};

/**
 * Convert a NetworkManagementModifyNodeCallType to its JSON representation
 * @param src The NetworkManagementModifyNodeCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementModifyNodeCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementModifyNodeCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementModifyNodeCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementModifyNodeCallType &dst);

/**
 * Datatype NetworkManagementModifyNodeCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementModifyNodeCallElementsType
{
    SpineOptional<FeatureAddressElementsType> nodeAddress;
    SpineOptional<ElementTagType> nativeSetup;
    SpineOptional<ElementTagType> timeout;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    NetworkManagementModifyNodeCallElementsType() = default;
};

/**
 * Convert a NetworkManagementModifyNodeCallElementsType to its JSON representation
 * @param src The NetworkManagementModifyNodeCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementModifyNodeCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementModifyNodeCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementModifyNodeCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementModifyNodeCallElementsType &dst);

/**
 * Datatype NetworkManagementScanNetworkCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementScanNetworkCallType
{
    SpineOptional<NetworkManagementScanSetupType> scanSetup;
    SpineOptional<NetworkManagementProcessTimeoutType> timeout;

    NetworkManagementScanNetworkCallType() = default;
};

/**
 * Convert a NetworkManagementScanNetworkCallType to its JSON representation
 * @param src The NetworkManagementScanNetworkCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementScanNetworkCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementScanNetworkCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementScanNetworkCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementScanNetworkCallType &dst);

/**
 * Datatype NetworkManagementScanNetworkCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementScanNetworkCallElementsType
{
    SpineOptional<ElementTagType> scanSetup;
    SpineOptional<ElementTagType> timeout;

    NetworkManagementScanNetworkCallElementsType() = default;
};

/**
 * Convert a NetworkManagementScanNetworkCallElementsType to its JSON representation
 * @param src The NetworkManagementScanNetworkCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementScanNetworkCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementScanNetworkCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementScanNetworkCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementScanNetworkCallElementsType &dst);

/**
 * Datatype NetworkManagementDiscoverCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDiscoverCallType
{
    SpineOptional<FeatureAddressType> discoverAddress;

    NetworkManagementDiscoverCallType() = default;
};

/**
 * Convert a NetworkManagementDiscoverCallType to its JSON representation
 * @param src The NetworkManagementDiscoverCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDiscoverCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDiscoverCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDiscoverCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDiscoverCallType &dst);

/**
 * Datatype NetworkManagementDiscoverCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDiscoverCallElementsType
{
    SpineOptional<FeatureAddressElementsType> discoverAddress;

    NetworkManagementDiscoverCallElementsType() = default;
};

/**
 * Convert a NetworkManagementDiscoverCallElementsType to its JSON representation
 * @param src The NetworkManagementDiscoverCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDiscoverCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDiscoverCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDiscoverCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDiscoverCallElementsType &dst);

/**
 * Datatype NetworkManagementAbortCallType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAbortCallType
{

    NetworkManagementAbortCallType() = default;
};

/**
 * Convert a NetworkManagementAbortCallType to its JSON representation
 * @param src The NetworkManagementAbortCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAbortCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementAbortCallType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAbortCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementAbortCallType &dst);

/**
 * Datatype NetworkManagementAbortCallElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementAbortCallElementsType
{

    NetworkManagementAbortCallElementsType() = default;
};

/**
 * Convert a NetworkManagementAbortCallElementsType to its JSON representation
 * @param src The NetworkManagementAbortCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementAbortCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementAbortCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementAbortCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementAbortCallElementsType &dst);

/**
 * Datatype NetworkManagementProcessStateDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementProcessStateDataType
{
    SpineOptional<NetworkManagementProcessStateStateType> state;
    SpineOptional<DescriptionType> description;

    NetworkManagementProcessStateDataType() = default;
};

/**
 * Convert a NetworkManagementProcessStateDataType to its JSON representation
 * @param src The NetworkManagementProcessStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementProcessStateDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementProcessStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateDataType &dst);

/**
 * Datatype NetworkManagementProcessStateDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementProcessStateDataElementsType
{
    SpineOptional<ElementTagType> state;
    SpineOptional<ElementTagType> description;

    NetworkManagementProcessStateDataElementsType() = default;
};

/**
 * Convert a NetworkManagementProcessStateDataElementsType to its JSON representation
 * @param src The NetworkManagementProcessStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementProcessStateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementProcessStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementProcessStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateDataElementsType &dst);

/**
 * Datatype NetworkManagementJoiningModeDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementJoiningModeDataType
{
    SpineOptional<NetworkManagementSetupType> setup;

    NetworkManagementJoiningModeDataType() = default;
};

/**
 * Convert a NetworkManagementJoiningModeDataType to its JSON representation
 * @param src The NetworkManagementJoiningModeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementJoiningModeDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementJoiningModeDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementJoiningModeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementJoiningModeDataType &dst);

/**
 * Datatype NetworkManagementJoiningModeDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementJoiningModeDataElementsType
{
    SpineOptional<ElementTagType> setup;

    NetworkManagementJoiningModeDataElementsType() = default;
};

/**
 * Convert a NetworkManagementJoiningModeDataElementsType to its JSON representation
 * @param src The NetworkManagementJoiningModeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementJoiningModeDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementJoiningModeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementJoiningModeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementJoiningModeDataElementsType &dst);

/**
 * Datatype NetworkManagementReportCandidateDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementReportCandidateDataType
{
    SpineOptional<NetworkManagementCandidateSetupType> candidateSetup;
    SpineOptional<bool> setupUsableForAdd;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    NetworkManagementReportCandidateDataType() = default;
};

/**
 * Convert a NetworkManagementReportCandidateDataType to its JSON representation
 * @param src The NetworkManagementReportCandidateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementReportCandidateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementReportCandidateDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementReportCandidateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementReportCandidateDataType &dst);

/**
 * Datatype NetworkManagementReportCandidateDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementReportCandidateDataElementsType
{
    SpineOptional<ElementTagType> candidateSetup;
    SpineOptional<ElementTagType> setupUsableForAdd;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    NetworkManagementReportCandidateDataElementsType() = default;
};

/**
 * Convert a NetworkManagementReportCandidateDataElementsType to its JSON representation
 * @param src The NetworkManagementReportCandidateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementReportCandidateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementReportCandidateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementReportCandidateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementReportCandidateDataElementsType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionDataType
{
    SpineOptional<DeviceAddressType> deviceAddress;
    SpineOptional<DeviceTypeEnumType> deviceType;
    SpineOptional<FeatureAddressType> networkManagementResponsibleAddress;
    SpineOptional<NetworkManagementNativeSetupType> nativeSetup;
    SpineOptional<NetworkManagementTechnologyAddressType> technologyAddress;
    SpineOptional<NetworkManagementCommunicationsTechnologyInformationType> communicationsTechnologyInformation;
    SpineOptional<NetworkManagementFeatureSetType> networkFeatureSet;
    SpineOptional<NetworkManagementStateChangeType> lastStateChange;
    SpineOptional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    NetworkManagementDeviceDescriptionDataType() = default;
};

/**
 * Convert a NetworkManagementDeviceDescriptionDataType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionDataType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionDataElementsType
{
    SpineOptional<DeviceAddressElementsType> deviceAddress;
    SpineOptional<ElementTagType> deviceType;
    SpineOptional<ElementTagType> networkManagementResponsibleAddress;
    SpineOptional<ElementTagType> nativeSetup;
    SpineOptional<ElementTagType> technologyAddress;
    SpineOptional<ElementTagType> communicationsTechnologyInformation;
    SpineOptional<ElementTagType> networkFeatureSet;
    SpineOptional<ElementTagType> lastStateChange;
    SpineOptional<ElementTagType> minimumTrustLevel;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    NetworkManagementDeviceDescriptionDataElementsType() = default;
};

/**
 * Convert a NetworkManagementDeviceDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionListDataType
{
    SpineOptional<std::vector<NetworkManagementDeviceDescriptionDataType>> networkManagementDeviceDescriptionData;

    NetworkManagementDeviceDescriptionListDataType() = default;
};

/**
 * Convert a NetworkManagementDeviceDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementDeviceDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementDeviceDescriptionListDataSelectorsType
{
    SpineOptional<DeviceAddressType> deviceAddress;
    SpineOptional<DeviceTypeEnumType> deviceType;

    NetworkManagementDeviceDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a NetworkManagementDeviceDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementDeviceDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementDeviceDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementDeviceDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementDeviceDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionListDataSelectorsType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionDataType
{
    SpineOptional<EntityAddressType> entityAddress;
    SpineOptional<EntityTypeEnumType> entityType;
    SpineOptional<NetworkManagementStateChangeType> lastStateChange;
    SpineOptional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    NetworkManagementEntityDescriptionDataType() = default;
};

/**
 * Convert a NetworkManagementEntityDescriptionDataType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionDataType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionDataElementsType
{
    SpineOptional<EntityAddressElementsType> entityAddress;
    SpineOptional<ElementTagType> entityType;
    SpineOptional<ElementTagType> lastStateChange;
    SpineOptional<ElementTagType> minimumTrustLevel;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    NetworkManagementEntityDescriptionDataElementsType() = default;
};

/**
 * Convert a NetworkManagementEntityDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionListDataType
{
    SpineOptional<std::vector<NetworkManagementEntityDescriptionDataType>> networkManagementEntityDescriptionData;

    NetworkManagementEntityDescriptionListDataType() = default;
};

/**
 * Convert a NetworkManagementEntityDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementEntityDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementEntityDescriptionListDataSelectorsType
{
    SpineOptional<EntityAddressType> entityAddress;
    SpineOptional<EntityTypeEnumType> entityType;

    NetworkManagementEntityDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a NetworkManagementEntityDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementEntityDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementEntityDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementEntityDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementEntityDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionListDataSelectorsType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionDataType
{
    SpineOptional<FeatureAddressType> featureAddress;
    SpineOptional<FeatureTypeEnumType> featureType;
    SpineOptional<std::vector<FeatureSpecificUsageType>> specificUsage;
    SpineOptional<FeatureGroupType> featureGroup;
    SpineOptional<RoleType> role;
    SpineOptional<std::vector<FunctionPropertyType>> supportedFunction;
    SpineOptional<NetworkManagementStateChangeType> lastStateChange;
    SpineOptional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;
    SpineOptional<MaxResponseDelayType> maxResponseDelay;

    NetworkManagementFeatureDescriptionDataType() = default;
};

/**
 * Convert a NetworkManagementFeatureDescriptionDataType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionDataType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionDataElementsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionDataElementsType
{
    SpineOptional<FeatureAddressElementsType> featureAddress;
    SpineOptional<ElementTagType> featureType;
    SpineOptional<ElementTagType> specificUsage;
    SpineOptional<ElementTagType> featureGroup;
    SpineOptional<ElementTagType> role;
    SpineOptional<FunctionPropertyElementsType> supportedFunction;
    SpineOptional<ElementTagType> lastStateChange;
    SpineOptional<ElementTagType> minimumTrustLevel;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> maxResponseDelay;

    NetworkManagementFeatureDescriptionDataElementsType() = default;
};

/**
 * Convert a NetworkManagementFeatureDescriptionDataElementsType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionDataElementsType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionListDataType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionListDataType
{
    SpineOptional<std::vector<NetworkManagementFeatureDescriptionDataType>> networkManagementFeatureDescriptionData;

    NetworkManagementFeatureDescriptionListDataType() = default;
};

/**
 * Convert a NetworkManagementFeatureDescriptionListDataType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionListDataType &dst);

/**
 * Datatype NetworkManagementFeatureDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_NetworkManagement.xsd
*/
struct NetworkManagementFeatureDescriptionListDataSelectorsType
{
    SpineOptional<FeatureAddressType> featureAddress;
    SpineOptional<FeatureTypeEnumType> featureType;

    NetworkManagementFeatureDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a NetworkManagementFeatureDescriptionListDataSelectorsType to its JSON representation
 * @param src The NetworkManagementFeatureDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NetworkManagementFeatureDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NetworkManagementFeatureDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NetworkManagementFeatureDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDataType
{
    SpineOptional<ConditionIdType> conditionId;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<SupplyConditionEventTypeEnumType> eventType;
    SpineOptional<SupplyConditionOriginatorEnumType> originator;
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<ScaledNumberType> thresholdPercentage;
    SpineOptional<TimePeriodType> relevantPeriod;
    SpineOptional<DescriptionType> description;
    SpineOptional<GridConditionEnumType> gridCondition;

    SupplyConditionDataType() = default;
};

/**
 * Convert a SupplyConditionDataType to its JSON representation
 * @param src The SupplyConditionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDataType &dst);

/**
 * Datatype SupplyConditionDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDataElementsType
{
    SpineOptional<ElementTagType> conditionId;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> eventType;
    SpineOptional<ElementTagType> originator;
    SpineOptional<ElementTagType> thresholdId;
    SpineOptional<ScaledNumberElementsType> thresholdPercentage;
    SpineOptional<TimePeriodElementsType> relevantPeriod;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> gridCondition;

    SupplyConditionDataElementsType() = default;
};

/**
 * Convert a SupplyConditionDataElementsType to its JSON representation
 * @param src The SupplyConditionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDataElementsType &dst);

/**
 * Datatype SupplyConditionListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionListDataType
{
    SpineOptional<std::vector<SupplyConditionDataType>> supplyConditionData;

    SupplyConditionListDataType() = default;
};

/**
 * Convert a SupplyConditionListDataType to its JSON representation
 * @param src The SupplyConditionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionListDataType &dst);

/**
 * Datatype SupplyConditionListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionListDataSelectorsType
{
    SpineOptional<ConditionIdType> conditionId;
    SpineOptional<TimestampIntervalType> timestampInterval;
    SpineOptional<SupplyConditionEventTypeEnumType> eventType;
    SpineOptional<SupplyConditionOriginatorEnumType> originator;

    SupplyConditionListDataSelectorsType() = default;
};

/**
 * Convert a SupplyConditionListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionDescriptionDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionDataType
{
    SpineOptional<ConditionIdType> conditionId;
    SpineOptional<CommodityTypeEnumType> commodityType;
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    SupplyConditionDescriptionDataType() = default;
};

/**
 * Convert a SupplyConditionDescriptionDataType to its JSON representation
 * @param src The SupplyConditionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionDataType &dst);

/**
 * Datatype SupplyConditionDescriptionDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionDataElementsType
{
    SpineOptional<ElementTagType> conditionId;
    SpineOptional<ElementTagType> commodityType;
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    SupplyConditionDescriptionDataElementsType() = default;
};

/**
 * Convert a SupplyConditionDescriptionDataElementsType to its JSON representation
 * @param src The SupplyConditionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionDataElementsType &dst);

/**
 * Datatype SupplyConditionDescriptionListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionListDataType
{
    SpineOptional<std::vector<SupplyConditionDescriptionDataType>> supplyConditionDescriptionData;

    SupplyConditionDescriptionListDataType() = default;
};

/**
 * Convert a SupplyConditionDescriptionListDataType to its JSON representation
 * @param src The SupplyConditionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionListDataType &dst);

/**
 * Datatype SupplyConditionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionDescriptionListDataSelectorsType
{
    SpineOptional<ConditionIdType> conditionId;

    SupplyConditionDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a SupplyConditionDescriptionListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionListDataSelectorsType &dst);

/**
 * Datatype SupplyConditionThresholdRelationDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationDataType
{
    SpineOptional<ConditionIdType> conditionId;
    SpineOptional<std::vector<ThresholdIdType>> thresholdId;

    SupplyConditionThresholdRelationDataType() = default;
};

/**
 * Convert a SupplyConditionThresholdRelationDataType to its JSON representation
 * @param src The SupplyConditionThresholdRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationDataType &dst);

/**
 * Datatype SupplyConditionThresholdRelationDataElementsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationDataElementsType
{
    SpineOptional<ElementTagType> conditionId;
    SpineOptional<ElementTagType> thresholdId;

    SupplyConditionThresholdRelationDataElementsType() = default;
};

/**
 * Convert a SupplyConditionThresholdRelationDataElementsType to its JSON representation
 * @param src The SupplyConditionThresholdRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationDataElementsType &dst);

/**
 * Datatype SupplyConditionThresholdRelationListDataType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationListDataType
{
    SpineOptional<std::vector<SupplyConditionThresholdRelationDataType>> supplyConditionThresholdRelationData;

    SupplyConditionThresholdRelationListDataType() = default;
};

/**
 * Convert a SupplyConditionThresholdRelationListDataType to its JSON representation
 * @param src The SupplyConditionThresholdRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationListDataType &dst);

/**
 * Datatype SupplyConditionThresholdRelationListDataSelectorsType as defined in EEBus_SPINE_TS_SupplyCondition.xsd
*/
struct SupplyConditionThresholdRelationListDataSelectorsType
{
    SpineOptional<ConditionIdType> conditionId;
    SpineOptional<ThresholdIdType> thresholdId;

    SupplyConditionThresholdRelationListDataSelectorsType() = default;
};

/**
 * Convert a SupplyConditionThresholdRelationListDataSelectorsType to its JSON representation
 * @param src The SupplyConditionThresholdRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SupplyConditionThresholdRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SupplyConditionThresholdRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SupplyConditionThresholdRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationListDataSelectorsType &dst);

/**
 * Datatype AlarmDataType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmDataType
{
    SpineOptional<AlarmIdType> alarmId;
    SpineOptional<ThresholdIdType> thresholdId;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<AlarmTypeEnumType> alarmType;
    SpineOptional<ScaledNumberType> measuredValue;
    SpineOptional<TimePeriodType> evaluationPeriod;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    AlarmDataType() = default;
};

/**
 * Convert a AlarmDataType to its JSON representation
 * @param src The AlarmDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AlarmDataType
 * @param src The JSON variant to convert
 * @param dst The AlarmDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AlarmDataType &dst);

/**
 * Datatype AlarmDataElementsType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmDataElementsType
{
    SpineOptional<ElementTagType> alarmId;
    SpineOptional<ElementTagType> thresholdId;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> alarmType;
    SpineOptional<ScaledNumberElementsType> measuredValue;
    SpineOptional<TimePeriodElementsType> evaluationPeriod;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    AlarmDataElementsType() = default;
};

/**
 * Convert a AlarmDataElementsType to its JSON representation
 * @param src The AlarmDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AlarmDataElementsType
 * @param src The JSON variant to convert
 * @param dst The AlarmDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AlarmDataElementsType &dst);

/**
 * Datatype AlarmListDataType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmListDataType
{
    SpineOptional<std::vector<AlarmDataType>> alarmData;

    AlarmListDataType() = default;
};

/**
 * Convert a AlarmListDataType to its JSON representation
 * @param src The AlarmListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AlarmListDataType
 * @param src The JSON variant to convert
 * @param dst The AlarmListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AlarmListDataType &dst);

/**
 * Datatype AlarmListDataSelectorsType as defined in EEBus_SPINE_TS_Alarm.xsd
*/
struct AlarmListDataSelectorsType
{
    SpineOptional<AlarmIdType> alarmId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    AlarmListDataSelectorsType() = default;
};

/**
 * Convert a AlarmListDataSelectorsType to its JSON representation
 * @param src The AlarmListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const AlarmListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a AlarmListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The AlarmListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, AlarmListDataSelectorsType &dst);

/**
 * Datatype NodeManagementSpecificationVersionListType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSpecificationVersionListType
{
    SpineOptional<std::vector<SpecificationVersionType>> specificationVersion;

    NodeManagementSpecificationVersionListType() = default;
};

/**
 * Convert a NodeManagementSpecificationVersionListType to its JSON representation
 * @param src The NodeManagementSpecificationVersionListType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSpecificationVersionListType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSpecificationVersionListType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSpecificationVersionListType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSpecificationVersionListType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDeviceInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDeviceInformationType
{
    SpineOptional<NetworkManagementDeviceDescriptionDataType> description;

    NodeManagementDetailedDiscoveryDeviceInformationType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryDeviceInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDeviceInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDeviceInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDeviceInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDeviceInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryEntityInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryEntityInformationType
{
    SpineOptional<NetworkManagementEntityDescriptionDataType> description;

    NodeManagementDetailedDiscoveryEntityInformationType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryEntityInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryEntityInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryEntityInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryEntityInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryEntityInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryFeatureInformationType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryFeatureInformationType
{
    SpineOptional<NetworkManagementFeatureDescriptionDataType> description;

    NodeManagementDetailedDiscoveryFeatureInformationType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryFeatureInformationType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryFeatureInformationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryFeatureInformationType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryFeatureInformationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryFeatureInformationType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataType
{
    SpineOptional<NodeManagementSpecificationVersionListType> specificationVersionList;
    SpineOptional<NodeManagementDetailedDiscoveryDeviceInformationType> deviceInformation;
    SpineOptional<std::vector<NodeManagementDetailedDiscoveryEntityInformationType>> entityInformation;
    SpineOptional<std::vector<NodeManagementDetailedDiscoveryFeatureInformationType>> featureInformation;

    NodeManagementDetailedDiscoveryDataType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryDataType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataType &dst);

/**
 * Datatype SpecificationVersionDataElementsType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionDataElementsType
{

    SpecificationVersionDataElementsType() = default;
};

/**
 * Convert a SpecificationVersionDataElementsType to its JSON representation
 * @param src The SpecificationVersionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SpecificationVersionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SpecificationVersionDataElementsType &dst);

/**
 * Datatype NodeManagementSpecificationVersionListElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSpecificationVersionListElementsType
{
    SpineOptional<SpecificationVersionDataElementsType> specificationVersion;

    NodeManagementSpecificationVersionListElementsType() = default;
};

/**
 * Convert a NodeManagementSpecificationVersionListElementsType to its JSON representation
 * @param src The NodeManagementSpecificationVersionListElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSpecificationVersionListElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSpecificationVersionListElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSpecificationVersionListElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSpecificationVersionListElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDeviceInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDeviceInformationElementsType
{
    SpineOptional<NetworkManagementDeviceDescriptionDataElementsType> description;

    NodeManagementDetailedDiscoveryDeviceInformationElementsType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryDeviceInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDeviceInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDeviceInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDeviceInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDeviceInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryEntityInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryEntityInformationElementsType
{
    SpineOptional<NetworkManagementEntityDescriptionDataElementsType> description;

    NodeManagementDetailedDiscoveryEntityInformationElementsType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryEntityInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryEntityInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryEntityInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryEntityInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryEntityInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryFeatureInformationElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryFeatureInformationElementsType
{
    SpineOptional<NetworkManagementFeatureDescriptionDataElementsType> description;

    NodeManagementDetailedDiscoveryFeatureInformationElementsType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryFeatureInformationElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryFeatureInformationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryFeatureInformationElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryFeatureInformationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryFeatureInformationElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataElementsType
{
    SpineOptional<NodeManagementSpecificationVersionListElementsType> specificationVersionList;
    SpineOptional<NodeManagementDetailedDiscoveryDeviceInformationElementsType> deviceInformation;
    SpineOptional<NodeManagementDetailedDiscoveryEntityInformationElementsType> entityInformation;
    SpineOptional<NodeManagementDetailedDiscoveryFeatureInformationElementsType> featureInformation;

    NodeManagementDetailedDiscoveryDataElementsType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryDataElementsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataElementsType &dst);

/**
 * Datatype NodeManagementDetailedDiscoveryDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDetailedDiscoveryDataSelectorsType
{
    SpineOptional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceInformation;
    SpineOptional<NetworkManagementEntityDescriptionListDataSelectorsType> entityInformation;
    SpineOptional<NetworkManagementFeatureDescriptionListDataSelectorsType> featureInformation;

    NodeManagementDetailedDiscoveryDataSelectorsType() = default;
};

/**
 * Convert a NodeManagementDetailedDiscoveryDataSelectorsType to its JSON representation
 * @param src The NodeManagementDetailedDiscoveryDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDetailedDiscoveryDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDetailedDiscoveryDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDetailedDiscoveryDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataSelectorsType &dst);

/**
 * Datatype BindingManagementEntryDataType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryDataType
{
    SpineOptional<BindingIdType> bindingId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    BindingManagementEntryDataType() = default;
};

/**
 * Convert a BindingManagementEntryDataType to its JSON representation
 * @param src The BindingManagementEntryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementEntryDataType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryDataType &dst);

/**
 * Datatype NodeManagementBindingDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataType
{
    SpineOptional<std::vector<BindingManagementEntryDataType>> bindingEntry;

    NodeManagementBindingDataType() = default;
};

/**
 * Convert a NodeManagementBindingDataType to its JSON representation
 * @param src The NodeManagementBindingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataType &dst);

/**
 * Datatype BindingManagementEntryDataElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryDataElementsType
{
    SpineOptional<ElementTagType> bindingId;
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    BindingManagementEntryDataElementsType() = default;
};

/**
 * Convert a BindingManagementEntryDataElementsType to its JSON representation
 * @param src The BindingManagementEntryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementEntryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryDataElementsType &dst);

/**
 * Datatype NodeManagementBindingDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataElementsType
{
    SpineOptional<BindingManagementEntryDataElementsType> bindingEntry;

    NodeManagementBindingDataElementsType() = default;
};

/**
 * Convert a NodeManagementBindingDataElementsType to its JSON representation
 * @param src The NodeManagementBindingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataElementsType &dst);

/**
 * Datatype BindingManagementEntryListDataSelectorsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryListDataSelectorsType
{
    SpineOptional<BindingIdType> bindingId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;

    BindingManagementEntryListDataSelectorsType() = default;
};

/**
 * Convert a BindingManagementEntryListDataSelectorsType to its JSON representation
 * @param src The BindingManagementEntryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementEntryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryListDataSelectorsType &dst);

/**
 * Datatype NodeManagementBindingDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDataSelectorsType
{
    SpineOptional<BindingManagementEntryListDataSelectorsType> bindingEntry;

    NodeManagementBindingDataSelectorsType() = default;
};

/**
 * Convert a NodeManagementBindingDataSelectorsType to its JSON representation
 * @param src The NodeManagementBindingDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataSelectorsType &dst);

/**
 * Datatype BindingManagementRequestCallType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementRequestCallType
{
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;
    SpineOptional<FeatureTypeEnumType> serverFeatureType;

    BindingManagementRequestCallType() = default;
};

/**
 * Convert a BindingManagementRequestCallType to its JSON representation
 * @param src The BindingManagementRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementRequestCallType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementRequestCallType &dst);

/**
 * Datatype NodeManagementBindingRequestCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingRequestCallType
{
    SpineOptional<BindingManagementRequestCallType> bindingRequest;

    NodeManagementBindingRequestCallType() = default;
};

/**
 * Convert a NodeManagementBindingRequestCallType to its JSON representation
 * @param src The NodeManagementBindingRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingRequestCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingRequestCallType &dst);

/**
 * Datatype BindingManagementRequestCallElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementRequestCallElementsType
{
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;
    SpineOptional<ElementTagType> serverFeatureType;

    BindingManagementRequestCallElementsType() = default;
};

/**
 * Convert a BindingManagementRequestCallElementsType to its JSON representation
 * @param src The BindingManagementRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementRequestCallElementsType &dst);

/**
 * Datatype NodeManagementBindingRequestCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingRequestCallElementsType
{
    SpineOptional<BindingManagementRequestCallElementsType> bindingRequest;

    NodeManagementBindingRequestCallElementsType() = default;
};

/**
 * Convert a NodeManagementBindingRequestCallElementsType to its JSON representation
 * @param src The NodeManagementBindingRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingRequestCallElementsType &dst);

/**
 * Datatype BindingManagementDeleteCallType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementDeleteCallType
{
    SpineOptional<BindingIdType> bindingId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;

    BindingManagementDeleteCallType() = default;
};

/**
 * Convert a BindingManagementDeleteCallType to its JSON representation
 * @param src The BindingManagementDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementDeleteCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementDeleteCallType &dst);

/**
 * Datatype NodeManagementBindingDeleteCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDeleteCallType
{
    SpineOptional<BindingManagementDeleteCallType> bindingDelete;

    NodeManagementBindingDeleteCallType() = default;
};

/**
 * Convert a NodeManagementBindingDeleteCallType to its JSON representation
 * @param src The NodeManagementBindingDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDeleteCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDeleteCallType &dst);

/**
 * Datatype BindingManagementDeleteCallElementsType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementDeleteCallElementsType
{
    SpineOptional<ElementTagType> bindingId;
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;

    BindingManagementDeleteCallElementsType() = default;
};

/**
 * Convert a BindingManagementDeleteCallElementsType to its JSON representation
 * @param src The BindingManagementDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementDeleteCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementDeleteCallElementsType &dst);

/**
 * Datatype NodeManagementBindingDeleteCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementBindingDeleteCallElementsType
{
    SpineOptional<BindingManagementDeleteCallElementsType> bindingDelete;

    NodeManagementBindingDeleteCallElementsType() = default;
};

/**
 * Convert a NodeManagementBindingDeleteCallElementsType to its JSON representation
 * @param src The NodeManagementBindingDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementBindingDeleteCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementBindingDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementBindingDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDeleteCallElementsType &dst);

/**
 * Datatype SubscriptionManagementEntryDataType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryDataType
{
    SpineOptional<SubscriptionIdType> subscriptionId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    SubscriptionManagementEntryDataType() = default;
};

/**
 * Convert a SubscriptionManagementEntryDataType to its JSON representation
 * @param src The SubscriptionManagementEntryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryDataType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryDataType &dst);

/**
 * Datatype NodeManagementSubscriptionDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataType
{
    SpineOptional<std::vector<SubscriptionManagementEntryDataType>> subscriptionEntry;

    NodeManagementSubscriptionDataType() = default;
};

/**
 * Convert a NodeManagementSubscriptionDataType to its JSON representation
 * @param src The NodeManagementSubscriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataType &dst);

/**
 * Datatype SubscriptionManagementEntryDataElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryDataElementsType
{
    SpineOptional<ElementTagType> subscriptionId;
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    SubscriptionManagementEntryDataElementsType() = default;
};

/**
 * Convert a SubscriptionManagementEntryDataElementsType to its JSON representation
 * @param src The SubscriptionManagementEntryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryDataElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataElementsType
{
    SpineOptional<SubscriptionManagementEntryDataElementsType> subscriptionEntry;

    NodeManagementSubscriptionDataElementsType() = default;
};

/**
 * Convert a NodeManagementSubscriptionDataElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataElementsType &dst);

/**
 * Datatype SubscriptionManagementEntryListDataSelectorsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryListDataSelectorsType
{
    SpineOptional<SubscriptionIdType> subscriptionId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;

    SubscriptionManagementEntryListDataSelectorsType() = default;
};

/**
 * Convert a SubscriptionManagementEntryListDataSelectorsType to its JSON representation
 * @param src The SubscriptionManagementEntryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryListDataSelectorsType &dst);

/**
 * Datatype NodeManagementSubscriptionDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDataSelectorsType
{
    SpineOptional<SubscriptionManagementEntryListDataSelectorsType> subscriptionEntry;

    NodeManagementSubscriptionDataSelectorsType() = default;
};

/**
 * Convert a NodeManagementSubscriptionDataSelectorsType to its JSON representation
 * @param src The NodeManagementSubscriptionDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataSelectorsType &dst);

/**
 * Datatype SubscriptionManagementRequestCallType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementRequestCallType
{
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;
    SpineOptional<FeatureTypeEnumType> serverFeatureType;

    SubscriptionManagementRequestCallType() = default;
};

/**
 * Convert a SubscriptionManagementRequestCallType to its JSON representation
 * @param src The SubscriptionManagementRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementRequestCallType &dst);

/**
 * Datatype NodeManagementSubscriptionRequestCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionRequestCallType
{
    SpineOptional<SubscriptionManagementRequestCallType> subscriptionRequest;

    NodeManagementSubscriptionRequestCallType() = default;
};

/**
 * Convert a NodeManagementSubscriptionRequestCallType to its JSON representation
 * @param src The NodeManagementSubscriptionRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionRequestCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionRequestCallType &dst);

/**
 * Datatype SubscriptionManagementRequestCallElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementRequestCallElementsType
{
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;
    SpineOptional<ElementTagType> serverFeatureType;

    SubscriptionManagementRequestCallElementsType() = default;
};

/**
 * Convert a SubscriptionManagementRequestCallElementsType to its JSON representation
 * @param src The SubscriptionManagementRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementRequestCallElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionRequestCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionRequestCallElementsType
{
    SpineOptional<SubscriptionManagementRequestCallElementsType> subscriptionRequest;

    NodeManagementSubscriptionRequestCallElementsType() = default;
};

/**
 * Convert a NodeManagementSubscriptionRequestCallElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionRequestCallElementsType &dst);

/**
 * Datatype SubscriptionManagementDeleteCallType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementDeleteCallType
{
    SpineOptional<SubscriptionIdType> subscriptionId;
    SpineOptional<FeatureAddressType> clientAddress;
    SpineOptional<FeatureAddressType> serverAddress;

    SubscriptionManagementDeleteCallType() = default;
};

/**
 * Convert a SubscriptionManagementDeleteCallType to its JSON representation
 * @param src The SubscriptionManagementDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementDeleteCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementDeleteCallType &dst);

/**
 * Datatype NodeManagementSubscriptionDeleteCallType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDeleteCallType
{
    SpineOptional<SubscriptionManagementDeleteCallType> subscriptionDelete;

    NodeManagementSubscriptionDeleteCallType() = default;
};

/**
 * Convert a NodeManagementSubscriptionDeleteCallType to its JSON representation
 * @param src The NodeManagementSubscriptionDeleteCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDeleteCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDeleteCallType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDeleteCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDeleteCallType &dst);

/**
 * Datatype SubscriptionManagementDeleteCallElementsType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementDeleteCallElementsType
{
    SpineOptional<ElementTagType> subscriptionId;
    SpineOptional<FeatureAddressElementsType> clientAddress;
    SpineOptional<FeatureAddressElementsType> serverAddress;

    SubscriptionManagementDeleteCallElementsType() = default;
};

/**
 * Convert a SubscriptionManagementDeleteCallElementsType to its JSON representation
 * @param src The SubscriptionManagementDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementDeleteCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementDeleteCallElementsType &dst);

/**
 * Datatype NodeManagementSubscriptionDeleteCallElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementSubscriptionDeleteCallElementsType
{
    SpineOptional<SubscriptionManagementDeleteCallElementsType> subscriptionDelete;

    NodeManagementSubscriptionDeleteCallElementsType() = default;
};

/**
 * Convert a NodeManagementSubscriptionDeleteCallElementsType to its JSON representation
 * @param src The NodeManagementSubscriptionDeleteCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementSubscriptionDeleteCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementSubscriptionDeleteCallElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementSubscriptionDeleteCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDeleteCallElementsType &dst);

/**
 * Datatype NodeManagementDestinationDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationDataType
{
    SpineOptional<NetworkManagementDeviceDescriptionDataType> deviceDescription;

    NodeManagementDestinationDataType() = default;
};

/**
 * Convert a NodeManagementDestinationDataType to its JSON representation
 * @param src The NodeManagementDestinationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationDataType &dst);

/**
 * Datatype NodeManagementDestinationDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationDataElementsType
{
    SpineOptional<NetworkManagementDeviceDescriptionDataElementsType> deviceDescription;

    NodeManagementDestinationDataElementsType() = default;
};

/**
 * Convert a NodeManagementDestinationDataElementsType to its JSON representation
 * @param src The NodeManagementDestinationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationDataElementsType &dst);

/**
 * Datatype NodeManagementDestinationListDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationListDataType
{
    SpineOptional<std::vector<NodeManagementDestinationDataType>> nodeManagementDestinationData;

    NodeManagementDestinationListDataType() = default;
};

/**
 * Convert a NodeManagementDestinationListDataType to its JSON representation
 * @param src The NodeManagementDestinationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationListDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationListDataType &dst);

/**
 * Datatype NodeManagementDestinationListDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementDestinationListDataSelectorsType
{
    SpineOptional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceDescription;

    NodeManagementDestinationListDataSelectorsType() = default;
};

/**
 * Convert a NodeManagementDestinationListDataSelectorsType to its JSON representation
 * @param src The NodeManagementDestinationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementDestinationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementDestinationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementDestinationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationListDataSelectorsType &dst);

/**
 * Datatype UseCaseSupportType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportType
{
    SpineOptional<UseCaseNameType> useCaseName;
    SpineOptional<SpecificationVersionType> useCaseVersion;
    SpineOptional<bool> useCaseAvailable;
    SpineOptional<std::vector<UseCaseScenarioSupportType>> scenarioSupport;
    SpineOptional<std::string> useCaseDocumentSubRevision;

    UseCaseSupportType() = default;
};

/**
 * Convert a UseCaseSupportType to its JSON representation
 * @param src The UseCaseSupportType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseSupportType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseSupportType &dst);

/**
 * Datatype UseCaseInformationDataType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationDataType
{
    SpineOptional<FeatureAddressType> address;
    SpineOptional<UseCaseActorType> actor;
    SpineOptional<std::vector<UseCaseSupportType>> useCaseSupport;

    UseCaseInformationDataType() = default;
};

/**
 * Convert a UseCaseInformationDataType to its JSON representation
 * @param src The UseCaseInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseInformationDataType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseInformationDataType &dst);

/**
 * Datatype NodeManagementUseCaseDataType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataType
{
    SpineOptional<std::vector<UseCaseInformationDataType>> useCaseInformation;

    NodeManagementUseCaseDataType() = default;
};

/**
 * Convert a NodeManagementUseCaseDataType to its JSON representation
 * @param src The NodeManagementUseCaseDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataType &dst);

/**
 * Datatype UseCaseSupportElementsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportElementsType
{
    SpineOptional<ElementTagType> useCaseName;
    SpineOptional<ElementTagType> useCaseVersion;
    SpineOptional<ElementTagType> useCaseAvailable;
    SpineOptional<ElementTagType> scenarioSupport;
    SpineOptional<ElementTagType> useCaseDocumentSubRevision;

    UseCaseSupportElementsType() = default;
};

/**
 * Convert a UseCaseSupportElementsType to its JSON representation
 * @param src The UseCaseSupportElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseSupportElementsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseSupportElementsType &dst);

/**
 * Datatype UseCaseInformationDataElementsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationDataElementsType
{
    SpineOptional<FeatureAddressElementsType> address;
    SpineOptional<ElementTagType> actor;
    SpineOptional<UseCaseSupportElementsType> useCaseSupport;

    UseCaseInformationDataElementsType() = default;
};

/**
 * Convert a UseCaseInformationDataElementsType to its JSON representation
 * @param src The UseCaseInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseInformationDataElementsType &dst);

/**
 * Datatype NodeManagementUseCaseDataElementsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataElementsType
{
    SpineOptional<UseCaseInformationDataElementsType> useCaseInformation;

    NodeManagementUseCaseDataElementsType() = default;
};

/**
 * Convert a NodeManagementUseCaseDataElementsType to its JSON representation
 * @param src The NodeManagementUseCaseDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataElementsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataElementsType &dst);

/**
 * Datatype UseCaseSupportSelectorsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseSupportSelectorsType
{
    SpineOptional<UseCaseNameType> useCaseName;
    SpineOptional<SpecificationVersionType> useCaseVersion;
    SpineOptional<UseCaseScenarioSupportType> scenarioSupport;

    UseCaseSupportSelectorsType() = default;
};

/**
 * Convert a UseCaseSupportSelectorsType to its JSON representation
 * @param src The UseCaseSupportSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseSupportSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseSupportSelectorsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseSupportSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseSupportSelectorsType &dst);

/**
 * Datatype UseCaseInformationListDataSelectorsType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationListDataSelectorsType
{
    SpineOptional<FeatureAddressType> address;
    SpineOptional<UseCaseActorType> actor;
    SpineOptional<UseCaseSupportSelectorsType> useCaseSupport;

    UseCaseInformationListDataSelectorsType() = default;
};

/**
 * Convert a UseCaseInformationListDataSelectorsType to its JSON representation
 * @param src The UseCaseInformationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseInformationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseInformationListDataSelectorsType &dst);

/**
 * Datatype NodeManagementUseCaseDataSelectorsType as defined in EEBus_SPINE_TS_NodeManagement.xsd
*/
struct NodeManagementUseCaseDataSelectorsType
{
    SpineOptional<UseCaseInformationListDataSelectorsType> useCaseInformation;

    NodeManagementUseCaseDataSelectorsType() = default;
};

/**
 * Convert a NodeManagementUseCaseDataSelectorsType to its JSON representation
 * @param src The NodeManagementUseCaseDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const NodeManagementUseCaseDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a NodeManagementUseCaseDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The NodeManagementUseCaseDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataSelectorsType &dst);

/**
 * Datatype BindingManagementEntryListDataType as defined in EEBus_SPINE_TS_BindingManagement.xsd
*/
struct BindingManagementEntryListDataType
{
    SpineOptional<std::vector<BindingManagementEntryDataType>> bindingManagementEntryData;

    BindingManagementEntryListDataType() = default;
};

/**
 * Convert a BindingManagementEntryListDataType to its JSON representation
 * @param src The BindingManagementEntryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const BindingManagementEntryListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a BindingManagementEntryListDataType
 * @param src The JSON variant to convert
 * @param dst The BindingManagementEntryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryListDataType &dst);

/**
 * Datatype SubscriptionManagementEntryListDataType as defined in EEBus_SPINE_TS_SubscriptionManagement.xsd
*/
struct SubscriptionManagementEntryListDataType
{
    SpineOptional<std::vector<SubscriptionManagementEntryDataType>> subscriptionManagementEntryData;

    SubscriptionManagementEntryListDataType() = default;
};

/**
 * Convert a SubscriptionManagementEntryListDataType to its JSON representation
 * @param src The SubscriptionManagementEntryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SubscriptionManagementEntryListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SubscriptionManagementEntryListDataType
 * @param src The JSON variant to convert
 * @param dst The SubscriptionManagementEntryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryListDataType &dst);

/**
 * Datatype UseCaseInformationListDataType as defined in EEBus_SPINE_TS_UseCaseInformation.xsd
*/
struct UseCaseInformationListDataType
{
    SpineOptional<std::vector<UseCaseInformationDataType>> useCaseInformationData;

    UseCaseInformationListDataType() = default;
};

/**
 * Convert a UseCaseInformationListDataType to its JSON representation
 * @param src The UseCaseInformationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const UseCaseInformationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a UseCaseInformationListDataType
 * @param src The JSON variant to convert
 * @param dst The UseCaseInformationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, UseCaseInformationListDataType &dst);

/**
 * Datatype SpecificationVersionListDataType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionListDataType
{
    SpineOptional<std::vector<SpecificationVersionType>> specificationVersionData;

    SpecificationVersionListDataType() = default;
};

/**
 * Convert a SpecificationVersionListDataType to its JSON representation
 * @param src The SpecificationVersionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SpecificationVersionListDataType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SpecificationVersionListDataType &dst);

/**
 * Datatype SpecificationVersionListDataSelectorsType as defined in EEBus_SPINE_TS_Version.xsd
*/
struct SpecificationVersionListDataSelectorsType
{

    SpecificationVersionListDataSelectorsType() = default;
};

/**
 * Convert a SpecificationVersionListDataSelectorsType to its JSON representation
 * @param src The SpecificationVersionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SpecificationVersionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SpecificationVersionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SpecificationVersionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SpecificationVersionListDataSelectorsType &dst);

/**
 * Datatype TaskManagementDirectControlRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementDirectControlRelatedType
{

    TaskManagementDirectControlRelatedType() = default;
};

/**
 * Convert a TaskManagementDirectControlRelatedType to its JSON representation
 * @param src The TaskManagementDirectControlRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementDirectControlRelatedType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementDirectControlRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementDirectControlRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementDirectControlRelatedType &dst);

/**
 * Datatype TaskManagementDirectControlRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementDirectControlRelatedElementsType
{

    TaskManagementDirectControlRelatedElementsType() = default;
};

/**
 * Convert a TaskManagementDirectControlRelatedElementsType to its JSON representation
 * @param src The TaskManagementDirectControlRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementDirectControlRelatedElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementDirectControlRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementDirectControlRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementDirectControlRelatedElementsType &dst);

/**
 * Datatype TaskManagementHvacRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementHvacRelatedType
{
    SpineOptional<HvacOverrunIdType> overrunId;

    TaskManagementHvacRelatedType() = default;
};

/**
 * Convert a TaskManagementHvacRelatedType to its JSON representation
 * @param src The TaskManagementHvacRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementHvacRelatedType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementHvacRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementHvacRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementHvacRelatedType &dst);

/**
 * Datatype TaskManagementHvacRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementHvacRelatedElementsType
{
    SpineOptional<ElementTagType> overrunId;

    TaskManagementHvacRelatedElementsType() = default;
};

/**
 * Convert a TaskManagementHvacRelatedElementsType to its JSON representation
 * @param src The TaskManagementHvacRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementHvacRelatedElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementHvacRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementHvacRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementHvacRelatedElementsType &dst);

/**
 * Datatype TaskManagementLoadControlReleatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementLoadControlReleatedType
{
    SpineOptional<LoadControlEventIdType> eventId;

    TaskManagementLoadControlReleatedType() = default;
};

/**
 * Convert a TaskManagementLoadControlReleatedType to its JSON representation
 * @param src The TaskManagementLoadControlReleatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementLoadControlReleatedType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementLoadControlReleatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementLoadControlReleatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementLoadControlReleatedType &dst);

/**
 * Datatype TaskManagementLoadControlReleatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementLoadControlReleatedElementsType
{
    SpineOptional<ElementTagType> eventId;

    TaskManagementLoadControlReleatedElementsType() = default;
};

/**
 * Convert a TaskManagementLoadControlReleatedElementsType to its JSON representation
 * @param src The TaskManagementLoadControlReleatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementLoadControlReleatedElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementLoadControlReleatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementLoadControlReleatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementLoadControlReleatedElementsType &dst);

/**
 * Datatype TaskManagementPowerSequencesRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementPowerSequencesRelatedType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    TaskManagementPowerSequencesRelatedType() = default;
};

/**
 * Convert a TaskManagementPowerSequencesRelatedType to its JSON representation
 * @param src The TaskManagementPowerSequencesRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementPowerSequencesRelatedType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementPowerSequencesRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementPowerSequencesRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementPowerSequencesRelatedType &dst);

/**
 * Datatype TaskManagementPowerSequencesRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementPowerSequencesRelatedElementsType
{
    SpineOptional<ElementTagType> sequenceId;

    TaskManagementPowerSequencesRelatedElementsType() = default;
};

/**
 * Convert a TaskManagementPowerSequencesRelatedElementsType to its JSON representation
 * @param src The TaskManagementPowerSequencesRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementPowerSequencesRelatedElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementPowerSequencesRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementPowerSequencesRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementPowerSequencesRelatedElementsType &dst);

/**
 * Datatype TaskManagementSmartEnergyManagementPsRelatedType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementSmartEnergyManagementPsRelatedType
{
    SpineOptional<PowerSequenceIdType> sequenceId;

    TaskManagementSmartEnergyManagementPsRelatedType() = default;
};

/**
 * Convert a TaskManagementSmartEnergyManagementPsRelatedType to its JSON representation
 * @param src The TaskManagementSmartEnergyManagementPsRelatedType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementSmartEnergyManagementPsRelatedType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementSmartEnergyManagementPsRelatedType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementSmartEnergyManagementPsRelatedType &dst);

/**
 * Datatype TaskManagementSmartEnergyManagementPsRelatedElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementSmartEnergyManagementPsRelatedElementsType
{
    SpineOptional<ElementTagType> sequenceId;

    TaskManagementSmartEnergyManagementPsRelatedElementsType() = default;
};

/**
 * Convert a TaskManagementSmartEnergyManagementPsRelatedElementsType to its JSON representation
 * @param src The TaskManagementSmartEnergyManagementPsRelatedElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementSmartEnergyManagementPsRelatedElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementSmartEnergyManagementPsRelatedElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementSmartEnergyManagementPsRelatedElementsType &dst);

/**
 * Datatype TaskManagementJobDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDataType
{
    SpineOptional<TaskManagementJobIdType> jobId;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<TaskManagementJobStateType> jobState;
    SpineOptional<std::string> elapsedTime;
    SpineOptional<std::string> remainingTime;

    TaskManagementJobDataType() = default;
};

/**
 * Convert a TaskManagementJobDataType to its JSON representation
 * @param src The TaskManagementJobDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDataType &dst);

/**
 * Datatype TaskManagementJobDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDataElementsType
{
    SpineOptional<ElementTagType> jobId;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> jobState;
    SpineOptional<ElementTagType> elapsedTime;
    SpineOptional<ElementTagType> remainingTime;

    TaskManagementJobDataElementsType() = default;
};

/**
 * Convert a TaskManagementJobDataElementsType to its JSON representation
 * @param src The TaskManagementJobDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDataElementsType &dst);

/**
 * Datatype TaskManagementJobListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobListDataType
{
    SpineOptional<std::vector<TaskManagementJobDataType>> taskManagementJobData;

    TaskManagementJobListDataType() = default;
};

/**
 * Convert a TaskManagementJobListDataType to its JSON representation
 * @param src The TaskManagementJobListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobListDataType &dst);

/**
 * Datatype TaskManagementJobListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobListDataSelectorsType
{
    SpineOptional<TaskManagementJobIdType> jobId;
    SpineOptional<TaskManagementJobStateType> jobState;

    TaskManagementJobListDataSelectorsType() = default;
};

/**
 * Convert a TaskManagementJobListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobListDataSelectorsType &dst);

/**
 * Datatype TaskManagementJobRelationDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationDataType
{
    SpineOptional<TaskManagementJobIdType> jobId;
    SpineOptional<TaskManagementDirectControlRelatedType> directControlRelated;
    SpineOptional<TaskManagementHvacRelatedType> hvacRelated;
    SpineOptional<TaskManagementLoadControlReleatedType> loadControlReleated;
    SpineOptional<TaskManagementPowerSequencesRelatedType> powerSequencesRelated;
    SpineOptional<TaskManagementSmartEnergyManagementPsRelatedType> smartEnergyManagementPsRelated;

    TaskManagementJobRelationDataType() = default;
};

/**
 * Convert a TaskManagementJobRelationDataType to its JSON representation
 * @param src The TaskManagementJobRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationDataType &dst);

/**
 * Datatype TaskManagementJobRelationDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationDataElementsType
{
    SpineOptional<ElementTagType> jobId;
    SpineOptional<TaskManagementDirectControlRelatedElementsType> directControlRelated;
    SpineOptional<TaskManagementHvacRelatedElementsType> hvacRelated;
    SpineOptional<TaskManagementLoadControlReleatedElementsType> loadControlReleated;
    SpineOptional<TaskManagementPowerSequencesRelatedElementsType> powerSequencesRelated;
    SpineOptional<TaskManagementSmartEnergyManagementPsRelatedElementsType> smartEnergyManagementPsRelated;

    TaskManagementJobRelationDataElementsType() = default;
};

/**
 * Convert a TaskManagementJobRelationDataElementsType to its JSON representation
 * @param src The TaskManagementJobRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationDataElementsType &dst);

/**
 * Datatype TaskManagementJobRelationListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationListDataType
{
    SpineOptional<std::vector<TaskManagementJobRelationDataType>> taskManagementJobRelationData;

    TaskManagementJobRelationListDataType() = default;
};

/**
 * Convert a TaskManagementJobRelationListDataType to its JSON representation
 * @param src The TaskManagementJobRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationListDataType &dst);

/**
 * Datatype TaskManagementJobRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobRelationListDataSelectorsType
{
    SpineOptional<TaskManagementJobIdType> jobId;

    TaskManagementJobRelationListDataSelectorsType() = default;
};

/**
 * Convert a TaskManagementJobRelationListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationListDataSelectorsType &dst);

/**
 * Datatype TaskManagementJobDescriptionDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionDataType
{
    SpineOptional<TaskManagementJobIdType> jobId;
    SpineOptional<TaskManagementJobSourceEnumType> jobSource;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    TaskManagementJobDescriptionDataType() = default;
};

/**
 * Convert a TaskManagementJobDescriptionDataType to its JSON representation
 * @param src The TaskManagementJobDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionDataType &dst);

/**
 * Datatype TaskManagementJobDescriptionDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionDataElementsType
{
    SpineOptional<ElementTagType> jobId;
    SpineOptional<ElementTagType> jobSource;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    TaskManagementJobDescriptionDataElementsType() = default;
};

/**
 * Convert a TaskManagementJobDescriptionDataElementsType to its JSON representation
 * @param src The TaskManagementJobDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionDataElementsType &dst);

/**
 * Datatype TaskManagementJobDescriptionListDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionListDataType
{
    SpineOptional<std::vector<TaskManagementJobDescriptionDataType>> taskManagementJobDescriptionData;

    TaskManagementJobDescriptionListDataType() = default;
};

/**
 * Convert a TaskManagementJobDescriptionListDataType to its JSON representation
 * @param src The TaskManagementJobDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionListDataType &dst);

/**
 * Datatype TaskManagementJobDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementJobDescriptionListDataSelectorsType
{
    SpineOptional<TaskManagementJobIdType> jobId;
    SpineOptional<TaskManagementJobSourceEnumType> jobSource;

    TaskManagementJobDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TaskManagementJobDescriptionListDataSelectorsType to its JSON representation
 * @param src The TaskManagementJobDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementJobDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementJobDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementJobDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionListDataSelectorsType &dst);

/**
 * Datatype TaskManagementOverviewDataType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementOverviewDataType
{
    SpineOptional<bool> remoteControllable;
    SpineOptional<bool> jobsActive;

    TaskManagementOverviewDataType() = default;
};

/**
 * Convert a TaskManagementOverviewDataType to its JSON representation
 * @param src The TaskManagementOverviewDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementOverviewDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementOverviewDataType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementOverviewDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementOverviewDataType &dst);

/**
 * Datatype TaskManagementOverviewDataElementsType as defined in EEBus_SPINE_TS_TaskManagement.xsd
*/
struct TaskManagementOverviewDataElementsType
{
    SpineOptional<ElementTagType> remoteControllable;
    SpineOptional<ElementTagType> jobsActive;

    TaskManagementOverviewDataElementsType() = default;
};

/**
 * Convert a TaskManagementOverviewDataElementsType to its JSON representation
 * @param src The TaskManagementOverviewDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TaskManagementOverviewDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TaskManagementOverviewDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TaskManagementOverviewDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TaskManagementOverviewDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDataType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<HvacOperationModeIdType> currentOperationModeId;
    SpineOptional<bool> isOperationModeIdChangeable;
    SpineOptional<SetpointIdType> currentSetpointId;
    SpineOptional<bool> isSetpointIdChangeable;
    SpineOptional<bool> isOverrunActive;

    HvacSystemFunctionDataType() = default;
};

/**
 * Convert a HvacSystemFunctionDataType to its JSON representation
 * @param src The HvacSystemFunctionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDataType &dst);

/**
 * Datatype HvacSystemFunctionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDataElementsType
{
    SpineOptional<ElementTagType> systemFunctionId;
    SpineOptional<ElementTagType> currentOperationModeId;
    SpineOptional<ElementTagType> isOperationModeIdChangeable;
    SpineOptional<ElementTagType> currentSetpointId;
    SpineOptional<ElementTagType> isSetpointIdChangeable;
    SpineOptional<ElementTagType> isOverrunActive;

    HvacSystemFunctionDataElementsType() = default;
};

/**
 * Convert a HvacSystemFunctionDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionListDataType
{
    SpineOptional<std::vector<HvacSystemFunctionDataType>> hvacSystemFunctionData;

    HvacSystemFunctionListDataType() = default;
};

/**
 * Convert a HvacSystemFunctionListDataType to its JSON representation
 * @param src The HvacSystemFunctionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionListDataType &dst);

/**
 * Datatype HvacSystemFunctionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionListDataSelectorsType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;

    HvacSystemFunctionListDataSelectorsType() = default;
};

/**
 * Convert a HvacSystemFunctionListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationDataType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<std::vector<HvacOperationModeIdType>> operationModeId;

    HvacSystemFunctionOperationModeRelationDataType() = default;
};

/**
 * Convert a HvacSystemFunctionOperationModeRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationDataElementsType
{
    SpineOptional<ElementTagType> systemFunctionId;
    SpineOptional<ElementTagType> operationModeId;

    HvacSystemFunctionOperationModeRelationDataElementsType() = default;
};

/**
 * Convert a HvacSystemFunctionOperationModeRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationListDataType
{
    SpineOptional<std::vector<HvacSystemFunctionOperationModeRelationDataType>> hvacSystemFunctionOperationModeRelationData;

    HvacSystemFunctionOperationModeRelationListDataType() = default;
};

/**
 * Convert a HvacSystemFunctionOperationModeRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionOperationModeRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionOperationModeRelationListDataSelectorsType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;

    HvacSystemFunctionOperationModeRelationListDataSelectorsType() = default;
};

/**
 * Convert a HvacSystemFunctionOperationModeRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionOperationModeRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionOperationModeRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionOperationModeRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationDataType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<HvacOperationModeIdType> operationModeId;
    SpineOptional<std::vector<SetpointIdType>> setpointId;

    HvacSystemFunctionSetpointRelationDataType() = default;
};

/**
 * Convert a HvacSystemFunctionSetpointRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationDataElementsType
{
    SpineOptional<ElementTagType> systemFunctionId;
    SpineOptional<ElementTagType> operationModeId;
    SpineOptional<ElementTagType> setpointId;

    HvacSystemFunctionSetpointRelationDataElementsType() = default;
};

/**
 * Convert a HvacSystemFunctionSetpointRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationListDataType
{
    SpineOptional<std::vector<HvacSystemFunctionSetpointRelationDataType>> hvacSystemFunctionSetpointRelationData;

    HvacSystemFunctionSetpointRelationListDataType() = default;
};

/**
 * Convert a HvacSystemFunctionSetpointRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionSetpointRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionSetpointRelationListDataSelectorsType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<HvacOperationModeIdType> operationModeId;

    HvacSystemFunctionSetpointRelationListDataSelectorsType() = default;
};

/**
 * Convert a HvacSystemFunctionSetpointRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionSetpointRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionSetpointRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionSetpointRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationDataType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<std::vector<PowerSequenceIdType>> sequenceId;

    HvacSystemFunctionPowerSequenceRelationDataType() = default;
};

/**
 * Convert a HvacSystemFunctionPowerSequenceRelationDataType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationDataType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationDataElementsType
{
    SpineOptional<ElementTagType> systemFunctionId;
    SpineOptional<ElementTagType> sequenceId;

    HvacSystemFunctionPowerSequenceRelationDataElementsType() = default;
};

/**
 * Convert a HvacSystemFunctionPowerSequenceRelationDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationListDataType
{
    SpineOptional<std::vector<HvacSystemFunctionPowerSequenceRelationDataType>> hvacSystemFunctionPowerSequenceRelationData;

    HvacSystemFunctionPowerSequenceRelationListDataType() = default;
};

/**
 * Convert a HvacSystemFunctionPowerSequenceRelationListDataType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationListDataType &dst);

/**
 * Datatype HvacSystemFunctionPowerSequenceRelationListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionPowerSequenceRelationListDataSelectorsType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;

    HvacSystemFunctionPowerSequenceRelationListDataSelectorsType() = default;
};

/**
 * Convert a HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionPowerSequenceRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionPowerSequenceRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionDataType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;
    SpineOptional<HvacSystemFunctionTypeEnumType> systemFunctionType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    HvacSystemFunctionDescriptionDataType() = default;
};

/**
 * Convert a HvacSystemFunctionDescriptionDataType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionDataType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionDataElementsType
{
    SpineOptional<ElementTagType> systemFunctionId;
    SpineOptional<ElementTagType> systemFunctionType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    HvacSystemFunctionDescriptionDataElementsType() = default;
};

/**
 * Convert a HvacSystemFunctionDescriptionDataElementsType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionDataElementsType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionListDataType
{
    SpineOptional<std::vector<HvacSystemFunctionDescriptionDataType>> hvacSystemFunctionDescriptionData;

    HvacSystemFunctionDescriptionListDataType() = default;
};

/**
 * Convert a HvacSystemFunctionDescriptionListDataType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionListDataType &dst);

/**
 * Datatype HvacSystemFunctionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacSystemFunctionDescriptionListDataSelectorsType
{
    SpineOptional<HvacSystemFunctionIdType> systemFunctionId;

    HvacSystemFunctionDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a HvacSystemFunctionDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacSystemFunctionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacSystemFunctionDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacSystemFunctionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacSystemFunctionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionListDataSelectorsType &dst);

/**
 * Datatype HvacOperationModeDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionDataType
{
    SpineOptional<HvacOperationModeIdType> operationModeId;
    SpineOptional<HvacOperationModeTypeEnumType> operationModeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    HvacOperationModeDescriptionDataType() = default;
};

/**
 * Convert a HvacOperationModeDescriptionDataType to its JSON representation
 * @param src The HvacOperationModeDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionDataType &dst);

/**
 * Datatype HvacOperationModeDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionDataElementsType
{
    SpineOptional<ElementTagType> operationModeId;
    SpineOptional<ElementTagType> operationModeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    HvacOperationModeDescriptionDataElementsType() = default;
};

/**
 * Convert a HvacOperationModeDescriptionDataElementsType to its JSON representation
 * @param src The HvacOperationModeDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionDataElementsType &dst);

/**
 * Datatype HvacOperationModeDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionListDataType
{
    SpineOptional<std::vector<HvacOperationModeDescriptionDataType>> hvacOperationModeDescriptionData;

    HvacOperationModeDescriptionListDataType() = default;
};

/**
 * Convert a HvacOperationModeDescriptionListDataType to its JSON representation
 * @param src The HvacOperationModeDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionListDataType &dst);

/**
 * Datatype HvacOperationModeDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOperationModeDescriptionListDataSelectorsType
{
    SpineOptional<HvacOperationModeIdType> operationModeId;

    HvacOperationModeDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a HvacOperationModeDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacOperationModeDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOperationModeDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOperationModeDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOperationModeDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionListDataSelectorsType &dst);

/**
 * Datatype HvacOverrunDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDataType
{
    SpineOptional<HvacOverrunIdType> overrunId;
    SpineOptional<HvacOverrunStatusEnumType> overrunStatus;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<bool> isOverrunStatusChangeable;

    HvacOverrunDataType() = default;
};

/**
 * Convert a HvacOverrunDataType to its JSON representation
 * @param src The HvacOverrunDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDataType &dst);

/**
 * Datatype HvacOverrunDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDataElementsType
{
    SpineOptional<ElementTagType> overrunId;
    SpineOptional<ElementTagType> overrunStatus;
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> isOverrunStatusChangeable;

    HvacOverrunDataElementsType() = default;
};

/**
 * Convert a HvacOverrunDataElementsType to its JSON representation
 * @param src The HvacOverrunDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDataElementsType &dst);

/**
 * Datatype HvacOverrunListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunListDataType
{
    SpineOptional<std::vector<HvacOverrunDataType>> hvacOverrunData;

    HvacOverrunListDataType() = default;
};

/**
 * Convert a HvacOverrunListDataType to its JSON representation
 * @param src The HvacOverrunListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunListDataType &dst);

/**
 * Datatype HvacOverrunListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunListDataSelectorsType
{
    SpineOptional<HvacOverrunIdType> overrunId;

    HvacOverrunListDataSelectorsType() = default;
};

/**
 * Convert a HvacOverrunListDataSelectorsType to its JSON representation
 * @param src The HvacOverrunListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunListDataSelectorsType &dst);

/**
 * Datatype HvacOverrunDescriptionDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionDataType
{
    SpineOptional<HvacOverrunIdType> overrunId;
    SpineOptional<HvacOverrunTypeEnumType> overrunType;
    SpineOptional<std::vector<HvacSystemFunctionIdType>> affectedSystemFunctionId;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    HvacOverrunDescriptionDataType() = default;
};

/**
 * Convert a HvacOverrunDescriptionDataType to its JSON representation
 * @param src The HvacOverrunDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionDataType &dst);

/**
 * Datatype HvacOverrunDescriptionDataElementsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionDataElementsType
{
    SpineOptional<ElementTagType> overrunId;
    SpineOptional<ElementTagType> overrunType;
    SpineOptional<ElementTagType> affectedSystemFunctionId;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    HvacOverrunDescriptionDataElementsType() = default;
};

/**
 * Convert a HvacOverrunDescriptionDataElementsType to its JSON representation
 * @param src The HvacOverrunDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionDataElementsType &dst);

/**
 * Datatype HvacOverrunDescriptionListDataType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionListDataType
{
    SpineOptional<std::vector<HvacOverrunDescriptionDataType>> hvacOverrunDescriptionData;

    HvacOverrunDescriptionListDataType() = default;
};

/**
 * Convert a HvacOverrunDescriptionListDataType to its JSON representation
 * @param src The HvacOverrunDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionListDataType &dst);

/**
 * Datatype HvacOverrunDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_HVAC.xsd
*/
struct HvacOverrunDescriptionListDataSelectorsType
{
    SpineOptional<HvacOverrunIdType> overrunId;

    HvacOverrunDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a HvacOverrunDescriptionListDataSelectorsType to its JSON representation
 * @param src The HvacOverrunDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HvacOverrunDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HvacOverrunDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The HvacOverrunDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionListDataSelectorsType &dst);

/**
 * Datatype LoadControlNodeDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlNodeDataType
{
    SpineOptional<bool> isNodeRemoteControllable;

    LoadControlNodeDataType() = default;
};

/**
 * Convert a LoadControlNodeDataType to its JSON representation
 * @param src The LoadControlNodeDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlNodeDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlNodeDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlNodeDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlNodeDataType &dst);

/**
 * Datatype LoadControlNodeDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlNodeDataElementsType
{
    SpineOptional<ElementTagType> isNodeRemoteControllable;

    LoadControlNodeDataElementsType() = default;
};

/**
 * Convert a LoadControlNodeDataElementsType to its JSON representation
 * @param src The LoadControlNodeDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlNodeDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlNodeDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlNodeDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlNodeDataElementsType &dst);

/**
 * Datatype LoadControlEventDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<LoadControlEventIdType> eventId;
    SpineOptional<LoadControlEventActionEnumType> eventActionConsume;
    SpineOptional<LoadControlEventActionEnumType> eventActionProduce;
    SpineOptional<TimePeriodType> timePeriod;

    LoadControlEventDataType() = default;
};

/**
 * Convert a LoadControlEventDataType to its JSON representation
 * @param src The LoadControlEventDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlEventDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventDataType &dst);

/**
 * Datatype LoadControlEventDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> eventId;
    SpineOptional<ElementTagType> eventActionConsume;
    SpineOptional<ElementTagType> eventActionProduce;
    SpineOptional<TimePeriodElementsType> timePeriod;

    LoadControlEventDataElementsType() = default;
};

/**
 * Convert a LoadControlEventDataElementsType to its JSON representation
 * @param src The LoadControlEventDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlEventDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventDataElementsType &dst);

/**
 * Datatype LoadControlEventListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventListDataType
{
    SpineOptional<std::vector<LoadControlEventDataType>> loadControlEventData;

    LoadControlEventListDataType() = default;
};

/**
 * Convert a LoadControlEventListDataType to its JSON representation
 * @param src The LoadControlEventListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlEventListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventListDataType &dst);

/**
 * Datatype LoadControlEventListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlEventListDataSelectorsType
{
    SpineOptional<TimestampIntervalType> timestampInterval;
    SpineOptional<LoadControlEventIdType> eventId;

    LoadControlEventListDataSelectorsType() = default;
};

/**
 * Convert a LoadControlEventListDataSelectorsType to its JSON representation
 * @param src The LoadControlEventListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlEventListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlEventListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlEventListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlEventListDataSelectorsType &dst);

/**
 * Datatype LoadControlStateDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<LoadControlEventIdType> eventId;
    SpineOptional<LoadControlEventStateEnumType> eventStateConsume;
    SpineOptional<LoadControlEventActionEnumType> appliedEventActionConsume;
    SpineOptional<LoadControlEventStateEnumType> eventStateProduce;
    SpineOptional<LoadControlEventActionEnumType> appliedEventActionProduce;

    LoadControlStateDataType() = default;
};

/**
 * Convert a LoadControlStateDataType to its JSON representation
 * @param src The LoadControlStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlStateDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlStateDataType &dst);

/**
 * Datatype LoadControlStateDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> eventId;
    SpineOptional<ElementTagType> eventStateConsume;
    SpineOptional<ElementTagType> appliedEventActionConsume;
    SpineOptional<ElementTagType> eventStateProduce;
    SpineOptional<ElementTagType> appliedEventActionProduce;

    LoadControlStateDataElementsType() = default;
};

/**
 * Convert a LoadControlStateDataElementsType to its JSON representation
 * @param src The LoadControlStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlStateDataElementsType &dst);

/**
 * Datatype LoadControlStateListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateListDataType
{
    SpineOptional<std::vector<LoadControlStateDataType>> loadControlStateData;

    LoadControlStateListDataType() = default;
};

/**
 * Convert a LoadControlStateListDataType to its JSON representation
 * @param src The LoadControlStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlStateListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlStateListDataType &dst);

/**
 * Datatype LoadControlStateListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlStateListDataSelectorsType
{
    SpineOptional<TimestampIntervalType> timestampInterval;
    SpineOptional<LoadControlEventIdType> eventId;

    LoadControlStateListDataSelectorsType() = default;
};

/**
 * Convert a LoadControlStateListDataSelectorsType to its JSON representation
 * @param src The LoadControlStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlStateListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlStateListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDataType
{
    SpineOptional<LoadControlLimitIdType> limitId;
    SpineOptional<bool> isLimitChangeable;
    SpineOptional<bool> isLimitActive;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<ScaledNumberType> value;

    LoadControlLimitDataType() = default;
};

/**
 * Convert a LoadControlLimitDataType to its JSON representation
 * @param src The LoadControlLimitDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDataType &dst);

/**
 * Datatype LoadControlLimitDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDataElementsType
{
    SpineOptional<ElementTagType> limitId;
    SpineOptional<ElementTagType> isLimitChangeable;
    SpineOptional<ElementTagType> isLimitActive;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ScaledNumberElementsType> value;

    LoadControlLimitDataElementsType() = default;
};

/**
 * Convert a LoadControlLimitDataElementsType to its JSON representation
 * @param src The LoadControlLimitDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDataElementsType &dst);

/**
 * Datatype LoadControlLimitListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitListDataType
{
    SpineOptional<std::vector<LoadControlLimitDataType>> loadControlLimitData;

    LoadControlLimitListDataType() = default;
};

/**
 * Convert a LoadControlLimitListDataType to its JSON representation
 * @param src The LoadControlLimitListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitListDataType &dst);

/**
 * Datatype LoadControlLimitListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitListDataSelectorsType
{
    SpineOptional<LoadControlLimitIdType> limitId;

    LoadControlLimitListDataSelectorsType() = default;
};

/**
 * Convert a LoadControlLimitListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitConstraintsDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsDataType
{
    SpineOptional<LoadControlLimitIdType> limitId;
    SpineOptional<ScaledNumberType> valueRangeMin;
    SpineOptional<ScaledNumberType> valueRangeMax;
    SpineOptional<ScaledNumberType> valueStepSize;

    LoadControlLimitConstraintsDataType() = default;
};

/**
 * Convert a LoadControlLimitConstraintsDataType to its JSON representation
 * @param src The LoadControlLimitConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsDataType &dst);

/**
 * Datatype LoadControlLimitConstraintsDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsDataElementsType
{
    SpineOptional<ElementTagType> limitId;
    SpineOptional<ScaledNumberElementsType> valueRangeMin;
    SpineOptional<ScaledNumberElementsType> valueRangeMax;
    SpineOptional<ScaledNumberElementsType> valueStepSize;

    LoadControlLimitConstraintsDataElementsType() = default;
};

/**
 * Convert a LoadControlLimitConstraintsDataElementsType to its JSON representation
 * @param src The LoadControlLimitConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsDataElementsType &dst);

/**
 * Datatype LoadControlLimitConstraintsListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsListDataType
{
    SpineOptional<std::vector<LoadControlLimitConstraintsDataType>> loadControlLimitConstraintsData;

    LoadControlLimitConstraintsListDataType() = default;
};

/**
 * Convert a LoadControlLimitConstraintsListDataType to its JSON representation
 * @param src The LoadControlLimitConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsListDataType &dst);

/**
 * Datatype LoadControlLimitConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitConstraintsListDataSelectorsType
{
    SpineOptional<LoadControlLimitIdType> limitId;

    LoadControlLimitConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a LoadControlLimitConstraintsListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsListDataSelectorsType &dst);

/**
 * Datatype LoadControlLimitDescriptionDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionDataType
{
    SpineOptional<LoadControlLimitIdType> limitId;
    SpineOptional<LoadControlLimitTypeEnumType> limitType;
    SpineOptional<LoadControlCategoryEnumType> limitCategory;
    SpineOptional<EnergyDirectionEnumType> limitDirection;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    LoadControlLimitDescriptionDataType() = default;
};

/**
 * Convert a LoadControlLimitDescriptionDataType to its JSON representation
 * @param src The LoadControlLimitDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionDataType &dst);

/**
 * Datatype LoadControlLimitDescriptionDataElementsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionDataElementsType
{
    SpineOptional<ElementTagType> limitId;
    SpineOptional<ElementTagType> limitType;
    SpineOptional<ElementTagType> limitCategory;
    SpineOptional<ElementTagType> limitDirection;
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    LoadControlLimitDescriptionDataElementsType() = default;
};

/**
 * Convert a LoadControlLimitDescriptionDataElementsType to its JSON representation
 * @param src The LoadControlLimitDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionDataElementsType &dst);

/**
 * Datatype LoadControlLimitDescriptionListDataType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionListDataType
{
    SpineOptional<std::vector<LoadControlLimitDescriptionDataType>> loadControlLimitDescriptionData;

    LoadControlLimitDescriptionListDataType() = default;
};

/**
 * Convert a LoadControlLimitDescriptionListDataType to its JSON representation
 * @param src The LoadControlLimitDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionListDataType &dst);

/**
 * Datatype LoadControlLimitDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_LoadControl.xsd
*/
struct LoadControlLimitDescriptionListDataSelectorsType
{
    SpineOptional<LoadControlLimitIdType> limitId;
    SpineOptional<LoadControlLimitTypeEnumType> limitType;
    SpineOptional<EnergyDirectionEnumType> limitDirection;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    LoadControlLimitDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a LoadControlLimitDescriptionListDataSelectorsType to its JSON representation
 * @param src The LoadControlLimitDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const LoadControlLimitDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a LoadControlLimitDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The LoadControlLimitDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionListDataSelectorsType &dst);

/**
 * Datatype DeviceClassificationManufacturerDataType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationManufacturerDataType
{
    SpineOptional<DeviceClassificationStringType> deviceName;
    SpineOptional<DeviceClassificationStringType> deviceCode;
    SpineOptional<DeviceClassificationStringType> serialNumber;
    SpineOptional<DeviceClassificationStringType> softwareRevision;
    SpineOptional<DeviceClassificationStringType> hardwareRevision;
    SpineOptional<DeviceClassificationStringType> vendorName;
    SpineOptional<DeviceClassificationStringType> vendorCode;
    SpineOptional<DeviceClassificationStringType> brandName;
    SpineOptional<PowerSourceEnumType> powerSource;
    SpineOptional<DeviceClassificationStringType> manufacturerNodeIdentification;
    SpineOptional<LabelType> manufacturerLabel;
    SpineOptional<DescriptionType> manufacturerDescription;

    DeviceClassificationManufacturerDataType() = default;
};

/**
 * Convert a DeviceClassificationManufacturerDataType to its JSON representation
 * @param src The DeviceClassificationManufacturerDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationManufacturerDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceClassificationManufacturerDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationManufacturerDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceClassificationManufacturerDataType &dst);

/**
 * Datatype DeviceClassificationManufacturerDataElementsType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationManufacturerDataElementsType
{
    SpineOptional<ElementTagType> deviceName;
    SpineOptional<ElementTagType> deviceCode;
    SpineOptional<ElementTagType> serialNumber;
    SpineOptional<ElementTagType> softwareRevision;
    SpineOptional<ElementTagType> hardwareRevision;
    SpineOptional<ElementTagType> vendorName;
    SpineOptional<ElementTagType> vendorCode;
    SpineOptional<ElementTagType> brandName;
    SpineOptional<ElementTagType> powerSource;
    SpineOptional<ElementTagType> manufacturerNodeIdentification;
    SpineOptional<ElementTagType> manufacturerLabel;
    SpineOptional<ElementTagType> manufacturerDescription;

    DeviceClassificationManufacturerDataElementsType() = default;
};

/**
 * Convert a DeviceClassificationManufacturerDataElementsType to its JSON representation
 * @param src The DeviceClassificationManufacturerDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationManufacturerDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceClassificationManufacturerDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationManufacturerDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceClassificationManufacturerDataElementsType &dst);

/**
 * Datatype DeviceClassificationUserDataType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationUserDataType
{
    SpineOptional<DeviceClassificationStringType> userNodeIdentification;
    SpineOptional<LabelType> userLabel;
    SpineOptional<DescriptionType> userDescription;

    DeviceClassificationUserDataType() = default;
};

/**
 * Convert a DeviceClassificationUserDataType to its JSON representation
 * @param src The DeviceClassificationUserDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationUserDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceClassificationUserDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationUserDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceClassificationUserDataType &dst);

/**
 * Datatype DeviceClassificationUserDataElementsType as defined in EEBus_SPINE_TS_DeviceClassification.xsd
*/
struct DeviceClassificationUserDataElementsType
{
    SpineOptional<ElementTagType> userNodeIdentification;
    SpineOptional<ElementTagType> userLabel;
    SpineOptional<ElementTagType> userDescription;

    DeviceClassificationUserDataElementsType() = default;
};

/**
 * Convert a DeviceClassificationUserDataElementsType to its JSON representation
 * @param src The DeviceClassificationUserDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceClassificationUserDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceClassificationUserDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceClassificationUserDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceClassificationUserDataElementsType &dst);

/**
 * Datatype ActuatorLevelDataType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDataType
{
    SpineOptional<ActuatorLevelFctEnumType> function;
    SpineOptional<ScaledNumberType> value;

    ActuatorLevelDataType() = default;
};

/**
 * Convert a ActuatorLevelDataType to its JSON representation
 * @param src The ActuatorLevelDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorLevelDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDataType &dst);

/**
 * Datatype ActuatorLevelDataElementsType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDataElementsType
{
    SpineOptional<ElementTagType> function;
    SpineOptional<ScaledNumberElementsType> value;

    ActuatorLevelDataElementsType() = default;
};

/**
 * Convert a ActuatorLevelDataElementsType to its JSON representation
 * @param src The ActuatorLevelDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorLevelDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDataElementsType &dst);

/**
 * Datatype ActuatorLevelDescriptionDataType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDescriptionDataType
{
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;
    SpineOptional<UnitOfMeasurementEnumType> levelDefaultUnit;

    ActuatorLevelDescriptionDataType() = default;
};

/**
 * Convert a ActuatorLevelDescriptionDataType to its JSON representation
 * @param src The ActuatorLevelDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorLevelDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDescriptionDataType &dst);

/**
 * Datatype ActuatorLevelDescriptionDataElementsType as defined in EEBus_SPINE_TS_ActuatorLevel.xsd
*/
struct ActuatorLevelDescriptionDataElementsType
{
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> levelDefaultUnit;

    ActuatorLevelDescriptionDataElementsType() = default;
};

/**
 * Convert a ActuatorLevelDescriptionDataElementsType to its JSON representation
 * @param src The ActuatorLevelDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ActuatorLevelDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ActuatorLevelDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ActuatorLevelDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDescriptionDataElementsType &dst);

/**
 * Datatype TimeSeriesSlotType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesSlotType
{
    SpineOptional<TimeSeriesSlotIdType> timeSeriesSlotId;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<std::string> duration;
    SpineOptional<AbsoluteOrRecurringTimeType> recurrenceInformation;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<ScaledNumberType> minValue;
    SpineOptional<ScaledNumberType> maxValue;

    TimeSeriesSlotType() = default;
};

/**
 * Convert a TimeSeriesSlotType to its JSON representation
 * @param src The TimeSeriesSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesSlotType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesSlotType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesSlotType &dst);

/**
 * Datatype TimeSeriesSlotElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesSlotElementsType
{
    SpineOptional<ElementTagType> timeSeriesSlotId;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ElementTagType> duration;
    SpineOptional<AbsoluteOrRecurringTimeElementsType> recurrenceInformation;
    SpineOptional<ElementTagType> value;
    SpineOptional<ElementTagType> minValue;
    SpineOptional<ElementTagType> maxValue;

    TimeSeriesSlotElementsType() = default;
};

/**
 * Convert a TimeSeriesSlotElementsType to its JSON representation
 * @param src The TimeSeriesSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesSlotElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesSlotElementsType &dst);

/**
 * Datatype TimeSeriesDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDataType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<std::vector<TimeSeriesSlotType>> timeSeriesSlot;

    TimeSeriesDataType() = default;
};

/**
 * Convert a TimeSeriesDataType to its JSON representation
 * @param src The TimeSeriesDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDataType &dst);

/**
 * Datatype TimeSeriesDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDataElementsType
{
    SpineOptional<ElementTagType> timeSeriesId;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<TimeSeriesSlotElementsType> timeSeriesSlot;

    TimeSeriesDataElementsType() = default;
};

/**
 * Convert a TimeSeriesDataElementsType to its JSON representation
 * @param src The TimeSeriesDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDataElementsType &dst);

/**
 * Datatype TimeSeriesListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesListDataType
{
    SpineOptional<std::vector<TimeSeriesDataType>> timeSeriesData;

    TimeSeriesListDataType() = default;
};

/**
 * Convert a TimeSeriesListDataType to its JSON representation
 * @param src The TimeSeriesListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesListDataType &dst);

/**
 * Datatype TimeSeriesListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesListDataSelectorsType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;
    SpineOptional<TimeSeriesSlotIdType> timeSeriesSlotId;

    TimeSeriesListDataSelectorsType() = default;
};

/**
 * Convert a TimeSeriesListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesListDataSelectorsType &dst);

/**
 * Datatype TimeSeriesDescriptionDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionDataType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;
    SpineOptional<TimeSeriesTypeEnumType> timeSeriesType;
    SpineOptional<bool> timeSeriesWriteable;
    SpineOptional<bool> updateRequired;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<CurrencyEnumType> currency;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;
    SpineOptional<ScopeTypeEnumType> scopeType;

    TimeSeriesDescriptionDataType() = default;
};

/**
 * Convert a TimeSeriesDescriptionDataType to its JSON representation
 * @param src The TimeSeriesDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionDataType &dst);

/**
 * Datatype TimeSeriesDescriptionDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionDataElementsType
{
    SpineOptional<ElementTagType> timeSeriesId;
    SpineOptional<ElementTagType> timeSeriesType;
    SpineOptional<ElementTagType> timeSeriesWriteable;
    SpineOptional<ElementTagType> updateRequired;
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> currency;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> scopeType;

    TimeSeriesDescriptionDataElementsType() = default;
};

/**
 * Convert a TimeSeriesDescriptionDataElementsType to its JSON representation
 * @param src The TimeSeriesDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionDataElementsType &dst);

/**
 * Datatype TimeSeriesDescriptionListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionListDataType
{
    SpineOptional<std::vector<TimeSeriesDescriptionDataType>> timeSeriesDescriptionData;

    TimeSeriesDescriptionListDataType() = default;
};

/**
 * Convert a TimeSeriesDescriptionListDataType to its JSON representation
 * @param src The TimeSeriesDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionListDataType &dst);

/**
 * Datatype TimeSeriesDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesDescriptionListDataSelectorsType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;
    SpineOptional<TimeSeriesTypeEnumType> timeSeriesType;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    TimeSeriesDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TimeSeriesDescriptionListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionListDataSelectorsType &dst);

/**
 * Datatype TimeSeriesConstraintsDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsDataType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;
    SpineOptional<TimeSeriesSlotCountType> slotCountMin;
    SpineOptional<TimeSeriesSlotCountType> slotCountMax;
    SpineOptional<std::string> slotDurationMin;
    SpineOptional<std::string> slotDurationMax;
    SpineOptional<std::string> slotDurationStepSize;
    SpineOptional<AbsoluteOrRelativeTimeType> earliestTimeSeriesStartTime;
    SpineOptional<AbsoluteOrRelativeTimeType> latestTimeSeriesEndTime;
    SpineOptional<ScaledNumberType> slotValueMin;
    SpineOptional<ScaledNumberType> slotValueMax;
    SpineOptional<ScaledNumberType> slotValueStepSize;

    TimeSeriesConstraintsDataType() = default;
};

/**
 * Convert a TimeSeriesConstraintsDataType to its JSON representation
 * @param src The TimeSeriesConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsDataType &dst);

/**
 * Datatype TimeSeriesConstraintsDataElementsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsDataElementsType
{
    SpineOptional<ElementTagType> timeSeriesId;
    SpineOptional<ElementTagType> slotCountMin;
    SpineOptional<ElementTagType> slotCountMax;
    SpineOptional<ElementTagType> slotDurationMin;
    SpineOptional<ElementTagType> slotDurationMax;
    SpineOptional<ElementTagType> slotDurationStepSize;
    SpineOptional<ElementTagType> earliestTimeSeriesStartTime;
    SpineOptional<ElementTagType> latestTimeSeriesEndTime;
    SpineOptional<ScaledNumberElementsType> slotValueMin;
    SpineOptional<ScaledNumberElementsType> slotValueMax;
    SpineOptional<ScaledNumberElementsType> slotValueStepSize;

    TimeSeriesConstraintsDataElementsType() = default;
};

/**
 * Convert a TimeSeriesConstraintsDataElementsType to its JSON representation
 * @param src The TimeSeriesConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsDataElementsType &dst);

/**
 * Datatype TimeSeriesConstraintsListDataType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsListDataType
{
    SpineOptional<std::vector<TimeSeriesConstraintsDataType>> timeSeriesConstraintsData;

    TimeSeriesConstraintsListDataType() = default;
};

/**
 * Convert a TimeSeriesConstraintsListDataType to its JSON representation
 * @param src The TimeSeriesConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsListDataType &dst);

/**
 * Datatype TimeSeriesConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_TimeSeries.xsd
*/
struct TimeSeriesConstraintsListDataSelectorsType
{
    SpineOptional<TimeSeriesIdType> timeSeriesId;

    TimeSeriesConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a TimeSeriesConstraintsListDataSelectorsType to its JSON representation
 * @param src The TimeSeriesConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeSeriesConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeSeriesConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TimeSeriesConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsListDataSelectorsType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesRelationType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesRelationType
{
    SpineOptional<AlternativesIdType> alternativesId;

    SmartEnergyManagementPsAlternativesRelationType() = default;
};

/**
 * Convert a SmartEnergyManagementPsAlternativesRelationType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesRelationType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesRelationType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesRelationType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesRelationType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotValueListType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotValueListType
{
    SpineOptional<std::vector<PowerTimeSlotValueDataType>> value;

    SmartEnergyManagementPsPowerTimeSlotValueListType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotValueListType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotValueListType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotValueListType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotValueListType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotValueListType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotType
{
    SpineOptional<PowerTimeSlotScheduleDataType> schedule;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotValueListType> valueList;
    SpineOptional<PowerTimeSlotScheduleConstraintsDataType> scheduleConstraints;

    SmartEnergyManagementPsPowerTimeSlotType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerSequenceType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerSequenceType
{
    SpineOptional<PowerSequenceDescriptionDataType> description;
    SpineOptional<PowerSequenceStateDataType> state;
    SpineOptional<PowerSequenceScheduleDataType> schedule;
    SpineOptional<PowerSequenceScheduleConstraintsDataType> scheduleConstraints;
    SpineOptional<PowerSequenceSchedulePreferenceDataType> schedulePreference;
    SpineOptional<OperatingConstraintsInterruptDataType> operatingConstraintsInterrupt;
    SpineOptional<OperatingConstraintsDurationDataType> operatingConstraintsDuration;
    SpineOptional<OperatingConstraintsResumeImplicationDataType> operatingConstraintsResumeImplication;
    SpineOptional<std::vector<SmartEnergyManagementPsPowerTimeSlotType>> powerTimeSlot;

    SmartEnergyManagementPsPowerSequenceType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerSequenceType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerSequenceType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerSequenceType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerSequenceType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerSequenceType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerSequenceType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesType
{
    SpineOptional<SmartEnergyManagementPsAlternativesRelationType> relation;
    SpineOptional<std::vector<SmartEnergyManagementPsPowerSequenceType>> powerSequence;

    SmartEnergyManagementPsAlternativesType() = default;
};

/**
 * Convert a SmartEnergyManagementPsAlternativesType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesType &dst);

/**
 * Datatype SmartEnergyManagementPsDataType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataType
{
    SpineOptional<PowerSequenceNodeScheduleInformationDataType> nodeScheduleInformation;
    SpineOptional<std::vector<SmartEnergyManagementPsAlternativesType>> alternatives;

    SmartEnergyManagementPsDataType() = default;
};

/**
 * Convert a SmartEnergyManagementPsDataType to its JSON representation
 * @param src The SmartEnergyManagementPsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesRelationElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesRelationElementsType
{
    SpineOptional<ElementTagType> alternativesId;

    SmartEnergyManagementPsAlternativesRelationElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsAlternativesRelationElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesRelationElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesRelationElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesRelationElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesRelationElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotValueListElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotValueListElementsType
{
    SpineOptional<PowerTimeSlotValueDataElementsType> value;

    SmartEnergyManagementPsPowerTimeSlotValueListElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotValueListElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotValueListElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotValueListElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotValueListElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotValueListElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerTimeSlotElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerTimeSlotElementsType
{
    SpineOptional<PowerTimeSlotScheduleDataElementsType> schedule;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotValueListElementsType> valueList;
    SpineOptional<PowerTimeSlotScheduleConstraintsDataElementsType> scheduleConstraints;

    SmartEnergyManagementPsPowerTimeSlotElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerTimeSlotElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerTimeSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerTimeSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerTimeSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPowerSequenceElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPowerSequenceElementsType
{
    SpineOptional<PowerSequenceDescriptionDataElementsType> description;
    SpineOptional<PowerSequenceStateDataElementsType> state;
    SpineOptional<PowerSequenceScheduleDataElementsType> schedule;
    SpineOptional<PowerSequenceScheduleConstraintsDataElementsType> scheduleConstraints;
    SpineOptional<PowerSequenceSchedulePreferenceDataElementsType> schedulePreference;
    SpineOptional<OperatingConstraintsInterruptDataElementsType> operatingConstraintsInterrupt;
    SpineOptional<OperatingConstraintsDurationDataElementsType> operatingConstraintsDuration;
    SpineOptional<OperatingConstraintsResumeImplicationDataElementsType> operatingConstraintsResumeImplication;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotElementsType> powerTimeSlot;

    SmartEnergyManagementPsPowerSequenceElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPowerSequenceElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPowerSequenceElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPowerSequenceElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPowerSequenceElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPowerSequenceElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerSequenceElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsAlternativesElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsAlternativesElementsType
{
    SpineOptional<SmartEnergyManagementPsAlternativesRelationElementsType> relation;
    SpineOptional<SmartEnergyManagementPsPowerSequenceElementsType> powerSequence;

    SmartEnergyManagementPsAlternativesElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsAlternativesElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsAlternativesElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsAlternativesElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsAlternativesElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsAlternativesElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsDataElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataElementsType
{
    SpineOptional<PowerSequenceNodeScheduleInformationDataElementsType> nodeScheduleInformation;
    SpineOptional<SmartEnergyManagementPsAlternativesElementsType> alternatives;

    SmartEnergyManagementPsDataElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsDataElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsDataSelectorsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsDataSelectorsType
{
    SpineOptional<PowerSequenceAlternativesRelationListDataSelectorsType> alternativesRelation;
    SpineOptional<PowerSequenceDescriptionListDataSelectorsType> powerSequenceDescription;
    SpineOptional<PowerTimeSlotScheduleListDataSelectorsType> powerTimeSlotSchedule;
    SpineOptional<PowerTimeSlotValueListDataSelectorsType> powerTimeSlotValue;

    SmartEnergyManagementPsDataSelectorsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsDataSelectorsType to its JSON representation
 * @param src The SmartEnergyManagementPsDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataSelectorsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataType
{
    SpineOptional<std::vector<PowerSequencePriceDataType>> price;

    SmartEnergyManagementPsPriceDataType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPriceDataType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataElementsType
{
    SpineOptional<PowerSequencePriceDataElementsType> price;

    SmartEnergyManagementPsPriceDataElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPriceDataElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceDataSelectorsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceDataSelectorsType
{
    SpineOptional<PowerSequencePriceListDataSelectorsType> price;

    SmartEnergyManagementPsPriceDataSelectorsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPriceDataSelectorsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataSelectorsType &dst);

/**
 * Datatype SmartEnergyManagementPsConfigurationRequestCallType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsConfigurationRequestCallType
{
    SpineOptional<PowerSequenceScheduleConfigurationRequestCallType> scheduleConfigurationRequest;

    SmartEnergyManagementPsConfigurationRequestCallType() = default;
};

/**
 * Convert a SmartEnergyManagementPsConfigurationRequestCallType to its JSON representation
 * @param src The SmartEnergyManagementPsConfigurationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsConfigurationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsConfigurationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsConfigurationRequestCallType &dst);

/**
 * Datatype SmartEnergyManagementPsConfigurationRequestCallElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsConfigurationRequestCallElementsType
{
    SpineOptional<PowerSequenceScheduleConfigurationRequestCallElementsType> scheduleConfigurationRequest;

    SmartEnergyManagementPsConfigurationRequestCallElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsConfigurationRequestCallElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsConfigurationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsConfigurationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsConfigurationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsConfigurationRequestCallElementsType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceCalculationRequestCallType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceCalculationRequestCallType
{
    SpineOptional<PowerSequencePriceCalculationRequestCallType> priceCalculationRequest;

    SmartEnergyManagementPsPriceCalculationRequestCallType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPriceCalculationRequestCallType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceCalculationRequestCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceCalculationRequestCallType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceCalculationRequestCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceCalculationRequestCallType &dst);

/**
 * Datatype SmartEnergyManagementPsPriceCalculationRequestCallElementsType as defined in EEBus_SPINE_TS_SmartEnergyManagementPs.xsd
*/
struct SmartEnergyManagementPsPriceCalculationRequestCallElementsType
{
    SpineOptional<PowerSequencePriceCalculationRequestCallElementsType> priceCalculationRequest;

    SmartEnergyManagementPsPriceCalculationRequestCallElementsType() = default;
};

/**
 * Convert a SmartEnergyManagementPsPriceCalculationRequestCallElementsType to its JSON representation
 * @param src The SmartEnergyManagementPsPriceCalculationRequestCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a SmartEnergyManagementPsPriceCalculationRequestCallElementsType
 * @param src The JSON variant to convert
 * @param dst The SmartEnergyManagementPsPriceCalculationRequestCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceCalculationRequestCallElementsType &dst);

/**
 * Datatype MessagingDataType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<MessagingNumberType> messagingNumber;
    SpineOptional<MessagingTypeEnumType> type;
    SpineOptional<MessagingDataTextType> text;

    MessagingDataType() = default;
};

/**
 * Convert a MessagingDataType to its JSON representation
 * @param src The MessagingDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MessagingDataType
 * @param src The JSON variant to convert
 * @param dst The MessagingDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MessagingDataType &dst);

/**
 * Datatype MessagingDataElementsType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> messagingNumber;
    SpineOptional<ElementTagType> type;
    SpineOptional<ElementTagType> text;

    MessagingDataElementsType() = default;
};

/**
 * Convert a MessagingDataElementsType to its JSON representation
 * @param src The MessagingDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MessagingDataElementsType
 * @param src The JSON variant to convert
 * @param dst The MessagingDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MessagingDataElementsType &dst);

/**
 * Datatype MessagingListDataType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingListDataType
{
    SpineOptional<std::vector<MessagingDataType>> messagingData;

    MessagingListDataType() = default;
};

/**
 * Convert a MessagingListDataType to its JSON representation
 * @param src The MessagingListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MessagingListDataType
 * @param src The JSON variant to convert
 * @param dst The MessagingListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MessagingListDataType &dst);

/**
 * Datatype MessagingListDataSelectorsType as defined in EEBus_SPINE_TS_Messaging.xsd
*/
struct MessagingListDataSelectorsType
{
    SpineOptional<TimestampIntervalType> timestampInterval;
    SpineOptional<MessagingNumberType> messagingNumber;

    MessagingListDataSelectorsType() = default;
};

/**
 * Convert a MessagingListDataSelectorsType to its JSON representation
 * @param src The MessagingListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const MessagingListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a MessagingListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The MessagingListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, MessagingListDataSelectorsType &dst);

/**
 * Datatype TariffOverallConstraintsDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffOverallConstraintsDataType
{
    SpineOptional<TariffCountType> maxTariffCount;
    SpineOptional<TierBoundaryCountType> maxBoundaryCount;
    SpineOptional<TierCountType> maxTierCount;
    SpineOptional<IncentiveCountType> maxIncentiveCount;
    SpineOptional<TierBoundaryCountType> maxBoundariesPerTariff;
    SpineOptional<TierCountType> maxTiersPerTariff;
    SpineOptional<TierBoundaryCountType> maxBoundariesPerTier;
    SpineOptional<IncentiveCountType> maxIncentivesPerTier;

    TariffOverallConstraintsDataType() = default;
};

/**
 * Convert a TariffOverallConstraintsDataType to its JSON representation
 * @param src The TariffOverallConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffOverallConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffOverallConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The TariffOverallConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffOverallConstraintsDataType &dst);

/**
 * Datatype TariffOverallConstraintsDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffOverallConstraintsDataElementsType
{
    SpineOptional<ElementTagType> maxTariffCount;
    SpineOptional<ElementTagType> maxBoundaryCount;
    SpineOptional<ElementTagType> maxTierCount;
    SpineOptional<ElementTagType> maxIncentiveCount;
    SpineOptional<ElementTagType> maxBoundariesPerTariff;
    SpineOptional<ElementTagType> maxTiersPerTariff;
    SpineOptional<ElementTagType> maxBoundariesPerTier;
    SpineOptional<ElementTagType> maxIncentivesPerTier;

    TariffOverallConstraintsDataElementsType() = default;
};

/**
 * Convert a TariffOverallConstraintsDataElementsType to its JSON representation
 * @param src The TariffOverallConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffOverallConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffOverallConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffOverallConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffOverallConstraintsDataElementsType &dst);

/**
 * Datatype TariffDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDataType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<std::vector<TierIdType>> activeTierId;

    TariffDataType() = default;
};

/**
 * Convert a TariffDataType to its JSON representation
 * @param src The TariffDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDataType &dst);

/**
 * Datatype TariffDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDataElementsType
{
    SpineOptional<ElementTagType> tariffId;
    SpineOptional<ElementTagType> activeTierId;

    TariffDataElementsType() = default;
};

/**
 * Convert a TariffDataElementsType to its JSON representation
 * @param src The TariffDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDataElementsType &dst);

/**
 * Datatype TariffListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffListDataType
{
    SpineOptional<std::vector<TariffDataType>> tariffData;

    TariffListDataType() = default;
};

/**
 * Convert a TariffListDataType to its JSON representation
 * @param src The TariffListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffListDataType &dst);

/**
 * Datatype TariffListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffListDataSelectorsType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<TierIdType> activeTierId;

    TariffListDataSelectorsType() = default;
};

/**
 * Convert a TariffListDataSelectorsType to its JSON representation
 * @param src The TariffListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffListDataSelectorsType &dst);

/**
 * Datatype TariffTierRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationDataType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<std::vector<TierIdType>> tierId;

    TariffTierRelationDataType() = default;
};

/**
 * Convert a TariffTierRelationDataType to its JSON representation
 * @param src The TariffTierRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffTierRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffTierRelationDataType &dst);

/**
 * Datatype TariffTierRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationDataElementsType
{
    SpineOptional<ElementTagType> tariffId;
    SpineOptional<ElementTagType> tierId;

    TariffTierRelationDataElementsType() = default;
};

/**
 * Convert a TariffTierRelationDataElementsType to its JSON representation
 * @param src The TariffTierRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffTierRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffTierRelationDataElementsType &dst);

/**
 * Datatype TariffTierRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationListDataType
{
    SpineOptional<std::vector<TariffTierRelationDataType>> tariffTierRelationData;

    TariffTierRelationListDataType() = default;
};

/**
 * Convert a TariffTierRelationListDataType to its JSON representation
 * @param src The TariffTierRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffTierRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffTierRelationListDataType &dst);

/**
 * Datatype TariffTierRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffTierRelationListDataSelectorsType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<TierIdType> tierId;

    TariffTierRelationListDataSelectorsType() = default;
};

/**
 * Convert a TariffTierRelationListDataSelectorsType to its JSON representation
 * @param src The TariffTierRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffTierRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffTierRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffTierRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffTierRelationListDataSelectorsType &dst);

/**
 * Datatype TariffBoundaryRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationDataType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<std::vector<TierBoundaryIdType>> boundaryId;

    TariffBoundaryRelationDataType() = default;
};

/**
 * Convert a TariffBoundaryRelationDataType to its JSON representation
 * @param src The TariffBoundaryRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationDataType &dst);

/**
 * Datatype TariffBoundaryRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationDataElementsType
{
    SpineOptional<ElementTagType> tariffId;
    SpineOptional<ElementTagType> boundaryId;

    TariffBoundaryRelationDataElementsType() = default;
};

/**
 * Convert a TariffBoundaryRelationDataElementsType to its JSON representation
 * @param src The TariffBoundaryRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationDataElementsType &dst);

/**
 * Datatype TariffBoundaryRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationListDataType
{
    SpineOptional<std::vector<TariffBoundaryRelationDataType>> tariffBoundaryRelationData;

    TariffBoundaryRelationListDataType() = default;
};

/**
 * Convert a TariffBoundaryRelationListDataType to its JSON representation
 * @param src The TariffBoundaryRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationListDataType &dst);

/**
 * Datatype TariffBoundaryRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffBoundaryRelationListDataSelectorsType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<TierBoundaryIdType> boundaryId;

    TariffBoundaryRelationListDataSelectorsType() = default;
};

/**
 * Convert a TariffBoundaryRelationListDataSelectorsType to its JSON representation
 * @param src The TariffBoundaryRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffBoundaryRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffBoundaryRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffBoundaryRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationListDataSelectorsType &dst);

/**
 * Datatype TariffDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionDataType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<CommodityIdType> commodityId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<bool> tariffWriteable;
    SpineOptional<bool> updateRequired;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;
    SpineOptional<bool> slotIdSupport;

    TariffDescriptionDataType() = default;
};

/**
 * Convert a TariffDescriptionDataType to its JSON representation
 * @param src The TariffDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDescriptionDataType &dst);

/**
 * Datatype TariffDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionDataElementsType
{
    SpineOptional<ElementTagType> tariffId;
    SpineOptional<ElementTagType> commodityId;
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> tariffWriteable;
    SpineOptional<ElementTagType> updateRequired;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;
    SpineOptional<ElementTagType> slotIdSupport;

    TariffDescriptionDataElementsType() = default;
};

/**
 * Convert a TariffDescriptionDataElementsType to its JSON representation
 * @param src The TariffDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDescriptionDataElementsType &dst);

/**
 * Datatype TariffDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionListDataType
{
    SpineOptional<std::vector<TariffDescriptionDataType>> tariffDescriptionData;

    TariffDescriptionListDataType() = default;
};

/**
 * Convert a TariffDescriptionListDataType to its JSON representation
 * @param src The TariffDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDescriptionListDataType &dst);

/**
 * Datatype TariffDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TariffDescriptionListDataSelectorsType
{
    SpineOptional<TariffIdType> tariffId;
    SpineOptional<CommodityIdType> commodityId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    TariffDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TariffDescriptionListDataSelectorsType to its JSON representation
 * @param src The TariffDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TariffDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TariffDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TariffDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TariffDescriptionListDataSelectorsType &dst);

/**
 * Datatype TierBoundaryDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDataType
{
    SpineOptional<TierBoundaryIdType> boundaryId;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<ScaledNumberType> lowerBoundaryValue;
    SpineOptional<ScaledNumberType> upperBoundaryValue;

    TierBoundaryDataType() = default;
};

/**
 * Convert a TierBoundaryDataType to its JSON representation
 * @param src The TierBoundaryDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDataType &dst);

/**
 * Datatype TierBoundaryDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDataElementsType
{
    SpineOptional<ElementTagType> boundaryId;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ScaledNumberElementsType> lowerBoundaryValue;
    SpineOptional<ScaledNumberElementsType> upperBoundaryValue;

    TierBoundaryDataElementsType() = default;
};

/**
 * Convert a TierBoundaryDataElementsType to its JSON representation
 * @param src The TierBoundaryDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDataElementsType &dst);

/**
 * Datatype TierBoundaryListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryListDataType
{
    SpineOptional<std::vector<TierBoundaryDataType>> tierBoundaryData;

    TierBoundaryListDataType() = default;
};

/**
 * Convert a TierBoundaryListDataType to its JSON representation
 * @param src The TierBoundaryListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryListDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryListDataType &dst);

/**
 * Datatype TierBoundaryListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryListDataSelectorsType
{
    SpineOptional<TierBoundaryIdType> boundaryId;

    TierBoundaryListDataSelectorsType() = default;
};

/**
 * Convert a TierBoundaryListDataSelectorsType to its JSON representation
 * @param src The TierBoundaryListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryListDataSelectorsType &dst);

/**
 * Datatype TierBoundaryDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionDataType
{
    SpineOptional<TierBoundaryIdType> boundaryId;
    SpineOptional<TierBoundaryTypeEnumType> boundaryType;
    SpineOptional<TierIdType> validForTierId;
    SpineOptional<TierIdType> switchToTierIdWhenLower;
    SpineOptional<TierIdType> switchToTierIdWhenHigher;
    SpineOptional<UnitOfMeasurementEnumType> boundaryUnit;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    TierBoundaryDescriptionDataType() = default;
};

/**
 * Convert a TierBoundaryDescriptionDataType to its JSON representation
 * @param src The TierBoundaryDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionDataType &dst);

/**
 * Datatype TierBoundaryDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionDataElementsType
{
    SpineOptional<ElementTagType> boundaryId;
    SpineOptional<ElementTagType> boundaryType;
    SpineOptional<ElementTagType> validForTierId;
    SpineOptional<ElementTagType> switchToTierIdWhenLower;
    SpineOptional<ElementTagType> switchToTierIdWhenHigher;
    SpineOptional<ElementTagType> boundaryUnit;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    TierBoundaryDescriptionDataElementsType() = default;
};

/**
 * Convert a TierBoundaryDescriptionDataElementsType to its JSON representation
 * @param src The TierBoundaryDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionDataElementsType &dst);

/**
 * Datatype TierBoundaryDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionListDataType
{
    SpineOptional<std::vector<TierBoundaryDescriptionDataType>> tierBoundaryDescriptionData;

    TierBoundaryDescriptionListDataType() = default;
};

/**
 * Convert a TierBoundaryDescriptionListDataType to its JSON representation
 * @param src The TierBoundaryDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionListDataType &dst);

/**
 * Datatype TierBoundaryDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierBoundaryDescriptionListDataSelectorsType
{
    SpineOptional<TierBoundaryIdType> boundaryId;
    SpineOptional<TierBoundaryTypeEnumType> boundaryType;

    TierBoundaryDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TierBoundaryDescriptionListDataSelectorsType to its JSON representation
 * @param src The TierBoundaryDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierBoundaryDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierBoundaryDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierBoundaryDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionListDataSelectorsType &dst);

/**
 * Datatype CommodityDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityDataType
{
    SpineOptional<CommodityIdType> commodityId;
    SpineOptional<CommodityTypeEnumType> commodityType;
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    CommodityDataType() = default;
};

/**
 * Convert a CommodityDataType to its JSON representation
 * @param src The CommodityDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a CommodityDataType
 * @param src The JSON variant to convert
 * @param dst The CommodityDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, CommodityDataType &dst);

/**
 * Datatype CommodityDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityDataElementsType
{
    SpineOptional<ElementTagType> commodityId;
    SpineOptional<ElementTagType> commodityType;
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    CommodityDataElementsType() = default;
};

/**
 * Convert a CommodityDataElementsType to its JSON representation
 * @param src The CommodityDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a CommodityDataElementsType
 * @param src The JSON variant to convert
 * @param dst The CommodityDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, CommodityDataElementsType &dst);

/**
 * Datatype CommodityListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityListDataType
{
    SpineOptional<std::vector<CommodityDataType>> commodityData;

    CommodityListDataType() = default;
};

/**
 * Convert a CommodityListDataType to its JSON representation
 * @param src The CommodityListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a CommodityListDataType
 * @param src The JSON variant to convert
 * @param dst The CommodityListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, CommodityListDataType &dst);

/**
 * Datatype CommodityListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct CommodityListDataSelectorsType
{
    SpineOptional<CommodityIdType> commodityId;
    SpineOptional<CommodityTypeEnumType> commodityType;

    CommodityListDataSelectorsType() = default;
};

/**
 * Convert a CommodityListDataSelectorsType to its JSON representation
 * @param src The CommodityListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CommodityListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a CommodityListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The CommodityListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, CommodityListDataSelectorsType &dst);

/**
 * Datatype TierDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDataType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<std::vector<IncentiveIdType>> activeIncentiveId;

    TierDataType() = default;
};

/**
 * Convert a TierDataType to its JSON representation
 * @param src The TierDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDataType
 * @param src The JSON variant to convert
 * @param dst The TierDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDataType &dst);

/**
 * Datatype TierDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDataElementsType
{
    SpineOptional<ElementTagType> tierId;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> activeIncentiveId;

    TierDataElementsType() = default;
};

/**
 * Convert a TierDataElementsType to its JSON representation
 * @param src The TierDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDataElementsType &dst);

/**
 * Datatype TierListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierListDataType
{
    SpineOptional<std::vector<TierDataType>> tierData;

    TierListDataType() = default;
};

/**
 * Convert a TierListDataType to its JSON representation
 * @param src The TierListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierListDataType
 * @param src The JSON variant to convert
 * @param dst The TierListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierListDataType &dst);

/**
 * Datatype TierListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierListDataSelectorsType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<IncentiveIdType> activeIncentiveId;

    TierListDataSelectorsType() = default;
};

/**
 * Convert a TierListDataSelectorsType to its JSON representation
 * @param src The TierListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierListDataSelectorsType &dst);

/**
 * Datatype TierIncentiveRelationDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationDataType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<std::vector<IncentiveIdType>> incentiveId;

    TierIncentiveRelationDataType() = default;
};

/**
 * Convert a TierIncentiveRelationDataType to its JSON representation
 * @param src The TierIncentiveRelationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationDataType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationDataType &dst);

/**
 * Datatype TierIncentiveRelationDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationDataElementsType
{
    SpineOptional<ElementTagType> tierId;
    SpineOptional<ElementTagType> incentiveId;

    TierIncentiveRelationDataElementsType() = default;
};

/**
 * Convert a TierIncentiveRelationDataElementsType to its JSON representation
 * @param src The TierIncentiveRelationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationDataElementsType &dst);

/**
 * Datatype TierIncentiveRelationListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationListDataType
{
    SpineOptional<std::vector<TierIncentiveRelationDataType>> tierIncentiveRelationData;

    TierIncentiveRelationListDataType() = default;
};

/**
 * Convert a TierIncentiveRelationListDataType to its JSON representation
 * @param src The TierIncentiveRelationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationListDataType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationListDataType &dst);

/**
 * Datatype TierIncentiveRelationListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierIncentiveRelationListDataSelectorsType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<IncentiveIdType> incentiveId;

    TierIncentiveRelationListDataSelectorsType() = default;
};

/**
 * Convert a TierIncentiveRelationListDataSelectorsType to its JSON representation
 * @param src The TierIncentiveRelationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierIncentiveRelationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierIncentiveRelationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierIncentiveRelationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationListDataSelectorsType &dst);

/**
 * Datatype TierDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionDataType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<TierTypeEnumType> tierType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    TierDescriptionDataType() = default;
};

/**
 * Convert a TierDescriptionDataType to its JSON representation
 * @param src The TierDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDescriptionDataType &dst);

/**
 * Datatype TierDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionDataElementsType
{
    SpineOptional<ElementTagType> tierId;
    SpineOptional<ElementTagType> tierType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    TierDescriptionDataElementsType() = default;
};

/**
 * Convert a TierDescriptionDataElementsType to its JSON representation
 * @param src The TierDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDescriptionDataElementsType &dst);

/**
 * Datatype TierDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionListDataType
{
    SpineOptional<std::vector<TierDescriptionDataType>> tierDescriptionData;

    TierDescriptionListDataType() = default;
};

/**
 * Convert a TierDescriptionListDataType to its JSON representation
 * @param src The TierDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDescriptionListDataType &dst);

/**
 * Datatype TierDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct TierDescriptionListDataSelectorsType
{
    SpineOptional<TierIdType> tierId;
    SpineOptional<TierTypeEnumType> tierType;

    TierDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a TierDescriptionListDataSelectorsType to its JSON representation
 * @param src The TierDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TierDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TierDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The TierDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TierDescriptionListDataSelectorsType &dst);

/**
 * Datatype IncentiveDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDataType
{
    SpineOptional<IncentiveIdType> incentiveId;
    SpineOptional<IncentiveValueTypeEnumType> valueType;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<TimePeriodType> timePeriod;
    SpineOptional<TimeTableIdType> timeTableId;
    SpineOptional<ScaledNumberType> value;

    IncentiveDataType() = default;
};

/**
 * Convert a IncentiveDataType to its JSON representation
 * @param src The IncentiveDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDataType &dst);

/**
 * Datatype IncentiveDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDataElementsType
{
    SpineOptional<ElementTagType> incentiveId;
    SpineOptional<ElementTagType> valueType;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<TimePeriodElementsType> timePeriod;
    SpineOptional<ElementTagType> timeTableId;
    SpineOptional<ElementTagType> value;

    IncentiveDataElementsType() = default;
};

/**
 * Convert a IncentiveDataElementsType to its JSON representation
 * @param src The IncentiveDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDataElementsType &dst);

/**
 * Datatype IncentiveListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveListDataType
{
    SpineOptional<std::vector<IncentiveDataType>> incentiveData;

    IncentiveListDataType() = default;
};

/**
 * Convert a IncentiveListDataType to its JSON representation
 * @param src The IncentiveListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveListDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveListDataType &dst);

/**
 * Datatype IncentiveListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveListDataSelectorsType
{
    SpineOptional<IncentiveIdType> incentiveId;
    SpineOptional<IncentiveValueTypeEnumType> valueType;
    SpineOptional<TimestampIntervalType> timestampInterval;

    IncentiveListDataSelectorsType() = default;
};

/**
 * Convert a IncentiveListDataSelectorsType to its JSON representation
 * @param src The IncentiveListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveListDataSelectorsType &dst);

/**
 * Datatype IncentiveDescriptionDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionDataType
{
    SpineOptional<IncentiveIdType> incentiveId;
    SpineOptional<IncentiveTypeEnumType> incentiveType;
    SpineOptional<IncentivePriorityType> incentivePriority;
    SpineOptional<CurrencyEnumType> currency;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    IncentiveDescriptionDataType() = default;
};

/**
 * Convert a IncentiveDescriptionDataType to its JSON representation
 * @param src The IncentiveDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionDataType &dst);

/**
 * Datatype IncentiveDescriptionDataElementsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionDataElementsType
{
    SpineOptional<ElementTagType> incentiveId;
    SpineOptional<ElementTagType> incentiveType;
    SpineOptional<ElementTagType> incentivePriority;
    SpineOptional<ElementTagType> currency;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    IncentiveDescriptionDataElementsType() = default;
};

/**
 * Convert a IncentiveDescriptionDataElementsType to its JSON representation
 * @param src The IncentiveDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionDataElementsType &dst);

/**
 * Datatype IncentiveDescriptionListDataType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionListDataType
{
    SpineOptional<std::vector<IncentiveDescriptionDataType>> incentiveDescriptionData;

    IncentiveDescriptionListDataType() = default;
};

/**
 * Convert a IncentiveDescriptionListDataType to its JSON representation
 * @param src The IncentiveDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionListDataType &dst);

/**
 * Datatype IncentiveDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_TariffInformation.xsd
*/
struct IncentiveDescriptionListDataSelectorsType
{
    SpineOptional<IncentiveIdType> incentiveId;
    SpineOptional<IncentiveTypeEnumType> incentiveType;

    IncentiveDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a IncentiveDescriptionListDataSelectorsType to its JSON representation
 * @param src The IncentiveDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionListDataSelectorsType &dst);

/**
 * Datatype StateInformationDataType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationDataType
{
    SpineOptional<stateInformationIdType> stateInformationId;
    SpineOptional<StateInformationType> stateInformation;
    SpineOptional<bool> isActive;
    SpineOptional<StateInformationCategoryEnumType> category;
    SpineOptional<AbsoluteOrRelativeTimeType> timeOfLastChange;

    StateInformationDataType() = default;
};

/**
 * Convert a StateInformationDataType to its JSON representation
 * @param src The StateInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a StateInformationDataType
 * @param src The JSON variant to convert
 * @param dst The StateInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationDataType &dst);

/**
 * Datatype StateInformationDataElementsType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationDataElementsType
{
    SpineOptional<ElementTagType> stateInformationId;
    SpineOptional<ElementTagType> stateInformation;
    SpineOptional<ElementTagType> isActive;
    SpineOptional<ElementTagType> category;
    SpineOptional<ElementTagType> timeOfLastChange;

    StateInformationDataElementsType() = default;
};

/**
 * Convert a StateInformationDataElementsType to its JSON representation
 * @param src The StateInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a StateInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The StateInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationDataElementsType &dst);

/**
 * Datatype StateInformationListDataType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationListDataType
{
    SpineOptional<std::vector<StateInformationDataType>> stateInformationData;

    StateInformationListDataType() = default;
};

/**
 * Convert a StateInformationListDataType to its JSON representation
 * @param src The StateInformationListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a StateInformationListDataType
 * @param src The JSON variant to convert
 * @param dst The StateInformationListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationListDataType &dst);

/**
 * Datatype StateInformationListDataSelectorsType as defined in EEBus_SPINE_TS_StateInformation.xsd
*/
struct StateInformationListDataSelectorsType
{
    SpineOptional<stateInformationIdType> stateInformationId;
    SpineOptional<StateInformationType> stateInformation;
    SpineOptional<bool> isActive;
    SpineOptional<StateInformationCategoryEnumType> category;

    StateInformationListDataSelectorsType() = default;
};

/**
 * Convert a StateInformationListDataSelectorsType to its JSON representation
 * @param src The StateInformationListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const StateInformationListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a StateInformationListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The StateInformationListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, StateInformationListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionDataType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ElectricalConnectionVoltageTypeEnumType> voltageType;
    SpineOptional<ElectricalConnectionPhaseNameEnumType> acMeasuredPhases;
    SpineOptional<ElectricalConnectionPhaseNameEnumType> acMeasuredInReferenceTo;
    SpineOptional<ElectricalConnectionAcMeasurementTypeEnumType> acMeasurementType;
    SpineOptional<ElectricalConnectionMeasurandVariantEnumType> acMeasurementVariant;
    SpineOptional<uint8_t> acMeasuredHarmonic;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    ElectricalConnectionParameterDescriptionDataType() = default;
};

/**
 * Convert a ElectricalConnectionParameterDescriptionDataType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionDataType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionDataElementsType
{
    SpineOptional<ElementTagType> electricalConnectionId;
    SpineOptional<ElementTagType> parameterId;
    SpineOptional<ElementTagType> measurementId;
    SpineOptional<ElementTagType> voltageType;
    SpineOptional<ElementTagType> acMeasuredPhases;
    SpineOptional<ElementTagType> acMeasuredInReferenceTo;
    SpineOptional<ElementTagType> acMeasurementType;
    SpineOptional<ElementTagType> acMeasurementVariant;
    SpineOptional<ElementTagType> acMeasuredHarmonic;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    ElectricalConnectionParameterDescriptionDataElementsType() = default;
};

/**
 * Convert a ElectricalConnectionParameterDescriptionDataElementsType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionDataElementsType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionListDataType
{
    SpineOptional<std::vector<ElectricalConnectionParameterDescriptionDataType>> electricalConnectionParameterDescriptionData;

    ElectricalConnectionParameterDescriptionListDataType() = default;
};

/**
 * Convert a ElectricalConnectionParameterDescriptionListDataType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionListDataType &dst);

/**
 * Datatype ElectricalConnectionParameterDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionParameterDescriptionListDataSelectorsType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;
    SpineOptional<MeasurementIdType> measurementId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    ElectricalConnectionParameterDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a ElectricalConnectionParameterDescriptionListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionParameterDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionParameterDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionParameterDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetDataType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;
    SpineOptional<std::vector<ScaledNumberSetType>> permittedValueSet;

    ElectricalConnectionPermittedValueSetDataType() = default;
};

/**
 * Convert a ElectricalConnectionPermittedValueSetDataType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetDataType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetDataElementsType
{
    SpineOptional<ElementTagType> electricalConnectionId;
    SpineOptional<ElementTagType> parameterId;
    SpineOptional<ScaledNumberSetElementsType> permittedValueSet;

    ElectricalConnectionPermittedValueSetDataElementsType() = default;
};

/**
 * Convert a ElectricalConnectionPermittedValueSetDataElementsType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetDataElementsType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetListDataType
{
    SpineOptional<std::vector<ElectricalConnectionPermittedValueSetDataType>> electricalConnectionPermittedValueSetData;

    ElectricalConnectionPermittedValueSetListDataType() = default;
};

/**
 * Convert a ElectricalConnectionPermittedValueSetListDataType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetListDataType &dst);

/**
 * Datatype ElectricalConnectionPermittedValueSetListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionPermittedValueSetListDataSelectorsType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;

    ElectricalConnectionPermittedValueSetListDataSelectorsType() = default;
};

/**
 * Convert a ElectricalConnectionPermittedValueSetListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionPermittedValueSetListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionPermittedValueSetListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionPermittedValueSetListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicDataType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;
    SpineOptional<ElectricalConnectionCharacteristicIdType> characteristicId;
    SpineOptional<ElectricalConnectionCharacteristicContextEnumType> characteristicContext;
    SpineOptional<ElectricalConnectionCharacteristicTypeEnumType> characteristicType;
    SpineOptional<ScaledNumberType> value;
    SpineOptional<UnitOfMeasurementEnumType> unit;

    ElectricalConnectionCharacteristicDataType() = default;
};

/**
 * Convert a ElectricalConnectionCharacteristicDataType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicDataType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicDataElementsType
{
    SpineOptional<ElementTagType> electricalConnectionId;
    SpineOptional<ElementTagType> parameterId;
    SpineOptional<ElementTagType> characteristicId;
    SpineOptional<ElementTagType> characteristicContext;
    SpineOptional<ElementTagType> characteristicType;
    SpineOptional<ScaledNumberElementsType> value;
    SpineOptional<ElementTagType> unit;

    ElectricalConnectionCharacteristicDataElementsType() = default;
};

/**
 * Convert a ElectricalConnectionCharacteristicDataElementsType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicDataElementsType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicListDataType
{
    SpineOptional<std::vector<ElectricalConnectionCharacteristicDataType>> electricalConnectionCharacteristicData;

    ElectricalConnectionCharacteristicListDataType() = default;
};

/**
 * Convert a ElectricalConnectionCharacteristicListDataType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicListDataType &dst);

/**
 * Datatype ElectricalConnectionCharacteristicListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionCharacteristicListDataSelectorsType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionParameterIdType> parameterId;
    SpineOptional<ElectricalConnectionCharacteristicIdType> characteristicId;
    SpineOptional<ElectricalConnectionCharacteristicContextEnumType> characteristicContext;
    SpineOptional<ElectricalConnectionCharacteristicTypeEnumType> characteristicType;

    ElectricalConnectionCharacteristicListDataSelectorsType() = default;
};

/**
 * Convert a ElectricalConnectionCharacteristicListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionCharacteristicListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionCharacteristicListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionCharacteristicListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionCharacteristicListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionStateDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateDataType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<EnergyModeEnumType> currentEnergyMode;
    SpineOptional<std::string> consumptionTime;
    SpineOptional<std::string> productionTime;
    SpineOptional<std::string> totalConsumptionTime;
    SpineOptional<std::string> totalProductionTime;

    ElectricalConnectionStateDataType() = default;
};

/**
 * Convert a ElectricalConnectionStateDataType to its JSON representation
 * @param src The ElectricalConnectionStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateDataType &dst);

/**
 * Datatype ElectricalConnectionStateDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateDataElementsType
{
    SpineOptional<ElementTagType> electricalConnectionId;
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> currentEnergyMode;
    SpineOptional<ElementTagType> consumptionTime;
    SpineOptional<ElementTagType> productionTime;
    SpineOptional<ElementTagType> totalConsumptionTime;
    SpineOptional<ElementTagType> totalProductionTime;

    ElectricalConnectionStateDataElementsType() = default;
};

/**
 * Convert a ElectricalConnectionStateDataElementsType to its JSON representation
 * @param src The ElectricalConnectionStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateDataElementsType &dst);

/**
 * Datatype ElectricalConnectionStateListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateListDataType
{
    SpineOptional<std::vector<ElectricalConnectionStateDataType>> electricalConnectionStateData;

    ElectricalConnectionStateListDataType() = default;
};

/**
 * Convert a ElectricalConnectionStateListDataType to its JSON representation
 * @param src The ElectricalConnectionStateListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateListDataType &dst);

/**
 * Datatype ElectricalConnectionStateListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionStateListDataSelectorsType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;

    ElectricalConnectionStateListDataSelectorsType() = default;
};

/**
 * Convert a ElectricalConnectionStateListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionStateListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionStateListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionStateListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionStateListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateListDataSelectorsType &dst);

/**
 * Datatype ElectricalConnectionDescriptionDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionDataType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ElectricalConnectionVoltageTypeEnumType> powerSupplyType;
    SpineOptional<uint32_t> acConnectedPhases;
    SpineOptional<std::string> acRmsPeriodDuration;
    SpineOptional<EnergyDirectionEnumType> positiveEnergyDirection;
    SpineOptional<ScopeTypeEnumType> scopeType;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    ElectricalConnectionDescriptionDataType() = default;
};

/**
 * Convert a ElectricalConnectionDescriptionDataType to its JSON representation
 * @param src The ElectricalConnectionDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionDataType &dst);

/**
 * Datatype ElectricalConnectionDescriptionDataElementsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionDataElementsType
{
    SpineOptional<ElementTagType> electricalConnectionId;
    SpineOptional<ElementTagType> powerSupplyType;
    SpineOptional<ElementTagType> acConnectedPhases;
    SpineOptional<ElementTagType> acRmsPeriodDuration;
    SpineOptional<ElementTagType> positiveEnergyDirection;
    SpineOptional<ElementTagType> scopeType;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    ElectricalConnectionDescriptionDataElementsType() = default;
};

/**
 * Convert a ElectricalConnectionDescriptionDataElementsType to its JSON representation
 * @param src The ElectricalConnectionDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionDataElementsType &dst);

/**
 * Datatype ElectricalConnectionDescriptionListDataType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionListDataType
{
    SpineOptional<std::vector<ElectricalConnectionDescriptionDataType>> electricalConnectionDescriptionData;

    ElectricalConnectionDescriptionListDataType() = default;
};

/**
 * Convert a ElectricalConnectionDescriptionListDataType to its JSON representation
 * @param src The ElectricalConnectionDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionListDataType &dst);

/**
 * Datatype ElectricalConnectionDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_ElectricalConnection.xsd
*/
struct ElectricalConnectionDescriptionListDataSelectorsType
{
    SpineOptional<ElectricalConnectionIdType> electricalConnectionId;
    SpineOptional<ScopeTypeEnumType> scopeType;

    ElectricalConnectionDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a ElectricalConnectionDescriptionListDataSelectorsType to its JSON representation
 * @param src The ElectricalConnectionDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const ElectricalConnectionDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a ElectricalConnectionDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The ElectricalConnectionDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionListDataSelectorsType &dst);

/**
 * Datatype TimeInformationDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeInformationDataType
{
    SpineOptional<std::string> utc;
    SpineOptional<std::string> utcOffset;
    SpineOptional<DayOfWeekType> dayOfWeek;
    SpineOptional<CalendarWeekType> calendarWeek;

    TimeInformationDataType() = default;
};

/**
 * Convert a TimeInformationDataType to its JSON representation
 * @param src The TimeInformationDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeInformationDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeInformationDataType
 * @param src The JSON variant to convert
 * @param dst The TimeInformationDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeInformationDataType &dst);

/**
 * Datatype TimeInformationDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeInformationDataElementsType
{
    SpineOptional<ElementTagType> utc;
    SpineOptional<ElementTagType> utcOffset;
    SpineOptional<ElementTagType> dayOfWeek;
    SpineOptional<ElementTagType> calendarWeek;

    TimeInformationDataElementsType() = default;
};

/**
 * Convert a TimeInformationDataElementsType to its JSON representation
 * @param src The TimeInformationDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeInformationDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeInformationDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeInformationDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeInformationDataElementsType &dst);

/**
 * Datatype TimeDistributorDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorDataType
{
    SpineOptional<bool> isTimeDistributor;
    SpineOptional<uint32_t> distributorPriority;

    TimeDistributorDataType() = default;
};

/**
 * Convert a TimeDistributorDataType to its JSON representation
 * @param src The TimeDistributorDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeDistributorDataType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeDistributorDataType &dst);

/**
 * Datatype TimeDistributorDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorDataElementsType
{
    SpineOptional<ElementTagType> isTimeDistributor;
    SpineOptional<ElementTagType> distributorPriority;

    TimeDistributorDataElementsType() = default;
};

/**
 * Convert a TimeDistributorDataElementsType to its JSON representation
 * @param src The TimeDistributorDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeDistributorDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeDistributorDataElementsType &dst);

/**
 * Datatype TimePrecisionDataType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimePrecisionDataType
{
    SpineOptional<bool> isSynchronised;
    SpineOptional<std::string> lastSyncAt;
    SpineOptional<int> clockDrift;

    TimePrecisionDataType() = default;
};

/**
 * Convert a TimePrecisionDataType to its JSON representation
 * @param src The TimePrecisionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePrecisionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimePrecisionDataType
 * @param src The JSON variant to convert
 * @param dst The TimePrecisionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimePrecisionDataType &dst);

/**
 * Datatype TimePrecisionDataElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimePrecisionDataElementsType
{
    SpineOptional<ElementTagType> isSynchronised;
    SpineOptional<ElementTagType> lastSyncAt;
    SpineOptional<ElementTagType> clockDrift;

    TimePrecisionDataElementsType() = default;
};

/**
 * Convert a TimePrecisionDataElementsType to its JSON representation
 * @param src The TimePrecisionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimePrecisionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimePrecisionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The TimePrecisionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimePrecisionDataElementsType &dst);

/**
 * Datatype TimeDistributorEnquiryCallType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorEnquiryCallType
{

    TimeDistributorEnquiryCallType() = default;
};

/**
 * Convert a TimeDistributorEnquiryCallType to its JSON representation
 * @param src The TimeDistributorEnquiryCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorEnquiryCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeDistributorEnquiryCallType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorEnquiryCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeDistributorEnquiryCallType &dst);

/**
 * Datatype TimeDistributorEnquiryCallElementsType as defined in EEBus_SPINE_TS_TimeInformation.xsd
*/
struct TimeDistributorEnquiryCallElementsType
{

    TimeDistributorEnquiryCallElementsType() = default;
};

/**
 * Convert a TimeDistributorEnquiryCallElementsType to its JSON representation
 * @param src The TimeDistributorEnquiryCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const TimeDistributorEnquiryCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a TimeDistributorEnquiryCallElementsType
 * @param src The JSON variant to convert
 * @param dst The TimeDistributorEnquiryCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, TimeDistributorEnquiryCallElementsType &dst);

/**
 * Datatype DeviceDiagnosisStateDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisStateDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<DeviceDiagnosisOperatingStateEnumType> operatingState;
    SpineOptional<VendorStateCodeType> vendorStateCode;
    SpineOptional<LastErrorCodeType> lastErrorCode;
    SpineOptional<std::string> upTime;
    SpineOptional<std::string> totalUpTime;
    SpineOptional<PowerSupplyConditionEnumType> powerSupplyCondition;

    DeviceDiagnosisStateDataType() = default;
};

/**
 * Convert a DeviceDiagnosisStateDataType to its JSON representation
 * @param src The DeviceDiagnosisStateDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisStateDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisStateDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisStateDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisStateDataType &dst);

/**
 * Datatype DeviceDiagnosisStateDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisStateDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> operatingState;
    SpineOptional<ElementTagType> vendorStateCode;
    SpineOptional<ElementTagType> lastErrorCode;
    SpineOptional<ElementTagType> upTime;
    SpineOptional<ElementTagType> totalUpTime;
    SpineOptional<ElementTagType> powerSupplyCondition;

    DeviceDiagnosisStateDataElementsType() = default;
};

/**
 * Convert a DeviceDiagnosisStateDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisStateDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisStateDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisStateDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisStateDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisStateDataElementsType &dst);

/**
 * Datatype DeviceDiagnosisHeartbeatDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisHeartbeatDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<uint64_t> heartbeatCounter;
    SpineOptional<std::string> heartbeatTimeout;

    DeviceDiagnosisHeartbeatDataType() = default;
};

/**
 * Convert a DeviceDiagnosisHeartbeatDataType to its JSON representation
 * @param src The DeviceDiagnosisHeartbeatDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisHeartbeatDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisHeartbeatDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisHeartbeatDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisHeartbeatDataType &dst);

/**
 * Datatype DeviceDiagnosisHeartbeatDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisHeartbeatDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> heartbeatCounter;
    SpineOptional<ElementTagType> heartbeatTimeout;

    DeviceDiagnosisHeartbeatDataElementsType() = default;
};

/**
 * Convert a DeviceDiagnosisHeartbeatDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisHeartbeatDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisHeartbeatDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisHeartbeatDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisHeartbeatDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisHeartbeatDataElementsType &dst);

/**
 * Datatype DeviceDiagnosisServiceDataType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisServiceDataType
{
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;
    SpineOptional<AbsoluteOrRelativeTimeType> installationTime;
    SpineOptional<uint64_t> bootCounter;
    SpineOptional<AbsoluteOrRelativeTimeType> nextService;

    DeviceDiagnosisServiceDataType() = default;
};

/**
 * Convert a DeviceDiagnosisServiceDataType to its JSON representation
 * @param src The DeviceDiagnosisServiceDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisServiceDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisServiceDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisServiceDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisServiceDataType &dst);

/**
 * Datatype DeviceDiagnosisServiceDataElementsType as defined in EEBus_SPINE_TS_DeviceDiagnosis.xsd
*/
struct DeviceDiagnosisServiceDataElementsType
{
    SpineOptional<ElementTagType> timestamp;
    SpineOptional<ElementTagType> installationTime;
    SpineOptional<ElementTagType> bootCounter;
    SpineOptional<ElementTagType> nextService;

    DeviceDiagnosisServiceDataElementsType() = default;
};

/**
 * Convert a DeviceDiagnosisServiceDataElementsType to its JSON representation
 * @param src The DeviceDiagnosisServiceDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceDiagnosisServiceDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceDiagnosisServiceDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceDiagnosisServiceDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisServiceDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueValueType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueValueType
{
    SpineOptional<bool> boolean;
    SpineOptional<std::string> date;
    SpineOptional<std::string> dateTime;
    SpineOptional<std::string> duration;
    SpineOptional<DeviceConfigurationKeyValueStringType> string;
    SpineOptional<std::string> time;
    SpineOptional<ScaledNumberType> scaledNumber;
    SpineOptional<long> integer;

    DeviceConfigurationKeyValueValueType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueValueType to its JSON representation
 * @param src The DeviceConfigurationKeyValueValueType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueValueType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueValueType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueValueType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueValueType &dst);

/**
 * Datatype DeviceConfigurationKeyValueValueElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueValueElementsType
{
    SpineOptional<ElementTagType> boolean;
    SpineOptional<ElementTagType> date;
    SpineOptional<ElementTagType> dateTime;
    SpineOptional<ElementTagType> duration;
    SpineOptional<ElementTagType> string;
    SpineOptional<ElementTagType> time;
    SpineOptional<ScaledNumberElementsType> scaledNumber;

    DeviceConfigurationKeyValueValueElementsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueValueElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueValueElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueValueElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueValueElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueValueElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueValueElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDataType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;
    SpineOptional<DeviceConfigurationKeyValueValueType> value;
    SpineOptional<bool> isValueChangeable;

    DeviceConfigurationKeyValueDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDataElementsType
{
    SpineOptional<ElementTagType> keyId;
    SpineOptional<DeviceConfigurationKeyValueValueElementsType> value;
    SpineOptional<ElementTagType> isValueChangeable;

    DeviceConfigurationKeyValueDataElementsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueListDataType
{
    SpineOptional<std::vector<DeviceConfigurationKeyValueDataType>> deviceConfigurationKeyValueData;

    DeviceConfigurationKeyValueListDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueListDataSelectorsType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;

    DeviceConfigurationKeyValueListDataSelectorsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueListDataSelectorsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionDataType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;
    SpineOptional<DeviceConfigurationKeyNameEnumType> keyName;
    SpineOptional<DeviceConfigurationKeyValueTypeType> valueType;
    SpineOptional<UnitOfMeasurementEnumType> unit;
    SpineOptional<LabelType> label;
    SpineOptional<DescriptionType> description;

    DeviceConfigurationKeyValueDescriptionDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDescriptionDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionDataElementsType
{
    SpineOptional<ElementTagType> keyId;
    SpineOptional<ElementTagType> keyName;
    SpineOptional<ElementTagType> valueType;
    SpineOptional<ElementTagType> unit;
    SpineOptional<ElementTagType> label;
    SpineOptional<ElementTagType> description;

    DeviceConfigurationKeyValueDescriptionDataElementsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDescriptionDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionListDataType
{
    SpineOptional<std::vector<DeviceConfigurationKeyValueDescriptionDataType>> deviceConfigurationKeyValueDescriptionData;

    DeviceConfigurationKeyValueDescriptionListDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDescriptionListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueDescriptionListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueDescriptionListDataSelectorsType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;
    SpineOptional<DeviceConfigurationKeyNameEnumType> keyName;

    DeviceConfigurationKeyValueDescriptionListDataSelectorsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueDescriptionListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueDescriptionListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueDescriptionListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueDescriptionListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionListDataSelectorsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsDataType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;
    SpineOptional<DeviceConfigurationKeyValueValueType> valueRangeMin;
    SpineOptional<DeviceConfigurationKeyValueValueType> valueRangeMax;
    SpineOptional<DeviceConfigurationKeyValueValueType> valueStepSize;

    DeviceConfigurationKeyValueConstraintsDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueConstraintsDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsDataElementsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsDataElementsType
{
    SpineOptional<ElementTagType> keyId;
    SpineOptional<DeviceConfigurationKeyValueValueElementsType> valueRangeMin;
    SpineOptional<DeviceConfigurationKeyValueValueElementsType> valueRangeMax;
    SpineOptional<DeviceConfigurationKeyValueValueElementsType> valueStepSize;

    DeviceConfigurationKeyValueConstraintsDataElementsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueConstraintsDataElementsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsDataElementsType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsListDataType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsListDataType
{
    SpineOptional<std::vector<DeviceConfigurationKeyValueConstraintsDataType>> deviceConfigurationKeyValueConstraintsData;

    DeviceConfigurationKeyValueConstraintsListDataType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueConstraintsListDataType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsListDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsListDataType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsListDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsListDataType &dst);

/**
 * Datatype DeviceConfigurationKeyValueConstraintsListDataSelectorsType as defined in EEBus_SPINE_TS_DeviceConfiguration.xsd
*/
struct DeviceConfigurationKeyValueConstraintsListDataSelectorsType
{
    SpineOptional<DeviceConfigurationKeyIdType> keyId;

    DeviceConfigurationKeyValueConstraintsListDataSelectorsType() = default;
};

/**
 * Convert a DeviceConfigurationKeyValueConstraintsListDataSelectorsType to its JSON representation
 * @param src The DeviceConfigurationKeyValueConstraintsListDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DeviceConfigurationKeyValueConstraintsListDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The DeviceConfigurationKeyValueConstraintsListDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsListDataSelectorsType &dst);

/**
 * Datatype HeaderType as defined in EEBus_SPINE_TS_Datagram.xsd
*/
struct HeaderType
{
    SpineOptional<SpecificationVersionType> specificationVersion;
    SpineOptional<FeatureAddressType> addressSource;
    SpineOptional<FeatureAddressType> addressDestination;
    SpineOptional<FeatureAddressType> addressOriginator;
    SpineOptional<MsgCounterType> msgCounter;
    SpineOptional<MsgCounterType> msgCounterReference;
    SpineOptional<CmdClassifierType> cmdClassifier;
    SpineOptional<bool> ackRequest;
    SpineOptional<AbsoluteOrRelativeTimeType> timestamp;

    HeaderType() = default;
};

/**
 * Convert a HeaderType to its JSON representation
 * @param src The HeaderType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const HeaderType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a HeaderType
 * @param src The JSON variant to convert
 * @param dst The HeaderType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, HeaderType &dst);

/**
 * Datatype CmdControlType as defined in EEBus_SPINE_TS_CommandFrame.xsd
*/
struct CmdControlType
{
    SpineOptional<ElementTagType> var_delete;
    SpineOptional<ElementTagType> partial;

    CmdControlType() = default;
};

/**
 * Convert a CmdControlType to its JSON representation
 * @param src The CmdControlType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const CmdControlType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a CmdControlType
 * @param src The JSON variant to convert
 * @param dst The CmdControlType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, CmdControlType &dst);

/**
 * Datatype DataTunnelingHeaderType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingHeaderType
{
    SpineOptional<PurposeIdType> purposeId;
    SpineOptional<ChannelIdType> channelId;
    SpineOptional<uint32_t> sequenceId;

    DataTunnelingHeaderType() = default;
};

/**
 * Convert a DataTunnelingHeaderType to its JSON representation
 * @param src The DataTunnelingHeaderType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingHeaderType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DataTunnelingHeaderType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingHeaderType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DataTunnelingHeaderType &dst);

/**
 * Datatype DataTunnelingHeaderElementsType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingHeaderElementsType
{
    SpineOptional<ElementTagType> purposeId;
    SpineOptional<ElementTagType> channelId;
    SpineOptional<ElementTagType> sequenceId;

    DataTunnelingHeaderElementsType() = default;
};

/**
 * Convert a DataTunnelingHeaderElementsType to its JSON representation
 * @param src The DataTunnelingHeaderElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingHeaderElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DataTunnelingHeaderElementsType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingHeaderElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DataTunnelingHeaderElementsType &dst);

/**
 * Datatype DataTunnelingCallType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingCallType
{
    SpineOptional<DataTunnelingHeaderType> header;
    SpineOptional<std::string> payload;

    DataTunnelingCallType() = default;
};

/**
 * Convert a DataTunnelingCallType to its JSON representation
 * @param src The DataTunnelingCallType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingCallType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DataTunnelingCallType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingCallType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DataTunnelingCallType &dst);

/**
 * Datatype DataTunnelingCallElementsType as defined in EEBus_SPINE_TS_DataTunneling.xsd
*/
struct DataTunnelingCallElementsType
{
    SpineOptional<DataTunnelingHeaderElementsType> header;
    SpineOptional<ElementTagType> payload;

    DataTunnelingCallElementsType() = default;
};

/**
 * Convert a DataTunnelingCallElementsType to its JSON representation
 * @param src The DataTunnelingCallElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const DataTunnelingCallElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a DataTunnelingCallElementsType
 * @param src The JSON variant to convert
 * @param dst The DataTunnelingCallElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, DataTunnelingCallElementsType &dst);

/**
 * Datatype IncentiveTableTierType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableTierType
{
    SpineOptional<TierDataType> tier;
    SpineOptional<std::vector<TierBoundaryDataType>> boundary;
    SpineOptional<std::vector<IncentiveDataType>> incentive;

    IncentiveTableTierType() = default;
};

/**
 * Convert a IncentiveTableTierType to its JSON representation
 * @param src The IncentiveTableTierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableTierType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableTierType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableTierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableTierType &dst);

/**
 * Datatype IncentiveTableIncentiveSlotType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableIncentiveSlotType
{
    SpineOptional<TimeTableDataType> timeInterval;
    SpineOptional<std::vector<IncentiveTableTierType>> tier;

    IncentiveTableIncentiveSlotType() = default;
};

/**
 * Convert a IncentiveTableIncentiveSlotType to its JSON representation
 * @param src The IncentiveTableIncentiveSlotType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableIncentiveSlotType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableIncentiveSlotType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableIncentiveSlotType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableIncentiveSlotType &dst);

/**
 * Datatype IncentiveTableType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableType
{
    SpineOptional<TariffDataType> tariff;
    SpineOptional<std::vector<IncentiveTableIncentiveSlotType>> incentiveSlot;

    IncentiveTableType() = default;
};

/**
 * Convert a IncentiveTableType to its JSON representation
 * @param src The IncentiveTableType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableType &dst);

/**
 * Datatype IncentiveTableDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataType
{
    SpineOptional<std::vector<IncentiveTableType>> incentiveTable;

    IncentiveTableDataType() = default;
};

/**
 * Convert a IncentiveTableDataType to its JSON representation
 * @param src The IncentiveTableDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataType &dst);

/**
 * Datatype IncentiveTableTierElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableTierElementsType
{
    SpineOptional<TierDataElementsType> tier;
    SpineOptional<TierBoundaryDataElementsType> boundary;
    SpineOptional<IncentiveDataElementsType> incentive;

    IncentiveTableTierElementsType() = default;
};

/**
 * Convert a IncentiveTableTierElementsType to its JSON representation
 * @param src The IncentiveTableTierElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableTierElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableTierElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableTierElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableTierElementsType &dst);

/**
 * Datatype IncentiveTableIncentiveSlotElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableIncentiveSlotElementsType
{
    SpineOptional<TimeTableDataElementsType> timeInterval;
    SpineOptional<IncentiveTableTierElementsType> tier;

    IncentiveTableIncentiveSlotElementsType() = default;
};

/**
 * Convert a IncentiveTableIncentiveSlotElementsType to its JSON representation
 * @param src The IncentiveTableIncentiveSlotElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableIncentiveSlotElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableIncentiveSlotElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableIncentiveSlotElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableIncentiveSlotElementsType &dst);

/**
 * Datatype IncentiveTableElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableElementsType
{
    SpineOptional<TariffDataElementsType> tariff;
    SpineOptional<IncentiveTableIncentiveSlotElementsType> incentiveSlot;

    IncentiveTableElementsType() = default;
};

/**
 * Convert a IncentiveTableElementsType to its JSON representation
 * @param src The IncentiveTableElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableElementsType &dst);

/**
 * Datatype IncentiveTableDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataElementsType
{
    SpineOptional<IncentiveTableElementsType> incentiveTable;

    IncentiveTableDataElementsType() = default;
};

/**
 * Convert a IncentiveTableDataElementsType to its JSON representation
 * @param src The IncentiveTableDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataElementsType &dst);

/**
 * Datatype IncentiveTableDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDataSelectorsType
{
    SpineOptional<TariffListDataSelectorsType> tariff;

    IncentiveTableDataSelectorsType() = default;
};

/**
 * Convert a IncentiveTableDataSelectorsType to its JSON representation
 * @param src The IncentiveTableDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataSelectorsType &dst);

/**
 * Datatype IncentiveTableDescriptionTierType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionTierType
{
    SpineOptional<TierDescriptionDataType> tierDescription;
    SpineOptional<std::vector<TierBoundaryDescriptionDataType>> boundaryDescription;
    SpineOptional<std::vector<IncentiveDescriptionDataType>> incentiveDescription;

    IncentiveTableDescriptionTierType() = default;
};

/**
 * Convert a IncentiveTableDescriptionTierType to its JSON representation
 * @param src The IncentiveTableDescriptionTierType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionTierType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionTierType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionTierType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionTierType &dst);

/**
 * Datatype IncentiveTableDescriptionType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionType
{
    SpineOptional<TariffDescriptionDataType> tariffDescription;
    SpineOptional<std::vector<IncentiveTableDescriptionTierType>> tier;

    IncentiveTableDescriptionType() = default;
};

/**
 * Convert a IncentiveTableDescriptionType to its JSON representation
 * @param src The IncentiveTableDescriptionType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionType &dst);

/**
 * Datatype IncentiveTableDescriptionDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataType
{
    SpineOptional<std::vector<IncentiveTableDescriptionType>> incentiveTableDescription;

    IncentiveTableDescriptionDataType() = default;
};

/**
 * Convert a IncentiveTableDescriptionDataType to its JSON representation
 * @param src The IncentiveTableDescriptionDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataType &dst);

/**
 * Datatype IncentiveTableDescriptionTierElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionTierElementsType
{
    SpineOptional<TierDescriptionDataElementsType> tierDescription;
    SpineOptional<TierBoundaryDescriptionDataElementsType> boundaryDescription;
    SpineOptional<IncentiveDescriptionDataElementsType> incentiveDescription;

    IncentiveTableDescriptionTierElementsType() = default;
};

/**
 * Convert a IncentiveTableDescriptionTierElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionTierElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionTierElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionTierElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionTierElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionTierElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionElementsType
{
    SpineOptional<TariffDescriptionDataElementsType> tariffDescription;
    SpineOptional<IncentiveTableDescriptionTierElementsType> tier;

    IncentiveTableDescriptionElementsType() = default;
};

/**
 * Convert a IncentiveTableDescriptionElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataElementsType
{
    SpineOptional<IncentiveTableDescriptionElementsType> incentiveTableDescription;

    IncentiveTableDescriptionDataElementsType() = default;
};

/**
 * Convert a IncentiveTableDescriptionDataElementsType to its JSON representation
 * @param src The IncentiveTableDescriptionDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataElementsType &dst);

/**
 * Datatype IncentiveTableDescriptionDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableDescriptionDataSelectorsType
{
    SpineOptional<TariffDescriptionListDataSelectorsType> tariffDescription;

    IncentiveTableDescriptionDataSelectorsType() = default;
};

/**
 * Convert a IncentiveTableDescriptionDataSelectorsType to its JSON representation
 * @param src The IncentiveTableDescriptionDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableDescriptionDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableDescriptionDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableDescriptionDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataSelectorsType &dst);

/**
 * Datatype IncentiveTableConstraintsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsType
{
    SpineOptional<TariffDataType> tariff;
    SpineOptional<TariffOverallConstraintsDataType> tariffConstraints;
    SpineOptional<TimeTableConstraintsDataType> incentiveSlotConstraints;

    IncentiveTableConstraintsType() = default;
};

/**
 * Convert a IncentiveTableConstraintsType to its JSON representation
 * @param src The IncentiveTableConstraintsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataType
{
    SpineOptional<std::vector<IncentiveTableConstraintsType>> incentiveTableConstraints;

    IncentiveTableConstraintsDataType() = default;
};

/**
 * Convert a IncentiveTableConstraintsDataType to its JSON representation
 * @param src The IncentiveTableConstraintsDataType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataType &dst);

/**
 * Datatype IncentiveTableConstraintsElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsElementsType
{
    SpineOptional<TariffDataElementsType> tariff;
    SpineOptional<TariffOverallConstraintsDataElementsType> tariffConstraints;
    SpineOptional<TimeTableConstraintsDataElementsType> incentiveSlotConstraints;

    IncentiveTableConstraintsElementsType() = default;
};

/**
 * Convert a IncentiveTableConstraintsElementsType to its JSON representation
 * @param src The IncentiveTableConstraintsElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsElementsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataElementsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataElementsType
{
    SpineOptional<IncentiveTableConstraintsElementsType> incentiveTableConstraints;

    IncentiveTableConstraintsDataElementsType() = default;
};

/**
 * Convert a IncentiveTableConstraintsDataElementsType to its JSON representation
 * @param src The IncentiveTableConstraintsDataElementsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataElementsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataElementsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataElementsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataElementsType &dst);

/**
 * Datatype IncentiveTableConstraintsDataSelectorsType as defined in EEBus_SPINE_TS_IncentiveTable.xsd
*/
struct IncentiveTableConstraintsDataSelectorsType
{
    SpineOptional<TariffListDataSelectorsType> tariff;

    IncentiveTableConstraintsDataSelectorsType() = default;
};

/**
 * Convert a IncentiveTableConstraintsDataSelectorsType to its JSON representation
 * @param src The IncentiveTableConstraintsDataSelectorsType to convert
 * @param dst The JSON variant to fill with the converted data.
 * @return true if the conversion was successful, false otherwise.
 */
bool convertToJson(const IncentiveTableConstraintsDataSelectorsType &src, JsonVariant &dst);
/**
 * Convert a JSON representation to a IncentiveTableConstraintsDataSelectorsType
 * @param src The JSON variant to convert
 * @param dst The IncentiveTableConstraintsDataSelectorsType to fill with the converted data.
 */
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataSelectorsType &dst);


class SpineDataTypeHandler
{
public:
    SpineOptional<EnumExtendType> enumextendtype;
    SpineOptional<DirectControlActivityStateType> directcontrolactivitystatetype;
    SpineOptional<LabelType> labeltype;
    SpineOptional<DescriptionType> descriptiontype;
    SpineOptional<SpecificationVersionType> specificationversiontype;
    SpineOptional<AbsoluteOrRelativeTimeType> absoluteorrelativetimetype;
    SpineOptional<RecurringIntervalType> recurringintervaltype;
    SpineOptional<DayOfMonthType> dayofmonthtype;
    SpineOptional<CalendarWeekType> calendarweektype;
    SpineOptional<OccurrenceType> occurrencetype;
    SpineOptional<NumberType> numbertype;
    SpineOptional<ScaleType> scaletype;
    SpineOptional<MaxResponseDelayType> maxresponsedelaytype;
    SpineOptional<CommodityTypeType> commoditytypetype;
    SpineOptional<EnergyDirectionType> energydirectiontype;
    SpineOptional<EnergyModeType> energymodetype;
    SpineOptional<UnitOfMeasurementType> unitofmeasurementtype;
    SpineOptional<CurrencyType> currencytype;
    SpineOptional<AddressDeviceType> addressdevicetype;
    SpineOptional<AddressEntityType> addressentitytype;
    SpineOptional<AddressFeatureType> addressfeaturetype;
    SpineOptional<ScopeTypeType> scopetypetype;
    SpineOptional<FeatureGroupType> featuregrouptype;
    SpineOptional<DeviceTypeType> devicetypetype;
    SpineOptional<EntityTypeType> entitytypetype;
    SpineOptional<FeatureTypeType> featuretypetype;
    SpineOptional<FeatureSpecificUsageEnumType> featurespecificusageenumtype;
    SpineOptional<FeatureSpecificUsageType> featurespecificusagetype;
    SpineOptional<FunctionType> functiontype;
    SpineOptional<AlternativesIdType> alternativesidtype;
    SpineOptional<PowerSequenceIdType> powersequenceidtype;
    SpineOptional<PowerTimeSlotNumberType> powertimeslotnumbertype;
    SpineOptional<PowerTimeSlotValueTypeType> powertimeslotvaluetypetype;
    SpineOptional<PowerSequenceScopeType> powersequencescopetype;
    SpineOptional<PowerSequenceStateType> powersequencestatetype;
    SpineOptional<MeasurementIdType> measurementidtype;
    SpineOptional<MeasurementTypeType> measurementtypetype;
    SpineOptional<MeasurementValueTypeType> measurementvaluetypetype;
    SpineOptional<MeasurementValueSourceType> measurementvaluesourcetype;
    SpineOptional<MeasurementValueTendencyType> measurementvaluetendencytype;
    SpineOptional<MeasurementValueStateType> measurementvaluestatetype;
    SpineOptional<ThresholdIdType> thresholdidtype;
    SpineOptional<ThresholdTypeType> thresholdtypetype;
    SpineOptional<BillIdType> billidtype;
    SpineOptional<BillTypeType> billtypetype;
    SpineOptional<BillPositionIdType> billpositionidtype;
    SpineOptional<BillPositionCountType> billpositioncounttype;
    SpineOptional<BillPositionTypeType> billpositiontypetype;
    SpineOptional<BillValueIdType> billvalueidtype;
    SpineOptional<BillCostIdType> billcostidtype;
    SpineOptional<BillCostTypeType> billcosttypetype;
    SpineOptional<IdentificationIdType> identificationidtype;
    SpineOptional<IdentificationTypeType> identificationtypetype;
    SpineOptional<IdentificationValueType> identificationvaluetype;
    SpineOptional<SessionIdType> sessionidtype;
    SpineOptional<SetpointIdType> setpointidtype;
    SpineOptional<SetpointTypeType> setpointtypetype;
    SpineOptional<TimeTableIdType> timetableidtype;
    SpineOptional<TimeSlotIdType> timeslotidtype;
    SpineOptional<TimeSlotCountType> timeslotcounttype;
    SpineOptional<TimeSlotTimeModeType> timeslottimemodetype;
    SpineOptional<SensingStateType> sensingstatetype;
    SpineOptional<SensingTypeType> sensingtypetype;
    SpineOptional<ErrorNumberType> errornumbertype;
    SpineOptional<ActuatorSwitchFctType> actuatorswitchfcttype;
    SpineOptional<NetworkManagementNativeSetupType> networkmanagementnativesetuptype;
    SpineOptional<NetworkManagementScanSetupType> networkmanagementscansetuptype;
    SpineOptional<NetworkManagementSetupType> networkmanagementsetuptype;
    SpineOptional<NetworkManagementCandidateSetupType> networkmanagementcandidatesetuptype;
    SpineOptional<NetworkManagementTechnologyAddressType> networkmanagementtechnologyaddresstype;
    SpineOptional<NetworkManagementCommunicationsTechnologyInformationType> networkmanagementcommunicationstechnologyinformationtype;
    SpineOptional<NetworkManagementMinimumTrustLevelType> networkmanagementminimumtrustleveltype;
    SpineOptional<NetworkManagementProcessTimeoutType> networkmanagementprocesstimeouttype;
    SpineOptional<ConditionIdType> conditionidtype;
    SpineOptional<SupplyConditionEventTypeType> supplyconditioneventtypetype;
    SpineOptional<SupplyConditionOriginatorType> supplyconditionoriginatortype;
    SpineOptional<GridConditionType> gridconditiontype;
    SpineOptional<AlarmIdType> alarmidtype;
    SpineOptional<AlarmTypeType> alarmtypetype;
    SpineOptional<BindingIdType> bindingidtype;
    SpineOptional<SubscriptionIdType> subscriptionidtype;
    SpineOptional<UseCaseActorEnumType> usecaseactorenumtype;
    SpineOptional<UseCaseActorType> usecaseactortype;
    SpineOptional<UseCaseNameEnumType> usecasenameenumtype;
    SpineOptional<UseCaseNameType> usecasenametype;
    SpineOptional<UseCaseScenarioSupportType> usecasescenariosupporttype;
    SpineOptional<SpecificationVersionDataType> specificationversiondatatype;
    SpineOptional<TaskManagementJobIdType> taskmanagementjobidtype;
    SpineOptional<TaskManagementJobStateType> taskmanagementjobstatetype;
    SpineOptional<TaskManagementJobSourceType> taskmanagementjobsourcetype;
    SpineOptional<HvacSystemFunctionIdType> hvacsystemfunctionidtype;
    SpineOptional<HvacSystemFunctionTypeType> hvacsystemfunctiontypetype;
    SpineOptional<HvacOperationModeIdType> hvacoperationmodeidtype;
    SpineOptional<HvacOperationModeTypeType> hvacoperationmodetypetype;
    SpineOptional<HvacOverrunIdType> hvacoverrunidtype;
    SpineOptional<HvacOverrunTypeType> hvacoverruntypetype;
    SpineOptional<HvacOverrunStatusType> hvacoverrunstatustype;
    SpineOptional<LoadControlEventIdType> loadcontroleventidtype;
    SpineOptional<LoadControlEventActionType> loadcontroleventactiontype;
    SpineOptional<LoadControlEventStateType> loadcontroleventstatetype;
    SpineOptional<LoadControlLimitIdType> loadcontrollimitidtype;
    SpineOptional<LoadControlLimitTypeType> loadcontrollimittypetype;
    SpineOptional<LoadControlCategoryType> loadcontrolcategorytype;
    SpineOptional<DeviceClassificationStringType> deviceclassificationstringtype;
    SpineOptional<PowerSourceType> powersourcetype;
    SpineOptional<ActuatorLevelFctType> actuatorlevelfcttype;
    SpineOptional<TimeSeriesIdType> timeseriesidtype;
    SpineOptional<TimeSeriesSlotIdType> timeseriesslotidtype;
    SpineOptional<TimeSeriesSlotCountType> timeseriesslotcounttype;
    SpineOptional<TimeSeriesTypeType> timeseriestypetype;
    SpineOptional<MessagingNumberType> messagingnumbertype;
    SpineOptional<MessagingTypeType> messagingtypetype;
    SpineOptional<MessagingDataTextType> messagingdatatexttype;
    SpineOptional<TariffIdType> tariffidtype;
    SpineOptional<TariffCountType> tariffcounttype;
    SpineOptional<TierBoundaryIdType> tierboundaryidtype;
    SpineOptional<TierBoundaryCountType> tierboundarycounttype;
    SpineOptional<TierBoundaryTypeType> tierboundarytypetype;
    SpineOptional<CommodityIdType> commodityidtype;
    SpineOptional<TierIdType> tieridtype;
    SpineOptional<TierCountType> tiercounttype;
    SpineOptional<TierTypeType> tiertypetype;
    SpineOptional<IncentiveIdType> incentiveidtype;
    SpineOptional<IncentiveCountType> incentivecounttype;
    SpineOptional<IncentiveTypeType> incentivetypetype;
    SpineOptional<IncentivePriorityType> incentiveprioritytype;
    SpineOptional<IncentiveValueTypeType> incentivevaluetypetype;
    SpineOptional<stateInformationIdType> stateinformationidtype;
    SpineOptional<StateInformationType> stateinformationtype;
    SpineOptional<StateInformationCategoryType> stateinformationcategorytype;
    SpineOptional<ElectricalConnectionIdType> electricalconnectionidtype;
    SpineOptional<ElectricalConnectionParameterIdType> electricalconnectionparameteridtype;
    SpineOptional<ElectricalConnectionMeasurandVariantType> electricalconnectionmeasurandvarianttype;
    SpineOptional<ElectricalConnectionVoltageTypeType> electricalconnectionvoltagetypetype;
    SpineOptional<ElectricalConnectionAcMeasurementTypeType> electricalconnectionacmeasurementtypetype;
    SpineOptional<ElectricalConnectionPhaseNameType> electricalconnectionphasenametype;
    SpineOptional<ElectricalConnectionCharacteristicIdType> electricalconnectioncharacteristicidtype;
    SpineOptional<ElectricalConnectionCharacteristicContextType> electricalconnectioncharacteristiccontexttype;
    SpineOptional<ElectricalConnectionCharacteristicTypeType> electricalconnectioncharacteristictypetype;
    SpineOptional<VendorStateCodeType> vendorstatecodetype;
    SpineOptional<LastErrorCodeType> lasterrorcodetype;
    SpineOptional<DeviceDiagnosisOperatingStateType> devicediagnosisoperatingstatetype;
    SpineOptional<PowerSupplyConditionType> powersupplyconditiontype;
    SpineOptional<DeviceConfigurationKeyIdType> deviceconfigurationkeyidtype;
    SpineOptional<DeviceConfigurationKeyValueStringType> deviceconfigurationkeyvaluestringtype;
    SpineOptional<DeviceConfigurationKeyNameType> deviceconfigurationkeynametype;
    SpineOptional<MsgCounterType> msgcountertype;
    SpineOptional<FilterIdType> filteridtype;
    SpineOptional<PurposeIdType> purposeidtype;
    SpineOptional<ChannelIdType> channelidtype;
    SpineOptional<DirectControlActivityStateEnumType> directcontrolactivitystateenumtype;
    SpineOptional<RecurringIntervalEnumType> recurringintervalenumtype;
    SpineOptional<MonthType> monthtype;
    SpineOptional<DayOfWeekType> dayofweektype;
    SpineOptional<OccurrenceEnumType> occurrenceenumtype;
    SpineOptional<CommodityTypeEnumType> commoditytypeenumtype;
    SpineOptional<EnergyDirectionEnumType> energydirectionenumtype;
    SpineOptional<EnergyModeEnumType> energymodeenumtype;
    SpineOptional<UnitOfMeasurementEnumType> unitofmeasurementenumtype;
    SpineOptional<CurrencyEnumType> currencyenumtype;
    SpineOptional<ScopeTypeEnumType> scopetypeenumtype;
    SpineOptional<RoleType> roletype;
    SpineOptional<DeviceTypeEnumType> devicetypeenumtype;
    SpineOptional<EntityTypeEnumType> entitytypeenumtype;
    SpineOptional<FeatureTypeEnumType> featuretypeenumtype;
    SpineOptional<FeatureDirectControlSpecificUsageEnumType> featuredirectcontrolspecificusageenumtype;
    SpineOptional<FeatureHvacSpecificUsageEnumType> featurehvacspecificusageenumtype;
    SpineOptional<FeatureMeasurementSpecificUsageEnumType> featuremeasurementspecificusageenumtype;
    SpineOptional<FeatureSetpointSpecificUsageEnumType> featuresetpointspecificusageenumtype;
    SpineOptional<FeatureSmartEnergyManagementPsSpecificUsageEnumType> featuresmartenergymanagementpsspecificusageenumtype;
    SpineOptional<FunctionEnumType> functionenumtype;
    SpineOptional<PowerTimeSlotValueTypeEnumType> powertimeslotvaluetypeenumtype;
    SpineOptional<PowerSequenceScopeEnumType> powersequencescopeenumtype;
    SpineOptional<PowerSequenceStateEnumType> powersequencestateenumtype;
    SpineOptional<MeasurementTypeEnumType> measurementtypeenumtype;
    SpineOptional<MeasurementValueTypeEnumType> measurementvaluetypeenumtype;
    SpineOptional<MeasurementValueSourceEnumType> measurementvaluesourceenumtype;
    SpineOptional<MeasurementValueTendencyEnumType> measurementvaluetendencyenumtype;
    SpineOptional<MeasurementValueStateEnumType> measurementvaluestateenumtype;
    SpineOptional<ThresholdTypeEnumType> thresholdtypeenumtype;
    SpineOptional<BillTypeEnumType> billtypeenumtype;
    SpineOptional<BillPositionTypeEnumType> billpositiontypeenumtype;
    SpineOptional<BillCostTypeEnumType> billcosttypeenumtype;
    SpineOptional<IdentificationTypeEnumType> identificationtypeenumtype;
    SpineOptional<SetpointTypeEnumType> setpointtypeenumtype;
    SpineOptional<TimeSlotTimeModeEnumType> timeslottimemodeenumtype;
    SpineOptional<SensingStateEnumType> sensingstateenumtype;
    SpineOptional<SensingTypeEnumType> sensingtypeenumtype;
    SpineOptional<ActuatorSwitchFctEnumType> actuatorswitchfctenumtype;
    SpineOptional<NetworkManagementFeatureSetType> networkmanagementfeaturesettype;
    SpineOptional<NetworkManagementProcessStateStateType> networkmanagementprocessstatestatetype;
    SpineOptional<NetworkManagementStateChangeType> networkmanagementstatechangetype;
    SpineOptional<SupplyConditionEventTypeEnumType> supplyconditioneventtypeenumtype;
    SpineOptional<SupplyConditionOriginatorEnumType> supplyconditionoriginatorenumtype;
    SpineOptional<GridConditionEnumType> gridconditionenumtype;
    SpineOptional<AlarmTypeEnumType> alarmtypeenumtype;
    SpineOptional<HvacOverrunStatusEnumType> hvacoverrunstatusenumtype;
    SpineOptional<LoadControlEventStateEnumType> loadcontroleventstateenumtype;
    SpineOptional<TaskManagementJobSourceEnumType> taskmanagementjobsourceenumtype;
    SpineOptional<HvacSystemFunctionTypeEnumType> hvacsystemfunctiontypeenumtype;
    SpineOptional<HvacOperationModeTypeEnumType> hvacoperationmodetypeenumtype;
    SpineOptional<HvacOverrunTypeEnumType> hvacoverruntypeenumtype;
    SpineOptional<LoadControlEventActionEnumType> loadcontroleventactionenumtype;
    SpineOptional<LoadControlLimitTypeEnumType> loadcontrollimittypeenumtype;
    SpineOptional<LoadControlCategoryEnumType> loadcontrolcategoryenumtype;
    SpineOptional<PowerSourceEnumType> powersourceenumtype;
    SpineOptional<ActuatorLevelFctEnumType> actuatorlevelfctenumtype;
    SpineOptional<TimeSeriesTypeEnumType> timeseriestypeenumtype;
    SpineOptional<MessagingTypeEnumType> messagingtypeenumtype;
    SpineOptional<TierBoundaryTypeEnumType> tierboundarytypeenumtype;
    SpineOptional<TierTypeEnumType> tiertypeenumtype;
    SpineOptional<IncentiveTypeEnumType> incentivetypeenumtype;
    SpineOptional<IncentiveValueTypeEnumType> incentivevaluetypeenumtype;
    SpineOptional<StateInformationFunctionalityEnumType> stateinformationfunctionalityenumtype;
    SpineOptional<StateInformationFailureEnumType> stateinformationfailureenumtype;
    SpineOptional<StateInformationCategoryEnumType> stateinformationcategoryenumtype;
    SpineOptional<ElectricalConnectionMeasurandVariantEnumType> electricalconnectionmeasurandvariantenumtype;
    SpineOptional<ElectricalConnectionVoltageTypeEnumType> electricalconnectionvoltagetypeenumtype;
    SpineOptional<ElectricalConnectionAcMeasurementTypeEnumType> electricalconnectionacmeasurementtypeenumtype;
    SpineOptional<ElectricalConnectionPhaseNameEnumType> electricalconnectionphasenameenumtype;
    SpineOptional<ElectricalConnectionConnectionPointType> electricalconnectionconnectionpointtype;
    SpineOptional<ElectricalConnectionCharacteristicContextEnumType> electricalconnectioncharacteristiccontextenumtype;
    SpineOptional<ElectricalConnectionCharacteristicTypeEnumType> electricalconnectioncharacteristictypeenumtype;
    SpineOptional<DeviceDiagnosisOperatingStateEnumType> devicediagnosisoperatingstateenumtype;
    SpineOptional<PowerSupplyConditionEnumType> powersupplyconditionenumtype;
    SpineOptional<DeviceConfigurationKeyNameEnumType> deviceconfigurationkeynameenumtype;
    SpineOptional<DeviceConfigurationKeyValueTypeType> deviceconfigurationkeyvaluetypetype;
    SpineOptional<CmdClassifierType> cmdclassifiertype;
    SpineOptional<ScaledNumberType> scalednumbertype;
    SpineOptional<DirectControlActivityDataType> directcontrolactivitydatatype;
    SpineOptional<ElementTagType> elementtagtype;
    SpineOptional<ScaledNumberElementsType> scalednumberelementstype;
    SpineOptional<DirectControlActivityDataElementsType> directcontrolactivitydataelementstype;
    SpineOptional<DirectControlActivityListDataType> directcontrolactivitylistdatatype;
    SpineOptional<TimestampIntervalType> timestampintervaltype;
    SpineOptional<DirectControlActivityListDataSelectorsType> directcontrolactivitylistdataselectorstype;
    SpineOptional<DirectControlDescriptionDataType> directcontroldescriptiondatatype;
    SpineOptional<DirectControlDescriptionDataElementsType> directcontroldescriptiondataelementstype;
    SpineOptional<TimePeriodType> timeperiodtype;
    SpineOptional<TimePeriodElementsType> timeperiodelementstype;
    SpineOptional<DaysOfWeekType> daysofweektype;
    SpineOptional<AbsoluteOrRecurringTimeType> absoluteorrecurringtimetype;
    SpineOptional<AbsoluteOrRecurringTimeElementsType> absoluteorrecurringtimeelementstype;
    SpineOptional<RecurrenceInformationType> recurrenceinformationtype;
    SpineOptional<RecurrenceInformationElementsType> recurrenceinformationelementstype;
    SpineOptional<ScaledNumberRangeType> scalednumberrangetype;
    SpineOptional<ScaledNumberRangeElementsType> scalednumberrangeelementstype;
    SpineOptional<ScaledNumberSetType> scalednumbersettype;
    SpineOptional<ScaledNumberSetElementsType> scalednumbersetelementstype;
    SpineOptional<DeviceAddressType> deviceaddresstype;
    SpineOptional<DeviceAddressElementsType> deviceaddresselementstype;
    SpineOptional<EntityAddressType> entityaddresstype;
    SpineOptional<EntityAddressElementsType> entityaddresselementstype;
    SpineOptional<FeatureAddressType> featureaddresstype;
    SpineOptional<FeatureAddressElementsType> featureaddresselementstype;
    SpineOptional<PossibleOperationsClassifierType> possibleoperationsclassifiertype;
    SpineOptional<PossibleOperationsReadType> possibleoperationsreadtype;
    SpineOptional<PossibleOperationsWriteType> possibleoperationswritetype;
    SpineOptional<PossibleOperationsType> possibleoperationstype;
    SpineOptional<PossibleOperationsElementsType> possibleoperationselementstype;
    SpineOptional<FunctionPropertyType> functionpropertytype;
    SpineOptional<FunctionPropertyElementsType> functionpropertyelementstype;
    SpineOptional<PowerTimeSlotScheduleDataType> powertimeslotscheduledatatype;
    SpineOptional<PowerTimeSlotScheduleDataElementsType> powertimeslotscheduledataelementstype;
    SpineOptional<PowerTimeSlotScheduleListDataType> powertimeslotschedulelistdatatype;
    SpineOptional<PowerTimeSlotScheduleListDataSelectorsType> powertimeslotschedulelistdataselectorstype;
    SpineOptional<PowerTimeSlotValueDataType> powertimeslotvaluedatatype;
    SpineOptional<PowerTimeSlotValueDataElementsType> powertimeslotvaluedataelementstype;
    SpineOptional<PowerTimeSlotValueListDataType> powertimeslotvaluelistdatatype;
    SpineOptional<PowerTimeSlotValueListDataSelectorsType> powertimeslotvaluelistdataselectorstype;
    SpineOptional<PowerTimeSlotScheduleConstraintsDataType> powertimeslotscheduleconstraintsdatatype;
    SpineOptional<PowerTimeSlotScheduleConstraintsDataElementsType> powertimeslotscheduleconstraintsdataelementstype;
    SpineOptional<PowerTimeSlotScheduleConstraintsListDataType> powertimeslotscheduleconstraintslistdatatype;
    SpineOptional<PowerTimeSlotScheduleConstraintsListDataSelectorsType> powertimeslotscheduleconstraintslistdataselectorstype;
    SpineOptional<PowerSequenceAlternativesRelationDataType> powersequencealternativesrelationdatatype;
    SpineOptional<PowerSequenceAlternativesRelationDataElementsType> powersequencealternativesrelationdataelementstype;
    SpineOptional<PowerSequenceAlternativesRelationListDataType> powersequencealternativesrelationlistdatatype;
    SpineOptional<PowerSequenceAlternativesRelationListDataSelectorsType> powersequencealternativesrelationlistdataselectorstype;
    SpineOptional<PowerSequenceDescriptionDataType> powersequencedescriptiondatatype;
    SpineOptional<PowerSequenceDescriptionDataElementsType> powersequencedescriptiondataelementstype;
    SpineOptional<PowerSequenceDescriptionListDataType> powersequencedescriptionlistdatatype;
    SpineOptional<PowerSequenceDescriptionListDataSelectorsType> powersequencedescriptionlistdataselectorstype;
    SpineOptional<PowerSequenceStateDataType> powersequencestatedatatype;
    SpineOptional<PowerSequenceStateDataElementsType> powersequencestatedataelementstype;
    SpineOptional<PowerSequenceStateListDataType> powersequencestatelistdatatype;
    SpineOptional<PowerSequenceStateListDataSelectorsType> powersequencestatelistdataselectorstype;
    SpineOptional<PowerSequenceScheduleDataType> powersequencescheduledatatype;
    SpineOptional<PowerSequenceScheduleDataElementsType> powersequencescheduledataelementstype;
    SpineOptional<PowerSequenceScheduleListDataType> powersequenceschedulelistdatatype;
    SpineOptional<PowerSequenceScheduleListDataSelectorsType> powersequenceschedulelistdataselectorstype;
    SpineOptional<PowerSequenceScheduleConstraintsDataType> powersequencescheduleconstraintsdatatype;
    SpineOptional<PowerSequenceScheduleConstraintsDataElementsType> powersequencescheduleconstraintsdataelementstype;
    SpineOptional<PowerSequenceScheduleConstraintsListDataType> powersequencescheduleconstraintslistdatatype;
    SpineOptional<PowerSequenceScheduleConstraintsListDataSelectorsType> powersequencescheduleconstraintslistdataselectorstype;
    SpineOptional<PowerSequencePriceDataType> powersequencepricedatatype;
    SpineOptional<PowerSequencePriceDataElementsType> powersequencepricedataelementstype;
    SpineOptional<PowerSequencePriceListDataType> powersequencepricelistdatatype;
    SpineOptional<PowerSequencePriceListDataSelectorsType> powersequencepricelistdataselectorstype;
    SpineOptional<PowerSequenceSchedulePreferenceDataType> powersequenceschedulepreferencedatatype;
    SpineOptional<PowerSequenceSchedulePreferenceDataElementsType> powersequenceschedulepreferencedataelementstype;
    SpineOptional<PowerSequenceSchedulePreferenceListDataType> powersequenceschedulepreferencelistdatatype;
    SpineOptional<PowerSequenceSchedulePreferenceListDataSelectorsType> powersequenceschedulepreferencelistdataselectorstype;
    SpineOptional<PowerSequenceNodeScheduleInformationDataType> powersequencenodescheduleinformationdatatype;
    SpineOptional<PowerSequenceNodeScheduleInformationDataElementsType> powersequencenodescheduleinformationdataelementstype;
    SpineOptional<PowerSequenceScheduleConfigurationRequestCallType> powersequencescheduleconfigurationrequestcalltype;
    SpineOptional<PowerSequenceScheduleConfigurationRequestCallElementsType> powersequencescheduleconfigurationrequestcallelementstype;
    SpineOptional<PowerSequencePriceCalculationRequestCallType> powersequencepricecalculationrequestcalltype;
    SpineOptional<PowerSequencePriceCalculationRequestCallElementsType> powersequencepricecalculationrequestcallelementstype;
    SpineOptional<MeasurementDataType> measurementdatatype;
    SpineOptional<MeasurementDataElementsType> measurementdataelementstype;
    SpineOptional<MeasurementListDataType> measurementlistdatatype;
    SpineOptional<MeasurementListDataSelectorsType> measurementlistdataselectorstype;
    SpineOptional<MeasurementSeriesDataType> measurementseriesdatatype;
    SpineOptional<MeasurementSeriesDataElementsType> measurementseriesdataelementstype;
    SpineOptional<MeasurementSeriesListDataType> measurementserieslistdatatype;
    SpineOptional<MeasurementSeriesListDataSelectorsType> measurementserieslistdataselectorstype;
    SpineOptional<MeasurementConstraintsDataType> measurementconstraintsdatatype;
    SpineOptional<MeasurementConstraintsDataElementsType> measurementconstraintsdataelementstype;
    SpineOptional<MeasurementConstraintsListDataType> measurementconstraintslistdatatype;
    SpineOptional<MeasurementConstraintsListDataSelectorsType> measurementconstraintslistdataselectorstype;
    SpineOptional<MeasurementDescriptionDataType> measurementdescriptiondatatype;
    SpineOptional<MeasurementDescriptionDataElementsType> measurementdescriptiondataelementstype;
    SpineOptional<MeasurementDescriptionListDataType> measurementdescriptionlistdatatype;
    SpineOptional<MeasurementDescriptionListDataSelectorsType> measurementdescriptionlistdataselectorstype;
    SpineOptional<MeasurementThresholdRelationDataType> measurementthresholdrelationdatatype;
    SpineOptional<MeasurementThresholdRelationDataElementsType> measurementthresholdrelationdataelementstype;
    SpineOptional<MeasurementThresholdRelationListDataType> measurementthresholdrelationlistdatatype;
    SpineOptional<MeasurementThresholdRelationListDataSelectorsType> measurementthresholdrelationlistdataselectorstype;
    SpineOptional<ThresholdDataType> thresholddatatype;
    SpineOptional<ThresholdDataElementsType> thresholddataelementstype;
    SpineOptional<ThresholdListDataType> thresholdlistdatatype;
    SpineOptional<ThresholdListDataSelectorsType> thresholdlistdataselectorstype;
    SpineOptional<ThresholdConstraintsDataType> thresholdconstraintsdatatype;
    SpineOptional<ThresholdConstraintsDataElementsType> thresholdconstraintsdataelementstype;
    SpineOptional<ThresholdConstraintsListDataType> thresholdconstraintslistdatatype;
    SpineOptional<ThresholdConstraintsListDataSelectorsType> thresholdconstraintslistdataselectorstype;
    SpineOptional<ThresholdDescriptionDataType> thresholddescriptiondatatype;
    SpineOptional<ThresholdDescriptionDataElementsType> thresholddescriptiondataelementstype;
    SpineOptional<ThresholdDescriptionListDataType> thresholddescriptionlistdatatype;
    SpineOptional<ThresholdDescriptionListDataSelectorsType> thresholddescriptionlistdataselectorstype;
    SpineOptional<OperatingConstraintsInterruptDataType> operatingconstraintsinterruptdatatype;
    SpineOptional<OperatingConstraintsInterruptDataElementsType> operatingconstraintsinterruptdataelementstype;
    SpineOptional<OperatingConstraintsInterruptListDataType> operatingconstraintsinterruptlistdatatype;
    SpineOptional<OperatingConstraintsInterruptListDataSelectorsType> operatingconstraintsinterruptlistdataselectorstype;
    SpineOptional<OperatingConstraintsDurationDataType> operatingconstraintsdurationdatatype;
    SpineOptional<OperatingConstraintsDurationDataElementsType> operatingconstraintsdurationdataelementstype;
    SpineOptional<OperatingConstraintsDurationListDataType> operatingconstraintsdurationlistdatatype;
    SpineOptional<OperatingConstraintsDurationListDataSelectorsType> operatingconstraintsdurationlistdataselectorstype;
    SpineOptional<OperatingConstraintsPowerDescriptionDataType> operatingconstraintspowerdescriptiondatatype;
    SpineOptional<OperatingConstraintsPowerDescriptionDataElementsType> operatingconstraintspowerdescriptiondataelementstype;
    SpineOptional<OperatingConstraintsPowerDescriptionListDataType> operatingconstraintspowerdescriptionlistdatatype;
    SpineOptional<OperatingConstraintsPowerDescriptionListDataSelectorsType> operatingconstraintspowerdescriptionlistdataselectorstype;
    SpineOptional<OperatingConstraintsPowerRangeDataType> operatingconstraintspowerrangedatatype;
    SpineOptional<OperatingConstraintsPowerRangeDataElementsType> operatingconstraintspowerrangedataelementstype;
    SpineOptional<OperatingConstraintsPowerRangeListDataType> operatingconstraintspowerrangelistdatatype;
    SpineOptional<OperatingConstraintsPowerRangeListDataSelectorsType> operatingconstraintspowerrangelistdataselectorstype;
    SpineOptional<OperatingConstraintsPowerLevelDataType> operatingconstraintspowerleveldatatype;
    SpineOptional<OperatingConstraintsPowerLevelDataElementsType> operatingconstraintspowerleveldataelementstype;
    SpineOptional<OperatingConstraintsPowerLevelListDataType> operatingconstraintspowerlevellistdatatype;
    SpineOptional<OperatingConstraintsPowerLevelListDataSelectorsType> operatingconstraintspowerlevellistdataselectorstype;
    SpineOptional<OperatingConstraintsResumeImplicationDataType> operatingconstraintsresumeimplicationdatatype;
    SpineOptional<OperatingConstraintsResumeImplicationDataElementsType> operatingconstraintsresumeimplicationdataelementstype;
    SpineOptional<OperatingConstraintsResumeImplicationListDataType> operatingconstraintsresumeimplicationlistdatatype;
    SpineOptional<OperatingConstraintsResumeImplicationListDataSelectorsType> operatingconstraintsresumeimplicationlistdataselectorstype;
    SpineOptional<BillValueType> billvaluetype;
    SpineOptional<BillValueElementsType> billvalueelementstype;
    SpineOptional<BillCostType> billcosttype;
    SpineOptional<BillCostElementsType> billcostelementstype;
    SpineOptional<BillPositionType> billpositiontype;
    SpineOptional<BillPositionElementsType> billpositionelementstype;
    SpineOptional<BillDataType> billdatatype;
    SpineOptional<BillDataElementsType> billdataelementstype;
    SpineOptional<BillListDataType> billlistdatatype;
    SpineOptional<BillListDataSelectorsType> billlistdataselectorstype;
    SpineOptional<BillConstraintsDataType> billconstraintsdatatype;
    SpineOptional<BillConstraintsDataElementsType> billconstraintsdataelementstype;
    SpineOptional<BillConstraintsListDataType> billconstraintslistdatatype;
    SpineOptional<BillConstraintsListDataSelectorsType> billconstraintslistdataselectorstype;
    SpineOptional<BillDescriptionDataType> billdescriptiondatatype;
    SpineOptional<BillDescriptionDataElementsType> billdescriptiondataelementstype;
    SpineOptional<BillDescriptionListDataType> billdescriptionlistdatatype;
    SpineOptional<BillDescriptionListDataSelectorsType> billdescriptionlistdataselectorstype;
    SpineOptional<IdentificationDataType> identificationdatatype;
    SpineOptional<IdentificationDataElementsType> identificationdataelementstype;
    SpineOptional<IdentificationListDataType> identificationlistdatatype;
    SpineOptional<IdentificationListDataSelectorsType> identificationlistdataselectorstype;
    SpineOptional<SessionIdentificationDataType> sessionidentificationdatatype;
    SpineOptional<SessionIdentificationDataElementsType> sessionidentificationdataelementstype;
    SpineOptional<SessionIdentificationListDataType> sessionidentificationlistdatatype;
    SpineOptional<SessionIdentificationListDataSelectorsType> sessionidentificationlistdataselectorstype;
    SpineOptional<SessionMeasurementRelationDataType> sessionmeasurementrelationdatatype;
    SpineOptional<SessionMeasurementRelationDataElementsType> sessionmeasurementrelationdataelementstype;
    SpineOptional<SessionMeasurementRelationListDataType> sessionmeasurementrelationlistdatatype;
    SpineOptional<SessionMeasurementRelationListDataSelectorsType> sessionmeasurementrelationlistdataselectorstype;
    SpineOptional<SetpointDataType> setpointdatatype;
    SpineOptional<SetpointDataElementsType> setpointdataelementstype;
    SpineOptional<SetpointListDataType> setpointlistdatatype;
    SpineOptional<SetpointListDataSelectorsType> setpointlistdataselectorstype;
    SpineOptional<SetpointConstraintsDataType> setpointconstraintsdatatype;
    SpineOptional<SetpointConstraintsDataElementsType> setpointconstraintsdataelementstype;
    SpineOptional<SetpointConstraintsListDataType> setpointconstraintslistdatatype;
    SpineOptional<SetpointConstraintsListDataSelectorsType> setpointconstraintslistdataselectorstype;
    SpineOptional<SetpointDescriptionDataType> setpointdescriptiondatatype;
    SpineOptional<SetpointDescriptionDataElementsType> setpointdescriptiondataelementstype;
    SpineOptional<SetpointDescriptionListDataType> setpointdescriptionlistdatatype;
    SpineOptional<SetpointDescriptionListDataSelectorsType> setpointdescriptionlistdataselectorstype;
    SpineOptional<TimeTableDataType> timetabledatatype;
    SpineOptional<TimeTableDataElementsType> timetabledataelementstype;
    SpineOptional<TimeTableListDataType> timetablelistdatatype;
    SpineOptional<TimeTableListDataSelectorsType> timetablelistdataselectorstype;
    SpineOptional<TimeTableConstraintsDataType> timetableconstraintsdatatype;
    SpineOptional<TimeTableConstraintsDataElementsType> timetableconstraintsdataelementstype;
    SpineOptional<TimeTableConstraintsListDataType> timetableconstraintslistdatatype;
    SpineOptional<TimeTableConstraintsListDataSelectorsType> timetableconstraintslistdataselectorstype;
    SpineOptional<TimeTableDescriptionDataType> timetabledescriptiondatatype;
    SpineOptional<TimeTableDescriptionDataElementsType> timetabledescriptiondataelementstype;
    SpineOptional<TimeTableDescriptionListDataType> timetabledescriptionlistdatatype;
    SpineOptional<TimeTableDescriptionListDataSelectorsType> timetabledescriptionlistdataselectorstype;
    SpineOptional<SensingDataType> sensingdatatype;
    SpineOptional<SensingDataElementsType> sensingdataelementstype;
    SpineOptional<SensingListDataType> sensinglistdatatype;
    SpineOptional<SensingListDataSelectorsType> sensinglistdataselectorstype;
    SpineOptional<SensingDescriptionDataType> sensingdescriptiondatatype;
    SpineOptional<SensingDescriptionDataElementsType> sensingdescriptiondataelementstype;
    SpineOptional<ResultDataType> resultdatatype;
    SpineOptional<ActuatorSwitchDataType> actuatorswitchdatatype;
    SpineOptional<ActuatorSwitchDataElementsType> actuatorswitchdataelementstype;
    SpineOptional<ActuatorSwitchDescriptionDataType> actuatorswitchdescriptiondatatype;
    SpineOptional<ActuatorSwitchDescriptionDataElementsType> actuatorswitchdescriptiondataelementstype;
    SpineOptional<NetworkManagementAddNodeCallType> networkmanagementaddnodecalltype;
    SpineOptional<NetworkManagementAddNodeCallElementsType> networkmanagementaddnodecallelementstype;
    SpineOptional<NetworkManagementRemoveNodeCallType> networkmanagementremovenodecalltype;
    SpineOptional<NetworkManagementRemoveNodeCallElementsType> networkmanagementremovenodecallelementstype;
    SpineOptional<NetworkManagementModifyNodeCallType> networkmanagementmodifynodecalltype;
    SpineOptional<NetworkManagementModifyNodeCallElementsType> networkmanagementmodifynodecallelementstype;
    SpineOptional<NetworkManagementScanNetworkCallType> networkmanagementscannetworkcalltype;
    SpineOptional<NetworkManagementScanNetworkCallElementsType> networkmanagementscannetworkcallelementstype;
    SpineOptional<NetworkManagementDiscoverCallType> networkmanagementdiscovercalltype;
    SpineOptional<NetworkManagementDiscoverCallElementsType> networkmanagementdiscovercallelementstype;
    SpineOptional<NetworkManagementAbortCallType> networkmanagementabortcalltype;
    SpineOptional<NetworkManagementAbortCallElementsType> networkmanagementabortcallelementstype;
    SpineOptional<NetworkManagementProcessStateDataType> networkmanagementprocessstatedatatype;
    SpineOptional<NetworkManagementProcessStateDataElementsType> networkmanagementprocessstatedataelementstype;
    SpineOptional<NetworkManagementJoiningModeDataType> networkmanagementjoiningmodedatatype;
    SpineOptional<NetworkManagementJoiningModeDataElementsType> networkmanagementjoiningmodedataelementstype;
    SpineOptional<NetworkManagementReportCandidateDataType> networkmanagementreportcandidatedatatype;
    SpineOptional<NetworkManagementReportCandidateDataElementsType> networkmanagementreportcandidatedataelementstype;
    SpineOptional<NetworkManagementDeviceDescriptionDataType> networkmanagementdevicedescriptiondatatype;
    SpineOptional<NetworkManagementDeviceDescriptionDataElementsType> networkmanagementdevicedescriptiondataelementstype;
    SpineOptional<NetworkManagementDeviceDescriptionListDataType> networkmanagementdevicedescriptionlistdatatype;
    SpineOptional<NetworkManagementDeviceDescriptionListDataSelectorsType> networkmanagementdevicedescriptionlistdataselectorstype;
    SpineOptional<NetworkManagementEntityDescriptionDataType> networkmanagemententitydescriptiondatatype;
    SpineOptional<NetworkManagementEntityDescriptionDataElementsType> networkmanagemententitydescriptiondataelementstype;
    SpineOptional<NetworkManagementEntityDescriptionListDataType> networkmanagemententitydescriptionlistdatatype;
    SpineOptional<NetworkManagementEntityDescriptionListDataSelectorsType> networkmanagemententitydescriptionlistdataselectorstype;
    SpineOptional<NetworkManagementFeatureDescriptionDataType> networkmanagementfeaturedescriptiondatatype;
    SpineOptional<NetworkManagementFeatureDescriptionDataElementsType> networkmanagementfeaturedescriptiondataelementstype;
    SpineOptional<NetworkManagementFeatureDescriptionListDataType> networkmanagementfeaturedescriptionlistdatatype;
    SpineOptional<NetworkManagementFeatureDescriptionListDataSelectorsType> networkmanagementfeaturedescriptionlistdataselectorstype;
    SpineOptional<SupplyConditionDataType> supplyconditiondatatype;
    SpineOptional<SupplyConditionDataElementsType> supplyconditiondataelementstype;
    SpineOptional<SupplyConditionListDataType> supplyconditionlistdatatype;
    SpineOptional<SupplyConditionListDataSelectorsType> supplyconditionlistdataselectorstype;
    SpineOptional<SupplyConditionDescriptionDataType> supplyconditiondescriptiondatatype;
    SpineOptional<SupplyConditionDescriptionDataElementsType> supplyconditiondescriptiondataelementstype;
    SpineOptional<SupplyConditionDescriptionListDataType> supplyconditiondescriptionlistdatatype;
    SpineOptional<SupplyConditionDescriptionListDataSelectorsType> supplyconditiondescriptionlistdataselectorstype;
    SpineOptional<SupplyConditionThresholdRelationDataType> supplyconditionthresholdrelationdatatype;
    SpineOptional<SupplyConditionThresholdRelationDataElementsType> supplyconditionthresholdrelationdataelementstype;
    SpineOptional<SupplyConditionThresholdRelationListDataType> supplyconditionthresholdrelationlistdatatype;
    SpineOptional<SupplyConditionThresholdRelationListDataSelectorsType> supplyconditionthresholdrelationlistdataselectorstype;
    SpineOptional<AlarmDataType> alarmdatatype;
    SpineOptional<AlarmDataElementsType> alarmdataelementstype;
    SpineOptional<AlarmListDataType> alarmlistdatatype;
    SpineOptional<AlarmListDataSelectorsType> alarmlistdataselectorstype;
    SpineOptional<NodeManagementSpecificationVersionListType> nodemanagementspecificationversionlisttype;
    SpineOptional<NodeManagementDetailedDiscoveryDeviceInformationType> nodemanagementdetaileddiscoverydeviceinformationtype;
    SpineOptional<NodeManagementDetailedDiscoveryEntityInformationType> nodemanagementdetaileddiscoveryentityinformationtype;
    SpineOptional<NodeManagementDetailedDiscoveryFeatureInformationType> nodemanagementdetaileddiscoveryfeatureinformationtype;
    SpineOptional<NodeManagementDetailedDiscoveryDataType> nodemanagementdetaileddiscoverydatatype;
    SpineOptional<SpecificationVersionDataElementsType> specificationversiondataelementstype;
    SpineOptional<NodeManagementSpecificationVersionListElementsType> nodemanagementspecificationversionlistelementstype;
    SpineOptional<NodeManagementDetailedDiscoveryDeviceInformationElementsType> nodemanagementdetaileddiscoverydeviceinformationelementstype;
    SpineOptional<NodeManagementDetailedDiscoveryEntityInformationElementsType> nodemanagementdetaileddiscoveryentityinformationelementstype;
    SpineOptional<NodeManagementDetailedDiscoveryFeatureInformationElementsType> nodemanagementdetaileddiscoveryfeatureinformationelementstype;
    SpineOptional<NodeManagementDetailedDiscoveryDataElementsType> nodemanagementdetaileddiscoverydataelementstype;
    SpineOptional<NodeManagementDetailedDiscoveryDataSelectorsType> nodemanagementdetaileddiscoverydataselectorstype;
    SpineOptional<BindingManagementEntryDataType> bindingmanagemententrydatatype;
    SpineOptional<NodeManagementBindingDataType> nodemanagementbindingdatatype;
    SpineOptional<BindingManagementEntryDataElementsType> bindingmanagemententrydataelementstype;
    SpineOptional<NodeManagementBindingDataElementsType> nodemanagementbindingdataelementstype;
    SpineOptional<BindingManagementEntryListDataSelectorsType> bindingmanagemententrylistdataselectorstype;
    SpineOptional<NodeManagementBindingDataSelectorsType> nodemanagementbindingdataselectorstype;
    SpineOptional<BindingManagementRequestCallType> bindingmanagementrequestcalltype;
    SpineOptional<NodeManagementBindingRequestCallType> nodemanagementbindingrequestcalltype;
    SpineOptional<BindingManagementRequestCallElementsType> bindingmanagementrequestcallelementstype;
    SpineOptional<NodeManagementBindingRequestCallElementsType> nodemanagementbindingrequestcallelementstype;
    SpineOptional<BindingManagementDeleteCallType> bindingmanagementdeletecalltype;
    SpineOptional<NodeManagementBindingDeleteCallType> nodemanagementbindingdeletecalltype;
    SpineOptional<BindingManagementDeleteCallElementsType> bindingmanagementdeletecallelementstype;
    SpineOptional<NodeManagementBindingDeleteCallElementsType> nodemanagementbindingdeletecallelementstype;
    SpineOptional<SubscriptionManagementEntryDataType> subscriptionmanagemententrydatatype;
    SpineOptional<NodeManagementSubscriptionDataType> nodemanagementsubscriptiondatatype;
    SpineOptional<SubscriptionManagementEntryDataElementsType> subscriptionmanagemententrydataelementstype;
    SpineOptional<NodeManagementSubscriptionDataElementsType> nodemanagementsubscriptiondataelementstype;
    SpineOptional<SubscriptionManagementEntryListDataSelectorsType> subscriptionmanagemententrylistdataselectorstype;
    SpineOptional<NodeManagementSubscriptionDataSelectorsType> nodemanagementsubscriptiondataselectorstype;
    SpineOptional<SubscriptionManagementRequestCallType> subscriptionmanagementrequestcalltype;
    SpineOptional<NodeManagementSubscriptionRequestCallType> nodemanagementsubscriptionrequestcalltype;
    SpineOptional<SubscriptionManagementRequestCallElementsType> subscriptionmanagementrequestcallelementstype;
    SpineOptional<NodeManagementSubscriptionRequestCallElementsType> nodemanagementsubscriptionrequestcallelementstype;
    SpineOptional<SubscriptionManagementDeleteCallType> subscriptionmanagementdeletecalltype;
    SpineOptional<NodeManagementSubscriptionDeleteCallType> nodemanagementsubscriptiondeletecalltype;
    SpineOptional<SubscriptionManagementDeleteCallElementsType> subscriptionmanagementdeletecallelementstype;
    SpineOptional<NodeManagementSubscriptionDeleteCallElementsType> nodemanagementsubscriptiondeletecallelementstype;
    SpineOptional<NodeManagementDestinationDataType> nodemanagementdestinationdatatype;
    SpineOptional<NodeManagementDestinationDataElementsType> nodemanagementdestinationdataelementstype;
    SpineOptional<NodeManagementDestinationListDataType> nodemanagementdestinationlistdatatype;
    SpineOptional<NodeManagementDestinationListDataSelectorsType> nodemanagementdestinationlistdataselectorstype;
    SpineOptional<UseCaseSupportType> usecasesupporttype;
    SpineOptional<UseCaseInformationDataType> usecaseinformationdatatype;
    SpineOptional<NodeManagementUseCaseDataType> nodemanagementusecasedatatype;
    SpineOptional<UseCaseSupportElementsType> usecasesupportelementstype;
    SpineOptional<UseCaseInformationDataElementsType> usecaseinformationdataelementstype;
    SpineOptional<NodeManagementUseCaseDataElementsType> nodemanagementusecasedataelementstype;
    SpineOptional<UseCaseSupportSelectorsType> usecasesupportselectorstype;
    SpineOptional<UseCaseInformationListDataSelectorsType> usecaseinformationlistdataselectorstype;
    SpineOptional<NodeManagementUseCaseDataSelectorsType> nodemanagementusecasedataselectorstype;
    SpineOptional<BindingManagementEntryListDataType> bindingmanagemententrylistdatatype;
    SpineOptional<SubscriptionManagementEntryListDataType> subscriptionmanagemententrylistdatatype;
    SpineOptional<UseCaseInformationListDataType> usecaseinformationlistdatatype;
    SpineOptional<SpecificationVersionListDataType> specificationversionlistdatatype;
    SpineOptional<SpecificationVersionListDataSelectorsType> specificationversionlistdataselectorstype;
    SpineOptional<TaskManagementDirectControlRelatedType> taskmanagementdirectcontrolrelatedtype;
    SpineOptional<TaskManagementDirectControlRelatedElementsType> taskmanagementdirectcontrolrelatedelementstype;
    SpineOptional<TaskManagementHvacRelatedType> taskmanagementhvacrelatedtype;
    SpineOptional<TaskManagementHvacRelatedElementsType> taskmanagementhvacrelatedelementstype;
    SpineOptional<TaskManagementLoadControlReleatedType> taskmanagementloadcontrolreleatedtype;
    SpineOptional<TaskManagementLoadControlReleatedElementsType> taskmanagementloadcontrolreleatedelementstype;
    SpineOptional<TaskManagementPowerSequencesRelatedType> taskmanagementpowersequencesrelatedtype;
    SpineOptional<TaskManagementPowerSequencesRelatedElementsType> taskmanagementpowersequencesrelatedelementstype;
    SpineOptional<TaskManagementSmartEnergyManagementPsRelatedType> taskmanagementsmartenergymanagementpsrelatedtype;
    SpineOptional<TaskManagementSmartEnergyManagementPsRelatedElementsType> taskmanagementsmartenergymanagementpsrelatedelementstype;
    SpineOptional<TaskManagementJobDataType> taskmanagementjobdatatype;
    SpineOptional<TaskManagementJobDataElementsType> taskmanagementjobdataelementstype;
    SpineOptional<TaskManagementJobListDataType> taskmanagementjoblistdatatype;
    SpineOptional<TaskManagementJobListDataSelectorsType> taskmanagementjoblistdataselectorstype;
    SpineOptional<TaskManagementJobRelationDataType> taskmanagementjobrelationdatatype;
    SpineOptional<TaskManagementJobRelationDataElementsType> taskmanagementjobrelationdataelementstype;
    SpineOptional<TaskManagementJobRelationListDataType> taskmanagementjobrelationlistdatatype;
    SpineOptional<TaskManagementJobRelationListDataSelectorsType> taskmanagementjobrelationlistdataselectorstype;
    SpineOptional<TaskManagementJobDescriptionDataType> taskmanagementjobdescriptiondatatype;
    SpineOptional<TaskManagementJobDescriptionDataElementsType> taskmanagementjobdescriptiondataelementstype;
    SpineOptional<TaskManagementJobDescriptionListDataType> taskmanagementjobdescriptionlistdatatype;
    SpineOptional<TaskManagementJobDescriptionListDataSelectorsType> taskmanagementjobdescriptionlistdataselectorstype;
    SpineOptional<TaskManagementOverviewDataType> taskmanagementoverviewdatatype;
    SpineOptional<TaskManagementOverviewDataElementsType> taskmanagementoverviewdataelementstype;
    SpineOptional<HvacSystemFunctionDataType> hvacsystemfunctiondatatype;
    SpineOptional<HvacSystemFunctionDataElementsType> hvacsystemfunctiondataelementstype;
    SpineOptional<HvacSystemFunctionListDataType> hvacsystemfunctionlistdatatype;
    SpineOptional<HvacSystemFunctionListDataSelectorsType> hvacsystemfunctionlistdataselectorstype;
    SpineOptional<HvacSystemFunctionOperationModeRelationDataType> hvacsystemfunctionoperationmoderelationdatatype;
    SpineOptional<HvacSystemFunctionOperationModeRelationDataElementsType> hvacsystemfunctionoperationmoderelationdataelementstype;
    SpineOptional<HvacSystemFunctionOperationModeRelationListDataType> hvacsystemfunctionoperationmoderelationlistdatatype;
    SpineOptional<HvacSystemFunctionOperationModeRelationListDataSelectorsType> hvacsystemfunctionoperationmoderelationlistdataselectorstype;
    SpineOptional<HvacSystemFunctionSetpointRelationDataType> hvacsystemfunctionsetpointrelationdatatype;
    SpineOptional<HvacSystemFunctionSetpointRelationDataElementsType> hvacsystemfunctionsetpointrelationdataelementstype;
    SpineOptional<HvacSystemFunctionSetpointRelationListDataType> hvacsystemfunctionsetpointrelationlistdatatype;
    SpineOptional<HvacSystemFunctionSetpointRelationListDataSelectorsType> hvacsystemfunctionsetpointrelationlistdataselectorstype;
    SpineOptional<HvacSystemFunctionPowerSequenceRelationDataType> hvacsystemfunctionpowersequencerelationdatatype;
    SpineOptional<HvacSystemFunctionPowerSequenceRelationDataElementsType> hvacsystemfunctionpowersequencerelationdataelementstype;
    SpineOptional<HvacSystemFunctionPowerSequenceRelationListDataType> hvacsystemfunctionpowersequencerelationlistdatatype;
    SpineOptional<HvacSystemFunctionPowerSequenceRelationListDataSelectorsType> hvacsystemfunctionpowersequencerelationlistdataselectorstype;
    SpineOptional<HvacSystemFunctionDescriptionDataType> hvacsystemfunctiondescriptiondatatype;
    SpineOptional<HvacSystemFunctionDescriptionDataElementsType> hvacsystemfunctiondescriptiondataelementstype;
    SpineOptional<HvacSystemFunctionDescriptionListDataType> hvacsystemfunctiondescriptionlistdatatype;
    SpineOptional<HvacSystemFunctionDescriptionListDataSelectorsType> hvacsystemfunctiondescriptionlistdataselectorstype;
    SpineOptional<HvacOperationModeDescriptionDataType> hvacoperationmodedescriptiondatatype;
    SpineOptional<HvacOperationModeDescriptionDataElementsType> hvacoperationmodedescriptiondataelementstype;
    SpineOptional<HvacOperationModeDescriptionListDataType> hvacoperationmodedescriptionlistdatatype;
    SpineOptional<HvacOperationModeDescriptionListDataSelectorsType> hvacoperationmodedescriptionlistdataselectorstype;
    SpineOptional<HvacOverrunDataType> hvacoverrundatatype;
    SpineOptional<HvacOverrunDataElementsType> hvacoverrundataelementstype;
    SpineOptional<HvacOverrunListDataType> hvacoverrunlistdatatype;
    SpineOptional<HvacOverrunListDataSelectorsType> hvacoverrunlistdataselectorstype;
    SpineOptional<HvacOverrunDescriptionDataType> hvacoverrundescriptiondatatype;
    SpineOptional<HvacOverrunDescriptionDataElementsType> hvacoverrundescriptiondataelementstype;
    SpineOptional<HvacOverrunDescriptionListDataType> hvacoverrundescriptionlistdatatype;
    SpineOptional<HvacOverrunDescriptionListDataSelectorsType> hvacoverrundescriptionlistdataselectorstype;
    SpineOptional<LoadControlNodeDataType> loadcontrolnodedatatype;
    SpineOptional<LoadControlNodeDataElementsType> loadcontrolnodedataelementstype;
    SpineOptional<LoadControlEventDataType> loadcontroleventdatatype;
    SpineOptional<LoadControlEventDataElementsType> loadcontroleventdataelementstype;
    SpineOptional<LoadControlEventListDataType> loadcontroleventlistdatatype;
    SpineOptional<LoadControlEventListDataSelectorsType> loadcontroleventlistdataselectorstype;
    SpineOptional<LoadControlStateDataType> loadcontrolstatedatatype;
    SpineOptional<LoadControlStateDataElementsType> loadcontrolstatedataelementstype;
    SpineOptional<LoadControlStateListDataType> loadcontrolstatelistdatatype;
    SpineOptional<LoadControlStateListDataSelectorsType> loadcontrolstatelistdataselectorstype;
    SpineOptional<LoadControlLimitDataType> loadcontrollimitdatatype;
    SpineOptional<LoadControlLimitDataElementsType> loadcontrollimitdataelementstype;
    SpineOptional<LoadControlLimitListDataType> loadcontrollimitlistdatatype;
    SpineOptional<LoadControlLimitListDataSelectorsType> loadcontrollimitlistdataselectorstype;
    SpineOptional<LoadControlLimitConstraintsDataType> loadcontrollimitconstraintsdatatype;
    SpineOptional<LoadControlLimitConstraintsDataElementsType> loadcontrollimitconstraintsdataelementstype;
    SpineOptional<LoadControlLimitConstraintsListDataType> loadcontrollimitconstraintslistdatatype;
    SpineOptional<LoadControlLimitConstraintsListDataSelectorsType> loadcontrollimitconstraintslistdataselectorstype;
    SpineOptional<LoadControlLimitDescriptionDataType> loadcontrollimitdescriptiondatatype;
    SpineOptional<LoadControlLimitDescriptionDataElementsType> loadcontrollimitdescriptiondataelementstype;
    SpineOptional<LoadControlLimitDescriptionListDataType> loadcontrollimitdescriptionlistdatatype;
    SpineOptional<LoadControlLimitDescriptionListDataSelectorsType> loadcontrollimitdescriptionlistdataselectorstype;
    SpineOptional<DeviceClassificationManufacturerDataType> deviceclassificationmanufacturerdatatype;
    SpineOptional<DeviceClassificationManufacturerDataElementsType> deviceclassificationmanufacturerdataelementstype;
    SpineOptional<DeviceClassificationUserDataType> deviceclassificationuserdatatype;
    SpineOptional<DeviceClassificationUserDataElementsType> deviceclassificationuserdataelementstype;
    SpineOptional<ActuatorLevelDataType> actuatorleveldatatype;
    SpineOptional<ActuatorLevelDataElementsType> actuatorleveldataelementstype;
    SpineOptional<ActuatorLevelDescriptionDataType> actuatorleveldescriptiondatatype;
    SpineOptional<ActuatorLevelDescriptionDataElementsType> actuatorleveldescriptiondataelementstype;
    SpineOptional<TimeSeriesSlotType> timeseriesslottype;
    SpineOptional<TimeSeriesSlotElementsType> timeseriesslotelementstype;
    SpineOptional<TimeSeriesDataType> timeseriesdatatype;
    SpineOptional<TimeSeriesDataElementsType> timeseriesdataelementstype;
    SpineOptional<TimeSeriesListDataType> timeserieslistdatatype;
    SpineOptional<TimeSeriesListDataSelectorsType> timeserieslistdataselectorstype;
    SpineOptional<TimeSeriesDescriptionDataType> timeseriesdescriptiondatatype;
    SpineOptional<TimeSeriesDescriptionDataElementsType> timeseriesdescriptiondataelementstype;
    SpineOptional<TimeSeriesDescriptionListDataType> timeseriesdescriptionlistdatatype;
    SpineOptional<TimeSeriesDescriptionListDataSelectorsType> timeseriesdescriptionlistdataselectorstype;
    SpineOptional<TimeSeriesConstraintsDataType> timeseriesconstraintsdatatype;
    SpineOptional<TimeSeriesConstraintsDataElementsType> timeseriesconstraintsdataelementstype;
    SpineOptional<TimeSeriesConstraintsListDataType> timeseriesconstraintslistdatatype;
    SpineOptional<TimeSeriesConstraintsListDataSelectorsType> timeseriesconstraintslistdataselectorstype;
    SpineOptional<SmartEnergyManagementPsAlternativesRelationType> smartenergymanagementpsalternativesrelationtype;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotValueListType> smartenergymanagementpspowertimeslotvaluelisttype;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotType> smartenergymanagementpspowertimeslottype;
    SpineOptional<SmartEnergyManagementPsPowerSequenceType> smartenergymanagementpspowersequencetype;
    SpineOptional<SmartEnergyManagementPsAlternativesType> smartenergymanagementpsalternativestype;
    SpineOptional<SmartEnergyManagementPsDataType> smartenergymanagementpsdatatype;
    SpineOptional<SmartEnergyManagementPsAlternativesRelationElementsType> smartenergymanagementpsalternativesrelationelementstype;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotValueListElementsType> smartenergymanagementpspowertimeslotvaluelistelementstype;
    SpineOptional<SmartEnergyManagementPsPowerTimeSlotElementsType> smartenergymanagementpspowertimeslotelementstype;
    SpineOptional<SmartEnergyManagementPsPowerSequenceElementsType> smartenergymanagementpspowersequenceelementstype;
    SpineOptional<SmartEnergyManagementPsAlternativesElementsType> smartenergymanagementpsalternativeselementstype;
    SpineOptional<SmartEnergyManagementPsDataElementsType> smartenergymanagementpsdataelementstype;
    SpineOptional<SmartEnergyManagementPsDataSelectorsType> smartenergymanagementpsdataselectorstype;
    SpineOptional<SmartEnergyManagementPsPriceDataType> smartenergymanagementpspricedatatype;
    SpineOptional<SmartEnergyManagementPsPriceDataElementsType> smartenergymanagementpspricedataelementstype;
    SpineOptional<SmartEnergyManagementPsPriceDataSelectorsType> smartenergymanagementpspricedataselectorstype;
    SpineOptional<SmartEnergyManagementPsConfigurationRequestCallType> smartenergymanagementpsconfigurationrequestcalltype;
    SpineOptional<SmartEnergyManagementPsConfigurationRequestCallElementsType> smartenergymanagementpsconfigurationrequestcallelementstype;
    SpineOptional<SmartEnergyManagementPsPriceCalculationRequestCallType> smartenergymanagementpspricecalculationrequestcalltype;
    SpineOptional<SmartEnergyManagementPsPriceCalculationRequestCallElementsType> smartenergymanagementpspricecalculationrequestcallelementstype;
    SpineOptional<MessagingDataType> messagingdatatype;
    SpineOptional<MessagingDataElementsType> messagingdataelementstype;
    SpineOptional<MessagingListDataType> messaginglistdatatype;
    SpineOptional<MessagingListDataSelectorsType> messaginglistdataselectorstype;
    SpineOptional<TariffOverallConstraintsDataType> tariffoverallconstraintsdatatype;
    SpineOptional<TariffOverallConstraintsDataElementsType> tariffoverallconstraintsdataelementstype;
    SpineOptional<TariffDataType> tariffdatatype;
    SpineOptional<TariffDataElementsType> tariffdataelementstype;
    SpineOptional<TariffListDataType> tarifflistdatatype;
    SpineOptional<TariffListDataSelectorsType> tarifflistdataselectorstype;
    SpineOptional<TariffTierRelationDataType> tarifftierrelationdatatype;
    SpineOptional<TariffTierRelationDataElementsType> tarifftierrelationdataelementstype;
    SpineOptional<TariffTierRelationListDataType> tarifftierrelationlistdatatype;
    SpineOptional<TariffTierRelationListDataSelectorsType> tarifftierrelationlistdataselectorstype;
    SpineOptional<TariffBoundaryRelationDataType> tariffboundaryrelationdatatype;
    SpineOptional<TariffBoundaryRelationDataElementsType> tariffboundaryrelationdataelementstype;
    SpineOptional<TariffBoundaryRelationListDataType> tariffboundaryrelationlistdatatype;
    SpineOptional<TariffBoundaryRelationListDataSelectorsType> tariffboundaryrelationlistdataselectorstype;
    SpineOptional<TariffDescriptionDataType> tariffdescriptiondatatype;
    SpineOptional<TariffDescriptionDataElementsType> tariffdescriptiondataelementstype;
    SpineOptional<TariffDescriptionListDataType> tariffdescriptionlistdatatype;
    SpineOptional<TariffDescriptionListDataSelectorsType> tariffdescriptionlistdataselectorstype;
    SpineOptional<TierBoundaryDataType> tierboundarydatatype;
    SpineOptional<TierBoundaryDataElementsType> tierboundarydataelementstype;
    SpineOptional<TierBoundaryListDataType> tierboundarylistdatatype;
    SpineOptional<TierBoundaryListDataSelectorsType> tierboundarylistdataselectorstype;
    SpineOptional<TierBoundaryDescriptionDataType> tierboundarydescriptiondatatype;
    SpineOptional<TierBoundaryDescriptionDataElementsType> tierboundarydescriptiondataelementstype;
    SpineOptional<TierBoundaryDescriptionListDataType> tierboundarydescriptionlistdatatype;
    SpineOptional<TierBoundaryDescriptionListDataSelectorsType> tierboundarydescriptionlistdataselectorstype;
    SpineOptional<CommodityDataType> commoditydatatype;
    SpineOptional<CommodityDataElementsType> commoditydataelementstype;
    SpineOptional<CommodityListDataType> commoditylistdatatype;
    SpineOptional<CommodityListDataSelectorsType> commoditylistdataselectorstype;
    SpineOptional<TierDataType> tierdatatype;
    SpineOptional<TierDataElementsType> tierdataelementstype;
    SpineOptional<TierListDataType> tierlistdatatype;
    SpineOptional<TierListDataSelectorsType> tierlistdataselectorstype;
    SpineOptional<TierIncentiveRelationDataType> tierincentiverelationdatatype;
    SpineOptional<TierIncentiveRelationDataElementsType> tierincentiverelationdataelementstype;
    SpineOptional<TierIncentiveRelationListDataType> tierincentiverelationlistdatatype;
    SpineOptional<TierIncentiveRelationListDataSelectorsType> tierincentiverelationlistdataselectorstype;
    SpineOptional<TierDescriptionDataType> tierdescriptiondatatype;
    SpineOptional<TierDescriptionDataElementsType> tierdescriptiondataelementstype;
    SpineOptional<TierDescriptionListDataType> tierdescriptionlistdatatype;
    SpineOptional<TierDescriptionListDataSelectorsType> tierdescriptionlistdataselectorstype;
    SpineOptional<IncentiveDataType> incentivedatatype;
    SpineOptional<IncentiveDataElementsType> incentivedataelementstype;
    SpineOptional<IncentiveListDataType> incentivelistdatatype;
    SpineOptional<IncentiveListDataSelectorsType> incentivelistdataselectorstype;
    SpineOptional<IncentiveDescriptionDataType> incentivedescriptiondatatype;
    SpineOptional<IncentiveDescriptionDataElementsType> incentivedescriptiondataelementstype;
    SpineOptional<IncentiveDescriptionListDataType> incentivedescriptionlistdatatype;
    SpineOptional<IncentiveDescriptionListDataSelectorsType> incentivedescriptionlistdataselectorstype;
    SpineOptional<StateInformationDataType> stateinformationdatatype;
    SpineOptional<StateInformationDataElementsType> stateinformationdataelementstype;
    SpineOptional<StateInformationListDataType> stateinformationlistdatatype;
    SpineOptional<StateInformationListDataSelectorsType> stateinformationlistdataselectorstype;
    SpineOptional<ElectricalConnectionParameterDescriptionDataType> electricalconnectionparameterdescriptiondatatype;
    SpineOptional<ElectricalConnectionParameterDescriptionDataElementsType> electricalconnectionparameterdescriptiondataelementstype;
    SpineOptional<ElectricalConnectionParameterDescriptionListDataType> electricalconnectionparameterdescriptionlistdatatype;
    SpineOptional<ElectricalConnectionParameterDescriptionListDataSelectorsType> electricalconnectionparameterdescriptionlistdataselectorstype;
    SpineOptional<ElectricalConnectionPermittedValueSetDataType> electricalconnectionpermittedvaluesetdatatype;
    SpineOptional<ElectricalConnectionPermittedValueSetDataElementsType> electricalconnectionpermittedvaluesetdataelementstype;
    SpineOptional<ElectricalConnectionPermittedValueSetListDataType> electricalconnectionpermittedvaluesetlistdatatype;
    SpineOptional<ElectricalConnectionPermittedValueSetListDataSelectorsType> electricalconnectionpermittedvaluesetlistdataselectorstype;
    SpineOptional<ElectricalConnectionCharacteristicDataType> electricalconnectioncharacteristicdatatype;
    SpineOptional<ElectricalConnectionCharacteristicDataElementsType> electricalconnectioncharacteristicdataelementstype;
    SpineOptional<ElectricalConnectionCharacteristicListDataType> electricalconnectioncharacteristiclistdatatype;
    SpineOptional<ElectricalConnectionCharacteristicListDataSelectorsType> electricalconnectioncharacteristiclistdataselectorstype;
    SpineOptional<ElectricalConnectionStateDataType> electricalconnectionstatedatatype;
    SpineOptional<ElectricalConnectionStateDataElementsType> electricalconnectionstatedataelementstype;
    SpineOptional<ElectricalConnectionStateListDataType> electricalconnectionstatelistdatatype;
    SpineOptional<ElectricalConnectionStateListDataSelectorsType> electricalconnectionstatelistdataselectorstype;
    SpineOptional<ElectricalConnectionDescriptionDataType> electricalconnectiondescriptiondatatype;
    SpineOptional<ElectricalConnectionDescriptionDataElementsType> electricalconnectiondescriptiondataelementstype;
    SpineOptional<ElectricalConnectionDescriptionListDataType> electricalconnectiondescriptionlistdatatype;
    SpineOptional<ElectricalConnectionDescriptionListDataSelectorsType> electricalconnectiondescriptionlistdataselectorstype;
    SpineOptional<TimeInformationDataType> timeinformationdatatype;
    SpineOptional<TimeInformationDataElementsType> timeinformationdataelementstype;
    SpineOptional<TimeDistributorDataType> timedistributordatatype;
    SpineOptional<TimeDistributorDataElementsType> timedistributordataelementstype;
    SpineOptional<TimePrecisionDataType> timeprecisiondatatype;
    SpineOptional<TimePrecisionDataElementsType> timeprecisiondataelementstype;
    SpineOptional<TimeDistributorEnquiryCallType> timedistributorenquirycalltype;
    SpineOptional<TimeDistributorEnquiryCallElementsType> timedistributorenquirycallelementstype;
    SpineOptional<DeviceDiagnosisStateDataType> devicediagnosisstatedatatype;
    SpineOptional<DeviceDiagnosisStateDataElementsType> devicediagnosisstatedataelementstype;
    SpineOptional<DeviceDiagnosisHeartbeatDataType> devicediagnosisheartbeatdatatype;
    SpineOptional<DeviceDiagnosisHeartbeatDataElementsType> devicediagnosisheartbeatdataelementstype;
    SpineOptional<DeviceDiagnosisServiceDataType> devicediagnosisservicedatatype;
    SpineOptional<DeviceDiagnosisServiceDataElementsType> devicediagnosisservicedataelementstype;
    SpineOptional<DeviceConfigurationKeyValueValueType> deviceconfigurationkeyvaluevaluetype;
    SpineOptional<DeviceConfigurationKeyValueValueElementsType> deviceconfigurationkeyvaluevalueelementstype;
    SpineOptional<DeviceConfigurationKeyValueDataType> deviceconfigurationkeyvaluedatatype;
    SpineOptional<DeviceConfigurationKeyValueDataElementsType> deviceconfigurationkeyvaluedataelementstype;
    SpineOptional<DeviceConfigurationKeyValueListDataType> deviceconfigurationkeyvaluelistdatatype;
    SpineOptional<DeviceConfigurationKeyValueListDataSelectorsType> deviceconfigurationkeyvaluelistdataselectorstype;
    SpineOptional<DeviceConfigurationKeyValueDescriptionDataType> deviceconfigurationkeyvaluedescriptiondatatype;
    SpineOptional<DeviceConfigurationKeyValueDescriptionDataElementsType> deviceconfigurationkeyvaluedescriptiondataelementstype;
    SpineOptional<DeviceConfigurationKeyValueDescriptionListDataType> deviceconfigurationkeyvaluedescriptionlistdatatype;
    SpineOptional<DeviceConfigurationKeyValueDescriptionListDataSelectorsType> deviceconfigurationkeyvaluedescriptionlistdataselectorstype;
    SpineOptional<DeviceConfigurationKeyValueConstraintsDataType> deviceconfigurationkeyvalueconstraintsdatatype;
    SpineOptional<DeviceConfigurationKeyValueConstraintsDataElementsType> deviceconfigurationkeyvalueconstraintsdataelementstype;
    SpineOptional<DeviceConfigurationKeyValueConstraintsListDataType> deviceconfigurationkeyvalueconstraintslistdatatype;
    SpineOptional<DeviceConfigurationKeyValueConstraintsListDataSelectorsType> deviceconfigurationkeyvalueconstraintslistdataselectorstype;
    SpineOptional<HeaderType> headertype;
    SpineOptional<CmdControlType> cmdcontroltype;
    SpineOptional<DataTunnelingHeaderType> datatunnelingheadertype;
    SpineOptional<DataTunnelingHeaderElementsType> datatunnelingheaderelementstype;
    SpineOptional<DataTunnelingCallType> datatunnelingcalltype;
    SpineOptional<DataTunnelingCallElementsType> datatunnelingcallelementstype;
    SpineOptional<IncentiveTableTierType> incentivetabletiertype;
    SpineOptional<IncentiveTableIncentiveSlotType> incentivetableincentiveslottype;
    SpineOptional<IncentiveTableType> incentivetabletype;
    SpineOptional<IncentiveTableDataType> incentivetabledatatype;
    SpineOptional<IncentiveTableTierElementsType> incentivetabletierelementstype;
    SpineOptional<IncentiveTableIncentiveSlotElementsType> incentivetableincentiveslotelementstype;
    SpineOptional<IncentiveTableElementsType> incentivetableelementstype;
    SpineOptional<IncentiveTableDataElementsType> incentivetabledataelementstype;
    SpineOptional<IncentiveTableDataSelectorsType> incentivetabledataselectorstype;
    SpineOptional<IncentiveTableDescriptionTierType> incentivetabledescriptiontiertype;
    SpineOptional<IncentiveTableDescriptionType> incentivetabledescriptiontype;
    SpineOptional<IncentiveTableDescriptionDataType> incentivetabledescriptiondatatype;
    SpineOptional<IncentiveTableDescriptionTierElementsType> incentivetabledescriptiontierelementstype;
    SpineOptional<IncentiveTableDescriptionElementsType> incentivetabledescriptionelementstype;
    SpineOptional<IncentiveTableDescriptionDataElementsType> incentivetabledescriptiondataelementstype;
    SpineOptional<IncentiveTableDescriptionDataSelectorsType> incentivetabledescriptiondataselectorstype;
    SpineOptional<IncentiveTableConstraintsType> incentivetableconstraintstype;
    SpineOptional<IncentiveTableConstraintsDataType> incentivetableconstraintsdatatype;
    SpineOptional<IncentiveTableConstraintsElementsType> incentivetableconstraintselementstype;
    SpineOptional<IncentiveTableConstraintsDataElementsType> incentivetableconstraintsdataelementstype;
    SpineOptional<IncentiveTableConstraintsDataSelectorsType> incentivetableconstraintsdataselectorstype;

    enum class Function
    {
        directControlActivityData,
        directControlActivityDataElements,
        directControlActivityListData,
        directControlActivityListDataSelectors,
        directControlDescriptionData,
        directControlDescriptionDataElements,
        powerTimeSlotScheduleData,
        powerTimeSlotScheduleDataElements,
        powerTimeSlotScheduleListData,
        powerTimeSlotScheduleListDataSelectors,
        powerTimeSlotValueData,
        powerTimeSlotValueDataElements,
        powerTimeSlotValueListData,
        powerTimeSlotValueListDataSelectors,
        powerTimeSlotScheduleConstraintsData,
        powerTimeSlotScheduleConstraintsDataElements,
        powerTimeSlotScheduleConstraintsListData,
        powerTimeSlotScheduleConstraintsListDataSelectors,
        powerSequenceAlternativesRelationData,
        powerSequenceAlternativesRelationDataElements,
        powerSequenceAlternativesRelationListData,
        powerSequenceAlternativesRelationListDataSelectors,
        powerSequenceDescriptionData,
        powerSequenceDescriptionDataElements,
        powerSequenceDescriptionListData,
        powerSequenceDescriptionListDataSelectors,
        powerSequenceStateData,
        powerSequenceStateDataElements,
        powerSequenceStateListData,
        powerSequenceStateListDataSelectors,
        powerSequenceScheduleData,
        powerSequenceScheduleDataElements,
        powerSequenceScheduleListData,
        powerSequenceScheduleListDataSelectors,
        powerSequenceScheduleConstraintsData,
        powerSequenceScheduleConstraintsDataElements,
        powerSequenceScheduleConstraintsListData,
        powerSequenceScheduleConstraintsListDataSelectors,
        powerSequencePriceData,
        powerSequencePriceDataElements,
        powerSequencePriceListData,
        powerSequencePriceListDataSelectors,
        powerSequenceSchedulePreferenceData,
        powerSequenceSchedulePreferenceDataElements,
        powerSequenceSchedulePreferenceListData,
        powerSequenceSchedulePreferenceListDataSelectors,
        powerSequenceNodeScheduleInformationData,
        powerSequenceNodeScheduleInformationDataElements,
        powerSequenceScheduleConfigurationRequestCall,
        powerSequenceScheduleConfigurationRequestCallElements,
        powerSequencePriceCalculationRequestCall,
        powerSequencePriceCalculationRequestCallElements,
        measurementData,
        measurementDataElements,
        measurementListData,
        measurementListDataSelectors,
        measurementSeriesData,
        measurementSeriesDataElements,
        measurementSeriesListData,
        measurementSeriesListDataSelectors,
        measurementConstraintsData,
        measurementConstraintsDataElements,
        measurementConstraintsListData,
        measurementConstraintsListDataSelectors,
        measurementDescriptionData,
        measurementDescriptionDataElements,
        measurementDescriptionListData,
        measurementDescriptionListDataSelectors,
        measurementThresholdRelationData,
        measurementThresholdRelationDataElements,
        measurementThresholdRelationListData,
        measurementThresholdRelationListDataSelectors,
        thresholdData,
        thresholdDataElements,
        thresholdListData,
        thresholdListDataSelectors,
        thresholdConstraintsData,
        thresholdConstraintsDataElements,
        thresholdConstraintsListData,
        thresholdConstraintsListDataSelectors,
        thresholdDescriptionData,
        thresholdDescriptionDataElements,
        thresholdDescriptionListData,
        thresholdDescriptionListDataSelectors,
        operatingConstraintsInterruptData,
        operatingConstraintsInterruptDataElements,
        operatingConstraintsInterruptListData,
        operatingConstraintsInterruptListDataSelectors,
        operatingConstraintsDurationData,
        operatingConstraintsDurationDataElements,
        operatingConstraintsDurationListData,
        operatingConstraintsDurationListDataSelectors,
        operatingConstraintsPowerDescriptionData,
        operatingConstraintsPowerDescriptionDataElements,
        operatingConstraintsPowerDescriptionListData,
        operatingConstraintsPowerDescriptionListDataSelectors,
        operatingConstraintsPowerRangeData,
        operatingConstraintsPowerRangeDataElements,
        operatingConstraintsPowerRangeListData,
        operatingConstraintsPowerRangeListDataSelectors,
        operatingConstraintsPowerLevelData,
        operatingConstraintsPowerLevelDataElements,
        operatingConstraintsPowerLevelListData,
        operatingConstraintsPowerLevelListDataSelectors,
        operatingConstraintsResumeImplicationData,
        operatingConstraintsResumeImplicationDataElements,
        operatingConstraintsResumeImplicationListData,
        operatingConstraintsResumeImplicationListDataSelectors,
        billData,
        billDataElements,
        billListData,
        billListDataSelectors,
        billConstraintsData,
        billConstraintsDataElements,
        billConstraintsListData,
        billConstraintsListDataSelectors,
        billDescriptionData,
        billDescriptionDataElements,
        billDescriptionListData,
        billDescriptionListDataSelectors,
        identificationData,
        identificationDataElements,
        identificationListData,
        identificationListDataSelectors,
        sessionIdentificationData,
        sessionIdentificationDataElements,
        sessionIdentificationListData,
        sessionIdentificationListDataSelectors,
        sessionMeasurementRelationData,
        sessionMeasurementRelationDataElements,
        sessionMeasurementRelationListData,
        sessionMeasurementRelationListDataSelectors,
        setpointData,
        setpointDataElements,
        setpointListData,
        setpointListDataSelectors,
        setpointConstraintsData,
        setpointConstraintsDataElements,
        setpointConstraintsListData,
        setpointConstraintsListDataSelectors,
        setpointDescriptionData,
        setpointDescriptionDataElements,
        setpointDescriptionListData,
        setpointDescriptionListDataSelectors,
        timeTableData,
        timeTableDataElements,
        timeTableListData,
        timeTableListDataSelectors,
        timeTableConstraintsData,
        timeTableConstraintsDataElements,
        timeTableConstraintsListData,
        timeTableConstraintsListDataSelectors,
        timeTableDescriptionData,
        timeTableDescriptionDataElements,
        timeTableDescriptionListData,
        timeTableDescriptionListDataSelectors,
        sensingData,
        sensingDataElements,
        sensingListData,
        sensingListDataSelectors,
        sensingDescriptionData,
        sensingDescriptionDataElements,
        resultData,
        actuatorSwitchData,
        actuatorSwitchDataElements,
        actuatorSwitchDescriptionData,
        actuatorSwitchDescriptionDataElements,
        networkManagementAddNodeCall,
        networkManagementAddNodeCallElements,
        networkManagementRemoveNodeCall,
        networkManagementRemoveNodeCallElements,
        networkManagementModifyNodeCall,
        networkManagementModifyNodeCallElements,
        networkManagementScanNetworkCall,
        networkManagementScanNetworkCallElements,
        networkManagementDiscoverCall,
        networkManagementDiscoverCallElements,
        networkManagementAbortCall,
        networkManagementAbortCallElements,
        networkManagementProcessStateData,
        networkManagementProcessStateDataElements,
        networkManagementJoiningModeData,
        networkManagementJoiningModeDataElements,
        networkManagementReportCandidateData,
        networkManagementReportCandidateDataElements,
        networkManagementDeviceDescriptionData,
        networkManagementDeviceDescriptionDataElements,
        networkManagementDeviceDescriptionListData,
        networkManagementDeviceDescriptionListDataSelectors,
        networkManagementEntityDescriptionData,
        networkManagementEntityDescriptionDataElements,
        networkManagementEntityDescriptionListData,
        networkManagementEntityDescriptionListDataSelectors,
        networkManagementFeatureDescriptionData,
        networkManagementFeatureDescriptionDataElements,
        networkManagementFeatureDescriptionListData,
        networkManagementFeatureDescriptionListDataSelectors,
        supplyConditionData,
        supplyConditionDataElements,
        supplyConditionListData,
        supplyConditionListDataSelectors,
        supplyConditionDescriptionData,
        supplyConditionDescriptionDataElements,
        supplyConditionDescriptionListData,
        supplyConditionDescriptionListDataSelectors,
        supplyConditionThresholdRelationData,
        supplyConditionThresholdRelationDataElements,
        supplyConditionThresholdRelationListData,
        supplyConditionThresholdRelationListDataSelectors,
        alarmData,
        alarmDataElements,
        alarmListData,
        alarmListDataSelectors,
        nodeManagementDetailedDiscoveryData,
        nodeManagementDetailedDiscoveryDataElements,
        nodeManagementDetailedDiscoveryDataSelectors,
        nodeManagementBindingData,
        nodeManagementBindingDataElements,
        nodeManagementBindingDataSelectors,
        nodeManagementBindingRequestCall,
        nodeManagementBindingRequestCallElements,
        nodeManagementBindingDeleteCall,
        nodeManagementBindingDeleteCallElements,
        nodeManagementSubscriptionData,
        nodeManagementSubscriptionDataElements,
        nodeManagementSubscriptionDataSelectors,
        nodeManagementSubscriptionRequestCall,
        nodeManagementSubscriptionRequestCallElements,
        nodeManagementSubscriptionDeleteCall,
        nodeManagementSubscriptionDeleteCallElements,
        nodeManagementDestinationData,
        nodeManagementDestinationDataElements,
        nodeManagementDestinationListData,
        nodeManagementDestinationListDataSelectors,
        nodeManagementUseCaseData,
        nodeManagementUseCaseDataElements,
        nodeManagementUseCaseDataSelectors,
        bindingManagementEntryData,
        bindingManagementEntryDataElements,
        bindingManagementEntryListData,
        bindingManagementEntryListDataSelectors,
        bindingManagementRequestCall,
        bindingManagementRequestCallElements,
        bindingManagementDeleteCall,
        bindingManagementDeleteCallElements,
        subscriptionManagementEntryData,
        subscriptionManagementEntryDataElements,
        subscriptionManagementEntryListData,
        subscriptionManagementEntryListDataSelectors,
        subscriptionManagementRequestCall,
        subscriptionManagementRequestCallElements,
        subscriptionManagementDeleteCall,
        subscriptionManagementDeleteCallElements,
        useCaseInformationData,
        useCaseInformationDataElements,
        useCaseInformationListData,
        useCaseInformationListDataSelectors,
        specificationVersionData,
        specificationVersionDataElements,
        specificationVersionListData,
        specificationVersionListDataSelectors,
        taskManagementJobData,
        taskManagementJobDataElements,
        taskManagementJobListData,
        taskManagementJobListDataSelectors,
        taskManagementJobRelationData,
        taskManagementJobRelationDataElements,
        taskManagementJobRelationListData,
        taskManagementJobRelationListDataSelectors,
        taskManagementJobDescriptionData,
        taskManagementJobDescriptionDataElements,
        taskManagementJobDescriptionListData,
        taskManagementJobDescriptionListDataSelectors,
        taskManagementOverviewData,
        taskManagementOverviewDataElements,
        hvacSystemFunctionData,
        hvacSystemFunctionDataElements,
        hvacSystemFunctionListData,
        hvacSystemFunctionListDataSelectors,
        hvacSystemFunctionOperationModeRelationData,
        hvacSystemFunctionOperationModeRelationDataElements,
        hvacSystemFunctionOperationModeRelationListData,
        hvacSystemFunctionOperationModeRelationListDataSelectors,
        hvacSystemFunctionSetpointRelationData,
        hvacSystemFunctionSetpointRelationDataElements,
        hvacSystemFunctionSetpointRelationListData,
        hvacSystemFunctionSetpointRelationListDataSelectors,
        hvacSystemFunctionPowerSequenceRelationData,
        hvacSystemFunctionPowerSequenceRelationDataElements,
        hvacSystemFunctionPowerSequenceRelationListData,
        hvacSystemFunctionPowerSequenceRelationListDataSelectors,
        hvacSystemFunctionDescriptionData,
        hvacSystemFunctionDescriptionDataElements,
        hvacSystemFunctionDescriptionListData,
        hvacSystemFunctionDescriptionListDataSelectors,
        hvacOperationModeDescriptionData,
        hvacOperationModeDescriptionDataElements,
        hvacOperationModeDescriptionListData,
        hvacOperationModeDescriptionListDataSelectors,
        hvacOverrunData,
        hvacOverrunDataElements,
        hvacOverrunListData,
        hvacOverrunListDataSelectors,
        hvacOverrunDescriptionData,
        hvacOverrunDescriptionDataElements,
        hvacOverrunDescriptionListData,
        hvacOverrunDescriptionListDataSelectors,
        loadControlNodeData,
        loadControlNodeDataElements,
        loadControlEventData,
        loadControlEventDataElements,
        loadControlEventListData,
        loadControlEventListDataSelectors,
        loadControlStateData,
        loadControlStateDataElements,
        loadControlStateListData,
        loadControlStateListDataSelectors,
        loadControlLimitData,
        loadControlLimitDataElements,
        loadControlLimitListData,
        loadControlLimitListDataSelectors,
        loadControlLimitConstraintsData,
        loadControlLimitConstraintsDataElements,
        loadControlLimitConstraintsListData,
        loadControlLimitConstraintsListDataSelectors,
        loadControlLimitDescriptionData,
        loadControlLimitDescriptionDataElements,
        loadControlLimitDescriptionListData,
        loadControlLimitDescriptionListDataSelectors,
        deviceClassificationManufacturerData,
        deviceClassificationManufacturerDataElements,
        deviceClassificationUserData,
        deviceClassificationUserDataElements,
        actuatorLevelData,
        actuatorLevelDataElements,
        actuatorLevelDescriptionData,
        actuatorLevelDescriptionDataElements,
        timeSeriesData,
        timeSeriesDataElements,
        timeSeriesListData,
        timeSeriesListDataSelectors,
        timeSeriesDescriptionData,
        timeSeriesDescriptionDataElements,
        timeSeriesDescriptionListData,
        timeSeriesDescriptionListDataSelectors,
        timeSeriesConstraintsData,
        timeSeriesConstraintsDataElements,
        timeSeriesConstraintsListData,
        timeSeriesConstraintsListDataSelectors,
        smartEnergyManagementPsData,
        smartEnergyManagementPsDataElements,
        smartEnergyManagementPsDataSelectors,
        smartEnergyManagementPsPriceData,
        smartEnergyManagementPsPriceDataElements,
        smartEnergyManagementPsPriceDataSelectors,
        smartEnergyManagementPsConfigurationRequestCall,
        smartEnergyManagementPsConfigurationRequestCallElements,
        smartEnergyManagementPsPriceCalculationRequestCall,
        smartEnergyManagementPsPriceCalculationRequestCallElements,
        messagingData,
        messagingDataElements,
        messagingListData,
        messagingListDataSelectors,
        tariffOverallConstraintsData,
        tariffOverallConstraintsDataElements,
        tariffData,
        tariffDataElements,
        tariffListData,
        tariffListDataSelectors,
        tariffTierRelationData,
        tariffTierRelationDataElements,
        tariffTierRelationListData,
        tariffTierRelationListDataSelectors,
        tariffBoundaryRelationData,
        tariffBoundaryRelationDataElements,
        tariffBoundaryRelationListData,
        tariffBoundaryRelationListDataSelectors,
        tariffDescriptionData,
        tariffDescriptionDataElements,
        tariffDescriptionListData,
        tariffDescriptionListDataSelectors,
        tierBoundaryData,
        tierBoundaryDataElements,
        tierBoundaryListData,
        tierBoundaryListDataSelectors,
        tierBoundaryDescriptionData,
        tierBoundaryDescriptionDataElements,
        tierBoundaryDescriptionListData,
        tierBoundaryDescriptionListDataSelectors,
        commodityData,
        commodityDataElements,
        commodityListData,
        commodityListDataSelectors,
        tierData,
        tierDataElements,
        tierListData,
        tierListDataSelectors,
        tierIncentiveRelationData,
        tierIncentiveRelationDataElements,
        tierIncentiveRelationListData,
        tierIncentiveRelationListDataSelectors,
        tierDescriptionData,
        tierDescriptionDataElements,
        tierDescriptionListData,
        tierDescriptionListDataSelectors,
        incentiveData,
        incentiveDataElements,
        incentiveListData,
        incentiveListDataSelectors,
        incentiveDescriptionData,
        incentiveDescriptionDataElements,
        incentiveDescriptionListData,
        incentiveDescriptionListDataSelectors,
        stateInformationData,
        stateInformationDataElements,
        stateInformationListData,
        stateInformationListDataSelectors,
        electricalConnectionParameterDescriptionData,
        electricalConnectionParameterDescriptionDataElements,
        electricalConnectionParameterDescriptionListData,
        electricalConnectionParameterDescriptionListDataSelectors,
        electricalConnectionPermittedValueSetData,
        electricalConnectionPermittedValueSetDataElements,
        electricalConnectionPermittedValueSetListData,
        electricalConnectionPermittedValueSetListDataSelectors,
        electricalConnectionCharacteristicData,
        electricalConnectionCharacteristicDataElements,
        electricalConnectionCharacteristicListData,
        electricalConnectionCharacteristicListDataSelectors,
        electricalConnectionStateData,
        electricalConnectionStateDataElements,
        electricalConnectionStateListData,
        electricalConnectionStateListDataSelectors,
        electricalConnectionDescriptionData,
        electricalConnectionDescriptionDataElements,
        electricalConnectionDescriptionListData,
        electricalConnectionDescriptionListDataSelectors,
        timeInformationData,
        timeInformationDataElements,
        timeDistributorData,
        timeDistributorDataElements,
        timePrecisionData,
        timePrecisionDataElements,
        timeDistributorEnquiryCall,
        timeDistributorEnquiryCallElements,
        deviceDiagnosisStateData,
        deviceDiagnosisStateDataElements,
        deviceDiagnosisHeartbeatData,
        deviceDiagnosisHeartbeatDataElements,
        deviceDiagnosisServiceData,
        deviceDiagnosisServiceDataElements,
        deviceConfigurationKeyValueData,
        deviceConfigurationKeyValueDataElements,
        deviceConfigurationKeyValueListData,
        deviceConfigurationKeyValueListDataSelectors,
        deviceConfigurationKeyValueDescriptionData,
        deviceConfigurationKeyValueDescriptionDataElements,
        deviceConfigurationKeyValueDescriptionListData,
        deviceConfigurationKeyValueDescriptionListDataSelectors,
        deviceConfigurationKeyValueConstraintsData,
        deviceConfigurationKeyValueConstraintsDataElements,
        deviceConfigurationKeyValueConstraintsListData,
        deviceConfigurationKeyValueConstraintsListDataSelectors,
        header,
        cmdClassifier,
        lastUpdateAt,
        function,
        cmdControl,
        dataTunnelingCall,
        dataTunnelingCallElements,
        incentiveTableData,
        incentiveTableDataElements,
        incentiveTableDataSelectors,
        incentiveTableDescriptionData,
        incentiveTableDescriptionDataElements,
        incentiveTableDescriptionDataSelectors,
        incentiveTableConstraintsData,
        incentiveTableConstraintsDataElements,
        incentiveTableConstraintsDataSelectors,
        None
    };

    enum class Type
    {
        DirectControlActivityDataType,
        DirectControlActivityDataElementsType,
        DirectControlActivityListDataType,
        DirectControlActivityListDataSelectorsType,
        DirectControlDescriptionDataType,
        DirectControlDescriptionDataElementsType,
        PowerTimeSlotScheduleDataType,
        PowerTimeSlotScheduleDataElementsType,
        PowerTimeSlotScheduleListDataType,
        PowerTimeSlotScheduleListDataSelectorsType,
        PowerTimeSlotValueDataType,
        PowerTimeSlotValueDataElementsType,
        PowerTimeSlotValueListDataType,
        PowerTimeSlotValueListDataSelectorsType,
        PowerTimeSlotScheduleConstraintsDataType,
        PowerTimeSlotScheduleConstraintsDataElementsType,
        PowerTimeSlotScheduleConstraintsListDataType,
        PowerTimeSlotScheduleConstraintsListDataSelectorsType,
        PowerSequenceAlternativesRelationDataType,
        PowerSequenceAlternativesRelationDataElementsType,
        PowerSequenceAlternativesRelationListDataType,
        PowerSequenceAlternativesRelationListDataSelectorsType,
        PowerSequenceDescriptionDataType,
        PowerSequenceDescriptionDataElementsType,
        PowerSequenceDescriptionListDataType,
        PowerSequenceDescriptionListDataSelectorsType,
        PowerSequenceStateDataType,
        PowerSequenceStateDataElementsType,
        PowerSequenceStateListDataType,
        PowerSequenceStateListDataSelectorsType,
        PowerSequenceScheduleDataType,
        PowerSequenceScheduleDataElementsType,
        PowerSequenceScheduleListDataType,
        PowerSequenceScheduleListDataSelectorsType,
        PowerSequenceScheduleConstraintsDataType,
        PowerSequenceScheduleConstraintsDataElementsType,
        PowerSequenceScheduleConstraintsListDataType,
        PowerSequenceScheduleConstraintsListDataSelectorsType,
        PowerSequencePriceDataType,
        PowerSequencePriceDataElementsType,
        PowerSequencePriceListDataType,
        PowerSequencePriceListDataSelectorsType,
        PowerSequenceSchedulePreferenceDataType,
        PowerSequenceSchedulePreferenceDataElementsType,
        PowerSequenceSchedulePreferenceListDataType,
        PowerSequenceSchedulePreferenceListDataSelectorsType,
        PowerSequenceNodeScheduleInformationDataType,
        PowerSequenceNodeScheduleInformationDataElementsType,
        PowerSequenceScheduleConfigurationRequestCallType,
        PowerSequenceScheduleConfigurationRequestCallElementsType,
        PowerSequencePriceCalculationRequestCallType,
        PowerSequencePriceCalculationRequestCallElementsType,
        MeasurementDataType,
        MeasurementDataElementsType,
        MeasurementListDataType,
        MeasurementListDataSelectorsType,
        MeasurementSeriesDataType,
        MeasurementSeriesDataElementsType,
        MeasurementSeriesListDataType,
        MeasurementSeriesListDataSelectorsType,
        MeasurementConstraintsDataType,
        MeasurementConstraintsDataElementsType,
        MeasurementConstraintsListDataType,
        MeasurementConstraintsListDataSelectorsType,
        MeasurementDescriptionDataType,
        MeasurementDescriptionDataElementsType,
        MeasurementDescriptionListDataType,
        MeasurementDescriptionListDataSelectorsType,
        MeasurementThresholdRelationDataType,
        MeasurementThresholdRelationDataElementsType,
        MeasurementThresholdRelationListDataType,
        MeasurementThresholdRelationListDataSelectorsType,
        ThresholdDataType,
        ThresholdDataElementsType,
        ThresholdListDataType,
        ThresholdListDataSelectorsType,
        ThresholdConstraintsDataType,
        ThresholdConstraintsDataElementsType,
        ThresholdConstraintsListDataType,
        ThresholdConstraintsListDataSelectorsType,
        ThresholdDescriptionDataType,
        ThresholdDescriptionDataElementsType,
        ThresholdDescriptionListDataType,
        ThresholdDescriptionListDataSelectorsType,
        OperatingConstraintsInterruptDataType,
        OperatingConstraintsInterruptDataElementsType,
        OperatingConstraintsInterruptListDataType,
        OperatingConstraintsInterruptListDataSelectorsType,
        OperatingConstraintsDurationDataType,
        OperatingConstraintsDurationDataElementsType,
        OperatingConstraintsDurationListDataType,
        OperatingConstraintsDurationListDataSelectorsType,
        OperatingConstraintsPowerDescriptionDataType,
        OperatingConstraintsPowerDescriptionDataElementsType,
        OperatingConstraintsPowerDescriptionListDataType,
        OperatingConstraintsPowerDescriptionListDataSelectorsType,
        OperatingConstraintsPowerRangeDataType,
        OperatingConstraintsPowerRangeDataElementsType,
        OperatingConstraintsPowerRangeListDataType,
        OperatingConstraintsPowerRangeListDataSelectorsType,
        OperatingConstraintsPowerLevelDataType,
        OperatingConstraintsPowerLevelDataElementsType,
        OperatingConstraintsPowerLevelListDataType,
        OperatingConstraintsPowerLevelListDataSelectorsType,
        OperatingConstraintsResumeImplicationDataType,
        OperatingConstraintsResumeImplicationDataElementsType,
        OperatingConstraintsResumeImplicationListDataType,
        OperatingConstraintsResumeImplicationListDataSelectorsType,
        BillDataType,
        BillDataElementsType,
        BillListDataType,
        BillListDataSelectorsType,
        BillConstraintsDataType,
        BillConstraintsDataElementsType,
        BillConstraintsListDataType,
        BillConstraintsListDataSelectorsType,
        BillDescriptionDataType,
        BillDescriptionDataElementsType,
        BillDescriptionListDataType,
        BillDescriptionListDataSelectorsType,
        IdentificationDataType,
        IdentificationDataElementsType,
        IdentificationListDataType,
        IdentificationListDataSelectorsType,
        SessionIdentificationDataType,
        SessionIdentificationDataElementsType,
        SessionIdentificationListDataType,
        SessionIdentificationListDataSelectorsType,
        SessionMeasurementRelationDataType,
        SessionMeasurementRelationDataElementsType,
        SessionMeasurementRelationListDataType,
        SessionMeasurementRelationListDataSelectorsType,
        SetpointDataType,
        SetpointDataElementsType,
        SetpointListDataType,
        SetpointListDataSelectorsType,
        SetpointConstraintsDataType,
        SetpointConstraintsDataElementsType,
        SetpointConstraintsListDataType,
        SetpointConstraintsListDataSelectorsType,
        SetpointDescriptionDataType,
        SetpointDescriptionDataElementsType,
        SetpointDescriptionListDataType,
        SetpointDescriptionListDataSelectorsType,
        TimeTableDataType,
        TimeTableDataElementsType,
        TimeTableListDataType,
        TimeTableListDataSelectorsType,
        TimeTableConstraintsDataType,
        TimeTableConstraintsDataElementsType,
        TimeTableConstraintsListDataType,
        TimeTableConstraintsListDataSelectorsType,
        TimeTableDescriptionDataType,
        TimeTableDescriptionDataElementsType,
        TimeTableDescriptionListDataType,
        TimeTableDescriptionListDataSelectorsType,
        SensingDataType,
        SensingDataElementsType,
        SensingListDataType,
        SensingListDataSelectorsType,
        SensingDescriptionDataType,
        SensingDescriptionDataElementsType,
        ResultDataType,
        ActuatorSwitchDataType,
        ActuatorSwitchDataElementsType,
        ActuatorSwitchDescriptionDataType,
        ActuatorSwitchDescriptionDataElementsType,
        NetworkManagementAddNodeCallType,
        NetworkManagementAddNodeCallElementsType,
        NetworkManagementRemoveNodeCallType,
        NetworkManagementRemoveNodeCallElementsType,
        NetworkManagementModifyNodeCallType,
        NetworkManagementModifyNodeCallElementsType,
        NetworkManagementScanNetworkCallType,
        NetworkManagementScanNetworkCallElementsType,
        NetworkManagementDiscoverCallType,
        NetworkManagementDiscoverCallElementsType,
        NetworkManagementAbortCallType,
        NetworkManagementAbortCallElementsType,
        NetworkManagementProcessStateDataType,
        NetworkManagementProcessStateDataElementsType,
        NetworkManagementJoiningModeDataType,
        NetworkManagementJoiningModeDataElementsType,
        NetworkManagementReportCandidateDataType,
        NetworkManagementReportCandidateDataElementsType,
        NetworkManagementDeviceDescriptionDataType,
        NetworkManagementDeviceDescriptionDataElementsType,
        NetworkManagementDeviceDescriptionListDataType,
        NetworkManagementDeviceDescriptionListDataSelectorsType,
        NetworkManagementEntityDescriptionDataType,
        NetworkManagementEntityDescriptionDataElementsType,
        NetworkManagementEntityDescriptionListDataType,
        NetworkManagementEntityDescriptionListDataSelectorsType,
        NetworkManagementFeatureDescriptionDataType,
        NetworkManagementFeatureDescriptionDataElementsType,
        NetworkManagementFeatureDescriptionListDataType,
        NetworkManagementFeatureDescriptionListDataSelectorsType,
        SupplyConditionDataType,
        SupplyConditionDataElementsType,
        SupplyConditionListDataType,
        SupplyConditionListDataSelectorsType,
        SupplyConditionDescriptionDataType,
        SupplyConditionDescriptionDataElementsType,
        SupplyConditionDescriptionListDataType,
        SupplyConditionDescriptionListDataSelectorsType,
        SupplyConditionThresholdRelationDataType,
        SupplyConditionThresholdRelationDataElementsType,
        SupplyConditionThresholdRelationListDataType,
        SupplyConditionThresholdRelationListDataSelectorsType,
        AlarmDataType,
        AlarmDataElementsType,
        AlarmListDataType,
        AlarmListDataSelectorsType,
        NodeManagementDetailedDiscoveryDataType,
        NodeManagementDetailedDiscoveryDataElementsType,
        NodeManagementDetailedDiscoveryDataSelectorsType,
        NodeManagementBindingDataType,
        NodeManagementBindingDataElementsType,
        NodeManagementBindingDataSelectorsType,
        NodeManagementBindingRequestCallType,
        NodeManagementBindingRequestCallElementsType,
        NodeManagementBindingDeleteCallType,
        NodeManagementBindingDeleteCallElementsType,
        NodeManagementSubscriptionDataType,
        NodeManagementSubscriptionDataElementsType,
        NodeManagementSubscriptionDataSelectorsType,
        NodeManagementSubscriptionRequestCallType,
        NodeManagementSubscriptionRequestCallElementsType,
        NodeManagementSubscriptionDeleteCallType,
        NodeManagementSubscriptionDeleteCallElementsType,
        NodeManagementDestinationDataType,
        NodeManagementDestinationDataElementsType,
        NodeManagementDestinationListDataType,
        NodeManagementDestinationListDataSelectorsType,
        NodeManagementUseCaseDataType,
        NodeManagementUseCaseDataElementsType,
        NodeManagementUseCaseDataSelectorsType,
        BindingManagementEntryDataType,
        BindingManagementEntryDataElementsType,
        BindingManagementEntryListDataType,
        BindingManagementEntryListDataSelectorsType,
        BindingManagementRequestCallType,
        BindingManagementRequestCallElementsType,
        BindingManagementDeleteCallType,
        BindingManagementDeleteCallElementsType,
        SubscriptionManagementEntryDataType,
        SubscriptionManagementEntryDataElementsType,
        SubscriptionManagementEntryListDataType,
        SubscriptionManagementEntryListDataSelectorsType,
        SubscriptionManagementRequestCallType,
        SubscriptionManagementRequestCallElementsType,
        SubscriptionManagementDeleteCallType,
        SubscriptionManagementDeleteCallElementsType,
        UseCaseInformationDataType,
        UseCaseInformationDataElementsType,
        UseCaseInformationListDataType,
        UseCaseInformationListDataSelectorsType,
        SpecificationVersionDataType,
        SpecificationVersionDataElementsType,
        SpecificationVersionListDataType,
        SpecificationVersionListDataSelectorsType,
        TaskManagementJobDataType,
        TaskManagementJobDataElementsType,
        TaskManagementJobListDataType,
        TaskManagementJobListDataSelectorsType,
        TaskManagementJobRelationDataType,
        TaskManagementJobRelationDataElementsType,
        TaskManagementJobRelationListDataType,
        TaskManagementJobRelationListDataSelectorsType,
        TaskManagementJobDescriptionDataType,
        TaskManagementJobDescriptionDataElementsType,
        TaskManagementJobDescriptionListDataType,
        TaskManagementJobDescriptionListDataSelectorsType,
        TaskManagementOverviewDataType,
        TaskManagementOverviewDataElementsType,
        HvacSystemFunctionDataType,
        HvacSystemFunctionDataElementsType,
        HvacSystemFunctionListDataType,
        HvacSystemFunctionListDataSelectorsType,
        HvacSystemFunctionOperationModeRelationDataType,
        HvacSystemFunctionOperationModeRelationDataElementsType,
        HvacSystemFunctionOperationModeRelationListDataType,
        HvacSystemFunctionOperationModeRelationListDataSelectorsType,
        HvacSystemFunctionSetpointRelationDataType,
        HvacSystemFunctionSetpointRelationDataElementsType,
        HvacSystemFunctionSetpointRelationListDataType,
        HvacSystemFunctionSetpointRelationListDataSelectorsType,
        HvacSystemFunctionPowerSequenceRelationDataType,
        HvacSystemFunctionPowerSequenceRelationDataElementsType,
        HvacSystemFunctionPowerSequenceRelationListDataType,
        HvacSystemFunctionPowerSequenceRelationListDataSelectorsType,
        HvacSystemFunctionDescriptionDataType,
        HvacSystemFunctionDescriptionDataElementsType,
        HvacSystemFunctionDescriptionListDataType,
        HvacSystemFunctionDescriptionListDataSelectorsType,
        HvacOperationModeDescriptionDataType,
        HvacOperationModeDescriptionDataElementsType,
        HvacOperationModeDescriptionListDataType,
        HvacOperationModeDescriptionListDataSelectorsType,
        HvacOverrunDataType,
        HvacOverrunDataElementsType,
        HvacOverrunListDataType,
        HvacOverrunListDataSelectorsType,
        HvacOverrunDescriptionDataType,
        HvacOverrunDescriptionDataElementsType,
        HvacOverrunDescriptionListDataType,
        HvacOverrunDescriptionListDataSelectorsType,
        LoadControlNodeDataType,
        LoadControlNodeDataElementsType,
        LoadControlEventDataType,
        LoadControlEventDataElementsType,
        LoadControlEventListDataType,
        LoadControlEventListDataSelectorsType,
        LoadControlStateDataType,
        LoadControlStateDataElementsType,
        LoadControlStateListDataType,
        LoadControlStateListDataSelectorsType,
        LoadControlLimitDataType,
        LoadControlLimitDataElementsType,
        LoadControlLimitListDataType,
        LoadControlLimitListDataSelectorsType,
        LoadControlLimitConstraintsDataType,
        LoadControlLimitConstraintsDataElementsType,
        LoadControlLimitConstraintsListDataType,
        LoadControlLimitConstraintsListDataSelectorsType,
        LoadControlLimitDescriptionDataType,
        LoadControlLimitDescriptionDataElementsType,
        LoadControlLimitDescriptionListDataType,
        LoadControlLimitDescriptionListDataSelectorsType,
        DeviceClassificationManufacturerDataType,
        DeviceClassificationManufacturerDataElementsType,
        DeviceClassificationUserDataType,
        DeviceClassificationUserDataElementsType,
        ActuatorLevelDataType,
        ActuatorLevelDataElementsType,
        ActuatorLevelDescriptionDataType,
        ActuatorLevelDescriptionDataElementsType,
        TimeSeriesDataType,
        TimeSeriesDataElementsType,
        TimeSeriesListDataType,
        TimeSeriesListDataSelectorsType,
        TimeSeriesDescriptionDataType,
        TimeSeriesDescriptionDataElementsType,
        TimeSeriesDescriptionListDataType,
        TimeSeriesDescriptionListDataSelectorsType,
        TimeSeriesConstraintsDataType,
        TimeSeriesConstraintsDataElementsType,
        TimeSeriesConstraintsListDataType,
        TimeSeriesConstraintsListDataSelectorsType,
        SmartEnergyManagementPsDataType,
        SmartEnergyManagementPsDataElementsType,
        SmartEnergyManagementPsDataSelectorsType,
        SmartEnergyManagementPsPriceDataType,
        SmartEnergyManagementPsPriceDataElementsType,
        SmartEnergyManagementPsPriceDataSelectorsType,
        SmartEnergyManagementPsConfigurationRequestCallType,
        SmartEnergyManagementPsConfigurationRequestCallElementsType,
        SmartEnergyManagementPsPriceCalculationRequestCallType,
        SmartEnergyManagementPsPriceCalculationRequestCallElementsType,
        MessagingDataType,
        MessagingDataElementsType,
        MessagingListDataType,
        MessagingListDataSelectorsType,
        TariffOverallConstraintsDataType,
        TariffOverallConstraintsDataElementsType,
        TariffDataType,
        TariffDataElementsType,
        TariffListDataType,
        TariffListDataSelectorsType,
        TariffTierRelationDataType,
        TariffTierRelationDataElementsType,
        TariffTierRelationListDataType,
        TariffTierRelationListDataSelectorsType,
        TariffBoundaryRelationDataType,
        TariffBoundaryRelationDataElementsType,
        TariffBoundaryRelationListDataType,
        TariffBoundaryRelationListDataSelectorsType,
        TariffDescriptionDataType,
        TariffDescriptionDataElementsType,
        TariffDescriptionListDataType,
        TariffDescriptionListDataSelectorsType,
        TierBoundaryDataType,
        TierBoundaryDataElementsType,
        TierBoundaryListDataType,
        TierBoundaryListDataSelectorsType,
        TierBoundaryDescriptionDataType,
        TierBoundaryDescriptionDataElementsType,
        TierBoundaryDescriptionListDataType,
        TierBoundaryDescriptionListDataSelectorsType,
        CommodityDataType,
        CommodityDataElementsType,
        CommodityListDataType,
        CommodityListDataSelectorsType,
        TierDataType,
        TierDataElementsType,
        TierListDataType,
        TierListDataSelectorsType,
        TierIncentiveRelationDataType,
        TierIncentiveRelationDataElementsType,
        TierIncentiveRelationListDataType,
        TierIncentiveRelationListDataSelectorsType,
        TierDescriptionDataType,
        TierDescriptionDataElementsType,
        TierDescriptionListDataType,
        TierDescriptionListDataSelectorsType,
        IncentiveDataType,
        IncentiveDataElementsType,
        IncentiveListDataType,
        IncentiveListDataSelectorsType,
        IncentiveDescriptionDataType,
        IncentiveDescriptionDataElementsType,
        IncentiveDescriptionListDataType,
        IncentiveDescriptionListDataSelectorsType,
        StateInformationDataType,
        StateInformationDataElementsType,
        StateInformationListDataType,
        StateInformationListDataSelectorsType,
        ElectricalConnectionParameterDescriptionDataType,
        ElectricalConnectionParameterDescriptionDataElementsType,
        ElectricalConnectionParameterDescriptionListDataType,
        ElectricalConnectionParameterDescriptionListDataSelectorsType,
        ElectricalConnectionPermittedValueSetDataType,
        ElectricalConnectionPermittedValueSetDataElementsType,
        ElectricalConnectionPermittedValueSetListDataType,
        ElectricalConnectionPermittedValueSetListDataSelectorsType,
        ElectricalConnectionCharacteristicDataType,
        ElectricalConnectionCharacteristicDataElementsType,
        ElectricalConnectionCharacteristicListDataType,
        ElectricalConnectionCharacteristicListDataSelectorsType,
        ElectricalConnectionStateDataType,
        ElectricalConnectionStateDataElementsType,
        ElectricalConnectionStateListDataType,
        ElectricalConnectionStateListDataSelectorsType,
        ElectricalConnectionDescriptionDataType,
        ElectricalConnectionDescriptionDataElementsType,
        ElectricalConnectionDescriptionListDataType,
        ElectricalConnectionDescriptionListDataSelectorsType,
        TimeInformationDataType,
        TimeInformationDataElementsType,
        TimeDistributorDataType,
        TimeDistributorDataElementsType,
        TimePrecisionDataType,
        TimePrecisionDataElementsType,
        TimeDistributorEnquiryCallType,
        TimeDistributorEnquiryCallElementsType,
        DeviceDiagnosisStateDataType,
        DeviceDiagnosisStateDataElementsType,
        DeviceDiagnosisHeartbeatDataType,
        DeviceDiagnosisHeartbeatDataElementsType,
        DeviceDiagnosisServiceDataType,
        DeviceDiagnosisServiceDataElementsType,
        DeviceConfigurationKeyValueDataType,
        DeviceConfigurationKeyValueDataElementsType,
        DeviceConfigurationKeyValueListDataType,
        DeviceConfigurationKeyValueListDataSelectorsType,
        DeviceConfigurationKeyValueDescriptionDataType,
        DeviceConfigurationKeyValueDescriptionDataElementsType,
        DeviceConfigurationKeyValueDescriptionListDataType,
        DeviceConfigurationKeyValueDescriptionListDataSelectorsType,
        DeviceConfigurationKeyValueConstraintsDataType,
        DeviceConfigurationKeyValueConstraintsDataElementsType,
        DeviceConfigurationKeyValueConstraintsListDataType,
        DeviceConfigurationKeyValueConstraintsListDataSelectorsType,
        HeaderType,
        CmdClassifierType,
        AbsoluteOrRelativeTimeType,
        FunctionType,
        CmdControlType,
        DataTunnelingCallType,
        DataTunnelingCallElementsType,
        IncentiveTableDataType,
        IncentiveTableDataElementsType,
        IncentiveTableDataSelectorsType,
        IncentiveTableDescriptionDataType,
        IncentiveTableDescriptionDataElementsType,
        IncentiveTableDescriptionDataSelectorsType,
        IncentiveTableConstraintsDataType,
        IncentiveTableConstraintsDataElementsType,
        IncentiveTableConstraintsDataSelectorsType,
        None
    };


    Function last_cmd;

    Type type_from_function(Function function);
    Function function_from_string(const String function_name);
    Function handle_cmd(JsonObjectConst obj);
    String function_to_string(Function function);
    void last_cmd_to_json(JsonVariant &dst);
    void reset();
};