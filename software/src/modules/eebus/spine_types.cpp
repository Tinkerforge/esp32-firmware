
// This file is generated by generator.py. Changes will be overwritten
#include "spine_types.h"
#include "event_log_prefix.h"
#include "module_dependencies.h"

namespace ArduinoJson
{
template <typename T> void Converter<std::vector<T>>::toJson(const std::vector<T> &src, JsonVariant dst)
{
    JsonArray array;
    // SPINE-GO wants a double wrapped array for objects (but not for fundamental types) or else it breaks the JSON.
    if (std::is_fundamental<T>::value || !spine_go_compatibility_mode) {
        array = dst.to<JsonArray>();
    } else {
        array = dst.to<JsonArray>().createNestedArray();
    }
    for (T item : src)
        array.add(item);
}

template <typename T> std::vector<T> Converter<std::vector<T>>::fromJson(JsonVariantConst src)
{
    std::vector<T> dst;
    if (std::is_fundamental<T>::value || !spine_go_compatibility_mode) {
        for (T item : src.as<JsonArrayConst>())
            dst.push_back(item);
    } else {
        src = src.as<JsonArrayConst>()[0];
        for (T item : src.as<JsonArrayConst>())
            dst.push_back(item);
    }
    return dst;
}

template <typename T> bool Converter<std::vector<T>>::checkJson(JsonVariantConst src)
{
    JsonArrayConst array = src;
    bool result = array;
    for (JsonVariantConst item : array)
        result &= item.is<T>();
    return result;
}

} // namespace ArduinoJson
bool convertToJson(const MessagingTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MessagingTypeEnumType::logging:
            enumName = "logging";
            break;
        case MessagingTypeEnumType::information:
            enumName = "information";
            break;
        case MessagingTypeEnumType::warning:
            enumName = "warning";
            break;
        case MessagingTypeEnumType::alarm:
            enumName = "alarm";
            break;
        case MessagingTypeEnumType::emergency:
            enumName = "emergency";
            break;
        case MessagingTypeEnumType::obsolete:
            enumName = "obsolete";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MessagingTypeEnumType &dst)
{
    if (src == "logging") {
        dst = MessagingTypeEnumType::logging;
        return;
    }
    if (src == "information") {
        dst = MessagingTypeEnumType::information;
        return;
    }
    if (src == "warning") {
        dst = MessagingTypeEnumType::warning;
        return;
    }
    if (src == "alarm") {
        dst = MessagingTypeEnumType::alarm;
        return;
    }
    if (src == "emergency") {
        dst = MessagingTypeEnumType::emergency;
        return;
    }
    if (src == "obsolete") {
        dst = MessagingTypeEnumType::obsolete;
        return;
    }
    return;
}
bool convertToJson(const RecurringIntervalEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case RecurringIntervalEnumType::yearly:
            enumName = "yearly";
            break;
        case RecurringIntervalEnumType::monthly:
            enumName = "monthly";
            break;
        case RecurringIntervalEnumType::weekly:
            enumName = "weekly";
            break;
        case RecurringIntervalEnumType::daily:
            enumName = "daily";
            break;
        case RecurringIntervalEnumType::hourly:
            enumName = "hourly";
            break;
        case RecurringIntervalEnumType::everyMinute:
            enumName = "everyMinute";
            break;
        case RecurringIntervalEnumType::everySecond:
            enumName = "everySecond";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, RecurringIntervalEnumType &dst)
{
    if (src == "yearly") {
        dst = RecurringIntervalEnumType::yearly;
        return;
    }
    if (src == "monthly") {
        dst = RecurringIntervalEnumType::monthly;
        return;
    }
    if (src == "weekly") {
        dst = RecurringIntervalEnumType::weekly;
        return;
    }
    if (src == "daily") {
        dst = RecurringIntervalEnumType::daily;
        return;
    }
    if (src == "hourly") {
        dst = RecurringIntervalEnumType::hourly;
        return;
    }
    if (src == "everyMinute") {
        dst = RecurringIntervalEnumType::everyMinute;
        return;
    }
    if (src == "everySecond") {
        dst = RecurringIntervalEnumType::everySecond;
        return;
    }
    return;
}
bool convertToJson(const MonthType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MonthType::january:
            enumName = "january";
            break;
        case MonthType::february:
            enumName = "february";
            break;
        case MonthType::march:
            enumName = "march";
            break;
        case MonthType::april:
            enumName = "april";
            break;
        case MonthType::may:
            enumName = "may";
            break;
        case MonthType::june:
            enumName = "june";
            break;
        case MonthType::july:
            enumName = "july";
            break;
        case MonthType::august:
            enumName = "august";
            break;
        case MonthType::september:
            enumName = "september";
            break;
        case MonthType::october:
            enumName = "october";
            break;
        case MonthType::november:
            enumName = "november";
            break;
        case MonthType::december:
            enumName = "december";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MonthType &dst)
{
    if (src == "january") {
        dst = MonthType::january;
        return;
    }
    if (src == "february") {
        dst = MonthType::february;
        return;
    }
    if (src == "march") {
        dst = MonthType::march;
        return;
    }
    if (src == "april") {
        dst = MonthType::april;
        return;
    }
    if (src == "may") {
        dst = MonthType::may;
        return;
    }
    if (src == "june") {
        dst = MonthType::june;
        return;
    }
    if (src == "july") {
        dst = MonthType::july;
        return;
    }
    if (src == "august") {
        dst = MonthType::august;
        return;
    }
    if (src == "september") {
        dst = MonthType::september;
        return;
    }
    if (src == "october") {
        dst = MonthType::october;
        return;
    }
    if (src == "november") {
        dst = MonthType::november;
        return;
    }
    if (src == "december") {
        dst = MonthType::december;
        return;
    }
    return;
}
bool convertToJson(const DayOfWeekType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DayOfWeekType::monday:
            enumName = "monday";
            break;
        case DayOfWeekType::tuesday:
            enumName = "tuesday";
            break;
        case DayOfWeekType::wednesday:
            enumName = "wednesday";
            break;
        case DayOfWeekType::thursday:
            enumName = "thursday";
            break;
        case DayOfWeekType::friday:
            enumName = "friday";
            break;
        case DayOfWeekType::saturday:
            enumName = "saturday";
            break;
        case DayOfWeekType::sunday:
            enumName = "sunday";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DayOfWeekType &dst)
{
    if (src == "monday") {
        dst = DayOfWeekType::monday;
        return;
    }
    if (src == "tuesday") {
        dst = DayOfWeekType::tuesday;
        return;
    }
    if (src == "wednesday") {
        dst = DayOfWeekType::wednesday;
        return;
    }
    if (src == "thursday") {
        dst = DayOfWeekType::thursday;
        return;
    }
    if (src == "friday") {
        dst = DayOfWeekType::friday;
        return;
    }
    if (src == "saturday") {
        dst = DayOfWeekType::saturday;
        return;
    }
    if (src == "sunday") {
        dst = DayOfWeekType::sunday;
        return;
    }
    return;
}
bool convertToJson(const OccurrenceEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case OccurrenceEnumType::first:
            enumName = "first";
            break;
        case OccurrenceEnumType::second:
            enumName = "second";
            break;
        case OccurrenceEnumType::third:
            enumName = "third";
            break;
        case OccurrenceEnumType::fourth:
            enumName = "fourth";
            break;
        case OccurrenceEnumType::last:
            enumName = "last";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, OccurrenceEnumType &dst)
{
    if (src == "first") {
        dst = OccurrenceEnumType::first;
        return;
    }
    if (src == "second") {
        dst = OccurrenceEnumType::second;
        return;
    }
    if (src == "third") {
        dst = OccurrenceEnumType::third;
        return;
    }
    if (src == "fourth") {
        dst = OccurrenceEnumType::fourth;
        return;
    }
    if (src == "last") {
        dst = OccurrenceEnumType::last;
        return;
    }
    return;
}
bool convertToJson(const CommodityTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case CommodityTypeEnumType::electricity:
            enumName = "electricity";
            break;
        case CommodityTypeEnumType::gas:
            enumName = "gas";
            break;
        case CommodityTypeEnumType::oil:
            enumName = "oil";
            break;
        case CommodityTypeEnumType::water:
            enumName = "water";
            break;
        case CommodityTypeEnumType::wasteWater:
            enumName = "wasteWater";
            break;
        case CommodityTypeEnumType::domesticHotWater:
            enumName = "domesticHotWater";
            break;
        case CommodityTypeEnumType::heatingWater:
            enumName = "heatingWater";
            break;
        case CommodityTypeEnumType::steam:
            enumName = "steam";
            break;
        case CommodityTypeEnumType::heat:
            enumName = "heat";
            break;
        case CommodityTypeEnumType::coolingLoad:
            enumName = "coolingLoad";
            break;
        case CommodityTypeEnumType::air:
            enumName = "air";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, CommodityTypeEnumType &dst)
{
    if (src == "electricity") {
        dst = CommodityTypeEnumType::electricity;
        return;
    }
    if (src == "gas") {
        dst = CommodityTypeEnumType::gas;
        return;
    }
    if (src == "oil") {
        dst = CommodityTypeEnumType::oil;
        return;
    }
    if (src == "water") {
        dst = CommodityTypeEnumType::water;
        return;
    }
    if (src == "wasteWater") {
        dst = CommodityTypeEnumType::wasteWater;
        return;
    }
    if (src == "domesticHotWater") {
        dst = CommodityTypeEnumType::domesticHotWater;
        return;
    }
    if (src == "heatingWater") {
        dst = CommodityTypeEnumType::heatingWater;
        return;
    }
    if (src == "steam") {
        dst = CommodityTypeEnumType::steam;
        return;
    }
    if (src == "heat") {
        dst = CommodityTypeEnumType::heat;
        return;
    }
    if (src == "coolingLoad") {
        dst = CommodityTypeEnumType::coolingLoad;
        return;
    }
    if (src == "air") {
        dst = CommodityTypeEnumType::air;
        return;
    }
    return;
}
bool convertToJson(const EnergyDirectionEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case EnergyDirectionEnumType::consume:
            enumName = "consume";
            break;
        case EnergyDirectionEnumType::produce:
            enumName = "produce";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, EnergyDirectionEnumType &dst)
{
    if (src == "consume") {
        dst = EnergyDirectionEnumType::consume;
        return;
    }
    if (src == "produce") {
        dst = EnergyDirectionEnumType::produce;
        return;
    }
    return;
}
bool convertToJson(const EnergyModeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case EnergyModeEnumType::consume:
            enumName = "consume";
            break;
        case EnergyModeEnumType::produce:
            enumName = "produce";
            break;
        case EnergyModeEnumType::idle:
            enumName = "idle";
            break;
        case EnergyModeEnumType::var_auto:
            enumName = "auto";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, EnergyModeEnumType &dst)
{
    if (src == "consume") {
        dst = EnergyModeEnumType::consume;
        return;
    }
    if (src == "produce") {
        dst = EnergyModeEnumType::produce;
        return;
    }
    if (src == "idle") {
        dst = EnergyModeEnumType::idle;
        return;
    }
    if (src == "auto") {
        dst = EnergyModeEnumType::var_auto;
        return;
    }
    return;
}
bool convertToJson(const UnitOfMeasurementEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case UnitOfMeasurementEnumType::unknown:
            enumName = "unknown";
            break;
        case UnitOfMeasurementEnumType::var_1:
            enumName = "1";
            break;
        case UnitOfMeasurementEnumType::m:
            enumName = "m";
            break;
        case UnitOfMeasurementEnumType::kg:
            enumName = "kg";
            break;
        case UnitOfMeasurementEnumType::s:
            enumName = "s";
            break;
        case UnitOfMeasurementEnumType::A:
            enumName = "A";
            break;
        case UnitOfMeasurementEnumType::K:
            enumName = "K";
            break;
        case UnitOfMeasurementEnumType::mol:
            enumName = "mol";
            break;
        case UnitOfMeasurementEnumType::cd:
            enumName = "cd";
            break;
        case UnitOfMeasurementEnumType::V:
            enumName = "V";
            break;
        case UnitOfMeasurementEnumType::W:
            enumName = "W";
            break;
        case UnitOfMeasurementEnumType::Wh:
            enumName = "Wh";
            break;
        case UnitOfMeasurementEnumType::VA:
            enumName = "VA";
            break;
        case UnitOfMeasurementEnumType::VAh:
            enumName = "VAh";
            break;
        case UnitOfMeasurementEnumType::var:
            enumName = "var";
            break;
        case UnitOfMeasurementEnumType::varh:
            enumName = "varh";
            break;
        case UnitOfMeasurementEnumType::degC:
            enumName = "degC";
            break;
        case UnitOfMeasurementEnumType::degF:
            enumName = "degF";
            break;
        case UnitOfMeasurementEnumType::Lm:
            enumName = "Lm";
            break;
        case UnitOfMeasurementEnumType::lx:
            enumName = "lx";
            break;
        case UnitOfMeasurementEnumType::Ohm:
            enumName = "Ohm";
            break;
        case UnitOfMeasurementEnumType::Hz:
            enumName = "Hz";
            break;
        case UnitOfMeasurementEnumType::dB:
            enumName = "dB";
            break;
        case UnitOfMeasurementEnumType::dBm:
            enumName = "dBm";
            break;
        case UnitOfMeasurementEnumType::pct:
            enumName = "pct";
            break;
        case UnitOfMeasurementEnumType::ppm:
            enumName = "ppm";
            break;
        case UnitOfMeasurementEnumType::l:
            enumName = "l";
            break;
        case UnitOfMeasurementEnumType::l_s:
            enumName = "l/s";
            break;
        case UnitOfMeasurementEnumType::l_h:
            enumName = "l/h";
            break;
        case UnitOfMeasurementEnumType::deg:
            enumName = "deg";
            break;
        case UnitOfMeasurementEnumType::rad:
            enumName = "rad";
            break;
        case UnitOfMeasurementEnumType::rad_s:
            enumName = "rad/s";
            break;
        case UnitOfMeasurementEnumType::sr:
            enumName = "sr";
            break;
        case UnitOfMeasurementEnumType::Gy:
            enumName = "Gy";
            break;
        case UnitOfMeasurementEnumType::Bq:
            enumName = "Bq";
            break;
        case UnitOfMeasurementEnumType::Bq_m_3:
            enumName = "Bq/m^3";
            break;
        case UnitOfMeasurementEnumType::Sv:
            enumName = "Sv";
            break;
        case UnitOfMeasurementEnumType::Rd:
            enumName = "Rd";
            break;
        case UnitOfMeasurementEnumType::C:
            enumName = "C";
            break;
        case UnitOfMeasurementEnumType::F:
            enumName = "F";
            break;
        case UnitOfMeasurementEnumType::H:
            enumName = "H";
            break;
        case UnitOfMeasurementEnumType::J:
            enumName = "J";
            break;
        case UnitOfMeasurementEnumType::N:
            enumName = "N";
            break;
        case UnitOfMeasurementEnumType::N_m:
            enumName = "N_m";
            break;
        case UnitOfMeasurementEnumType::N_s:
            enumName = "N_s";
            break;
        case UnitOfMeasurementEnumType::Wb:
            enumName = "Wb";
            break;
        case UnitOfMeasurementEnumType::T:
            enumName = "T";
            break;
        case UnitOfMeasurementEnumType::Pa:
            enumName = "Pa";
            break;
        case UnitOfMeasurementEnumType::bar:
            enumName = "bar";
            break;
        case UnitOfMeasurementEnumType::atm:
            enumName = "atm";
            break;
        case UnitOfMeasurementEnumType::psi:
            enumName = "psi";
            break;
        case UnitOfMeasurementEnumType::mmHg:
            enumName = "mmHg";
            break;
        case UnitOfMeasurementEnumType::m_2:
            enumName = "m^2";
            break;
        case UnitOfMeasurementEnumType::m_3:
            enumName = "m^3";
            break;
        case UnitOfMeasurementEnumType::m_3_h:
            enumName = "m^3/h";
            break;
        case UnitOfMeasurementEnumType::m_s:
            enumName = "m/s";
            break;
        case UnitOfMeasurementEnumType::m_s_2:
            enumName = "m/s^2";
            break;
        case UnitOfMeasurementEnumType::m_3_s:
            enumName = "m^3/s";
            break;
        case UnitOfMeasurementEnumType::m_m_3:
            enumName = "m/m^3";
            break;
        case UnitOfMeasurementEnumType::kg_m_3:
            enumName = "kg/m^3";
            break;
        case UnitOfMeasurementEnumType::kg_m:
            enumName = "kg_m";
            break;
        case UnitOfMeasurementEnumType::m_2_s:
            enumName = "m^2/s";
            break;
        case UnitOfMeasurementEnumType::W_m_K:
            enumName = "W/m_K";
            break;
        case UnitOfMeasurementEnumType::J_K:
            enumName = "J/K";
            break;
        case UnitOfMeasurementEnumType::var_1_s:
            enumName = "1/s";
            break;
        case UnitOfMeasurementEnumType::W_m_2:
            enumName = "W/m^2";
            break;
        case UnitOfMeasurementEnumType::J_m_2:
            enumName = "J/m^2";
            break;
        case UnitOfMeasurementEnumType::S:
            enumName = "S";
            break;
        case UnitOfMeasurementEnumType::S_m:
            enumName = "S/m";
            break;
        case UnitOfMeasurementEnumType::K_s:
            enumName = "K/s";
            break;
        case UnitOfMeasurementEnumType::Pa_s:
            enumName = "Pa/s";
            break;
        case UnitOfMeasurementEnumType::J_kg_K:
            enumName = "J/kg_K";
            break;
        case UnitOfMeasurementEnumType::Vs:
            enumName = "Vs";
            break;
        case UnitOfMeasurementEnumType::V_m:
            enumName = "V/m";
            break;
        case UnitOfMeasurementEnumType::V_Hz:
            enumName = "V/Hz";
            break;
        case UnitOfMeasurementEnumType::As:
            enumName = "As";
            break;
        case UnitOfMeasurementEnumType::A_m:
            enumName = "A/m";
            break;
        case UnitOfMeasurementEnumType::Hz_s:
            enumName = "Hz/s";
            break;
        case UnitOfMeasurementEnumType::kg_s:
            enumName = "kg/s";
            break;
        case UnitOfMeasurementEnumType::kg_m_2:
            enumName = "kg_m^2";
            break;
        case UnitOfMeasurementEnumType::J_Wh:
            enumName = "J/Wh";
            break;
        case UnitOfMeasurementEnumType::W_s:
            enumName = "W/s";
            break;
        case UnitOfMeasurementEnumType::ft_3:
            enumName = "ft^3";
            break;
        case UnitOfMeasurementEnumType::ft_3_h:
            enumName = "ft^3/h";
            break;
        case UnitOfMeasurementEnumType::ccf:
            enumName = "ccf";
            break;
        case UnitOfMeasurementEnumType::ccf_h:
            enumName = "ccf/h";
            break;
        case UnitOfMeasurementEnumType::US_liq_gal:
            enumName = "US.liq.gal";
            break;
        case UnitOfMeasurementEnumType::US_liq_gal_h:
            enumName = "US.liq.gal/h";
            break;
        case UnitOfMeasurementEnumType::Imp_gal:
            enumName = "Imp.gal";
            break;
        case UnitOfMeasurementEnumType::Imp_gal_h:
            enumName = "Imp.gal/h";
            break;
        case UnitOfMeasurementEnumType::Btu:
            enumName = "Btu";
            break;
        case UnitOfMeasurementEnumType::Btu_h:
            enumName = "Btu/h";
            break;
        case UnitOfMeasurementEnumType::Ah:
            enumName = "Ah";
            break;
        case UnitOfMeasurementEnumType::kg_Wh:
            enumName = "kg/Wh";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, UnitOfMeasurementEnumType &dst)
{
    if (src == "unknown") {
        dst = UnitOfMeasurementEnumType::unknown;
        return;
    }
    if (src == "1") {
        dst = UnitOfMeasurementEnumType::var_1;
        return;
    }
    if (src == "m") {
        dst = UnitOfMeasurementEnumType::m;
        return;
    }
    if (src == "kg") {
        dst = UnitOfMeasurementEnumType::kg;
        return;
    }
    if (src == "s") {
        dst = UnitOfMeasurementEnumType::s;
        return;
    }
    if (src == "A") {
        dst = UnitOfMeasurementEnumType::A;
        return;
    }
    if (src == "K") {
        dst = UnitOfMeasurementEnumType::K;
        return;
    }
    if (src == "mol") {
        dst = UnitOfMeasurementEnumType::mol;
        return;
    }
    if (src == "cd") {
        dst = UnitOfMeasurementEnumType::cd;
        return;
    }
    if (src == "V") {
        dst = UnitOfMeasurementEnumType::V;
        return;
    }
    if (src == "W") {
        dst = UnitOfMeasurementEnumType::W;
        return;
    }
    if (src == "Wh") {
        dst = UnitOfMeasurementEnumType::Wh;
        return;
    }
    if (src == "VA") {
        dst = UnitOfMeasurementEnumType::VA;
        return;
    }
    if (src == "VAh") {
        dst = UnitOfMeasurementEnumType::VAh;
        return;
    }
    if (src == "var") {
        dst = UnitOfMeasurementEnumType::var;
        return;
    }
    if (src == "varh") {
        dst = UnitOfMeasurementEnumType::varh;
        return;
    }
    if (src == "degC") {
        dst = UnitOfMeasurementEnumType::degC;
        return;
    }
    if (src == "degF") {
        dst = UnitOfMeasurementEnumType::degF;
        return;
    }
    if (src == "Lm") {
        dst = UnitOfMeasurementEnumType::Lm;
        return;
    }
    if (src == "lx") {
        dst = UnitOfMeasurementEnumType::lx;
        return;
    }
    if (src == "Ohm") {
        dst = UnitOfMeasurementEnumType::Ohm;
        return;
    }
    if (src == "Hz") {
        dst = UnitOfMeasurementEnumType::Hz;
        return;
    }
    if (src == "dB") {
        dst = UnitOfMeasurementEnumType::dB;
        return;
    }
    if (src == "dBm") {
        dst = UnitOfMeasurementEnumType::dBm;
        return;
    }
    if (src == "pct") {
        dst = UnitOfMeasurementEnumType::pct;
        return;
    }
    if (src == "ppm") {
        dst = UnitOfMeasurementEnumType::ppm;
        return;
    }
    if (src == "l") {
        dst = UnitOfMeasurementEnumType::l;
        return;
    }
    if (src == "l/s") {
        dst = UnitOfMeasurementEnumType::l_s;
        return;
    }
    if (src == "l/h") {
        dst = UnitOfMeasurementEnumType::l_h;
        return;
    }
    if (src == "deg") {
        dst = UnitOfMeasurementEnumType::deg;
        return;
    }
    if (src == "rad") {
        dst = UnitOfMeasurementEnumType::rad;
        return;
    }
    if (src == "rad/s") {
        dst = UnitOfMeasurementEnumType::rad_s;
        return;
    }
    if (src == "sr") {
        dst = UnitOfMeasurementEnumType::sr;
        return;
    }
    if (src == "Gy") {
        dst = UnitOfMeasurementEnumType::Gy;
        return;
    }
    if (src == "Bq") {
        dst = UnitOfMeasurementEnumType::Bq;
        return;
    }
    if (src == "Bq/m^3") {
        dst = UnitOfMeasurementEnumType::Bq_m_3;
        return;
    }
    if (src == "Sv") {
        dst = UnitOfMeasurementEnumType::Sv;
        return;
    }
    if (src == "Rd") {
        dst = UnitOfMeasurementEnumType::Rd;
        return;
    }
    if (src == "C") {
        dst = UnitOfMeasurementEnumType::C;
        return;
    }
    if (src == "F") {
        dst = UnitOfMeasurementEnumType::F;
        return;
    }
    if (src == "H") {
        dst = UnitOfMeasurementEnumType::H;
        return;
    }
    if (src == "J") {
        dst = UnitOfMeasurementEnumType::J;
        return;
    }
    if (src == "N") {
        dst = UnitOfMeasurementEnumType::N;
        return;
    }
    if (src == "N_m") {
        dst = UnitOfMeasurementEnumType::N_m;
        return;
    }
    if (src == "N_s") {
        dst = UnitOfMeasurementEnumType::N_s;
        return;
    }
    if (src == "Wb") {
        dst = UnitOfMeasurementEnumType::Wb;
        return;
    }
    if (src == "T") {
        dst = UnitOfMeasurementEnumType::T;
        return;
    }
    if (src == "Pa") {
        dst = UnitOfMeasurementEnumType::Pa;
        return;
    }
    if (src == "bar") {
        dst = UnitOfMeasurementEnumType::bar;
        return;
    }
    if (src == "atm") {
        dst = UnitOfMeasurementEnumType::atm;
        return;
    }
    if (src == "psi") {
        dst = UnitOfMeasurementEnumType::psi;
        return;
    }
    if (src == "mmHg") {
        dst = UnitOfMeasurementEnumType::mmHg;
        return;
    }
    if (src == "m^2") {
        dst = UnitOfMeasurementEnumType::m_2;
        return;
    }
    if (src == "m^3") {
        dst = UnitOfMeasurementEnumType::m_3;
        return;
    }
    if (src == "m^3/h") {
        dst = UnitOfMeasurementEnumType::m_3_h;
        return;
    }
    if (src == "m/s") {
        dst = UnitOfMeasurementEnumType::m_s;
        return;
    }
    if (src == "m/s^2") {
        dst = UnitOfMeasurementEnumType::m_s_2;
        return;
    }
    if (src == "m^3/s") {
        dst = UnitOfMeasurementEnumType::m_3_s;
        return;
    }
    if (src == "m/m^3") {
        dst = UnitOfMeasurementEnumType::m_m_3;
        return;
    }
    if (src == "kg/m^3") {
        dst = UnitOfMeasurementEnumType::kg_m_3;
        return;
    }
    if (src == "kg_m") {
        dst = UnitOfMeasurementEnumType::kg_m;
        return;
    }
    if (src == "m^2/s") {
        dst = UnitOfMeasurementEnumType::m_2_s;
        return;
    }
    if (src == "W/m_K") {
        dst = UnitOfMeasurementEnumType::W_m_K;
        return;
    }
    if (src == "J/K") {
        dst = UnitOfMeasurementEnumType::J_K;
        return;
    }
    if (src == "1/s") {
        dst = UnitOfMeasurementEnumType::var_1_s;
        return;
    }
    if (src == "W/m^2") {
        dst = UnitOfMeasurementEnumType::W_m_2;
        return;
    }
    if (src == "J/m^2") {
        dst = UnitOfMeasurementEnumType::J_m_2;
        return;
    }
    if (src == "S") {
        dst = UnitOfMeasurementEnumType::S;
        return;
    }
    if (src == "S/m") {
        dst = UnitOfMeasurementEnumType::S_m;
        return;
    }
    if (src == "K/s") {
        dst = UnitOfMeasurementEnumType::K_s;
        return;
    }
    if (src == "Pa/s") {
        dst = UnitOfMeasurementEnumType::Pa_s;
        return;
    }
    if (src == "J/kg_K") {
        dst = UnitOfMeasurementEnumType::J_kg_K;
        return;
    }
    if (src == "Vs") {
        dst = UnitOfMeasurementEnumType::Vs;
        return;
    }
    if (src == "V/m") {
        dst = UnitOfMeasurementEnumType::V_m;
        return;
    }
    if (src == "V/Hz") {
        dst = UnitOfMeasurementEnumType::V_Hz;
        return;
    }
    if (src == "As") {
        dst = UnitOfMeasurementEnumType::As;
        return;
    }
    if (src == "A/m") {
        dst = UnitOfMeasurementEnumType::A_m;
        return;
    }
    if (src == "Hz/s") {
        dst = UnitOfMeasurementEnumType::Hz_s;
        return;
    }
    if (src == "kg/s") {
        dst = UnitOfMeasurementEnumType::kg_s;
        return;
    }
    if (src == "kg_m^2") {
        dst = UnitOfMeasurementEnumType::kg_m_2;
        return;
    }
    if (src == "J/Wh") {
        dst = UnitOfMeasurementEnumType::J_Wh;
        return;
    }
    if (src == "W/s") {
        dst = UnitOfMeasurementEnumType::W_s;
        return;
    }
    if (src == "ft^3") {
        dst = UnitOfMeasurementEnumType::ft_3;
        return;
    }
    if (src == "ft^3/h") {
        dst = UnitOfMeasurementEnumType::ft_3_h;
        return;
    }
    if (src == "ccf") {
        dst = UnitOfMeasurementEnumType::ccf;
        return;
    }
    if (src == "ccf/h") {
        dst = UnitOfMeasurementEnumType::ccf_h;
        return;
    }
    if (src == "US.liq.gal") {
        dst = UnitOfMeasurementEnumType::US_liq_gal;
        return;
    }
    if (src == "US.liq.gal/h") {
        dst = UnitOfMeasurementEnumType::US_liq_gal_h;
        return;
    }
    if (src == "Imp.gal") {
        dst = UnitOfMeasurementEnumType::Imp_gal;
        return;
    }
    if (src == "Imp.gal/h") {
        dst = UnitOfMeasurementEnumType::Imp_gal_h;
        return;
    }
    if (src == "Btu") {
        dst = UnitOfMeasurementEnumType::Btu;
        return;
    }
    if (src == "Btu/h") {
        dst = UnitOfMeasurementEnumType::Btu_h;
        return;
    }
    if (src == "Ah") {
        dst = UnitOfMeasurementEnumType::Ah;
        return;
    }
    if (src == "kg/Wh") {
        dst = UnitOfMeasurementEnumType::kg_Wh;
        return;
    }
    return;
}
bool convertToJson(const CurrencyEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case CurrencyEnumType::AED:
            enumName = "AED";
            break;
        case CurrencyEnumType::AFN:
            enumName = "AFN";
            break;
        case CurrencyEnumType::ALL:
            enumName = "ALL";
            break;
        case CurrencyEnumType::AMD:
            enumName = "AMD";
            break;
        case CurrencyEnumType::ANG:
            enumName = "ANG";
            break;
        case CurrencyEnumType::AOA:
            enumName = "AOA";
            break;
        case CurrencyEnumType::ARS:
            enumName = "ARS";
            break;
        case CurrencyEnumType::AUD:
            enumName = "AUD";
            break;
        case CurrencyEnumType::AWG:
            enumName = "AWG";
            break;
        case CurrencyEnumType::AZN:
            enumName = "AZN";
            break;
        case CurrencyEnumType::BAM:
            enumName = "BAM";
            break;
        case CurrencyEnumType::BBD:
            enumName = "BBD";
            break;
        case CurrencyEnumType::BDT:
            enumName = "BDT";
            break;
        case CurrencyEnumType::BGN:
            enumName = "BGN";
            break;
        case CurrencyEnumType::BHD:
            enumName = "BHD";
            break;
        case CurrencyEnumType::BIF:
            enumName = "BIF";
            break;
        case CurrencyEnumType::BMD:
            enumName = "BMD";
            break;
        case CurrencyEnumType::BND:
            enumName = "BND";
            break;
        case CurrencyEnumType::BOB:
            enumName = "BOB";
            break;
        case CurrencyEnumType::BOV:
            enumName = "BOV";
            break;
        case CurrencyEnumType::BRL:
            enumName = "BRL";
            break;
        case CurrencyEnumType::BSD:
            enumName = "BSD";
            break;
        case CurrencyEnumType::BTN:
            enumName = "BTN";
            break;
        case CurrencyEnumType::BWP:
            enumName = "BWP";
            break;
        case CurrencyEnumType::BYR:
            enumName = "BYR";
            break;
        case CurrencyEnumType::BZD:
            enumName = "BZD";
            break;
        case CurrencyEnumType::CAD:
            enumName = "CAD";
            break;
        case CurrencyEnumType::CDF:
            enumName = "CDF";
            break;
        case CurrencyEnumType::CHE:
            enumName = "CHE";
            break;
        case CurrencyEnumType::CHF:
            enumName = "CHF";
            break;
        case CurrencyEnumType::CHW:
            enumName = "CHW";
            break;
        case CurrencyEnumType::CLF:
            enumName = "CLF";
            break;
        case CurrencyEnumType::CLP:
            enumName = "CLP";
            break;
        case CurrencyEnumType::CNY:
            enumName = "CNY";
            break;
        case CurrencyEnumType::COP:
            enumName = "COP";
            break;
        case CurrencyEnumType::COU:
            enumName = "COU";
            break;
        case CurrencyEnumType::CRC:
            enumName = "CRC";
            break;
        case CurrencyEnumType::CUC:
            enumName = "CUC";
            break;
        case CurrencyEnumType::CUP:
            enumName = "CUP";
            break;
        case CurrencyEnumType::CVE:
            enumName = "CVE";
            break;
        case CurrencyEnumType::CZK:
            enumName = "CZK";
            break;
        case CurrencyEnumType::DJF:
            enumName = "DJF";
            break;
        case CurrencyEnumType::DKK:
            enumName = "DKK";
            break;
        case CurrencyEnumType::DOP:
            enumName = "DOP";
            break;
        case CurrencyEnumType::DZD:
            enumName = "DZD";
            break;
        case CurrencyEnumType::EGP:
            enumName = "EGP";
            break;
        case CurrencyEnumType::ERN:
            enumName = "ERN";
            break;
        case CurrencyEnumType::ETB:
            enumName = "ETB";
            break;
        case CurrencyEnumType::EUR:
            enumName = "EUR";
            break;
        case CurrencyEnumType::FJD:
            enumName = "FJD";
            break;
        case CurrencyEnumType::FKP:
            enumName = "FKP";
            break;
        case CurrencyEnumType::GBP:
            enumName = "GBP";
            break;
        case CurrencyEnumType::GEL:
            enumName = "GEL";
            break;
        case CurrencyEnumType::GHS:
            enumName = "GHS";
            break;
        case CurrencyEnumType::GIP:
            enumName = "GIP";
            break;
        case CurrencyEnumType::GMD:
            enumName = "GMD";
            break;
        case CurrencyEnumType::GNF:
            enumName = "GNF";
            break;
        case CurrencyEnumType::GTQ:
            enumName = "GTQ";
            break;
        case CurrencyEnumType::GYD:
            enumName = "GYD";
            break;
        case CurrencyEnumType::HKD:
            enumName = "HKD";
            break;
        case CurrencyEnumType::HNL:
            enumName = "HNL";
            break;
        case CurrencyEnumType::HRK:
            enumName = "HRK";
            break;
        case CurrencyEnumType::HTG:
            enumName = "HTG";
            break;
        case CurrencyEnumType::HUF:
            enumName = "HUF";
            break;
        case CurrencyEnumType::IDR:
            enumName = "IDR";
            break;
        case CurrencyEnumType::ILS:
            enumName = "ILS";
            break;
        case CurrencyEnumType::INR:
            enumName = "INR";
            break;
        case CurrencyEnumType::IQD:
            enumName = "IQD";
            break;
        case CurrencyEnumType::IRR:
            enumName = "IRR";
            break;
        case CurrencyEnumType::ISK:
            enumName = "ISK";
            break;
        case CurrencyEnumType::JMD:
            enumName = "JMD";
            break;
        case CurrencyEnumType::JOD:
            enumName = "JOD";
            break;
        case CurrencyEnumType::JPY:
            enumName = "JPY";
            break;
        case CurrencyEnumType::KES:
            enumName = "KES";
            break;
        case CurrencyEnumType::KGS:
            enumName = "KGS";
            break;
        case CurrencyEnumType::KHR:
            enumName = "KHR";
            break;
        case CurrencyEnumType::KMF:
            enumName = "KMF";
            break;
        case CurrencyEnumType::KPW:
            enumName = "KPW";
            break;
        case CurrencyEnumType::KRW:
            enumName = "KRW";
            break;
        case CurrencyEnumType::KWD:
            enumName = "KWD";
            break;
        case CurrencyEnumType::KYD:
            enumName = "KYD";
            break;
        case CurrencyEnumType::KZT:
            enumName = "KZT";
            break;
        case CurrencyEnumType::LAK:
            enumName = "LAK";
            break;
        case CurrencyEnumType::LBP:
            enumName = "LBP";
            break;
        case CurrencyEnumType::LKR:
            enumName = "LKR";
            break;
        case CurrencyEnumType::LRD:
            enumName = "LRD";
            break;
        case CurrencyEnumType::LSL:
            enumName = "LSL";
            break;
        case CurrencyEnumType::LYD:
            enumName = "LYD";
            break;
        case CurrencyEnumType::MAD:
            enumName = "MAD";
            break;
        case CurrencyEnumType::MDL:
            enumName = "MDL";
            break;
        case CurrencyEnumType::MGA:
            enumName = "MGA";
            break;
        case CurrencyEnumType::MKD:
            enumName = "MKD";
            break;
        case CurrencyEnumType::MMK:
            enumName = "MMK";
            break;
        case CurrencyEnumType::MNT:
            enumName = "MNT";
            break;
        case CurrencyEnumType::MOP:
            enumName = "MOP";
            break;
        case CurrencyEnumType::MRO:
            enumName = "MRO";
            break;
        case CurrencyEnumType::MUR:
            enumName = "MUR";
            break;
        case CurrencyEnumType::MVR:
            enumName = "MVR";
            break;
        case CurrencyEnumType::MWK:
            enumName = "MWK";
            break;
        case CurrencyEnumType::MXN:
            enumName = "MXN";
            break;
        case CurrencyEnumType::MXV:
            enumName = "MXV";
            break;
        case CurrencyEnumType::MYR:
            enumName = "MYR";
            break;
        case CurrencyEnumType::MZN:
            enumName = "MZN";
            break;
        case CurrencyEnumType::NAD:
            enumName = "NAD";
            break;
        case CurrencyEnumType::NGN:
            enumName = "NGN";
            break;
        case CurrencyEnumType::NIO:
            enumName = "NIO";
            break;
        case CurrencyEnumType::NOK:
            enumName = "NOK";
            break;
        case CurrencyEnumType::NPR:
            enumName = "NPR";
            break;
        case CurrencyEnumType::NZD:
            enumName = "NZD";
            break;
        case CurrencyEnumType::OMR:
            enumName = "OMR";
            break;
        case CurrencyEnumType::PAB:
            enumName = "PAB";
            break;
        case CurrencyEnumType::PEN:
            enumName = "PEN";
            break;
        case CurrencyEnumType::PGK:
            enumName = "PGK";
            break;
        case CurrencyEnumType::PHP:
            enumName = "PHP";
            break;
        case CurrencyEnumType::PKR:
            enumName = "PKR";
            break;
        case CurrencyEnumType::PLN:
            enumName = "PLN";
            break;
        case CurrencyEnumType::PYG:
            enumName = "PYG";
            break;
        case CurrencyEnumType::QAR:
            enumName = "QAR";
            break;
        case CurrencyEnumType::RON:
            enumName = "RON";
            break;
        case CurrencyEnumType::RSD:
            enumName = "RSD";
            break;
        case CurrencyEnumType::RUB:
            enumName = "RUB";
            break;
        case CurrencyEnumType::RWF:
            enumName = "RWF";
            break;
        case CurrencyEnumType::var_SAR:
            enumName = "SAR";
            break;
        case CurrencyEnumType::SBD:
            enumName = "SBD";
            break;
        case CurrencyEnumType::SCR:
            enumName = "SCR";
            break;
        case CurrencyEnumType::SDG:
            enumName = "SDG";
            break;
        case CurrencyEnumType::SEK:
            enumName = "SEK";
            break;
        case CurrencyEnumType::SGD:
            enumName = "SGD";
            break;
        case CurrencyEnumType::SHP:
            enumName = "SHP";
            break;
        case CurrencyEnumType::SLL:
            enumName = "SLL";
            break;
        case CurrencyEnumType::SOS:
            enumName = "SOS";
            break;
        case CurrencyEnumType::SRD:
            enumName = "SRD";
            break;
        case CurrencyEnumType::SSP:
            enumName = "SSP";
            break;
        case CurrencyEnumType::STD:
            enumName = "STD";
            break;
        case CurrencyEnumType::SVC:
            enumName = "SVC";
            break;
        case CurrencyEnumType::SYP:
            enumName = "SYP";
            break;
        case CurrencyEnumType::SZL:
            enumName = "SZL";
            break;
        case CurrencyEnumType::THB:
            enumName = "THB";
            break;
        case CurrencyEnumType::TJS:
            enumName = "TJS";
            break;
        case CurrencyEnumType::TMT:
            enumName = "TMT";
            break;
        case CurrencyEnumType::TND:
            enumName = "TND";
            break;
        case CurrencyEnumType::TOP:
            enumName = "TOP";
            break;
        case CurrencyEnumType::TRY:
            enumName = "TRY";
            break;
        case CurrencyEnumType::TTD:
            enumName = "TTD";
            break;
        case CurrencyEnumType::TWD:
            enumName = "TWD";
            break;
        case CurrencyEnumType::TZS:
            enumName = "TZS";
            break;
        case CurrencyEnumType::UAH:
            enumName = "UAH";
            break;
        case CurrencyEnumType::UGX:
            enumName = "UGX";
            break;
        case CurrencyEnumType::USD:
            enumName = "USD";
            break;
        case CurrencyEnumType::USN:
            enumName = "USN";
            break;
        case CurrencyEnumType::UYI:
            enumName = "UYI";
            break;
        case CurrencyEnumType::UYU:
            enumName = "UYU";
            break;
        case CurrencyEnumType::UZS:
            enumName = "UZS";
            break;
        case CurrencyEnumType::VEF:
            enumName = "VEF";
            break;
        case CurrencyEnumType::VND:
            enumName = "VND";
            break;
        case CurrencyEnumType::VUV:
            enumName = "VUV";
            break;
        case CurrencyEnumType::WST:
            enumName = "WST";
            break;
        case CurrencyEnumType::XAF:
            enumName = "XAF";
            break;
        case CurrencyEnumType::XAG:
            enumName = "XAG";
            break;
        case CurrencyEnumType::XAU:
            enumName = "XAU";
            break;
        case CurrencyEnumType::XBA:
            enumName = "XBA";
            break;
        case CurrencyEnumType::XBB:
            enumName = "XBB";
            break;
        case CurrencyEnumType::XBC:
            enumName = "XBC";
            break;
        case CurrencyEnumType::XBD:
            enumName = "XBD";
            break;
        case CurrencyEnumType::XCD:
            enumName = "XCD";
            break;
        case CurrencyEnumType::XDR:
            enumName = "XDR";
            break;
        case CurrencyEnumType::XOF:
            enumName = "XOF";
            break;
        case CurrencyEnumType::XPD:
            enumName = "XPD";
            break;
        case CurrencyEnumType::XPF:
            enumName = "XPF";
            break;
        case CurrencyEnumType::XPT:
            enumName = "XPT";
            break;
        case CurrencyEnumType::XSU:
            enumName = "XSU";
            break;
        case CurrencyEnumType::XTS:
            enumName = "XTS";
            break;
        case CurrencyEnumType::XUA:
            enumName = "XUA";
            break;
        case CurrencyEnumType::XXX:
            enumName = "XXX";
            break;
        case CurrencyEnumType::YER:
            enumName = "YER";
            break;
        case CurrencyEnumType::ZAR:
            enumName = "ZAR";
            break;
        case CurrencyEnumType::ZMW:
            enumName = "ZMW";
            break;
        case CurrencyEnumType::ZWL:
            enumName = "ZWL";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, CurrencyEnumType &dst)
{
    if (src == "AED") {
        dst = CurrencyEnumType::AED;
        return;
    }
    if (src == "AFN") {
        dst = CurrencyEnumType::AFN;
        return;
    }
    if (src == "ALL") {
        dst = CurrencyEnumType::ALL;
        return;
    }
    if (src == "AMD") {
        dst = CurrencyEnumType::AMD;
        return;
    }
    if (src == "ANG") {
        dst = CurrencyEnumType::ANG;
        return;
    }
    if (src == "AOA") {
        dst = CurrencyEnumType::AOA;
        return;
    }
    if (src == "ARS") {
        dst = CurrencyEnumType::ARS;
        return;
    }
    if (src == "AUD") {
        dst = CurrencyEnumType::AUD;
        return;
    }
    if (src == "AWG") {
        dst = CurrencyEnumType::AWG;
        return;
    }
    if (src == "AZN") {
        dst = CurrencyEnumType::AZN;
        return;
    }
    if (src == "BAM") {
        dst = CurrencyEnumType::BAM;
        return;
    }
    if (src == "BBD") {
        dst = CurrencyEnumType::BBD;
        return;
    }
    if (src == "BDT") {
        dst = CurrencyEnumType::BDT;
        return;
    }
    if (src == "BGN") {
        dst = CurrencyEnumType::BGN;
        return;
    }
    if (src == "BHD") {
        dst = CurrencyEnumType::BHD;
        return;
    }
    if (src == "BIF") {
        dst = CurrencyEnumType::BIF;
        return;
    }
    if (src == "BMD") {
        dst = CurrencyEnumType::BMD;
        return;
    }
    if (src == "BND") {
        dst = CurrencyEnumType::BND;
        return;
    }
    if (src == "BOB") {
        dst = CurrencyEnumType::BOB;
        return;
    }
    if (src == "BOV") {
        dst = CurrencyEnumType::BOV;
        return;
    }
    if (src == "BRL") {
        dst = CurrencyEnumType::BRL;
        return;
    }
    if (src == "BSD") {
        dst = CurrencyEnumType::BSD;
        return;
    }
    if (src == "BTN") {
        dst = CurrencyEnumType::BTN;
        return;
    }
    if (src == "BWP") {
        dst = CurrencyEnumType::BWP;
        return;
    }
    if (src == "BYR") {
        dst = CurrencyEnumType::BYR;
        return;
    }
    if (src == "BZD") {
        dst = CurrencyEnumType::BZD;
        return;
    }
    if (src == "CAD") {
        dst = CurrencyEnumType::CAD;
        return;
    }
    if (src == "CDF") {
        dst = CurrencyEnumType::CDF;
        return;
    }
    if (src == "CHE") {
        dst = CurrencyEnumType::CHE;
        return;
    }
    if (src == "CHF") {
        dst = CurrencyEnumType::CHF;
        return;
    }
    if (src == "CHW") {
        dst = CurrencyEnumType::CHW;
        return;
    }
    if (src == "CLF") {
        dst = CurrencyEnumType::CLF;
        return;
    }
    if (src == "CLP") {
        dst = CurrencyEnumType::CLP;
        return;
    }
    if (src == "CNY") {
        dst = CurrencyEnumType::CNY;
        return;
    }
    if (src == "COP") {
        dst = CurrencyEnumType::COP;
        return;
    }
    if (src == "COU") {
        dst = CurrencyEnumType::COU;
        return;
    }
    if (src == "CRC") {
        dst = CurrencyEnumType::CRC;
        return;
    }
    if (src == "CUC") {
        dst = CurrencyEnumType::CUC;
        return;
    }
    if (src == "CUP") {
        dst = CurrencyEnumType::CUP;
        return;
    }
    if (src == "CVE") {
        dst = CurrencyEnumType::CVE;
        return;
    }
    if (src == "CZK") {
        dst = CurrencyEnumType::CZK;
        return;
    }
    if (src == "DJF") {
        dst = CurrencyEnumType::DJF;
        return;
    }
    if (src == "DKK") {
        dst = CurrencyEnumType::DKK;
        return;
    }
    if (src == "DOP") {
        dst = CurrencyEnumType::DOP;
        return;
    }
    if (src == "DZD") {
        dst = CurrencyEnumType::DZD;
        return;
    }
    if (src == "EGP") {
        dst = CurrencyEnumType::EGP;
        return;
    }
    if (src == "ERN") {
        dst = CurrencyEnumType::ERN;
        return;
    }
    if (src == "ETB") {
        dst = CurrencyEnumType::ETB;
        return;
    }
    if (src == "EUR") {
        dst = CurrencyEnumType::EUR;
        return;
    }
    if (src == "FJD") {
        dst = CurrencyEnumType::FJD;
        return;
    }
    if (src == "FKP") {
        dst = CurrencyEnumType::FKP;
        return;
    }
    if (src == "GBP") {
        dst = CurrencyEnumType::GBP;
        return;
    }
    if (src == "GEL") {
        dst = CurrencyEnumType::GEL;
        return;
    }
    if (src == "GHS") {
        dst = CurrencyEnumType::GHS;
        return;
    }
    if (src == "GIP") {
        dst = CurrencyEnumType::GIP;
        return;
    }
    if (src == "GMD") {
        dst = CurrencyEnumType::GMD;
        return;
    }
    if (src == "GNF") {
        dst = CurrencyEnumType::GNF;
        return;
    }
    if (src == "GTQ") {
        dst = CurrencyEnumType::GTQ;
        return;
    }
    if (src == "GYD") {
        dst = CurrencyEnumType::GYD;
        return;
    }
    if (src == "HKD") {
        dst = CurrencyEnumType::HKD;
        return;
    }
    if (src == "HNL") {
        dst = CurrencyEnumType::HNL;
        return;
    }
    if (src == "HRK") {
        dst = CurrencyEnumType::HRK;
        return;
    }
    if (src == "HTG") {
        dst = CurrencyEnumType::HTG;
        return;
    }
    if (src == "HUF") {
        dst = CurrencyEnumType::HUF;
        return;
    }
    if (src == "IDR") {
        dst = CurrencyEnumType::IDR;
        return;
    }
    if (src == "ILS") {
        dst = CurrencyEnumType::ILS;
        return;
    }
    if (src == "INR") {
        dst = CurrencyEnumType::INR;
        return;
    }
    if (src == "IQD") {
        dst = CurrencyEnumType::IQD;
        return;
    }
    if (src == "IRR") {
        dst = CurrencyEnumType::IRR;
        return;
    }
    if (src == "ISK") {
        dst = CurrencyEnumType::ISK;
        return;
    }
    if (src == "JMD") {
        dst = CurrencyEnumType::JMD;
        return;
    }
    if (src == "JOD") {
        dst = CurrencyEnumType::JOD;
        return;
    }
    if (src == "JPY") {
        dst = CurrencyEnumType::JPY;
        return;
    }
    if (src == "KES") {
        dst = CurrencyEnumType::KES;
        return;
    }
    if (src == "KGS") {
        dst = CurrencyEnumType::KGS;
        return;
    }
    if (src == "KHR") {
        dst = CurrencyEnumType::KHR;
        return;
    }
    if (src == "KMF") {
        dst = CurrencyEnumType::KMF;
        return;
    }
    if (src == "KPW") {
        dst = CurrencyEnumType::KPW;
        return;
    }
    if (src == "KRW") {
        dst = CurrencyEnumType::KRW;
        return;
    }
    if (src == "KWD") {
        dst = CurrencyEnumType::KWD;
        return;
    }
    if (src == "KYD") {
        dst = CurrencyEnumType::KYD;
        return;
    }
    if (src == "KZT") {
        dst = CurrencyEnumType::KZT;
        return;
    }
    if (src == "LAK") {
        dst = CurrencyEnumType::LAK;
        return;
    }
    if (src == "LBP") {
        dst = CurrencyEnumType::LBP;
        return;
    }
    if (src == "LKR") {
        dst = CurrencyEnumType::LKR;
        return;
    }
    if (src == "LRD") {
        dst = CurrencyEnumType::LRD;
        return;
    }
    if (src == "LSL") {
        dst = CurrencyEnumType::LSL;
        return;
    }
    if (src == "LYD") {
        dst = CurrencyEnumType::LYD;
        return;
    }
    if (src == "MAD") {
        dst = CurrencyEnumType::MAD;
        return;
    }
    if (src == "MDL") {
        dst = CurrencyEnumType::MDL;
        return;
    }
    if (src == "MGA") {
        dst = CurrencyEnumType::MGA;
        return;
    }
    if (src == "MKD") {
        dst = CurrencyEnumType::MKD;
        return;
    }
    if (src == "MMK") {
        dst = CurrencyEnumType::MMK;
        return;
    }
    if (src == "MNT") {
        dst = CurrencyEnumType::MNT;
        return;
    }
    if (src == "MOP") {
        dst = CurrencyEnumType::MOP;
        return;
    }
    if (src == "MRO") {
        dst = CurrencyEnumType::MRO;
        return;
    }
    if (src == "MUR") {
        dst = CurrencyEnumType::MUR;
        return;
    }
    if (src == "MVR") {
        dst = CurrencyEnumType::MVR;
        return;
    }
    if (src == "MWK") {
        dst = CurrencyEnumType::MWK;
        return;
    }
    if (src == "MXN") {
        dst = CurrencyEnumType::MXN;
        return;
    }
    if (src == "MXV") {
        dst = CurrencyEnumType::MXV;
        return;
    }
    if (src == "MYR") {
        dst = CurrencyEnumType::MYR;
        return;
    }
    if (src == "MZN") {
        dst = CurrencyEnumType::MZN;
        return;
    }
    if (src == "NAD") {
        dst = CurrencyEnumType::NAD;
        return;
    }
    if (src == "NGN") {
        dst = CurrencyEnumType::NGN;
        return;
    }
    if (src == "NIO") {
        dst = CurrencyEnumType::NIO;
        return;
    }
    if (src == "NOK") {
        dst = CurrencyEnumType::NOK;
        return;
    }
    if (src == "NPR") {
        dst = CurrencyEnumType::NPR;
        return;
    }
    if (src == "NZD") {
        dst = CurrencyEnumType::NZD;
        return;
    }
    if (src == "OMR") {
        dst = CurrencyEnumType::OMR;
        return;
    }
    if (src == "PAB") {
        dst = CurrencyEnumType::PAB;
        return;
    }
    if (src == "PEN") {
        dst = CurrencyEnumType::PEN;
        return;
    }
    if (src == "PGK") {
        dst = CurrencyEnumType::PGK;
        return;
    }
    if (src == "PHP") {
        dst = CurrencyEnumType::PHP;
        return;
    }
    if (src == "PKR") {
        dst = CurrencyEnumType::PKR;
        return;
    }
    if (src == "PLN") {
        dst = CurrencyEnumType::PLN;
        return;
    }
    if (src == "PYG") {
        dst = CurrencyEnumType::PYG;
        return;
    }
    if (src == "QAR") {
        dst = CurrencyEnumType::QAR;
        return;
    }
    if (src == "RON") {
        dst = CurrencyEnumType::RON;
        return;
    }
    if (src == "RSD") {
        dst = CurrencyEnumType::RSD;
        return;
    }
    if (src == "RUB") {
        dst = CurrencyEnumType::RUB;
        return;
    }
    if (src == "RWF") {
        dst = CurrencyEnumType::RWF;
        return;
    }
    if (src == "SAR") {
        dst = CurrencyEnumType::var_SAR;
        return;
    }
    if (src == "SBD") {
        dst = CurrencyEnumType::SBD;
        return;
    }
    if (src == "SCR") {
        dst = CurrencyEnumType::SCR;
        return;
    }
    if (src == "SDG") {
        dst = CurrencyEnumType::SDG;
        return;
    }
    if (src == "SEK") {
        dst = CurrencyEnumType::SEK;
        return;
    }
    if (src == "SGD") {
        dst = CurrencyEnumType::SGD;
        return;
    }
    if (src == "SHP") {
        dst = CurrencyEnumType::SHP;
        return;
    }
    if (src == "SLL") {
        dst = CurrencyEnumType::SLL;
        return;
    }
    if (src == "SOS") {
        dst = CurrencyEnumType::SOS;
        return;
    }
    if (src == "SRD") {
        dst = CurrencyEnumType::SRD;
        return;
    }
    if (src == "SSP") {
        dst = CurrencyEnumType::SSP;
        return;
    }
    if (src == "STD") {
        dst = CurrencyEnumType::STD;
        return;
    }
    if (src == "SVC") {
        dst = CurrencyEnumType::SVC;
        return;
    }
    if (src == "SYP") {
        dst = CurrencyEnumType::SYP;
        return;
    }
    if (src == "SZL") {
        dst = CurrencyEnumType::SZL;
        return;
    }
    if (src == "THB") {
        dst = CurrencyEnumType::THB;
        return;
    }
    if (src == "TJS") {
        dst = CurrencyEnumType::TJS;
        return;
    }
    if (src == "TMT") {
        dst = CurrencyEnumType::TMT;
        return;
    }
    if (src == "TND") {
        dst = CurrencyEnumType::TND;
        return;
    }
    if (src == "TOP") {
        dst = CurrencyEnumType::TOP;
        return;
    }
    if (src == "TRY") {
        dst = CurrencyEnumType::TRY;
        return;
    }
    if (src == "TTD") {
        dst = CurrencyEnumType::TTD;
        return;
    }
    if (src == "TWD") {
        dst = CurrencyEnumType::TWD;
        return;
    }
    if (src == "TZS") {
        dst = CurrencyEnumType::TZS;
        return;
    }
    if (src == "UAH") {
        dst = CurrencyEnumType::UAH;
        return;
    }
    if (src == "UGX") {
        dst = CurrencyEnumType::UGX;
        return;
    }
    if (src == "USD") {
        dst = CurrencyEnumType::USD;
        return;
    }
    if (src == "USN") {
        dst = CurrencyEnumType::USN;
        return;
    }
    if (src == "UYI") {
        dst = CurrencyEnumType::UYI;
        return;
    }
    if (src == "UYU") {
        dst = CurrencyEnumType::UYU;
        return;
    }
    if (src == "UZS") {
        dst = CurrencyEnumType::UZS;
        return;
    }
    if (src == "VEF") {
        dst = CurrencyEnumType::VEF;
        return;
    }
    if (src == "VND") {
        dst = CurrencyEnumType::VND;
        return;
    }
    if (src == "VUV") {
        dst = CurrencyEnumType::VUV;
        return;
    }
    if (src == "WST") {
        dst = CurrencyEnumType::WST;
        return;
    }
    if (src == "XAF") {
        dst = CurrencyEnumType::XAF;
        return;
    }
    if (src == "XAG") {
        dst = CurrencyEnumType::XAG;
        return;
    }
    if (src == "XAU") {
        dst = CurrencyEnumType::XAU;
        return;
    }
    if (src == "XBA") {
        dst = CurrencyEnumType::XBA;
        return;
    }
    if (src == "XBB") {
        dst = CurrencyEnumType::XBB;
        return;
    }
    if (src == "XBC") {
        dst = CurrencyEnumType::XBC;
        return;
    }
    if (src == "XBD") {
        dst = CurrencyEnumType::XBD;
        return;
    }
    if (src == "XCD") {
        dst = CurrencyEnumType::XCD;
        return;
    }
    if (src == "XDR") {
        dst = CurrencyEnumType::XDR;
        return;
    }
    if (src == "XOF") {
        dst = CurrencyEnumType::XOF;
        return;
    }
    if (src == "XPD") {
        dst = CurrencyEnumType::XPD;
        return;
    }
    if (src == "XPF") {
        dst = CurrencyEnumType::XPF;
        return;
    }
    if (src == "XPT") {
        dst = CurrencyEnumType::XPT;
        return;
    }
    if (src == "XSU") {
        dst = CurrencyEnumType::XSU;
        return;
    }
    if (src == "XTS") {
        dst = CurrencyEnumType::XTS;
        return;
    }
    if (src == "XUA") {
        dst = CurrencyEnumType::XUA;
        return;
    }
    if (src == "XXX") {
        dst = CurrencyEnumType::XXX;
        return;
    }
    if (src == "YER") {
        dst = CurrencyEnumType::YER;
        return;
    }
    if (src == "ZAR") {
        dst = CurrencyEnumType::ZAR;
        return;
    }
    if (src == "ZMW") {
        dst = CurrencyEnumType::ZMW;
        return;
    }
    if (src == "ZWL") {
        dst = CurrencyEnumType::ZWL;
        return;
    }
    return;
}
bool convertToJson(const ScopeTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ScopeTypeEnumType::ac:
            enumName = "ac";
            break;
        case ScopeTypeEnumType::acCosPhiGrid:
            enumName = "acCosPhiGrid";
            break;
        case ScopeTypeEnumType::acCurrentA:
            enumName = "acCurrentA";
            break;
        case ScopeTypeEnumType::acCurrentB:
            enumName = "acCurrentB";
            break;
        case ScopeTypeEnumType::acCurrentC:
            enumName = "acCurrentC";
            break;
        case ScopeTypeEnumType::acFrequencyGrid:
            enumName = "acFrequencyGrid";
            break;
        case ScopeTypeEnumType::acPowerA:
            enumName = "acPowerA";
            break;
        case ScopeTypeEnumType::acPowerB:
            enumName = "acPowerB";
            break;
        case ScopeTypeEnumType::acPowerC:
            enumName = "acPowerC";
            break;
        case ScopeTypeEnumType::acPowerLimitPct:
            enumName = "acPowerLimitPct";
            break;
        case ScopeTypeEnumType::acPowerTotal:
            enumName = "acPowerTotal";
            break;
        case ScopeTypeEnumType::acVoltageA:
            enumName = "acVoltageA";
            break;
        case ScopeTypeEnumType::acVoltageB:
            enumName = "acVoltageB";
            break;
        case ScopeTypeEnumType::acVoltageC:
            enumName = "acVoltageC";
            break;
        case ScopeTypeEnumType::acYieldDay:
            enumName = "acYieldDay";
            break;
        case ScopeTypeEnumType::acYieldTotal:
            enumName = "acYieldTotal";
            break;
        case ScopeTypeEnumType::dcCurrent:
            enumName = "dcCurrent";
            break;
        case ScopeTypeEnumType::dcPower:
            enumName = "dcPower";
            break;
        case ScopeTypeEnumType::dcString1:
            enumName = "dcString1";
            break;
        case ScopeTypeEnumType::dcString2:
            enumName = "dcString2";
            break;
        case ScopeTypeEnumType::dcString3:
            enumName = "dcString3";
            break;
        case ScopeTypeEnumType::dcString4:
            enumName = "dcString4";
            break;
        case ScopeTypeEnumType::dcString5:
            enumName = "dcString5";
            break;
        case ScopeTypeEnumType::dcString6:
            enumName = "dcString6";
            break;
        case ScopeTypeEnumType::dcTotal:
            enumName = "dcTotal";
            break;
        case ScopeTypeEnumType::dcVoltage:
            enumName = "dcVoltage";
            break;
        case ScopeTypeEnumType::dhwTemperature:
            enumName = "dhwTemperature";
            break;
        case ScopeTypeEnumType::flowTemperature:
            enumName = "flowTemperature";
            break;
        case ScopeTypeEnumType::outsideAirTemperature:
            enumName = "outsideAirTemperature";
            break;
        case ScopeTypeEnumType::returnTemperature:
            enumName = "returnTemperature";
            break;
        case ScopeTypeEnumType::roomAirTemperature:
            enumName = "roomAirTemperature";
            break;
        case ScopeTypeEnumType::charge:
            enumName = "charge";
            break;
        case ScopeTypeEnumType::stateOfCharge:
            enumName = "stateOfCharge";
            break;
        case ScopeTypeEnumType::discharge:
            enumName = "discharge";
            break;
        case ScopeTypeEnumType::gridConsumption:
            enumName = "gridConsumption";
            break;
        case ScopeTypeEnumType::gridFeedIn:
            enumName = "gridFeedIn";
            break;
        case ScopeTypeEnumType::selfConsumption:
            enumName = "selfConsumption";
            break;
        case ScopeTypeEnumType::overloadProtection:
            enumName = "overloadProtection";
            break;
        case ScopeTypeEnumType::acPower:
            enumName = "acPower";
            break;
        case ScopeTypeEnumType::acEnergy:
            enumName = "acEnergy";
            break;
        case ScopeTypeEnumType::acCurrent:
            enumName = "acCurrent";
            break;
        case ScopeTypeEnumType::acVoltage:
            enumName = "acVoltage";
            break;
        case ScopeTypeEnumType::batteryControl:
            enumName = "batteryControl";
            break;
        case ScopeTypeEnumType::simpleIncentiveTable:
            enumName = "simpleIncentiveTable";
            break;
        case ScopeTypeEnumType::stateOfHealth:
            enumName = "stateOfHealth";
            break;
        case ScopeTypeEnumType::travelRange:
            enumName = "travelRange";
            break;
        case ScopeTypeEnumType::nominalEnergyCapacity:
            enumName = "nominalEnergyCapacity";
            break;
        case ScopeTypeEnumType::acPowerReal:
            enumName = "acPowerReal";
            break;
        case ScopeTypeEnumType::acPowerApparent:
            enumName = "acPowerApparent";
            break;
        case ScopeTypeEnumType::acPowerReactive:
            enumName = "acPowerReactive";
            break;
        case ScopeTypeEnumType::acYieldMonth:
            enumName = "acYieldMonth";
            break;
        case ScopeTypeEnumType::acYieldYear:
            enumName = "acYieldYear";
            break;
        case ScopeTypeEnumType::acFrequency:
            enumName = "acFrequency";
            break;
        case ScopeTypeEnumType::acCosPhi:
            enumName = "acCosPhi";
            break;
        case ScopeTypeEnumType::dcEnergy:
            enumName = "dcEnergy";
            break;
        case ScopeTypeEnumType::insulationResistance:
            enumName = "insulationResistance";
            break;
        case ScopeTypeEnumType::stateOfEnergy:
            enumName = "stateOfEnergy";
            break;
        case ScopeTypeEnumType::useableCapacity:
            enumName = "useableCapacity";
            break;
        case ScopeTypeEnumType::dcChargeEnergy:
            enumName = "dcChargeEnergy";
            break;
        case ScopeTypeEnumType::dcDischargeEnergy:
            enumName = "dcDischargeEnergy";
            break;
        case ScopeTypeEnumType::loadCycleCount:
            enumName = "loadCycleCount";
            break;
        case ScopeTypeEnumType::componentTemperature:
            enumName = "componentTemperature";
            break;
        case ScopeTypeEnumType::gridLimit:
            enumName = "gridLimit";
            break;
        case ScopeTypeEnumType::gridLimitFallback:
            enumName = "gridLimitFallback";
            break;
        case ScopeTypeEnumType::acPowerApparentTotal:
            enumName = "acPowerApparentTotal";
            break;
        case ScopeTypeEnumType::acPowerReactiveTotal:
            enumName = "acPowerReactiveTotal";
            break;
        case ScopeTypeEnumType::acCurrentTotal:
            enumName = "acCurrentTotal";
            break;
        case ScopeTypeEnumType::acEnergyConsumed:
            enumName = "acEnergyConsumed";
            break;
        case ScopeTypeEnumType::acEnergyProduced:
            enumName = "acEnergyProduced";
            break;
        case ScopeTypeEnumType::batteryAcPower:
            enumName = "batteryAcPower";
            break;
        case ScopeTypeEnumType::batteryAcPowerPhaseSpecific:
            enumName = "batteryAcPowerPhaseSpecific";
            break;
        case ScopeTypeEnumType::batteryDcPower:
            enumName = "batteryDcPower";
            break;
        case ScopeTypeEnumType::pccPower:
            enumName = "pccPower";
            break;
        case ScopeTypeEnumType::activePowerLimit:
            enumName = "activePowerLimit";
            break;
        case ScopeTypeEnumType::activePowerLimitPercentage:
            enumName = "activePowerLimitPercentage";
            break;
        case ScopeTypeEnumType::simpleCommittedIncentiveTable:
            enumName = "simpleCommittedIncentiveTable";
            break;
        case ScopeTypeEnumType::simplePreliminaryIncentiveTable:
            enumName = "simplePreliminaryIncentiveTable";
            break;
        case ScopeTypeEnumType::committedPowerPlan:
            enumName = "committedPowerPlan";
            break;
        case ScopeTypeEnumType::preliminaryPowerPlan:
            enumName = "preliminaryPowerPlan";
            break;
        case ScopeTypeEnumType::incentiveTableEnConsWithPoETF:
            enumName = "incentiveTableEnConsWithPoETF";
            break;
        case ScopeTypeEnumType::incentiveTableEnProdWithPoETF:
            enumName = "incentiveTableEnProdWithPoETF";
            break;
        case ScopeTypeEnumType::incentiveTableEnConsWithPoE:
            enumName = "incentiveTableEnConsWithPoE";
            break;
        case ScopeTypeEnumType::incentiveTableEnProdWithPoE:
            enumName = "incentiveTableEnProdWithPoE";
            break;
        case ScopeTypeEnumType::incentiveTableEnConsWithTF:
            enumName = "incentiveTableEnConsWithTF";
            break;
        case ScopeTypeEnumType::incentiveTableEnProdWithTF:
            enumName = "incentiveTableEnProdWithTF";
            break;
        case ScopeTypeEnumType::activePowerForecast:
            enumName = "activePowerForecast";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ScopeTypeEnumType &dst)
{
    if (src == "ac") {
        dst = ScopeTypeEnumType::ac;
        return;
    }
    if (src == "acCosPhiGrid") {
        dst = ScopeTypeEnumType::acCosPhiGrid;
        return;
    }
    if (src == "acCurrentA") {
        dst = ScopeTypeEnumType::acCurrentA;
        return;
    }
    if (src == "acCurrentB") {
        dst = ScopeTypeEnumType::acCurrentB;
        return;
    }
    if (src == "acCurrentC") {
        dst = ScopeTypeEnumType::acCurrentC;
        return;
    }
    if (src == "acFrequencyGrid") {
        dst = ScopeTypeEnumType::acFrequencyGrid;
        return;
    }
    if (src == "acPowerA") {
        dst = ScopeTypeEnumType::acPowerA;
        return;
    }
    if (src == "acPowerB") {
        dst = ScopeTypeEnumType::acPowerB;
        return;
    }
    if (src == "acPowerC") {
        dst = ScopeTypeEnumType::acPowerC;
        return;
    }
    if (src == "acPowerLimitPct") {
        dst = ScopeTypeEnumType::acPowerLimitPct;
        return;
    }
    if (src == "acPowerTotal") {
        dst = ScopeTypeEnumType::acPowerTotal;
        return;
    }
    if (src == "acVoltageA") {
        dst = ScopeTypeEnumType::acVoltageA;
        return;
    }
    if (src == "acVoltageB") {
        dst = ScopeTypeEnumType::acVoltageB;
        return;
    }
    if (src == "acVoltageC") {
        dst = ScopeTypeEnumType::acVoltageC;
        return;
    }
    if (src == "acYieldDay") {
        dst = ScopeTypeEnumType::acYieldDay;
        return;
    }
    if (src == "acYieldTotal") {
        dst = ScopeTypeEnumType::acYieldTotal;
        return;
    }
    if (src == "dcCurrent") {
        dst = ScopeTypeEnumType::dcCurrent;
        return;
    }
    if (src == "dcPower") {
        dst = ScopeTypeEnumType::dcPower;
        return;
    }
    if (src == "dcString1") {
        dst = ScopeTypeEnumType::dcString1;
        return;
    }
    if (src == "dcString2") {
        dst = ScopeTypeEnumType::dcString2;
        return;
    }
    if (src == "dcString3") {
        dst = ScopeTypeEnumType::dcString3;
        return;
    }
    if (src == "dcString4") {
        dst = ScopeTypeEnumType::dcString4;
        return;
    }
    if (src == "dcString5") {
        dst = ScopeTypeEnumType::dcString5;
        return;
    }
    if (src == "dcString6") {
        dst = ScopeTypeEnumType::dcString6;
        return;
    }
    if (src == "dcTotal") {
        dst = ScopeTypeEnumType::dcTotal;
        return;
    }
    if (src == "dcVoltage") {
        dst = ScopeTypeEnumType::dcVoltage;
        return;
    }
    if (src == "dhwTemperature") {
        dst = ScopeTypeEnumType::dhwTemperature;
        return;
    }
    if (src == "flowTemperature") {
        dst = ScopeTypeEnumType::flowTemperature;
        return;
    }
    if (src == "outsideAirTemperature") {
        dst = ScopeTypeEnumType::outsideAirTemperature;
        return;
    }
    if (src == "returnTemperature") {
        dst = ScopeTypeEnumType::returnTemperature;
        return;
    }
    if (src == "roomAirTemperature") {
        dst = ScopeTypeEnumType::roomAirTemperature;
        return;
    }
    if (src == "charge") {
        dst = ScopeTypeEnumType::charge;
        return;
    }
    if (src == "stateOfCharge") {
        dst = ScopeTypeEnumType::stateOfCharge;
        return;
    }
    if (src == "discharge") {
        dst = ScopeTypeEnumType::discharge;
        return;
    }
    if (src == "gridConsumption") {
        dst = ScopeTypeEnumType::gridConsumption;
        return;
    }
    if (src == "gridFeedIn") {
        dst = ScopeTypeEnumType::gridFeedIn;
        return;
    }
    if (src == "selfConsumption") {
        dst = ScopeTypeEnumType::selfConsumption;
        return;
    }
    if (src == "overloadProtection") {
        dst = ScopeTypeEnumType::overloadProtection;
        return;
    }
    if (src == "acPower") {
        dst = ScopeTypeEnumType::acPower;
        return;
    }
    if (src == "acEnergy") {
        dst = ScopeTypeEnumType::acEnergy;
        return;
    }
    if (src == "acCurrent") {
        dst = ScopeTypeEnumType::acCurrent;
        return;
    }
    if (src == "acVoltage") {
        dst = ScopeTypeEnumType::acVoltage;
        return;
    }
    if (src == "batteryControl") {
        dst = ScopeTypeEnumType::batteryControl;
        return;
    }
    if (src == "simpleIncentiveTable") {
        dst = ScopeTypeEnumType::simpleIncentiveTable;
        return;
    }
    if (src == "stateOfHealth") {
        dst = ScopeTypeEnumType::stateOfHealth;
        return;
    }
    if (src == "travelRange") {
        dst = ScopeTypeEnumType::travelRange;
        return;
    }
    if (src == "nominalEnergyCapacity") {
        dst = ScopeTypeEnumType::nominalEnergyCapacity;
        return;
    }
    if (src == "acPowerReal") {
        dst = ScopeTypeEnumType::acPowerReal;
        return;
    }
    if (src == "acPowerApparent") {
        dst = ScopeTypeEnumType::acPowerApparent;
        return;
    }
    if (src == "acPowerReactive") {
        dst = ScopeTypeEnumType::acPowerReactive;
        return;
    }
    if (src == "acYieldMonth") {
        dst = ScopeTypeEnumType::acYieldMonth;
        return;
    }
    if (src == "acYieldYear") {
        dst = ScopeTypeEnumType::acYieldYear;
        return;
    }
    if (src == "acFrequency") {
        dst = ScopeTypeEnumType::acFrequency;
        return;
    }
    if (src == "acCosPhi") {
        dst = ScopeTypeEnumType::acCosPhi;
        return;
    }
    if (src == "dcEnergy") {
        dst = ScopeTypeEnumType::dcEnergy;
        return;
    }
    if (src == "insulationResistance") {
        dst = ScopeTypeEnumType::insulationResistance;
        return;
    }
    if (src == "stateOfEnergy") {
        dst = ScopeTypeEnumType::stateOfEnergy;
        return;
    }
    if (src == "useableCapacity") {
        dst = ScopeTypeEnumType::useableCapacity;
        return;
    }
    if (src == "dcChargeEnergy") {
        dst = ScopeTypeEnumType::dcChargeEnergy;
        return;
    }
    if (src == "dcDischargeEnergy") {
        dst = ScopeTypeEnumType::dcDischargeEnergy;
        return;
    }
    if (src == "loadCycleCount") {
        dst = ScopeTypeEnumType::loadCycleCount;
        return;
    }
    if (src == "componentTemperature") {
        dst = ScopeTypeEnumType::componentTemperature;
        return;
    }
    if (src == "gridLimit") {
        dst = ScopeTypeEnumType::gridLimit;
        return;
    }
    if (src == "gridLimitFallback") {
        dst = ScopeTypeEnumType::gridLimitFallback;
        return;
    }
    if (src == "acPowerApparentTotal") {
        dst = ScopeTypeEnumType::acPowerApparentTotal;
        return;
    }
    if (src == "acPowerReactiveTotal") {
        dst = ScopeTypeEnumType::acPowerReactiveTotal;
        return;
    }
    if (src == "acCurrentTotal") {
        dst = ScopeTypeEnumType::acCurrentTotal;
        return;
    }
    if (src == "acEnergyConsumed") {
        dst = ScopeTypeEnumType::acEnergyConsumed;
        return;
    }
    if (src == "acEnergyProduced") {
        dst = ScopeTypeEnumType::acEnergyProduced;
        return;
    }
    if (src == "batteryAcPower") {
        dst = ScopeTypeEnumType::batteryAcPower;
        return;
    }
    if (src == "batteryAcPowerPhaseSpecific") {
        dst = ScopeTypeEnumType::batteryAcPowerPhaseSpecific;
        return;
    }
    if (src == "batteryDcPower") {
        dst = ScopeTypeEnumType::batteryDcPower;
        return;
    }
    if (src == "pccPower") {
        dst = ScopeTypeEnumType::pccPower;
        return;
    }
    if (src == "activePowerLimit") {
        dst = ScopeTypeEnumType::activePowerLimit;
        return;
    }
    if (src == "activePowerLimitPercentage") {
        dst = ScopeTypeEnumType::activePowerLimitPercentage;
        return;
    }
    if (src == "simpleCommittedIncentiveTable") {
        dst = ScopeTypeEnumType::simpleCommittedIncentiveTable;
        return;
    }
    if (src == "simplePreliminaryIncentiveTable") {
        dst = ScopeTypeEnumType::simplePreliminaryIncentiveTable;
        return;
    }
    if (src == "committedPowerPlan") {
        dst = ScopeTypeEnumType::committedPowerPlan;
        return;
    }
    if (src == "preliminaryPowerPlan") {
        dst = ScopeTypeEnumType::preliminaryPowerPlan;
        return;
    }
    if (src == "incentiveTableEnConsWithPoETF") {
        dst = ScopeTypeEnumType::incentiveTableEnConsWithPoETF;
        return;
    }
    if (src == "incentiveTableEnProdWithPoETF") {
        dst = ScopeTypeEnumType::incentiveTableEnProdWithPoETF;
        return;
    }
    if (src == "incentiveTableEnConsWithPoE") {
        dst = ScopeTypeEnumType::incentiveTableEnConsWithPoE;
        return;
    }
    if (src == "incentiveTableEnProdWithPoE") {
        dst = ScopeTypeEnumType::incentiveTableEnProdWithPoE;
        return;
    }
    if (src == "incentiveTableEnConsWithTF") {
        dst = ScopeTypeEnumType::incentiveTableEnConsWithTF;
        return;
    }
    if (src == "incentiveTableEnProdWithTF") {
        dst = ScopeTypeEnumType::incentiveTableEnProdWithTF;
        return;
    }
    if (src == "activePowerForecast") {
        dst = ScopeTypeEnumType::activePowerForecast;
        return;
    }
    return;
}
bool convertToJson(const RoleType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case RoleType::client:
            enumName = "client";
            break;
        case RoleType::server:
            enumName = "server";
            break;
        case RoleType::special:
            enumName = "special";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, RoleType &dst)
{
    if (src == "client") {
        dst = RoleType::client;
        return;
    }
    if (src == "server") {
        dst = RoleType::server;
        return;
    }
    if (src == "special") {
        dst = RoleType::special;
        return;
    }
    return;
}
bool convertToJson(const DeviceTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DeviceTypeEnumType::Dishwasher:
            enumName = "Dishwasher";
            break;
        case DeviceTypeEnumType::Dryer:
            enumName = "Dryer";
            break;
        case DeviceTypeEnumType::EnvironmentSensor:
            enumName = "EnvironmentSensor";
            break;
        case DeviceTypeEnumType::Generic:
            enumName = "Generic";
            break;
        case DeviceTypeEnumType::HeatGenerationSystem:
            enumName = "HeatGenerationSystem";
            break;
        case DeviceTypeEnumType::HeatSinkSystem:
            enumName = "HeatSinkSystem";
            break;
        case DeviceTypeEnumType::HeatStorageSystem:
            enumName = "HeatStorageSystem";
            break;
        case DeviceTypeEnumType::HVACController:
            enumName = "HVACController";
            break;
        case DeviceTypeEnumType::SubMeter:
            enumName = "SubMeter";
            break;
        case DeviceTypeEnumType::Washer:
            enumName = "Washer";
            break;
        case DeviceTypeEnumType::ElectricitySupplySystem:
            enumName = "ElectricitySupplySystem";
            break;
        case DeviceTypeEnumType::EnergyManagementSystem:
            enumName = "EnergyManagementSystem";
            break;
        case DeviceTypeEnumType::Inverter:
            enumName = "Inverter";
            break;
        case DeviceTypeEnumType::ChargingStation:
            enumName = "ChargingStation";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DeviceTypeEnumType &dst)
{
    if (src == "Dishwasher") {
        dst = DeviceTypeEnumType::Dishwasher;
        return;
    }
    if (src == "Dryer") {
        dst = DeviceTypeEnumType::Dryer;
        return;
    }
    if (src == "EnvironmentSensor") {
        dst = DeviceTypeEnumType::EnvironmentSensor;
        return;
    }
    if (src == "Generic") {
        dst = DeviceTypeEnumType::Generic;
        return;
    }
    if (src == "HeatGenerationSystem") {
        dst = DeviceTypeEnumType::HeatGenerationSystem;
        return;
    }
    if (src == "HeatSinkSystem") {
        dst = DeviceTypeEnumType::HeatSinkSystem;
        return;
    }
    if (src == "HeatStorageSystem") {
        dst = DeviceTypeEnumType::HeatStorageSystem;
        return;
    }
    if (src == "HVACController") {
        dst = DeviceTypeEnumType::HVACController;
        return;
    }
    if (src == "SubMeter") {
        dst = DeviceTypeEnumType::SubMeter;
        return;
    }
    if (src == "Washer") {
        dst = DeviceTypeEnumType::Washer;
        return;
    }
    if (src == "ElectricitySupplySystem") {
        dst = DeviceTypeEnumType::ElectricitySupplySystem;
        return;
    }
    if (src == "EnergyManagementSystem") {
        dst = DeviceTypeEnumType::EnergyManagementSystem;
        return;
    }
    if (src == "Inverter") {
        dst = DeviceTypeEnumType::Inverter;
        return;
    }
    if (src == "ChargingStation") {
        dst = DeviceTypeEnumType::ChargingStation;
        return;
    }
    return;
}
bool convertToJson(const EntityTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case EntityTypeEnumType::Battery:
            enumName = "Battery";
            break;
        case EntityTypeEnumType::Compressor:
            enumName = "Compressor";
            break;
        case EntityTypeEnumType::DeviceInformation:
            enumName = "DeviceInformation";
            break;
        case EntityTypeEnumType::DHWCircuit:
            enumName = "DHWCircuit";
            break;
        case EntityTypeEnumType::DHWStorage:
            enumName = "DHWStorage";
            break;
        case EntityTypeEnumType::Dishwasher:
            enumName = "Dishwasher";
            break;
        case EntityTypeEnumType::Dryer:
            enumName = "Dryer";
            break;
        case EntityTypeEnumType::ElectricalImmersionHeater:
            enumName = "ElectricalImmersionHeater";
            break;
        case EntityTypeEnumType::Fan:
            enumName = "Fan";
            break;
        case EntityTypeEnumType::GasHeatingAppliance:
            enumName = "GasHeatingAppliance";
            break;
        case EntityTypeEnumType::Generic:
            enumName = "Generic";
            break;
        case EntityTypeEnumType::HeatingBufferStorage:
            enumName = "HeatingBufferStorage";
            break;
        case EntityTypeEnumType::HeatingCircuit:
            enumName = "HeatingCircuit";
            break;
        case EntityTypeEnumType::HeatingObject:
            enumName = "HeatingObject";
            break;
        case EntityTypeEnumType::HeatingZone:
            enumName = "HeatingZone";
            break;
        case EntityTypeEnumType::HeatPumpAppliance:
            enumName = "HeatPumpAppliance";
            break;
        case EntityTypeEnumType::HeatSinkCircuit:
            enumName = "HeatSinkCircuit";
            break;
        case EntityTypeEnumType::HeatSourceCircuit:
            enumName = "HeatSourceCircuit";
            break;
        case EntityTypeEnumType::HeatSourceUnit:
            enumName = "HeatSourceUnit";
            break;
        case EntityTypeEnumType::HVACController:
            enumName = "HVACController";
            break;
        case EntityTypeEnumType::HVACRoom:
            enumName = "HVACRoom";
            break;
        case EntityTypeEnumType::InstantDHWHeater:
            enumName = "InstantDHWHeater";
            break;
        case EntityTypeEnumType::Inverter:
            enumName = "Inverter";
            break;
        case EntityTypeEnumType::OilHeatingAppliance:
            enumName = "OilHeatingAppliance";
            break;
        case EntityTypeEnumType::Pump:
            enumName = "Pump";
            break;
        case EntityTypeEnumType::RefrigerantCircuit:
            enumName = "RefrigerantCircuit";
            break;
        case EntityTypeEnumType::SmartEnergyAppliance:
            enumName = "SmartEnergyAppliance";
            break;
        case EntityTypeEnumType::SolarDHWStorage:
            enumName = "SolarDHWStorage";
            break;
        case EntityTypeEnumType::SolarThermalCircuit:
            enumName = "SolarThermalCircuit";
            break;
        case EntityTypeEnumType::SubMeterElectricity:
            enumName = "SubMeterElectricity";
            break;
        case EntityTypeEnumType::TemperatureSensor:
            enumName = "TemperatureSensor";
            break;
        case EntityTypeEnumType::Washer:
            enumName = "Washer";
            break;
        case EntityTypeEnumType::BatterySystem:
            enumName = "BatterySystem";
            break;
        case EntityTypeEnumType::ElectricityGenerationSystem:
            enumName = "ElectricityGenerationSystem";
            break;
        case EntityTypeEnumType::ElectricityStorageSystem:
            enumName = "ElectricityStorageSystem";
            break;
        case EntityTypeEnumType::GridConnectionPointOfPremises:
            enumName = "GridConnectionPointOfPremises";
            break;
        case EntityTypeEnumType::Household:
            enumName = "Household";
            break;
        case EntityTypeEnumType::PVSystem:
            enumName = "PVSystem";
            break;
        case EntityTypeEnumType::EV:
            enumName = "EV";
            break;
        case EntityTypeEnumType::EVSE:
            enumName = "EVSE";
            break;
        case EntityTypeEnumType::ChargingOutlet:
            enumName = "ChargingOutlet";
            break;
        case EntityTypeEnumType::CEM:
            enumName = "CEM";
            break;
        case EntityTypeEnumType::PV:
            enumName = "PV";
            break;
        case EntityTypeEnumType::PVESHybrid:
            enumName = "PVESHybrid";
            break;
        case EntityTypeEnumType::ElectricalStorage:
            enumName = "ElectricalStorage";
            break;
        case EntityTypeEnumType::PVString:
            enumName = "PVString";
            break;
        case EntityTypeEnumType::GridGuard:
            enumName = "GridGuard";
            break;
        case EntityTypeEnumType::ControllableSystem:
            enumName = "ControllableSystem";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, EntityTypeEnumType &dst)
{
    if (src == "Battery") {
        dst = EntityTypeEnumType::Battery;
        return;
    }
    if (src == "Compressor") {
        dst = EntityTypeEnumType::Compressor;
        return;
    }
    if (src == "DeviceInformation") {
        dst = EntityTypeEnumType::DeviceInformation;
        return;
    }
    if (src == "DHWCircuit") {
        dst = EntityTypeEnumType::DHWCircuit;
        return;
    }
    if (src == "DHWStorage") {
        dst = EntityTypeEnumType::DHWStorage;
        return;
    }
    if (src == "Dishwasher") {
        dst = EntityTypeEnumType::Dishwasher;
        return;
    }
    if (src == "Dryer") {
        dst = EntityTypeEnumType::Dryer;
        return;
    }
    if (src == "ElectricalImmersionHeater") {
        dst = EntityTypeEnumType::ElectricalImmersionHeater;
        return;
    }
    if (src == "Fan") {
        dst = EntityTypeEnumType::Fan;
        return;
    }
    if (src == "GasHeatingAppliance") {
        dst = EntityTypeEnumType::GasHeatingAppliance;
        return;
    }
    if (src == "Generic") {
        dst = EntityTypeEnumType::Generic;
        return;
    }
    if (src == "HeatingBufferStorage") {
        dst = EntityTypeEnumType::HeatingBufferStorage;
        return;
    }
    if (src == "HeatingCircuit") {
        dst = EntityTypeEnumType::HeatingCircuit;
        return;
    }
    if (src == "HeatingObject") {
        dst = EntityTypeEnumType::HeatingObject;
        return;
    }
    if (src == "HeatingZone") {
        dst = EntityTypeEnumType::HeatingZone;
        return;
    }
    if (src == "HeatPumpAppliance") {
        dst = EntityTypeEnumType::HeatPumpAppliance;
        return;
    }
    if (src == "HeatSinkCircuit") {
        dst = EntityTypeEnumType::HeatSinkCircuit;
        return;
    }
    if (src == "HeatSourceCircuit") {
        dst = EntityTypeEnumType::HeatSourceCircuit;
        return;
    }
    if (src == "HeatSourceUnit") {
        dst = EntityTypeEnumType::HeatSourceUnit;
        return;
    }
    if (src == "HVACController") {
        dst = EntityTypeEnumType::HVACController;
        return;
    }
    if (src == "HVACRoom") {
        dst = EntityTypeEnumType::HVACRoom;
        return;
    }
    if (src == "InstantDHWHeater") {
        dst = EntityTypeEnumType::InstantDHWHeater;
        return;
    }
    if (src == "Inverter") {
        dst = EntityTypeEnumType::Inverter;
        return;
    }
    if (src == "OilHeatingAppliance") {
        dst = EntityTypeEnumType::OilHeatingAppliance;
        return;
    }
    if (src == "Pump") {
        dst = EntityTypeEnumType::Pump;
        return;
    }
    if (src == "RefrigerantCircuit") {
        dst = EntityTypeEnumType::RefrigerantCircuit;
        return;
    }
    if (src == "SmartEnergyAppliance") {
        dst = EntityTypeEnumType::SmartEnergyAppliance;
        return;
    }
    if (src == "SolarDHWStorage") {
        dst = EntityTypeEnumType::SolarDHWStorage;
        return;
    }
    if (src == "SolarThermalCircuit") {
        dst = EntityTypeEnumType::SolarThermalCircuit;
        return;
    }
    if (src == "SubMeterElectricity") {
        dst = EntityTypeEnumType::SubMeterElectricity;
        return;
    }
    if (src == "TemperatureSensor") {
        dst = EntityTypeEnumType::TemperatureSensor;
        return;
    }
    if (src == "Washer") {
        dst = EntityTypeEnumType::Washer;
        return;
    }
    if (src == "BatterySystem") {
        dst = EntityTypeEnumType::BatterySystem;
        return;
    }
    if (src == "ElectricityGenerationSystem") {
        dst = EntityTypeEnumType::ElectricityGenerationSystem;
        return;
    }
    if (src == "ElectricityStorageSystem") {
        dst = EntityTypeEnumType::ElectricityStorageSystem;
        return;
    }
    if (src == "GridConnectionPointOfPremises") {
        dst = EntityTypeEnumType::GridConnectionPointOfPremises;
        return;
    }
    if (src == "Household") {
        dst = EntityTypeEnumType::Household;
        return;
    }
    if (src == "PVSystem") {
        dst = EntityTypeEnumType::PVSystem;
        return;
    }
    if (src == "EV") {
        dst = EntityTypeEnumType::EV;
        return;
    }
    if (src == "EVSE") {
        dst = EntityTypeEnumType::EVSE;
        return;
    }
    if (src == "ChargingOutlet") {
        dst = EntityTypeEnumType::ChargingOutlet;
        return;
    }
    if (src == "CEM") {
        dst = EntityTypeEnumType::CEM;
        return;
    }
    if (src == "PV") {
        dst = EntityTypeEnumType::PV;
        return;
    }
    if (src == "PVESHybrid") {
        dst = EntityTypeEnumType::PVESHybrid;
        return;
    }
    if (src == "ElectricalStorage") {
        dst = EntityTypeEnumType::ElectricalStorage;
        return;
    }
    if (src == "PVString") {
        dst = EntityTypeEnumType::PVString;
        return;
    }
    if (src == "GridGuard") {
        dst = EntityTypeEnumType::GridGuard;
        return;
    }
    if (src == "ControllableSystem") {
        dst = EntityTypeEnumType::ControllableSystem;
        return;
    }
    return;
}
bool convertToJson(const FeatureTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureTypeEnumType::ActuatorLevel:
            enumName = "ActuatorLevel";
            break;
        case FeatureTypeEnumType::ActuatorSwitch:
            enumName = "ActuatorSwitch";
            break;
        case FeatureTypeEnumType::Alarm:
            enumName = "Alarm";
            break;
        case FeatureTypeEnumType::DataTunneling:
            enumName = "DataTunneling";
            break;
        case FeatureTypeEnumType::DeviceClassification:
            enumName = "DeviceClassification";
            break;
        case FeatureTypeEnumType::DeviceDiagnosis:
            enumName = "DeviceDiagnosis";
            break;
        case FeatureTypeEnumType::DirectControl:
            enumName = "DirectControl";
            break;
        case FeatureTypeEnumType::ElectricalConnection:
            enumName = "ElectricalConnection";
            break;
        case FeatureTypeEnumType::Generic:
            enumName = "Generic";
            break;
        case FeatureTypeEnumType::HVAC:
            enumName = "HVAC";
            break;
        case FeatureTypeEnumType::LoadControl:
            enumName = "LoadControl";
            break;
        case FeatureTypeEnumType::Measurement:
            enumName = "Measurement";
            break;
        case FeatureTypeEnumType::Messaging:
            enumName = "Messaging";
            break;
        case FeatureTypeEnumType::NetworkManagement:
            enumName = "NetworkManagement";
            break;
        case FeatureTypeEnumType::NodeManagement:
            enumName = "NodeManagement";
            break;
        case FeatureTypeEnumType::OperatingConstraints:
            enumName = "OperatingConstraints";
            break;
        case FeatureTypeEnumType::PowerSequences:
            enumName = "PowerSequences";
            break;
        case FeatureTypeEnumType::Sensing:
            enumName = "Sensing";
            break;
        case FeatureTypeEnumType::Setpoint:
            enumName = "Setpoint";
            break;
        case FeatureTypeEnumType::SmartEnergyManagementPs:
            enumName = "SmartEnergyManagementPs";
            break;
        case FeatureTypeEnumType::TaskManagement:
            enumName = "TaskManagement";
            break;
        case FeatureTypeEnumType::Threshold:
            enumName = "Threshold";
            break;
        case FeatureTypeEnumType::TimeInformation:
            enumName = "TimeInformation";
            break;
        case FeatureTypeEnumType::TimeTable:
            enumName = "TimeTable";
            break;
        case FeatureTypeEnumType::DeviceConfiguration:
            enumName = "DeviceConfiguration";
            break;
        case FeatureTypeEnumType::SupplyCondition:
            enumName = "SupplyCondition";
            break;
        case FeatureTypeEnumType::TimeSeries:
            enumName = "TimeSeries";
            break;
        case FeatureTypeEnumType::TariffInformation:
            enumName = "TariffInformation";
            break;
        case FeatureTypeEnumType::IncentiveTable:
            enumName = "IncentiveTable";
            break;
        case FeatureTypeEnumType::Bill:
            enumName = "Bill";
            break;
        case FeatureTypeEnumType::Identification:
            enumName = "Identification";
            break;
        case FeatureTypeEnumType::StateInformation:
            enumName = "StateInformation";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureTypeEnumType &dst)
{
    if (src == "ActuatorLevel") {
        dst = FeatureTypeEnumType::ActuatorLevel;
        return;
    }
    if (src == "ActuatorSwitch") {
        dst = FeatureTypeEnumType::ActuatorSwitch;
        return;
    }
    if (src == "Alarm") {
        dst = FeatureTypeEnumType::Alarm;
        return;
    }
    if (src == "DataTunneling") {
        dst = FeatureTypeEnumType::DataTunneling;
        return;
    }
    if (src == "DeviceClassification") {
        dst = FeatureTypeEnumType::DeviceClassification;
        return;
    }
    if (src == "DeviceDiagnosis") {
        dst = FeatureTypeEnumType::DeviceDiagnosis;
        return;
    }
    if (src == "DirectControl") {
        dst = FeatureTypeEnumType::DirectControl;
        return;
    }
    if (src == "ElectricalConnection") {
        dst = FeatureTypeEnumType::ElectricalConnection;
        return;
    }
    if (src == "Generic") {
        dst = FeatureTypeEnumType::Generic;
        return;
    }
    if (src == "HVAC") {
        dst = FeatureTypeEnumType::HVAC;
        return;
    }
    if (src == "LoadControl") {
        dst = FeatureTypeEnumType::LoadControl;
        return;
    }
    if (src == "Measurement") {
        dst = FeatureTypeEnumType::Measurement;
        return;
    }
    if (src == "Messaging") {
        dst = FeatureTypeEnumType::Messaging;
        return;
    }
    if (src == "NetworkManagement") {
        dst = FeatureTypeEnumType::NetworkManagement;
        return;
    }
    if (src == "NodeManagement") {
        dst = FeatureTypeEnumType::NodeManagement;
        return;
    }
    if (src == "OperatingConstraints") {
        dst = FeatureTypeEnumType::OperatingConstraints;
        return;
    }
    if (src == "PowerSequences") {
        dst = FeatureTypeEnumType::PowerSequences;
        return;
    }
    if (src == "Sensing") {
        dst = FeatureTypeEnumType::Sensing;
        return;
    }
    if (src == "Setpoint") {
        dst = FeatureTypeEnumType::Setpoint;
        return;
    }
    if (src == "SmartEnergyManagementPs") {
        dst = FeatureTypeEnumType::SmartEnergyManagementPs;
        return;
    }
    if (src == "TaskManagement") {
        dst = FeatureTypeEnumType::TaskManagement;
        return;
    }
    if (src == "Threshold") {
        dst = FeatureTypeEnumType::Threshold;
        return;
    }
    if (src == "TimeInformation") {
        dst = FeatureTypeEnumType::TimeInformation;
        return;
    }
    if (src == "TimeTable") {
        dst = FeatureTypeEnumType::TimeTable;
        return;
    }
    if (src == "DeviceConfiguration") {
        dst = FeatureTypeEnumType::DeviceConfiguration;
        return;
    }
    if (src == "SupplyCondition") {
        dst = FeatureTypeEnumType::SupplyCondition;
        return;
    }
    if (src == "TimeSeries") {
        dst = FeatureTypeEnumType::TimeSeries;
        return;
    }
    if (src == "TariffInformation") {
        dst = FeatureTypeEnumType::TariffInformation;
        return;
    }
    if (src == "IncentiveTable") {
        dst = FeatureTypeEnumType::IncentiveTable;
        return;
    }
    if (src == "Bill") {
        dst = FeatureTypeEnumType::Bill;
        return;
    }
    if (src == "Identification") {
        dst = FeatureTypeEnumType::Identification;
        return;
    }
    if (src == "StateInformation") {
        dst = FeatureTypeEnumType::StateInformation;
        return;
    }
    return;
}
bool convertToJson(const FeatureDirectControlSpecificUsageEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureDirectControlSpecificUsageEnumType::History:
            enumName = "History";
            break;
        case FeatureDirectControlSpecificUsageEnumType::RealTime:
            enumName = "RealTime";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureDirectControlSpecificUsageEnumType &dst)
{
    if (src == "History") {
        dst = FeatureDirectControlSpecificUsageEnumType::History;
        return;
    }
    if (src == "RealTime") {
        dst = FeatureDirectControlSpecificUsageEnumType::RealTime;
        return;
    }
    return;
}
bool convertToJson(const FeatureHvacSpecificUsageEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureHvacSpecificUsageEnumType::OperationMode:
            enumName = "OperationMode";
            break;
        case FeatureHvacSpecificUsageEnumType::Overrun:
            enumName = "Overrun";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureHvacSpecificUsageEnumType &dst)
{
    if (src == "OperationMode") {
        dst = FeatureHvacSpecificUsageEnumType::OperationMode;
        return;
    }
    if (src == "Overrun") {
        dst = FeatureHvacSpecificUsageEnumType::Overrun;
        return;
    }
    return;
}
bool convertToJson(const FeatureMeasurementSpecificUsageEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureMeasurementSpecificUsageEnumType::Contact:
            enumName = "Contact";
            break;
        case FeatureMeasurementSpecificUsageEnumType::Electrical:
            enumName = "Electrical";
            break;
        case FeatureMeasurementSpecificUsageEnumType::Heat:
            enumName = "Heat";
            break;
        case FeatureMeasurementSpecificUsageEnumType::Level:
            enumName = "Level";
            break;
        case FeatureMeasurementSpecificUsageEnumType::Pressure:
            enumName = "Pressure";
            break;
        case FeatureMeasurementSpecificUsageEnumType::Temperature:
            enumName = "Temperature";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureMeasurementSpecificUsageEnumType &dst)
{
    if (src == "Contact") {
        dst = FeatureMeasurementSpecificUsageEnumType::Contact;
        return;
    }
    if (src == "Electrical") {
        dst = FeatureMeasurementSpecificUsageEnumType::Electrical;
        return;
    }
    if (src == "Heat") {
        dst = FeatureMeasurementSpecificUsageEnumType::Heat;
        return;
    }
    if (src == "Level") {
        dst = FeatureMeasurementSpecificUsageEnumType::Level;
        return;
    }
    if (src == "Pressure") {
        dst = FeatureMeasurementSpecificUsageEnumType::Pressure;
        return;
    }
    if (src == "Temperature") {
        dst = FeatureMeasurementSpecificUsageEnumType::Temperature;
        return;
    }
    return;
}
bool convertToJson(const FeatureSetpointSpecificUsageEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureSetpointSpecificUsageEnumType::Contact:
            enumName = "Contact";
            break;
        case FeatureSetpointSpecificUsageEnumType::Electrical:
            enumName = "Electrical";
            break;
        case FeatureSetpointSpecificUsageEnumType::Heat:
            enumName = "Heat";
            break;
        case FeatureSetpointSpecificUsageEnumType::Level:
            enumName = "Level";
            break;
        case FeatureSetpointSpecificUsageEnumType::Pressure:
            enumName = "Pressure";
            break;
        case FeatureSetpointSpecificUsageEnumType::Temperature:
            enumName = "Temperature";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureSetpointSpecificUsageEnumType &dst)
{
    if (src == "Contact") {
        dst = FeatureSetpointSpecificUsageEnumType::Contact;
        return;
    }
    if (src == "Electrical") {
        dst = FeatureSetpointSpecificUsageEnumType::Electrical;
        return;
    }
    if (src == "Heat") {
        dst = FeatureSetpointSpecificUsageEnumType::Heat;
        return;
    }
    if (src == "Level") {
        dst = FeatureSetpointSpecificUsageEnumType::Level;
        return;
    }
    if (src == "Pressure") {
        dst = FeatureSetpointSpecificUsageEnumType::Pressure;
        return;
    }
    if (src == "Temperature") {
        dst = FeatureSetpointSpecificUsageEnumType::Temperature;
        return;
    }
    return;
}
bool convertToJson(const FeatureSmartEnergyManagementPsSpecificUsageEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FixedForecast:
            enumName = "FixedForecast";
            break;
        case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleChosenForecast:
            enumName = "FlexibleChosenForecast";
            break;
        case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleOptionalForecast:
            enumName = "FlexibleOptionalForecast";
            break;
        case FeatureSmartEnergyManagementPsSpecificUsageEnumType::OptionalSequenceBasedImmediateControl:
            enumName = "OptionalSequenceBasedImmediateControl";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FeatureSmartEnergyManagementPsSpecificUsageEnumType &dst)
{
    if (src == "FixedForecast") {
        dst = FeatureSmartEnergyManagementPsSpecificUsageEnumType::FixedForecast;
        return;
    }
    if (src == "FlexibleChosenForecast") {
        dst = FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleChosenForecast;
        return;
    }
    if (src == "FlexibleOptionalForecast") {
        dst = FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleOptionalForecast;
        return;
    }
    if (src == "OptionalSequenceBasedImmediateControl") {
        dst = FeatureSmartEnergyManagementPsSpecificUsageEnumType::OptionalSequenceBasedImmediateControl;
        return;
    }
    return;
}
bool convertToJson(const FunctionEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case FunctionEnumType::actuatorLevelData:
            enumName = "actuatorLevelData";
            break;
        case FunctionEnumType::actuatorLevelDescriptionData:
            enumName = "actuatorLevelDescriptionData";
            break;
        case FunctionEnumType::actuatorSwitchData:
            enumName = "actuatorSwitchData";
            break;
        case FunctionEnumType::actuatorSwitchDescriptionData:
            enumName = "actuatorSwitchDescriptionData";
            break;
        case FunctionEnumType::alarmListData:
            enumName = "alarmListData";
            break;
        case FunctionEnumType::bindingManagementDeleteCall:
            enumName = "bindingManagementDeleteCall";
            break;
        case FunctionEnumType::bindingManagementEntryListData:
            enumName = "bindingManagementEntryListData";
            break;
        case FunctionEnumType::bindingManagementRequestCall:
            enumName = "bindingManagementRequestCall";
            break;
        case FunctionEnumType::dataTunnelingCall:
            enumName = "dataTunnelingCall";
            break;
        case FunctionEnumType::deviceClassificationManufacturerData:
            enumName = "deviceClassificationManufacturerData";
            break;
        case FunctionEnumType::deviceClassificationUserData:
            enumName = "deviceClassificationUserData";
            break;
        case FunctionEnumType::deviceDiagnosisHeartbeatData:
            enumName = "deviceDiagnosisHeartbeatData";
            break;
        case FunctionEnumType::deviceDiagnosisServiceData:
            enumName = "deviceDiagnosisServiceData";
            break;
        case FunctionEnumType::deviceDiagnosisStateData:
            enumName = "deviceDiagnosisStateData";
            break;
        case FunctionEnumType::directControlActivityListData:
            enumName = "directControlActivityListData";
            break;
        case FunctionEnumType::directControlDescriptionData:
            enumName = "directControlDescriptionData";
            break;
        case FunctionEnumType::electricalConnectionDescriptionListData:
            enumName = "electricalConnectionDescriptionListData";
            break;
        case FunctionEnumType::electricalConnectionParameterDescriptionListData:
            enumName = "electricalConnectionParameterDescriptionListData";
            break;
        case FunctionEnumType::electricalConnectionStateListData:
            enumName = "electricalConnectionStateListData";
            break;
        case FunctionEnumType::hvacOperationModeDescriptionListData:
            enumName = "hvacOperationModeDescriptionListData";
            break;
        case FunctionEnumType::hvacOverrunDescriptionListData:
            enumName = "hvacOverrunDescriptionListData";
            break;
        case FunctionEnumType::hvacOverrunListData:
            enumName = "hvacOverrunListData";
            break;
        case FunctionEnumType::hvacSystemFunctionDescriptionListData:
            enumName = "hvacSystemFunctionDescriptionListData";
            break;
        case FunctionEnumType::hvacSystemFunctionListData:
            enumName = "hvacSystemFunctionListData";
            break;
        case FunctionEnumType::hvacSystemFunctionOperationModeRelationListData:
            enumName = "hvacSystemFunctionOperationModeRelationListData";
            break;
        case FunctionEnumType::hvacSystemFunctionPowerSequenceRelationListData:
            enumName = "hvacSystemFunctionPowerSequenceRelationListData";
            break;
        case FunctionEnumType::hvacSystemFunctionSetpointRelationListData:
            enumName = "hvacSystemFunctionSetpointRelationListData";
            break;
        case FunctionEnumType::loadControlEventListData:
            enumName = "loadControlEventListData";
            break;
        case FunctionEnumType::loadControlStateListData:
            enumName = "loadControlStateListData";
            break;
        case FunctionEnumType::measurementConstraintsListData:
            enumName = "measurementConstraintsListData";
            break;
        case FunctionEnumType::measurementDescriptionListData:
            enumName = "measurementDescriptionListData";
            break;
        case FunctionEnumType::measurementListData:
            enumName = "measurementListData";
            break;
        case FunctionEnumType::measurementThresholdRelationListData:
            enumName = "measurementThresholdRelationListData";
            break;
        case FunctionEnumType::messagingListData:
            enumName = "messagingListData";
            break;
        case FunctionEnumType::networkManagementAbortCall:
            enumName = "networkManagementAbortCall";
            break;
        case FunctionEnumType::networkManagementAddNodeCall:
            enumName = "networkManagementAddNodeCall";
            break;
        case FunctionEnumType::networkManagementDeviceDescriptionListData:
            enumName = "networkManagementDeviceDescriptionListData";
            break;
        case FunctionEnumType::networkManagementDiscoverCall:
            enumName = "networkManagementDiscoverCall";
            break;
        case FunctionEnumType::networkManagementEntityDescriptionListData:
            enumName = "networkManagementEntityDescriptionListData";
            break;
        case FunctionEnumType::networkManagementFeatureDescriptionListData:
            enumName = "networkManagementFeatureDescriptionListData";
            break;
        case FunctionEnumType::networkManagementJoiningModeData:
            enumName = "networkManagementJoiningModeData";
            break;
        case FunctionEnumType::networkManagementModifyNodeCall:
            enumName = "networkManagementModifyNodeCall";
            break;
        case FunctionEnumType::networkManagementProcessStateData:
            enumName = "networkManagementProcessStateData";
            break;
        case FunctionEnumType::networkManagementRemoveNodeCall:
            enumName = "networkManagementRemoveNodeCall";
            break;
        case FunctionEnumType::networkManagementReportCandidateData:
            enumName = "networkManagementReportCandidateData";
            break;
        case FunctionEnumType::networkManagementScanNetworkCall:
            enumName = "networkManagementScanNetworkCall";
            break;
        case FunctionEnumType::nodeManagementBindingData:
            enumName = "nodeManagementBindingData";
            break;
        case FunctionEnumType::nodeManagementBindingDeleteCall:
            enumName = "nodeManagementBindingDeleteCall";
            break;
        case FunctionEnumType::nodeManagementBindingRequestCall:
            enumName = "nodeManagementBindingRequestCall";
            break;
        case FunctionEnumType::nodeManagementDestinationListData:
            enumName = "nodeManagementDestinationListData";
            break;
        case FunctionEnumType::nodeManagementDetailedDiscoveryData:
            enumName = "nodeManagementDetailedDiscoveryData";
            break;
        case FunctionEnumType::nodeManagementSubscriptionData:
            enumName = "nodeManagementSubscriptionData";
            break;
        case FunctionEnumType::nodeManagementSubscriptionDeleteCall:
            enumName = "nodeManagementSubscriptionDeleteCall";
            break;
        case FunctionEnumType::nodeManagementSubscriptionRequestCall:
            enumName = "nodeManagementSubscriptionRequestCall";
            break;
        case FunctionEnumType::operatingConstraintsDurationListData:
            enumName = "operatingConstraintsDurationListData";
            break;
        case FunctionEnumType::operatingConstraintsInterruptListData:
            enumName = "operatingConstraintsInterruptListData";
            break;
        case FunctionEnumType::operatingConstraintsPowerDescriptionListData:
            enumName = "operatingConstraintsPowerDescriptionListData";
            break;
        case FunctionEnumType::operatingConstraintsPowerLevelListData:
            enumName = "operatingConstraintsPowerLevelListData";
            break;
        case FunctionEnumType::operatingConstraintsPowerRangeListData:
            enumName = "operatingConstraintsPowerRangeListData";
            break;
        case FunctionEnumType::operatingConstraintsResumeImplicationListData:
            enumName = "operatingConstraintsResumeImplicationListData";
            break;
        case FunctionEnumType::powerSequenceAlternativesRelationListData:
            enumName = "powerSequenceAlternativesRelationListData";
            break;
        case FunctionEnumType::powerSequenceDescriptionListData:
            enumName = "powerSequenceDescriptionListData";
            break;
        case FunctionEnumType::powerSequenceNodeScheduleInformationData:
            enumName = "powerSequenceNodeScheduleInformationData";
            break;
        case FunctionEnumType::powerSequencePriceCalculationRequestCall:
            enumName = "powerSequencePriceCalculationRequestCall";
            break;
        case FunctionEnumType::powerSequencePriceListData:
            enumName = "powerSequencePriceListData";
            break;
        case FunctionEnumType::powerSequenceScheduleConfigurationRequestCall:
            enumName = "powerSequenceScheduleConfigurationRequestCall";
            break;
        case FunctionEnumType::powerSequenceScheduleConstraintsListData:
            enumName = "powerSequenceScheduleConstraintsListData";
            break;
        case FunctionEnumType::powerSequenceScheduleListData:
            enumName = "powerSequenceScheduleListData";
            break;
        case FunctionEnumType::powerSequenceSchedulePreferenceListData:
            enumName = "powerSequenceSchedulePreferenceListData";
            break;
        case FunctionEnumType::powerSequenceStateListData:
            enumName = "powerSequenceStateListData";
            break;
        case FunctionEnumType::powerTimeSlotScheduleConstraintsListData:
            enumName = "powerTimeSlotScheduleConstraintsListData";
            break;
        case FunctionEnumType::powerTimeSlotScheduleListData:
            enumName = "powerTimeSlotScheduleListData";
            break;
        case FunctionEnumType::powerTimeSlotValueListData:
            enumName = "powerTimeSlotValueListData";
            break;
        case FunctionEnumType::resultData:
            enumName = "resultData";
            break;
        case FunctionEnumType::sensingDescriptionData:
            enumName = "sensingDescriptionData";
            break;
        case FunctionEnumType::sensingListData:
            enumName = "sensingListData";
            break;
        case FunctionEnumType::sessionIdentificationListData:
            enumName = "sessionIdentificationListData";
            break;
        case FunctionEnumType::sessionMeasurementRelationListData:
            enumName = "sessionMeasurementRelationListData";
            break;
        case FunctionEnumType::setpointConstraintsListData:
            enumName = "setpointConstraintsListData";
            break;
        case FunctionEnumType::setpointDescriptionListData:
            enumName = "setpointDescriptionListData";
            break;
        case FunctionEnumType::setpointListData:
            enumName = "setpointListData";
            break;
        case FunctionEnumType::smartEnergyManagementPsConfigurationRequestCall:
            enumName = "smartEnergyManagementPsConfigurationRequestCall";
            break;
        case FunctionEnumType::smartEnergyManagementPsData:
            enumName = "smartEnergyManagementPsData";
            break;
        case FunctionEnumType::smartEnergyManagementPsPriceCalculationRequestCall:
            enumName = "smartEnergyManagementPsPriceCalculationRequestCall";
            break;
        case FunctionEnumType::smartEnergyManagementPsPriceData:
            enumName = "smartEnergyManagementPsPriceData";
            break;
        case FunctionEnumType::specificationVersionListData:
            enumName = "specificationVersionListData";
            break;
        case FunctionEnumType::subscriptionManagementDeleteCall:
            enumName = "subscriptionManagementDeleteCall";
            break;
        case FunctionEnumType::subscriptionManagementEntryListData:
            enumName = "subscriptionManagementEntryListData";
            break;
        case FunctionEnumType::subscriptionManagementRequestCall:
            enumName = "subscriptionManagementRequestCall";
            break;
        case FunctionEnumType::supplyConditionDescriptionListData:
            enumName = "supplyConditionDescriptionListData";
            break;
        case FunctionEnumType::supplyConditionListData:
            enumName = "supplyConditionListData";
            break;
        case FunctionEnumType::supplyConditionThresholdRelationListData:
            enumName = "supplyConditionThresholdRelationListData";
            break;
        case FunctionEnumType::taskManagementJobDescriptionListData:
            enumName = "taskManagementJobDescriptionListData";
            break;
        case FunctionEnumType::taskManagementJobListData:
            enumName = "taskManagementJobListData";
            break;
        case FunctionEnumType::taskManagementJobRelationListData:
            enumName = "taskManagementJobRelationListData";
            break;
        case FunctionEnumType::taskManagementOverviewData:
            enumName = "taskManagementOverviewData";
            break;
        case FunctionEnumType::thresholdConstraintsListData:
            enumName = "thresholdConstraintsListData";
            break;
        case FunctionEnumType::thresholdDescriptionListData:
            enumName = "thresholdDescriptionListData";
            break;
        case FunctionEnumType::thresholdListData:
            enumName = "thresholdListData";
            break;
        case FunctionEnumType::timeDistributorData:
            enumName = "timeDistributorData";
            break;
        case FunctionEnumType::timeDistributorEnquiryCall:
            enumName = "timeDistributorEnquiryCall";
            break;
        case FunctionEnumType::timeInformationData:
            enumName = "timeInformationData";
            break;
        case FunctionEnumType::timePrecisionData:
            enumName = "timePrecisionData";
            break;
        case FunctionEnumType::timeTableConstraintsListData:
            enumName = "timeTableConstraintsListData";
            break;
        case FunctionEnumType::timeTableDescriptionListData:
            enumName = "timeTableDescriptionListData";
            break;
        case FunctionEnumType::timeTableListData:
            enumName = "timeTableListData";
            break;
        case FunctionEnumType::deviceConfigurationKeyValueConstraintsListData:
            enumName = "deviceConfigurationKeyValueConstraintsListData";
            break;
        case FunctionEnumType::deviceConfigurationKeyValueListData:
            enumName = "deviceConfigurationKeyValueListData";
            break;
        case FunctionEnumType::deviceConfigurationKeyValueDescriptionListData:
            enumName = "deviceConfigurationKeyValueDescriptionListData";
            break;
        case FunctionEnumType::loadControlLimitConstraintsListData:
            enumName = "loadControlLimitConstraintsListData";
            break;
        case FunctionEnumType::loadControlLimitDescriptionListData:
            enumName = "loadControlLimitDescriptionListData";
            break;
        case FunctionEnumType::loadControlLimitListData:
            enumName = "loadControlLimitListData";
            break;
        case FunctionEnumType::loadControlNodeData:
            enumName = "loadControlNodeData";
            break;
        case FunctionEnumType::timeSeriesConstraintsListData:
            enumName = "timeSeriesConstraintsListData";
            break;
        case FunctionEnumType::timeSeriesDescriptionListData:
            enumName = "timeSeriesDescriptionListData";
            break;
        case FunctionEnumType::timeSeriesListData:
            enumName = "timeSeriesListData";
            break;
        case FunctionEnumType::tariffOverallConstraintsData:
            enumName = "tariffOverallConstraintsData";
            break;
        case FunctionEnumType::tariffListData:
            enumName = "tariffListData";
            break;
        case FunctionEnumType::tariffBoundaryRelationListData:
            enumName = "tariffBoundaryRelationListData";
            break;
        case FunctionEnumType::tariffTierRelationListData:
            enumName = "tariffTierRelationListData";
            break;
        case FunctionEnumType::tariffDescriptionListData:
            enumName = "tariffDescriptionListData";
            break;
        case FunctionEnumType::tierBoundaryListData:
            enumName = "tierBoundaryListData";
            break;
        case FunctionEnumType::tierBoundaryDescriptionListData:
            enumName = "tierBoundaryDescriptionListData";
            break;
        case FunctionEnumType::commodityListData:
            enumName = "commodityListData";
            break;
        case FunctionEnumType::tierListData:
            enumName = "tierListData";
            break;
        case FunctionEnumType::tierIncentiveRelationListData:
            enumName = "tierIncentiveRelationListData";
            break;
        case FunctionEnumType::tierDescriptionListData:
            enumName = "tierDescriptionListData";
            break;
        case FunctionEnumType::incentiveListData:
            enumName = "incentiveListData";
            break;
        case FunctionEnumType::incentiveDescriptionListData:
            enumName = "incentiveDescriptionListData";
            break;
        case FunctionEnumType::incentiveTableData:
            enumName = "incentiveTableData";
            break;
        case FunctionEnumType::incentiveTableDescriptionData:
            enumName = "incentiveTableDescriptionData";
            break;
        case FunctionEnumType::incentiveTableConstraintsData:
            enumName = "incentiveTableConstraintsData";
            break;
        case FunctionEnumType::electricalConnectionPermittedValueSetListData:
            enumName = "electricalConnectionPermittedValueSetListData";
            break;
        case FunctionEnumType::useCaseInformationListData:
            enumName = "useCaseInformationListData";
            break;
        case FunctionEnumType::nodeManagementUseCaseData:
            enumName = "nodeManagementUseCaseData";
            break;
        case FunctionEnumType::billConstraintsListData:
            enumName = "billConstraintsListData";
            break;
        case FunctionEnumType::billDescriptionListData:
            enumName = "billDescriptionListData";
            break;
        case FunctionEnumType::billListData:
            enumName = "billListData";
            break;
        case FunctionEnumType::identificationListData:
            enumName = "identificationListData";
            break;
        case FunctionEnumType::measurementSeriesListData:
            enumName = "measurementSeriesListData";
            break;
        case FunctionEnumType::electricalConnectionCharacteristicListData:
            enumName = "electricalConnectionCharacteristicListData";
            break;
        case FunctionEnumType::stateInformationListData:
            enumName = "stateInformationListData";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, FunctionEnumType &dst)
{
    if (src == "actuatorLevelData") {
        dst = FunctionEnumType::actuatorLevelData;
        return;
    }
    if (src == "actuatorLevelDescriptionData") {
        dst = FunctionEnumType::actuatorLevelDescriptionData;
        return;
    }
    if (src == "actuatorSwitchData") {
        dst = FunctionEnumType::actuatorSwitchData;
        return;
    }
    if (src == "actuatorSwitchDescriptionData") {
        dst = FunctionEnumType::actuatorSwitchDescriptionData;
        return;
    }
    if (src == "alarmListData") {
        dst = FunctionEnumType::alarmListData;
        return;
    }
    if (src == "bindingManagementDeleteCall") {
        dst = FunctionEnumType::bindingManagementDeleteCall;
        return;
    }
    if (src == "bindingManagementEntryListData") {
        dst = FunctionEnumType::bindingManagementEntryListData;
        return;
    }
    if (src == "bindingManagementRequestCall") {
        dst = FunctionEnumType::bindingManagementRequestCall;
        return;
    }
    if (src == "dataTunnelingCall") {
        dst = FunctionEnumType::dataTunnelingCall;
        return;
    }
    if (src == "deviceClassificationManufacturerData") {
        dst = FunctionEnumType::deviceClassificationManufacturerData;
        return;
    }
    if (src == "deviceClassificationUserData") {
        dst = FunctionEnumType::deviceClassificationUserData;
        return;
    }
    if (src == "deviceDiagnosisHeartbeatData") {
        dst = FunctionEnumType::deviceDiagnosisHeartbeatData;
        return;
    }
    if (src == "deviceDiagnosisServiceData") {
        dst = FunctionEnumType::deviceDiagnosisServiceData;
        return;
    }
    if (src == "deviceDiagnosisStateData") {
        dst = FunctionEnumType::deviceDiagnosisStateData;
        return;
    }
    if (src == "directControlActivityListData") {
        dst = FunctionEnumType::directControlActivityListData;
        return;
    }
    if (src == "directControlDescriptionData") {
        dst = FunctionEnumType::directControlDescriptionData;
        return;
    }
    if (src == "electricalConnectionDescriptionListData") {
        dst = FunctionEnumType::electricalConnectionDescriptionListData;
        return;
    }
    if (src == "electricalConnectionParameterDescriptionListData") {
        dst = FunctionEnumType::electricalConnectionParameterDescriptionListData;
        return;
    }
    if (src == "electricalConnectionStateListData") {
        dst = FunctionEnumType::electricalConnectionStateListData;
        return;
    }
    if (src == "hvacOperationModeDescriptionListData") {
        dst = FunctionEnumType::hvacOperationModeDescriptionListData;
        return;
    }
    if (src == "hvacOverrunDescriptionListData") {
        dst = FunctionEnumType::hvacOverrunDescriptionListData;
        return;
    }
    if (src == "hvacOverrunListData") {
        dst = FunctionEnumType::hvacOverrunListData;
        return;
    }
    if (src == "hvacSystemFunctionDescriptionListData") {
        dst = FunctionEnumType::hvacSystemFunctionDescriptionListData;
        return;
    }
    if (src == "hvacSystemFunctionListData") {
        dst = FunctionEnumType::hvacSystemFunctionListData;
        return;
    }
    if (src == "hvacSystemFunctionOperationModeRelationListData") {
        dst = FunctionEnumType::hvacSystemFunctionOperationModeRelationListData;
        return;
    }
    if (src == "hvacSystemFunctionPowerSequenceRelationListData") {
        dst = FunctionEnumType::hvacSystemFunctionPowerSequenceRelationListData;
        return;
    }
    if (src == "hvacSystemFunctionSetpointRelationListData") {
        dst = FunctionEnumType::hvacSystemFunctionSetpointRelationListData;
        return;
    }
    if (src == "loadControlEventListData") {
        dst = FunctionEnumType::loadControlEventListData;
        return;
    }
    if (src == "loadControlStateListData") {
        dst = FunctionEnumType::loadControlStateListData;
        return;
    }
    if (src == "measurementConstraintsListData") {
        dst = FunctionEnumType::measurementConstraintsListData;
        return;
    }
    if (src == "measurementDescriptionListData") {
        dst = FunctionEnumType::measurementDescriptionListData;
        return;
    }
    if (src == "measurementListData") {
        dst = FunctionEnumType::measurementListData;
        return;
    }
    if (src == "measurementThresholdRelationListData") {
        dst = FunctionEnumType::measurementThresholdRelationListData;
        return;
    }
    if (src == "messagingListData") {
        dst = FunctionEnumType::messagingListData;
        return;
    }
    if (src == "networkManagementAbortCall") {
        dst = FunctionEnumType::networkManagementAbortCall;
        return;
    }
    if (src == "networkManagementAddNodeCall") {
        dst = FunctionEnumType::networkManagementAddNodeCall;
        return;
    }
    if (src == "networkManagementDeviceDescriptionListData") {
        dst = FunctionEnumType::networkManagementDeviceDescriptionListData;
        return;
    }
    if (src == "networkManagementDiscoverCall") {
        dst = FunctionEnumType::networkManagementDiscoverCall;
        return;
    }
    if (src == "networkManagementEntityDescriptionListData") {
        dst = FunctionEnumType::networkManagementEntityDescriptionListData;
        return;
    }
    if (src == "networkManagementFeatureDescriptionListData") {
        dst = FunctionEnumType::networkManagementFeatureDescriptionListData;
        return;
    }
    if (src == "networkManagementJoiningModeData") {
        dst = FunctionEnumType::networkManagementJoiningModeData;
        return;
    }
    if (src == "networkManagementModifyNodeCall") {
        dst = FunctionEnumType::networkManagementModifyNodeCall;
        return;
    }
    if (src == "networkManagementProcessStateData") {
        dst = FunctionEnumType::networkManagementProcessStateData;
        return;
    }
    if (src == "networkManagementRemoveNodeCall") {
        dst = FunctionEnumType::networkManagementRemoveNodeCall;
        return;
    }
    if (src == "networkManagementReportCandidateData") {
        dst = FunctionEnumType::networkManagementReportCandidateData;
        return;
    }
    if (src == "networkManagementScanNetworkCall") {
        dst = FunctionEnumType::networkManagementScanNetworkCall;
        return;
    }
    if (src == "nodeManagementBindingData") {
        dst = FunctionEnumType::nodeManagementBindingData;
        return;
    }
    if (src == "nodeManagementBindingDeleteCall") {
        dst = FunctionEnumType::nodeManagementBindingDeleteCall;
        return;
    }
    if (src == "nodeManagementBindingRequestCall") {
        dst = FunctionEnumType::nodeManagementBindingRequestCall;
        return;
    }
    if (src == "nodeManagementDestinationListData") {
        dst = FunctionEnumType::nodeManagementDestinationListData;
        return;
    }
    if (src == "nodeManagementDetailedDiscoveryData") {
        dst = FunctionEnumType::nodeManagementDetailedDiscoveryData;
        return;
    }
    if (src == "nodeManagementSubscriptionData") {
        dst = FunctionEnumType::nodeManagementSubscriptionData;
        return;
    }
    if (src == "nodeManagementSubscriptionDeleteCall") {
        dst = FunctionEnumType::nodeManagementSubscriptionDeleteCall;
        return;
    }
    if (src == "nodeManagementSubscriptionRequestCall") {
        dst = FunctionEnumType::nodeManagementSubscriptionRequestCall;
        return;
    }
    if (src == "operatingConstraintsDurationListData") {
        dst = FunctionEnumType::operatingConstraintsDurationListData;
        return;
    }
    if (src == "operatingConstraintsInterruptListData") {
        dst = FunctionEnumType::operatingConstraintsInterruptListData;
        return;
    }
    if (src == "operatingConstraintsPowerDescriptionListData") {
        dst = FunctionEnumType::operatingConstraintsPowerDescriptionListData;
        return;
    }
    if (src == "operatingConstraintsPowerLevelListData") {
        dst = FunctionEnumType::operatingConstraintsPowerLevelListData;
        return;
    }
    if (src == "operatingConstraintsPowerRangeListData") {
        dst = FunctionEnumType::operatingConstraintsPowerRangeListData;
        return;
    }
    if (src == "operatingConstraintsResumeImplicationListData") {
        dst = FunctionEnumType::operatingConstraintsResumeImplicationListData;
        return;
    }
    if (src == "powerSequenceAlternativesRelationListData") {
        dst = FunctionEnumType::powerSequenceAlternativesRelationListData;
        return;
    }
    if (src == "powerSequenceDescriptionListData") {
        dst = FunctionEnumType::powerSequenceDescriptionListData;
        return;
    }
    if (src == "powerSequenceNodeScheduleInformationData") {
        dst = FunctionEnumType::powerSequenceNodeScheduleInformationData;
        return;
    }
    if (src == "powerSequencePriceCalculationRequestCall") {
        dst = FunctionEnumType::powerSequencePriceCalculationRequestCall;
        return;
    }
    if (src == "powerSequencePriceListData") {
        dst = FunctionEnumType::powerSequencePriceListData;
        return;
    }
    if (src == "powerSequenceScheduleConfigurationRequestCall") {
        dst = FunctionEnumType::powerSequenceScheduleConfigurationRequestCall;
        return;
    }
    if (src == "powerSequenceScheduleConstraintsListData") {
        dst = FunctionEnumType::powerSequenceScheduleConstraintsListData;
        return;
    }
    if (src == "powerSequenceScheduleListData") {
        dst = FunctionEnumType::powerSequenceScheduleListData;
        return;
    }
    if (src == "powerSequenceSchedulePreferenceListData") {
        dst = FunctionEnumType::powerSequenceSchedulePreferenceListData;
        return;
    }
    if (src == "powerSequenceStateListData") {
        dst = FunctionEnumType::powerSequenceStateListData;
        return;
    }
    if (src == "powerTimeSlotScheduleConstraintsListData") {
        dst = FunctionEnumType::powerTimeSlotScheduleConstraintsListData;
        return;
    }
    if (src == "powerTimeSlotScheduleListData") {
        dst = FunctionEnumType::powerTimeSlotScheduleListData;
        return;
    }
    if (src == "powerTimeSlotValueListData") {
        dst = FunctionEnumType::powerTimeSlotValueListData;
        return;
    }
    if (src == "resultData") {
        dst = FunctionEnumType::resultData;
        return;
    }
    if (src == "sensingDescriptionData") {
        dst = FunctionEnumType::sensingDescriptionData;
        return;
    }
    if (src == "sensingListData") {
        dst = FunctionEnumType::sensingListData;
        return;
    }
    if (src == "sessionIdentificationListData") {
        dst = FunctionEnumType::sessionIdentificationListData;
        return;
    }
    if (src == "sessionMeasurementRelationListData") {
        dst = FunctionEnumType::sessionMeasurementRelationListData;
        return;
    }
    if (src == "setpointConstraintsListData") {
        dst = FunctionEnumType::setpointConstraintsListData;
        return;
    }
    if (src == "setpointDescriptionListData") {
        dst = FunctionEnumType::setpointDescriptionListData;
        return;
    }
    if (src == "setpointListData") {
        dst = FunctionEnumType::setpointListData;
        return;
    }
    if (src == "smartEnergyManagementPsConfigurationRequestCall") {
        dst = FunctionEnumType::smartEnergyManagementPsConfigurationRequestCall;
        return;
    }
    if (src == "smartEnergyManagementPsData") {
        dst = FunctionEnumType::smartEnergyManagementPsData;
        return;
    }
    if (src == "smartEnergyManagementPsPriceCalculationRequestCall") {
        dst = FunctionEnumType::smartEnergyManagementPsPriceCalculationRequestCall;
        return;
    }
    if (src == "smartEnergyManagementPsPriceData") {
        dst = FunctionEnumType::smartEnergyManagementPsPriceData;
        return;
    }
    if (src == "specificationVersionListData") {
        dst = FunctionEnumType::specificationVersionListData;
        return;
    }
    if (src == "subscriptionManagementDeleteCall") {
        dst = FunctionEnumType::subscriptionManagementDeleteCall;
        return;
    }
    if (src == "subscriptionManagementEntryListData") {
        dst = FunctionEnumType::subscriptionManagementEntryListData;
        return;
    }
    if (src == "subscriptionManagementRequestCall") {
        dst = FunctionEnumType::subscriptionManagementRequestCall;
        return;
    }
    if (src == "supplyConditionDescriptionListData") {
        dst = FunctionEnumType::supplyConditionDescriptionListData;
        return;
    }
    if (src == "supplyConditionListData") {
        dst = FunctionEnumType::supplyConditionListData;
        return;
    }
    if (src == "supplyConditionThresholdRelationListData") {
        dst = FunctionEnumType::supplyConditionThresholdRelationListData;
        return;
    }
    if (src == "taskManagementJobDescriptionListData") {
        dst = FunctionEnumType::taskManagementJobDescriptionListData;
        return;
    }
    if (src == "taskManagementJobListData") {
        dst = FunctionEnumType::taskManagementJobListData;
        return;
    }
    if (src == "taskManagementJobRelationListData") {
        dst = FunctionEnumType::taskManagementJobRelationListData;
        return;
    }
    if (src == "taskManagementOverviewData") {
        dst = FunctionEnumType::taskManagementOverviewData;
        return;
    }
    if (src == "thresholdConstraintsListData") {
        dst = FunctionEnumType::thresholdConstraintsListData;
        return;
    }
    if (src == "thresholdDescriptionListData") {
        dst = FunctionEnumType::thresholdDescriptionListData;
        return;
    }
    if (src == "thresholdListData") {
        dst = FunctionEnumType::thresholdListData;
        return;
    }
    if (src == "timeDistributorData") {
        dst = FunctionEnumType::timeDistributorData;
        return;
    }
    if (src == "timeDistributorEnquiryCall") {
        dst = FunctionEnumType::timeDistributorEnquiryCall;
        return;
    }
    if (src == "timeInformationData") {
        dst = FunctionEnumType::timeInformationData;
        return;
    }
    if (src == "timePrecisionData") {
        dst = FunctionEnumType::timePrecisionData;
        return;
    }
    if (src == "timeTableConstraintsListData") {
        dst = FunctionEnumType::timeTableConstraintsListData;
        return;
    }
    if (src == "timeTableDescriptionListData") {
        dst = FunctionEnumType::timeTableDescriptionListData;
        return;
    }
    if (src == "timeTableListData") {
        dst = FunctionEnumType::timeTableListData;
        return;
    }
    if (src == "deviceConfigurationKeyValueConstraintsListData") {
        dst = FunctionEnumType::deviceConfigurationKeyValueConstraintsListData;
        return;
    }
    if (src == "deviceConfigurationKeyValueListData") {
        dst = FunctionEnumType::deviceConfigurationKeyValueListData;
        return;
    }
    if (src == "deviceConfigurationKeyValueDescriptionListData") {
        dst = FunctionEnumType::deviceConfigurationKeyValueDescriptionListData;
        return;
    }
    if (src == "loadControlLimitConstraintsListData") {
        dst = FunctionEnumType::loadControlLimitConstraintsListData;
        return;
    }
    if (src == "loadControlLimitDescriptionListData") {
        dst = FunctionEnumType::loadControlLimitDescriptionListData;
        return;
    }
    if (src == "loadControlLimitListData") {
        dst = FunctionEnumType::loadControlLimitListData;
        return;
    }
    if (src == "loadControlNodeData") {
        dst = FunctionEnumType::loadControlNodeData;
        return;
    }
    if (src == "timeSeriesConstraintsListData") {
        dst = FunctionEnumType::timeSeriesConstraintsListData;
        return;
    }
    if (src == "timeSeriesDescriptionListData") {
        dst = FunctionEnumType::timeSeriesDescriptionListData;
        return;
    }
    if (src == "timeSeriesListData") {
        dst = FunctionEnumType::timeSeriesListData;
        return;
    }
    if (src == "tariffOverallConstraintsData") {
        dst = FunctionEnumType::tariffOverallConstraintsData;
        return;
    }
    if (src == "tariffListData") {
        dst = FunctionEnumType::tariffListData;
        return;
    }
    if (src == "tariffBoundaryRelationListData") {
        dst = FunctionEnumType::tariffBoundaryRelationListData;
        return;
    }
    if (src == "tariffTierRelationListData") {
        dst = FunctionEnumType::tariffTierRelationListData;
        return;
    }
    if (src == "tariffDescriptionListData") {
        dst = FunctionEnumType::tariffDescriptionListData;
        return;
    }
    if (src == "tierBoundaryListData") {
        dst = FunctionEnumType::tierBoundaryListData;
        return;
    }
    if (src == "tierBoundaryDescriptionListData") {
        dst = FunctionEnumType::tierBoundaryDescriptionListData;
        return;
    }
    if (src == "commodityListData") {
        dst = FunctionEnumType::commodityListData;
        return;
    }
    if (src == "tierListData") {
        dst = FunctionEnumType::tierListData;
        return;
    }
    if (src == "tierIncentiveRelationListData") {
        dst = FunctionEnumType::tierIncentiveRelationListData;
        return;
    }
    if (src == "tierDescriptionListData") {
        dst = FunctionEnumType::tierDescriptionListData;
        return;
    }
    if (src == "incentiveListData") {
        dst = FunctionEnumType::incentiveListData;
        return;
    }
    if (src == "incentiveDescriptionListData") {
        dst = FunctionEnumType::incentiveDescriptionListData;
        return;
    }
    if (src == "incentiveTableData") {
        dst = FunctionEnumType::incentiveTableData;
        return;
    }
    if (src == "incentiveTableDescriptionData") {
        dst = FunctionEnumType::incentiveTableDescriptionData;
        return;
    }
    if (src == "incentiveTableConstraintsData") {
        dst = FunctionEnumType::incentiveTableConstraintsData;
        return;
    }
    if (src == "electricalConnectionPermittedValueSetListData") {
        dst = FunctionEnumType::electricalConnectionPermittedValueSetListData;
        return;
    }
    if (src == "useCaseInformationListData") {
        dst = FunctionEnumType::useCaseInformationListData;
        return;
    }
    if (src == "nodeManagementUseCaseData") {
        dst = FunctionEnumType::nodeManagementUseCaseData;
        return;
    }
    if (src == "billConstraintsListData") {
        dst = FunctionEnumType::billConstraintsListData;
        return;
    }
    if (src == "billDescriptionListData") {
        dst = FunctionEnumType::billDescriptionListData;
        return;
    }
    if (src == "billListData") {
        dst = FunctionEnumType::billListData;
        return;
    }
    if (src == "identificationListData") {
        dst = FunctionEnumType::identificationListData;
        return;
    }
    if (src == "measurementSeriesListData") {
        dst = FunctionEnumType::measurementSeriesListData;
        return;
    }
    if (src == "electricalConnectionCharacteristicListData") {
        dst = FunctionEnumType::electricalConnectionCharacteristicListData;
        return;
    }
    if (src == "stateInformationListData") {
        dst = FunctionEnumType::stateInformationListData;
        return;
    }
    return;
}
bool convertToJson(const TimeSeriesTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case TimeSeriesTypeEnumType::plan:
            enumName = "plan";
            break;
        case TimeSeriesTypeEnumType::singleDemand:
            enumName = "singleDemand";
            break;
        case TimeSeriesTypeEnumType::constraints:
            enumName = "constraints";
            break;
        case TimeSeriesTypeEnumType::energyRequest:
            enumName = "energyRequest";
            break;
        case TimeSeriesTypeEnumType::dischargingEnergyRequest:
            enumName = "dischargingEnergyRequest";
            break;
        case TimeSeriesTypeEnumType::consumptionLimitCurve:
            enumName = "consumptionLimitCurve";
            break;
        case TimeSeriesTypeEnumType::productionLimitCurve:
            enumName = "productionLimitCurve";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesTypeEnumType &dst)
{
    if (src == "plan") {
        dst = TimeSeriesTypeEnumType::plan;
        return;
    }
    if (src == "singleDemand") {
        dst = TimeSeriesTypeEnumType::singleDemand;
        return;
    }
    if (src == "constraints") {
        dst = TimeSeriesTypeEnumType::constraints;
        return;
    }
    if (src == "energyRequest") {
        dst = TimeSeriesTypeEnumType::energyRequest;
        return;
    }
    if (src == "dischargingEnergyRequest") {
        dst = TimeSeriesTypeEnumType::dischargingEnergyRequest;
        return;
    }
    if (src == "consumptionLimitCurve") {
        dst = TimeSeriesTypeEnumType::consumptionLimitCurve;
        return;
    }
    if (src == "productionLimitCurve") {
        dst = TimeSeriesTypeEnumType::productionLimitCurve;
        return;
    }
    return;
}
bool convertToJson(const MeasurementTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MeasurementTypeEnumType::acceleration:
            enumName = "acceleration";
            break;
        case MeasurementTypeEnumType::angle:
            enumName = "angle";
            break;
        case MeasurementTypeEnumType::angularVelocity:
            enumName = "angularVelocity";
            break;
        case MeasurementTypeEnumType::area:
            enumName = "area";
            break;
        case MeasurementTypeEnumType::atmosphericPressure:
            enumName = "atmosphericPressure";
            break;
        case MeasurementTypeEnumType::capacity:
            enumName = "capacity";
            break;
        case MeasurementTypeEnumType::concentration:
            enumName = "concentration";
            break;
        case MeasurementTypeEnumType::count:
            enumName = "count";
            break;
        case MeasurementTypeEnumType::current:
            enumName = "current";
            break;
        case MeasurementTypeEnumType::density:
            enumName = "density";
            break;
        case MeasurementTypeEnumType::distance:
            enumName = "distance";
            break;
        case MeasurementTypeEnumType::electricField:
            enumName = "electricField";
            break;
        case MeasurementTypeEnumType::energy:
            enumName = "energy";
            break;
        case MeasurementTypeEnumType::force:
            enumName = "force";
            break;
        case MeasurementTypeEnumType::frequency:
            enumName = "frequency";
            break;
        case MeasurementTypeEnumType::harmonicDistortion:
            enumName = "harmonicDistortion";
            break;
        case MeasurementTypeEnumType::heat:
            enumName = "heat";
            break;
        case MeasurementTypeEnumType::heatFlux:
            enumName = "heatFlux";
            break;
        case MeasurementTypeEnumType::illuminance:
            enumName = "illuminance";
            break;
        case MeasurementTypeEnumType::impulse:
            enumName = "impulse";
            break;
        case MeasurementTypeEnumType::level:
            enumName = "level";
            break;
        case MeasurementTypeEnumType::magneticField:
            enumName = "magneticField";
            break;
        case MeasurementTypeEnumType::mass:
            enumName = "mass";
            break;
        case MeasurementTypeEnumType::massFlow:
            enumName = "massFlow";
            break;
        case MeasurementTypeEnumType::particles:
            enumName = "particles";
            break;
        case MeasurementTypeEnumType::percentage:
            enumName = "percentage";
            break;
        case MeasurementTypeEnumType::power:
            enumName = "power";
            break;
        case MeasurementTypeEnumType::powerFactor:
            enumName = "powerFactor";
            break;
        case MeasurementTypeEnumType::pressure:
            enumName = "pressure";
            break;
        case MeasurementTypeEnumType::radonActivity:
            enumName = "radonActivity";
            break;
        case MeasurementTypeEnumType::relativeHumidity:
            enumName = "relativeHumidity";
            break;
        case MeasurementTypeEnumType::resistance:
            enumName = "resistance";
            break;
        case MeasurementTypeEnumType::solarRadiation:
            enumName = "solarRadiation";
            break;
        case MeasurementTypeEnumType::speed:
            enumName = "speed";
            break;
        case MeasurementTypeEnumType::temperature:
            enumName = "temperature";
            break;
        case MeasurementTypeEnumType::time:
            enumName = "time";
            break;
        case MeasurementTypeEnumType::torque:
            enumName = "torque";
            break;
        case MeasurementTypeEnumType::unknown:
            enumName = "unknown";
            break;
        case MeasurementTypeEnumType::velocity:
            enumName = "velocity";
            break;
        case MeasurementTypeEnumType::voltage:
            enumName = "voltage";
            break;
        case MeasurementTypeEnumType::volume:
            enumName = "volume";
            break;
        case MeasurementTypeEnumType::volumetricFlow:
            enumName = "volumetricFlow";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MeasurementTypeEnumType &dst)
{
    if (src == "acceleration") {
        dst = MeasurementTypeEnumType::acceleration;
        return;
    }
    if (src == "angle") {
        dst = MeasurementTypeEnumType::angle;
        return;
    }
    if (src == "angularVelocity") {
        dst = MeasurementTypeEnumType::angularVelocity;
        return;
    }
    if (src == "area") {
        dst = MeasurementTypeEnumType::area;
        return;
    }
    if (src == "atmosphericPressure") {
        dst = MeasurementTypeEnumType::atmosphericPressure;
        return;
    }
    if (src == "capacity") {
        dst = MeasurementTypeEnumType::capacity;
        return;
    }
    if (src == "concentration") {
        dst = MeasurementTypeEnumType::concentration;
        return;
    }
    if (src == "count") {
        dst = MeasurementTypeEnumType::count;
        return;
    }
    if (src == "current") {
        dst = MeasurementTypeEnumType::current;
        return;
    }
    if (src == "density") {
        dst = MeasurementTypeEnumType::density;
        return;
    }
    if (src == "distance") {
        dst = MeasurementTypeEnumType::distance;
        return;
    }
    if (src == "electricField") {
        dst = MeasurementTypeEnumType::electricField;
        return;
    }
    if (src == "energy") {
        dst = MeasurementTypeEnumType::energy;
        return;
    }
    if (src == "force") {
        dst = MeasurementTypeEnumType::force;
        return;
    }
    if (src == "frequency") {
        dst = MeasurementTypeEnumType::frequency;
        return;
    }
    if (src == "harmonicDistortion") {
        dst = MeasurementTypeEnumType::harmonicDistortion;
        return;
    }
    if (src == "heat") {
        dst = MeasurementTypeEnumType::heat;
        return;
    }
    if (src == "heatFlux") {
        dst = MeasurementTypeEnumType::heatFlux;
        return;
    }
    if (src == "illuminance") {
        dst = MeasurementTypeEnumType::illuminance;
        return;
    }
    if (src == "impulse") {
        dst = MeasurementTypeEnumType::impulse;
        return;
    }
    if (src == "level") {
        dst = MeasurementTypeEnumType::level;
        return;
    }
    if (src == "magneticField") {
        dst = MeasurementTypeEnumType::magneticField;
        return;
    }
    if (src == "mass") {
        dst = MeasurementTypeEnumType::mass;
        return;
    }
    if (src == "massFlow") {
        dst = MeasurementTypeEnumType::massFlow;
        return;
    }
    if (src == "particles") {
        dst = MeasurementTypeEnumType::particles;
        return;
    }
    if (src == "percentage") {
        dst = MeasurementTypeEnumType::percentage;
        return;
    }
    if (src == "power") {
        dst = MeasurementTypeEnumType::power;
        return;
    }
    if (src == "powerFactor") {
        dst = MeasurementTypeEnumType::powerFactor;
        return;
    }
    if (src == "pressure") {
        dst = MeasurementTypeEnumType::pressure;
        return;
    }
    if (src == "radonActivity") {
        dst = MeasurementTypeEnumType::radonActivity;
        return;
    }
    if (src == "relativeHumidity") {
        dst = MeasurementTypeEnumType::relativeHumidity;
        return;
    }
    if (src == "resistance") {
        dst = MeasurementTypeEnumType::resistance;
        return;
    }
    if (src == "solarRadiation") {
        dst = MeasurementTypeEnumType::solarRadiation;
        return;
    }
    if (src == "speed") {
        dst = MeasurementTypeEnumType::speed;
        return;
    }
    if (src == "temperature") {
        dst = MeasurementTypeEnumType::temperature;
        return;
    }
    if (src == "time") {
        dst = MeasurementTypeEnumType::time;
        return;
    }
    if (src == "torque") {
        dst = MeasurementTypeEnumType::torque;
        return;
    }
    if (src == "unknown") {
        dst = MeasurementTypeEnumType::unknown;
        return;
    }
    if (src == "velocity") {
        dst = MeasurementTypeEnumType::velocity;
        return;
    }
    if (src == "voltage") {
        dst = MeasurementTypeEnumType::voltage;
        return;
    }
    if (src == "volume") {
        dst = MeasurementTypeEnumType::volume;
        return;
    }
    if (src == "volumetricFlow") {
        dst = MeasurementTypeEnumType::volumetricFlow;
        return;
    }
    return;
}
bool convertToJson(const MeasurementValueTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MeasurementValueTypeEnumType::value:
            enumName = "value";
            break;
        case MeasurementValueTypeEnumType::averageValue:
            enumName = "averageValue";
            break;
        case MeasurementValueTypeEnumType::minValue:
            enumName = "minValue";
            break;
        case MeasurementValueTypeEnumType::maxValue:
            enumName = "maxValue";
            break;
        case MeasurementValueTypeEnumType::standardDeviation:
            enumName = "standardDeviation";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MeasurementValueTypeEnumType &dst)
{
    if (src == "value") {
        dst = MeasurementValueTypeEnumType::value;
        return;
    }
    if (src == "averageValue") {
        dst = MeasurementValueTypeEnumType::averageValue;
        return;
    }
    if (src == "minValue") {
        dst = MeasurementValueTypeEnumType::minValue;
        return;
    }
    if (src == "maxValue") {
        dst = MeasurementValueTypeEnumType::maxValue;
        return;
    }
    if (src == "standardDeviation") {
        dst = MeasurementValueTypeEnumType::standardDeviation;
        return;
    }
    return;
}
bool convertToJson(const MeasurementValueSourceEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MeasurementValueSourceEnumType::measuredValue:
            enumName = "measuredValue";
            break;
        case MeasurementValueSourceEnumType::calculatedValue:
            enumName = "calculatedValue";
            break;
        case MeasurementValueSourceEnumType::empiricalValue:
            enumName = "empiricalValue";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MeasurementValueSourceEnumType &dst)
{
    if (src == "measuredValue") {
        dst = MeasurementValueSourceEnumType::measuredValue;
        return;
    }
    if (src == "calculatedValue") {
        dst = MeasurementValueSourceEnumType::calculatedValue;
        return;
    }
    if (src == "empiricalValue") {
        dst = MeasurementValueSourceEnumType::empiricalValue;
        return;
    }
    return;
}
bool convertToJson(const MeasurementValueTendencyEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MeasurementValueTendencyEnumType::rising:
            enumName = "rising";
            break;
        case MeasurementValueTendencyEnumType::stable:
            enumName = "stable";
            break;
        case MeasurementValueTendencyEnumType::falling:
            enumName = "falling";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MeasurementValueTendencyEnumType &dst)
{
    if (src == "rising") {
        dst = MeasurementValueTendencyEnumType::rising;
        return;
    }
    if (src == "stable") {
        dst = MeasurementValueTendencyEnumType::stable;
        return;
    }
    if (src == "falling") {
        dst = MeasurementValueTendencyEnumType::falling;
        return;
    }
    return;
}
bool convertToJson(const MeasurementValueStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case MeasurementValueStateEnumType::normal:
            enumName = "normal";
            break;
        case MeasurementValueStateEnumType::outOfRange:
            enumName = "outOfRange";
            break;
        case MeasurementValueStateEnumType::error:
            enumName = "error";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, MeasurementValueStateEnumType &dst)
{
    if (src == "normal") {
        dst = MeasurementValueStateEnumType::normal;
        return;
    }
    if (src == "outOfRange") {
        dst = MeasurementValueStateEnumType::outOfRange;
        return;
    }
    if (src == "error") {
        dst = MeasurementValueStateEnumType::error;
        return;
    }
    return;
}
bool convertToJson(const ThresholdTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ThresholdTypeEnumType::goodAbove:
            enumName = "goodAbove";
            break;
        case ThresholdTypeEnumType::badAbove:
            enumName = "badAbove";
            break;
        case ThresholdTypeEnumType::goodBelow:
            enumName = "goodBelow";
            break;
        case ThresholdTypeEnumType::badBelow:
            enumName = "badBelow";
            break;
        case ThresholdTypeEnumType::minValueThreshold:
            enumName = "minValueThreshold";
            break;
        case ThresholdTypeEnumType::maxValueThreshold:
            enumName = "maxValueThreshold";
            break;
        case ThresholdTypeEnumType::minValueThresholdExtreme:
            enumName = "minValueThresholdExtreme";
            break;
        case ThresholdTypeEnumType::maxValueThresholdExtreme:
            enumName = "maxValueThresholdExtreme";
            break;
        case ThresholdTypeEnumType::sagThreshold:
            enumName = "sagThreshold";
            break;
        case ThresholdTypeEnumType::swellThreshold:
            enumName = "swellThreshold";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ThresholdTypeEnumType &dst)
{
    if (src == "goodAbove") {
        dst = ThresholdTypeEnumType::goodAbove;
        return;
    }
    if (src == "badAbove") {
        dst = ThresholdTypeEnumType::badAbove;
        return;
    }
    if (src == "goodBelow") {
        dst = ThresholdTypeEnumType::goodBelow;
        return;
    }
    if (src == "badBelow") {
        dst = ThresholdTypeEnumType::badBelow;
        return;
    }
    if (src == "minValueThreshold") {
        dst = ThresholdTypeEnumType::minValueThreshold;
        return;
    }
    if (src == "maxValueThreshold") {
        dst = ThresholdTypeEnumType::maxValueThreshold;
        return;
    }
    if (src == "minValueThresholdExtreme") {
        dst = ThresholdTypeEnumType::minValueThresholdExtreme;
        return;
    }
    if (src == "maxValueThresholdExtreme") {
        dst = ThresholdTypeEnumType::maxValueThresholdExtreme;
        return;
    }
    if (src == "sagThreshold") {
        dst = ThresholdTypeEnumType::sagThreshold;
        return;
    }
    if (src == "swellThreshold") {
        dst = ThresholdTypeEnumType::swellThreshold;
        return;
    }
    return;
}
bool convertToJson(const DirectControlActivityStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DirectControlActivityStateEnumType::running:
            enumName = "running";
            break;
        case DirectControlActivityStateEnumType::paused:
            enumName = "paused";
            break;
        case DirectControlActivityStateEnumType::inactive:
            enumName = "inactive";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DirectControlActivityStateEnumType &dst)
{
    if (src == "running") {
        dst = DirectControlActivityStateEnumType::running;
        return;
    }
    if (src == "paused") {
        dst = DirectControlActivityStateEnumType::paused;
        return;
    }
    if (src == "inactive") {
        dst = DirectControlActivityStateEnumType::inactive;
        return;
    }
    return;
}
bool convertToJson(const PowerTimeSlotValueTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case PowerTimeSlotValueTypeEnumType::power:
            enumName = "power";
            break;
        case PowerTimeSlotValueTypeEnumType::powerMin:
            enumName = "powerMin";
            break;
        case PowerTimeSlotValueTypeEnumType::powerMax:
            enumName = "powerMax";
            break;
        case PowerTimeSlotValueTypeEnumType::powerExpectedValue:
            enumName = "powerExpectedValue";
            break;
        case PowerTimeSlotValueTypeEnumType::powerStandardDeviation:
            enumName = "powerStandardDeviation";
            break;
        case PowerTimeSlotValueTypeEnumType::powerSkewness:
            enumName = "powerSkewness";
            break;
        case PowerTimeSlotValueTypeEnumType::energy:
            enumName = "energy";
            break;
        case PowerTimeSlotValueTypeEnumType::energyMin:
            enumName = "energyMin";
            break;
        case PowerTimeSlotValueTypeEnumType::energyMax:
            enumName = "energyMax";
            break;
        case PowerTimeSlotValueTypeEnumType::energyExpectedValue:
            enumName = "energyExpectedValue";
            break;
        case PowerTimeSlotValueTypeEnumType::energyStandardDeviation:
            enumName = "energyStandardDeviation";
            break;
        case PowerTimeSlotValueTypeEnumType::energySkewness:
            enumName = "energySkewness";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueTypeEnumType &dst)
{
    if (src == "power") {
        dst = PowerTimeSlotValueTypeEnumType::power;
        return;
    }
    if (src == "powerMin") {
        dst = PowerTimeSlotValueTypeEnumType::powerMin;
        return;
    }
    if (src == "powerMax") {
        dst = PowerTimeSlotValueTypeEnumType::powerMax;
        return;
    }
    if (src == "powerExpectedValue") {
        dst = PowerTimeSlotValueTypeEnumType::powerExpectedValue;
        return;
    }
    if (src == "powerStandardDeviation") {
        dst = PowerTimeSlotValueTypeEnumType::powerStandardDeviation;
        return;
    }
    if (src == "powerSkewness") {
        dst = PowerTimeSlotValueTypeEnumType::powerSkewness;
        return;
    }
    if (src == "energy") {
        dst = PowerTimeSlotValueTypeEnumType::energy;
        return;
    }
    if (src == "energyMin") {
        dst = PowerTimeSlotValueTypeEnumType::energyMin;
        return;
    }
    if (src == "energyMax") {
        dst = PowerTimeSlotValueTypeEnumType::energyMax;
        return;
    }
    if (src == "energyExpectedValue") {
        dst = PowerTimeSlotValueTypeEnumType::energyExpectedValue;
        return;
    }
    if (src == "energyStandardDeviation") {
        dst = PowerTimeSlotValueTypeEnumType::energyStandardDeviation;
        return;
    }
    if (src == "energySkewness") {
        dst = PowerTimeSlotValueTypeEnumType::energySkewness;
        return;
    }
    return;
}
bool convertToJson(const PowerSequenceScopeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case PowerSequenceScopeEnumType::forecast:
            enumName = "forecast";
            break;
        case PowerSequenceScopeEnumType::measurement:
            enumName = "measurement";
            break;
        case PowerSequenceScopeEnumType::recommendation:
            enumName = "recommendation";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScopeEnumType &dst)
{
    if (src == "forecast") {
        dst = PowerSequenceScopeEnumType::forecast;
        return;
    }
    if (src == "measurement") {
        dst = PowerSequenceScopeEnumType::measurement;
        return;
    }
    if (src == "recommendation") {
        dst = PowerSequenceScopeEnumType::recommendation;
        return;
    }
    return;
}
bool convertToJson(const PowerSequenceStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case PowerSequenceStateEnumType::running:
            enumName = "running";
            break;
        case PowerSequenceStateEnumType::paused:
            enumName = "paused";
            break;
        case PowerSequenceStateEnumType::scheduled:
            enumName = "scheduled";
            break;
        case PowerSequenceStateEnumType::scheduledPaused:
            enumName = "scheduledPaused";
            break;
        case PowerSequenceStateEnumType::pending:
            enumName = "pending";
            break;
        case PowerSequenceStateEnumType::inactive:
            enumName = "inactive";
            break;
        case PowerSequenceStateEnumType::completed:
            enumName = "completed";
            break;
        case PowerSequenceStateEnumType::invalid:
            enumName = "invalid";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateEnumType &dst)
{
    if (src == "running") {
        dst = PowerSequenceStateEnumType::running;
        return;
    }
    if (src == "paused") {
        dst = PowerSequenceStateEnumType::paused;
        return;
    }
    if (src == "scheduled") {
        dst = PowerSequenceStateEnumType::scheduled;
        return;
    }
    if (src == "scheduledPaused") {
        dst = PowerSequenceStateEnumType::scheduledPaused;
        return;
    }
    if (src == "pending") {
        dst = PowerSequenceStateEnumType::pending;
        return;
    }
    if (src == "inactive") {
        dst = PowerSequenceStateEnumType::inactive;
        return;
    }
    if (src == "completed") {
        dst = PowerSequenceStateEnumType::completed;
        return;
    }
    if (src == "invalid") {
        dst = PowerSequenceStateEnumType::invalid;
        return;
    }
    return;
}
bool convertToJson(const ActuatorLevelFctEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ActuatorLevelFctEnumType::start:
            enumName = "start";
            break;
        case ActuatorLevelFctEnumType::up:
            enumName = "up";
            break;
        case ActuatorLevelFctEnumType::down:
            enumName = "down";
            break;
        case ActuatorLevelFctEnumType::stop:
            enumName = "stop";
            break;
        case ActuatorLevelFctEnumType::percentageAbsolute:
            enumName = "percentageAbsolute";
            break;
        case ActuatorLevelFctEnumType::percentageRelative:
            enumName = "percentageRelative";
            break;
        case ActuatorLevelFctEnumType::absolute:
            enumName = "absolute";
            break;
        case ActuatorLevelFctEnumType::relative:
            enumName = "relative";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ActuatorLevelFctEnumType &dst)
{
    if (src == "start") {
        dst = ActuatorLevelFctEnumType::start;
        return;
    }
    if (src == "up") {
        dst = ActuatorLevelFctEnumType::up;
        return;
    }
    if (src == "down") {
        dst = ActuatorLevelFctEnumType::down;
        return;
    }
    if (src == "stop") {
        dst = ActuatorLevelFctEnumType::stop;
        return;
    }
    if (src == "percentageAbsolute") {
        dst = ActuatorLevelFctEnumType::percentageAbsolute;
        return;
    }
    if (src == "percentageRelative") {
        dst = ActuatorLevelFctEnumType::percentageRelative;
        return;
    }
    if (src == "absolute") {
        dst = ActuatorLevelFctEnumType::absolute;
        return;
    }
    if (src == "relative") {
        dst = ActuatorLevelFctEnumType::relative;
        return;
    }
    return;
}
bool convertToJson(const CmdClassifierType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case CmdClassifierType::read:
            enumName = "read";
            break;
        case CmdClassifierType::reply:
            enumName = "reply";
            break;
        case CmdClassifierType::notify:
            enumName = "notify";
            break;
        case CmdClassifierType::write:
            enumName = "write";
            break;
        case CmdClassifierType::call:
            enumName = "call";
            break;
        case CmdClassifierType::result:
            enumName = "result";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, CmdClassifierType &dst)
{
    if (src == "read") {
        dst = CmdClassifierType::read;
        return;
    }
    if (src == "reply") {
        dst = CmdClassifierType::reply;
        return;
    }
    if (src == "notify") {
        dst = CmdClassifierType::notify;
        return;
    }
    if (src == "write") {
        dst = CmdClassifierType::write;
        return;
    }
    if (src == "call") {
        dst = CmdClassifierType::call;
        return;
    }
    if (src == "result") {
        dst = CmdClassifierType::result;
        return;
    }
    return;
}
bool convertToJson(const ActuatorSwitchFctEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ActuatorSwitchFctEnumType::on:
            enumName = "on";
            break;
        case ActuatorSwitchFctEnumType::off:
            enumName = "off";
            break;
        case ActuatorSwitchFctEnumType::toggle:
            enumName = "toggle";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchFctEnumType &dst)
{
    if (src == "on") {
        dst = ActuatorSwitchFctEnumType::on;
        return;
    }
    if (src == "off") {
        dst = ActuatorSwitchFctEnumType::off;
        return;
    }
    if (src == "toggle") {
        dst = ActuatorSwitchFctEnumType::toggle;
        return;
    }
    return;
}
bool convertToJson(const AlarmTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case AlarmTypeEnumType::alarmCancelled:
            enumName = "alarmCancelled";
            break;
        case AlarmTypeEnumType::underThreshold:
            enumName = "underThreshold";
            break;
        case AlarmTypeEnumType::overThreshold:
            enumName = "overThreshold";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, AlarmTypeEnumType &dst)
{
    if (src == "alarmCancelled") {
        dst = AlarmTypeEnumType::alarmCancelled;
        return;
    }
    if (src == "underThreshold") {
        dst = AlarmTypeEnumType::underThreshold;
        return;
    }
    if (src == "overThreshold") {
        dst = AlarmTypeEnumType::overThreshold;
        return;
    }
    return;
}
bool convertToJson(const BillTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case BillTypeEnumType::chargingSummary:
            enumName = "chargingSummary";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, BillTypeEnumType &dst)
{
    if (src == "chargingSummary") {
        dst = BillTypeEnumType::chargingSummary;
        return;
    }
    return;
}
bool convertToJson(const BillPositionTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case BillPositionTypeEnumType::gridElectricEnergy:
            enumName = "gridElectricEnergy";
            break;
        case BillPositionTypeEnumType::selfProducedElectricEnergy:
            enumName = "selfProducedElectricEnergy";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, BillPositionTypeEnumType &dst)
{
    if (src == "gridElectricEnergy") {
        dst = BillPositionTypeEnumType::gridElectricEnergy;
        return;
    }
    if (src == "selfProducedElectricEnergy") {
        dst = BillPositionTypeEnumType::selfProducedElectricEnergy;
        return;
    }
    return;
}
bool convertToJson(const BillCostTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case BillCostTypeEnumType::absolutePrice:
            enumName = "absolutePrice";
            break;
        case BillCostTypeEnumType::relativePrice:
            enumName = "relativePrice";
            break;
        case BillCostTypeEnumType::co2Emission:
            enumName = "co2Emission";
            break;
        case BillCostTypeEnumType::renewableEnergy:
            enumName = "renewableEnergy";
            break;
        case BillCostTypeEnumType::radioactiveWaste:
            enumName = "radioactiveWaste";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, BillCostTypeEnumType &dst)
{
    if (src == "absolutePrice") {
        dst = BillCostTypeEnumType::absolutePrice;
        return;
    }
    if (src == "relativePrice") {
        dst = BillCostTypeEnumType::relativePrice;
        return;
    }
    if (src == "co2Emission") {
        dst = BillCostTypeEnumType::co2Emission;
        return;
    }
    if (src == "renewableEnergy") {
        dst = BillCostTypeEnumType::renewableEnergy;
        return;
    }
    if (src == "radioactiveWaste") {
        dst = BillCostTypeEnumType::radioactiveWaste;
        return;
    }
    return;
}
bool convertToJson(const IdentificationTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case IdentificationTypeEnumType::eui48:
            enumName = "eui48";
            break;
        case IdentificationTypeEnumType::eui64:
            enumName = "eui64";
            break;
        case IdentificationTypeEnumType::userRfidTag:
            enumName = "userRfidTag";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, IdentificationTypeEnumType &dst)
{
    if (src == "eui48") {
        dst = IdentificationTypeEnumType::eui48;
        return;
    }
    if (src == "eui64") {
        dst = IdentificationTypeEnumType::eui64;
        return;
    }
    if (src == "userRfidTag") {
        dst = IdentificationTypeEnumType::userRfidTag;
        return;
    }
    return;
}
bool convertToJson(const PowerSourceEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case PowerSourceEnumType::unknown:
            enumName = "unknown";
            break;
        case PowerSourceEnumType::mainsSinglePhase:
            enumName = "mainsSinglePhase";
            break;
        case PowerSourceEnumType::mains3Phase:
            enumName = "mains3Phase";
            break;
        case PowerSourceEnumType::battery:
            enumName = "battery";
            break;
        case PowerSourceEnumType::dc:
            enumName = "dc";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, PowerSourceEnumType &dst)
{
    if (src == "unknown") {
        dst = PowerSourceEnumType::unknown;
        return;
    }
    if (src == "mainsSinglePhase") {
        dst = PowerSourceEnumType::mainsSinglePhase;
        return;
    }
    if (src == "mains3Phase") {
        dst = PowerSourceEnumType::mains3Phase;
        return;
    }
    if (src == "battery") {
        dst = PowerSourceEnumType::battery;
        return;
    }
    if (src == "dc") {
        dst = PowerSourceEnumType::dc;
        return;
    }
    return;
}
bool convertToJson(const DeviceConfigurationKeyNameEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DeviceConfigurationKeyNameEnumType::peakPowerOfPvSystem:
            enumName = "peakPowerOfPvSystem";
            break;
        case DeviceConfigurationKeyNameEnumType::pvCurtailmentLimitFactor:
            enumName = "pvCurtailmentLimitFactor";
            break;
        case DeviceConfigurationKeyNameEnumType::asymmetricChargingSupported:
            enumName = "asymmetricChargingSupported";
            break;
        case DeviceConfigurationKeyNameEnumType::communicationsStandard:
            enumName = "communicationsStandard";
            break;
        case DeviceConfigurationKeyNameEnumType::inverterGridCode:
            enumName = "inverterGridCode";
            break;
        case DeviceConfigurationKeyNameEnumType::pvStringAvailabilityStatus:
            enumName = "pvStringAvailabilityStatus";
            break;
        case DeviceConfigurationKeyNameEnumType::batteryAvailabilityStatus:
            enumName = "batteryAvailabilityStatus";
            break;
        case DeviceConfigurationKeyNameEnumType::gridConnectionStatus:
            enumName = "gridConnectionStatus";
            break;
        case DeviceConfigurationKeyNameEnumType::timeToAcChargePowerMax:
            enumName = "timeToAcChargePowerMax";
            break;
        case DeviceConfigurationKeyNameEnumType::timeToAcDischargePowerMax:
            enumName = "timeToAcDischargePowerMax";
            break;
        case DeviceConfigurationKeyNameEnumType::tilt:
            enumName = "tilt";
            break;
        case DeviceConfigurationKeyNameEnumType::azimuth:
            enumName = "azimuth";
            break;
        case DeviceConfigurationKeyNameEnumType::batteryType:
            enumName = "batteryType";
            break;
        case DeviceConfigurationKeyNameEnumType::maxCycleCountPerDay:
            enumName = "maxCycleCountPerDay";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeConsumptionActivePowerLimit:
            enumName = "failsafeConsumptionActivePowerLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeProductionActivePowerLimit:
            enumName = "failsafeProductionActivePowerLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafePositiveReactivePowerLimit:
            enumName = "failsafePositiveReactivePowerLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeNegativeReactivePowerLimit:
            enumName = "failsafeNegativeReactivePowerLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafePositiveCosPhiLimit:
            enumName = "failsafePositiveCosPhiLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeNegativeCosPhiLimit:
            enumName = "failsafeNegativeCosPhiLimit";
            break;
        case DeviceConfigurationKeyNameEnumType::maxAcChargePower:
            enumName = "maxAcChargePower";
            break;
        case DeviceConfigurationKeyNameEnumType::maxAcDischargePower:
            enumName = "maxAcDischargePower";
            break;
        case DeviceConfigurationKeyNameEnumType::maxDcChargePower:
            enumName = "maxDcChargePower";
            break;
        case DeviceConfigurationKeyNameEnumType::maxDcDischargePower:
            enumName = "maxDcDischargePower";
            break;
        case DeviceConfigurationKeyNameEnumType::batteryActiveControlMode:
            enumName = "batteryActiveControlMode";
            break;
        case DeviceConfigurationKeyNameEnumType::defaultAcPower:
            enumName = "defaultAcPower";
            break;
        case DeviceConfigurationKeyNameEnumType::defaultDcPower:
            enumName = "defaultDcPower";
            break;
        case DeviceConfigurationKeyNameEnumType::defaultPccPower:
            enumName = "defaultPccPower";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeAcPowerSetpoint:
            enumName = "failsafeAcPowerSetpoint";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeDcPowerSetpoint:
            enumName = "failsafeDcPowerSetpoint";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafePccPowerSetpoint:
            enumName = "failsafePccPowerSetpoint";
            break;
        case DeviceConfigurationKeyNameEnumType::failsafeDurationMinimum:
            enumName = "failsafeDurationMinimum";
            break;
        case DeviceConfigurationKeyNameEnumType::dischargingBelowTargetEnergyRequestPermitted:
            enumName = "dischargingBelowTargetEnergyRequestPermitted";
            break;
        case DeviceConfigurationKeyNameEnumType::incentivesSimulationCyclesMax:
            enumName = "incentivesSimulationCyclesMax";
            break;
        case DeviceConfigurationKeyNameEnumType::incentivesSimulationConcurrent:
            enumName = "incentivesSimulationConcurrent";
            break;
        case DeviceConfigurationKeyNameEnumType::incentivesTimeoutIncentiveRequest:
            enumName = "incentivesTimeoutIncentiveRequest";
            break;
        case DeviceConfigurationKeyNameEnumType::incentivesWaitIncentiveWriteable:
            enumName = "incentivesWaitIncentiveWriteable";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyNameEnumType &dst)
{
    if (src == "peakPowerOfPvSystem") {
        dst = DeviceConfigurationKeyNameEnumType::peakPowerOfPvSystem;
        return;
    }
    if (src == "pvCurtailmentLimitFactor") {
        dst = DeviceConfigurationKeyNameEnumType::pvCurtailmentLimitFactor;
        return;
    }
    if (src == "asymmetricChargingSupported") {
        dst = DeviceConfigurationKeyNameEnumType::asymmetricChargingSupported;
        return;
    }
    if (src == "communicationsStandard") {
        dst = DeviceConfigurationKeyNameEnumType::communicationsStandard;
        return;
    }
    if (src == "inverterGridCode") {
        dst = DeviceConfigurationKeyNameEnumType::inverterGridCode;
        return;
    }
    if (src == "pvStringAvailabilityStatus") {
        dst = DeviceConfigurationKeyNameEnumType::pvStringAvailabilityStatus;
        return;
    }
    if (src == "batteryAvailabilityStatus") {
        dst = DeviceConfigurationKeyNameEnumType::batteryAvailabilityStatus;
        return;
    }
    if (src == "gridConnectionStatus") {
        dst = DeviceConfigurationKeyNameEnumType::gridConnectionStatus;
        return;
    }
    if (src == "timeToAcChargePowerMax") {
        dst = DeviceConfigurationKeyNameEnumType::timeToAcChargePowerMax;
        return;
    }
    if (src == "timeToAcDischargePowerMax") {
        dst = DeviceConfigurationKeyNameEnumType::timeToAcDischargePowerMax;
        return;
    }
    if (src == "tilt") {
        dst = DeviceConfigurationKeyNameEnumType::tilt;
        return;
    }
    if (src == "azimuth") {
        dst = DeviceConfigurationKeyNameEnumType::azimuth;
        return;
    }
    if (src == "batteryType") {
        dst = DeviceConfigurationKeyNameEnumType::batteryType;
        return;
    }
    if (src == "maxCycleCountPerDay") {
        dst = DeviceConfigurationKeyNameEnumType::maxCycleCountPerDay;
        return;
    }
    if (src == "failsafeConsumptionActivePowerLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeConsumptionActivePowerLimit;
        return;
    }
    if (src == "failsafeProductionActivePowerLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeProductionActivePowerLimit;
        return;
    }
    if (src == "failsafePositiveReactivePowerLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafePositiveReactivePowerLimit;
        return;
    }
    if (src == "failsafeNegativeReactivePowerLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeNegativeReactivePowerLimit;
        return;
    }
    if (src == "failsafePositiveCosPhiLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafePositiveCosPhiLimit;
        return;
    }
    if (src == "failsafeNegativeCosPhiLimit") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeNegativeCosPhiLimit;
        return;
    }
    if (src == "maxAcChargePower") {
        dst = DeviceConfigurationKeyNameEnumType::maxAcChargePower;
        return;
    }
    if (src == "maxAcDischargePower") {
        dst = DeviceConfigurationKeyNameEnumType::maxAcDischargePower;
        return;
    }
    if (src == "maxDcChargePower") {
        dst = DeviceConfigurationKeyNameEnumType::maxDcChargePower;
        return;
    }
    if (src == "maxDcDischargePower") {
        dst = DeviceConfigurationKeyNameEnumType::maxDcDischargePower;
        return;
    }
    if (src == "batteryActiveControlMode") {
        dst = DeviceConfigurationKeyNameEnumType::batteryActiveControlMode;
        return;
    }
    if (src == "defaultAcPower") {
        dst = DeviceConfigurationKeyNameEnumType::defaultAcPower;
        return;
    }
    if (src == "defaultDcPower") {
        dst = DeviceConfigurationKeyNameEnumType::defaultDcPower;
        return;
    }
    if (src == "defaultPccPower") {
        dst = DeviceConfigurationKeyNameEnumType::defaultPccPower;
        return;
    }
    if (src == "failsafeAcPowerSetpoint") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeAcPowerSetpoint;
        return;
    }
    if (src == "failsafeDcPowerSetpoint") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeDcPowerSetpoint;
        return;
    }
    if (src == "failsafePccPowerSetpoint") {
        dst = DeviceConfigurationKeyNameEnumType::failsafePccPowerSetpoint;
        return;
    }
    if (src == "failsafeDurationMinimum") {
        dst = DeviceConfigurationKeyNameEnumType::failsafeDurationMinimum;
        return;
    }
    if (src == "dischargingBelowTargetEnergyRequestPermitted") {
        dst = DeviceConfigurationKeyNameEnumType::dischargingBelowTargetEnergyRequestPermitted;
        return;
    }
    if (src == "incentivesSimulationCyclesMax") {
        dst = DeviceConfigurationKeyNameEnumType::incentivesSimulationCyclesMax;
        return;
    }
    if (src == "incentivesSimulationConcurrent") {
        dst = DeviceConfigurationKeyNameEnumType::incentivesSimulationConcurrent;
        return;
    }
    if (src == "incentivesTimeoutIncentiveRequest") {
        dst = DeviceConfigurationKeyNameEnumType::incentivesTimeoutIncentiveRequest;
        return;
    }
    if (src == "incentivesWaitIncentiveWriteable") {
        dst = DeviceConfigurationKeyNameEnumType::incentivesWaitIncentiveWriteable;
        return;
    }
    return;
}
bool convertToJson(const DeviceConfigurationKeyValueTypeType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DeviceConfigurationKeyValueTypeType::boolean:
            enumName = "boolean";
            break;
        case DeviceConfigurationKeyValueTypeType::date:
            enumName = "date";
            break;
        case DeviceConfigurationKeyValueTypeType::dateTime:
            enumName = "dateTime";
            break;
        case DeviceConfigurationKeyValueTypeType::duration:
            enumName = "duration";
            break;
        case DeviceConfigurationKeyValueTypeType::string:
            enumName = "string";
            break;
        case DeviceConfigurationKeyValueTypeType::time:
            enumName = "time";
            break;
        case DeviceConfigurationKeyValueTypeType::scaledNumber:
            enumName = "scaledNumber";
            break;
        case DeviceConfigurationKeyValueTypeType::integer:
            enumName = "integer";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueTypeType &dst)
{
    if (src == "boolean") {
        dst = DeviceConfigurationKeyValueTypeType::boolean;
        return;
    }
    if (src == "date") {
        dst = DeviceConfigurationKeyValueTypeType::date;
        return;
    }
    if (src == "dateTime") {
        dst = DeviceConfigurationKeyValueTypeType::dateTime;
        return;
    }
    if (src == "duration") {
        dst = DeviceConfigurationKeyValueTypeType::duration;
        return;
    }
    if (src == "string") {
        dst = DeviceConfigurationKeyValueTypeType::string;
        return;
    }
    if (src == "time") {
        dst = DeviceConfigurationKeyValueTypeType::time;
        return;
    }
    if (src == "scaledNumber") {
        dst = DeviceConfigurationKeyValueTypeType::scaledNumber;
        return;
    }
    if (src == "integer") {
        dst = DeviceConfigurationKeyValueTypeType::integer;
        return;
    }
    return;
}
bool convertToJson(const DeviceDiagnosisOperatingStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case DeviceDiagnosisOperatingStateEnumType::normalOperation:
            enumName = "normalOperation";
            break;
        case DeviceDiagnosisOperatingStateEnumType::standby:
            enumName = "standby";
            break;
        case DeviceDiagnosisOperatingStateEnumType::failure:
            enumName = "failure";
            break;
        case DeviceDiagnosisOperatingStateEnumType::serviceNeeded:
            enumName = "serviceNeeded";
            break;
        case DeviceDiagnosisOperatingStateEnumType::overrideDetected:
            enumName = "overrideDetected";
            break;
        case DeviceDiagnosisOperatingStateEnumType::inAlarm:
            enumName = "inAlarm";
            break;
        case DeviceDiagnosisOperatingStateEnumType::notReachable:
            enumName = "notReachable";
            break;
        case DeviceDiagnosisOperatingStateEnumType::finished:
            enumName = "finished";
            break;
        case DeviceDiagnosisOperatingStateEnumType::temporarilyNotReady:
            enumName = "temporarilyNotReady";
            break;
        case DeviceDiagnosisOperatingStateEnumType::off:
            enumName = "off";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisOperatingStateEnumType &dst)
{
    if (src == "normalOperation") {
        dst = DeviceDiagnosisOperatingStateEnumType::normalOperation;
        return;
    }
    if (src == "standby") {
        dst = DeviceDiagnosisOperatingStateEnumType::standby;
        return;
    }
    if (src == "failure") {
        dst = DeviceDiagnosisOperatingStateEnumType::failure;
        return;
    }
    if (src == "serviceNeeded") {
        dst = DeviceDiagnosisOperatingStateEnumType::serviceNeeded;
        return;
    }
    if (src == "overrideDetected") {
        dst = DeviceDiagnosisOperatingStateEnumType::overrideDetected;
        return;
    }
    if (src == "inAlarm") {
        dst = DeviceDiagnosisOperatingStateEnumType::inAlarm;
        return;
    }
    if (src == "notReachable") {
        dst = DeviceDiagnosisOperatingStateEnumType::notReachable;
        return;
    }
    if (src == "finished") {
        dst = DeviceDiagnosisOperatingStateEnumType::finished;
        return;
    }
    if (src == "temporarilyNotReady") {
        dst = DeviceDiagnosisOperatingStateEnumType::temporarilyNotReady;
        return;
    }
    if (src == "off") {
        dst = DeviceDiagnosisOperatingStateEnumType::off;
        return;
    }
    return;
}
bool convertToJson(const PowerSupplyConditionEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case PowerSupplyConditionEnumType::good:
            enumName = "good";
            break;
        case PowerSupplyConditionEnumType::low:
            enumName = "low";
            break;
        case PowerSupplyConditionEnumType::critical:
            enumName = "critical";
            break;
        case PowerSupplyConditionEnumType::unknown:
            enumName = "unknown";
            break;
        case PowerSupplyConditionEnumType::error:
            enumName = "error";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, PowerSupplyConditionEnumType &dst)
{
    if (src == "good") {
        dst = PowerSupplyConditionEnumType::good;
        return;
    }
    if (src == "low") {
        dst = PowerSupplyConditionEnumType::low;
        return;
    }
    if (src == "critical") {
        dst = PowerSupplyConditionEnumType::critical;
        return;
    }
    if (src == "unknown") {
        dst = PowerSupplyConditionEnumType::unknown;
        return;
    }
    if (src == "error") {
        dst = PowerSupplyConditionEnumType::error;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionMeasurandVariantEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionMeasurandVariantEnumType::amplitude:
            enumName = "amplitude";
            break;
        case ElectricalConnectionMeasurandVariantEnumType::rms:
            enumName = "rms";
            break;
        case ElectricalConnectionMeasurandVariantEnumType::instantaneous:
            enumName = "instantaneous";
            break;
        case ElectricalConnectionMeasurandVariantEnumType::angle:
            enumName = "angle";
            break;
        case ElectricalConnectionMeasurandVariantEnumType::cosPhi:
            enumName = "cosPhi";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionMeasurandVariantEnumType &dst)
{
    if (src == "amplitude") {
        dst = ElectricalConnectionMeasurandVariantEnumType::amplitude;
        return;
    }
    if (src == "rms") {
        dst = ElectricalConnectionMeasurandVariantEnumType::rms;
        return;
    }
    if (src == "instantaneous") {
        dst = ElectricalConnectionMeasurandVariantEnumType::instantaneous;
        return;
    }
    if (src == "angle") {
        dst = ElectricalConnectionMeasurandVariantEnumType::angle;
        return;
    }
    if (src == "cosPhi") {
        dst = ElectricalConnectionMeasurandVariantEnumType::cosPhi;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionVoltageTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionVoltageTypeEnumType::ac:
            enumName = "ac";
            break;
        case ElectricalConnectionVoltageTypeEnumType::dc:
            enumName = "dc";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionVoltageTypeEnumType &dst)
{
    if (src == "ac") {
        dst = ElectricalConnectionVoltageTypeEnumType::ac;
        return;
    }
    if (src == "dc") {
        dst = ElectricalConnectionVoltageTypeEnumType::dc;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionAcMeasurementTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionAcMeasurementTypeEnumType::real:
            enumName = "real";
            break;
        case ElectricalConnectionAcMeasurementTypeEnumType::reactive:
            enumName = "reactive";
            break;
        case ElectricalConnectionAcMeasurementTypeEnumType::apparent:
            enumName = "apparent";
            break;
        case ElectricalConnectionAcMeasurementTypeEnumType::phase:
            enumName = "phase";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionAcMeasurementTypeEnumType &dst)
{
    if (src == "real") {
        dst = ElectricalConnectionAcMeasurementTypeEnumType::real;
        return;
    }
    if (src == "reactive") {
        dst = ElectricalConnectionAcMeasurementTypeEnumType::reactive;
        return;
    }
    if (src == "apparent") {
        dst = ElectricalConnectionAcMeasurementTypeEnumType::apparent;
        return;
    }
    if (src == "phase") {
        dst = ElectricalConnectionAcMeasurementTypeEnumType::phase;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionPhaseNameEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionPhaseNameEnumType::a:
            enumName = "a";
            break;
        case ElectricalConnectionPhaseNameEnumType::b:
            enumName = "b";
            break;
        case ElectricalConnectionPhaseNameEnumType::c:
            enumName = "c";
            break;
        case ElectricalConnectionPhaseNameEnumType::ab:
            enumName = "ab";
            break;
        case ElectricalConnectionPhaseNameEnumType::bc:
            enumName = "bc";
            break;
        case ElectricalConnectionPhaseNameEnumType::ac:
            enumName = "ac";
            break;
        case ElectricalConnectionPhaseNameEnumType::abc:
            enumName = "abc";
            break;
        case ElectricalConnectionPhaseNameEnumType::neutral:
            enumName = "neutral";
            break;
        case ElectricalConnectionPhaseNameEnumType::ground:
            enumName = "ground";
            break;
        case ElectricalConnectionPhaseNameEnumType::none:
            enumName = "none";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPhaseNameEnumType &dst)
{
    if (src == "a") {
        dst = ElectricalConnectionPhaseNameEnumType::a;
        return;
    }
    if (src == "b") {
        dst = ElectricalConnectionPhaseNameEnumType::b;
        return;
    }
    if (src == "c") {
        dst = ElectricalConnectionPhaseNameEnumType::c;
        return;
    }
    if (src == "ab") {
        dst = ElectricalConnectionPhaseNameEnumType::ab;
        return;
    }
    if (src == "bc") {
        dst = ElectricalConnectionPhaseNameEnumType::bc;
        return;
    }
    if (src == "ac") {
        dst = ElectricalConnectionPhaseNameEnumType::ac;
        return;
    }
    if (src == "abc") {
        dst = ElectricalConnectionPhaseNameEnumType::abc;
        return;
    }
    if (src == "neutral") {
        dst = ElectricalConnectionPhaseNameEnumType::neutral;
        return;
    }
    if (src == "ground") {
        dst = ElectricalConnectionPhaseNameEnumType::ground;
        return;
    }
    if (src == "none") {
        dst = ElectricalConnectionPhaseNameEnumType::none;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionConnectionPointType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionConnectionPointType::grid:
            enumName = "grid";
            break;
        case ElectricalConnectionConnectionPointType::home:
            enumName = "home";
            break;
        case ElectricalConnectionConnectionPointType::pv:
            enumName = "pv";
            break;
        case ElectricalConnectionConnectionPointType::sd:
            enumName = "sd";
            break;
        case ElectricalConnectionConnectionPointType::other:
            enumName = "other";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionConnectionPointType &dst)
{
    if (src == "grid") {
        dst = ElectricalConnectionConnectionPointType::grid;
        return;
    }
    if (src == "home") {
        dst = ElectricalConnectionConnectionPointType::home;
        return;
    }
    if (src == "pv") {
        dst = ElectricalConnectionConnectionPointType::pv;
        return;
    }
    if (src == "sd") {
        dst = ElectricalConnectionConnectionPointType::sd;
        return;
    }
    if (src == "other") {
        dst = ElectricalConnectionConnectionPointType::other;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionCharacteristicContextEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionCharacteristicContextEnumType::device:
            enumName = "device";
            break;
        case ElectricalConnectionCharacteristicContextEnumType::entity:
            enumName = "entity";
            break;
        case ElectricalConnectionCharacteristicContextEnumType::inverter:
            enumName = "inverter";
            break;
        case ElectricalConnectionCharacteristicContextEnumType::pvString:
            enumName = "pvString";
            break;
        case ElectricalConnectionCharacteristicContextEnumType::battery:
            enumName = "battery";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicContextEnumType &dst)
{
    if (src == "device") {
        dst = ElectricalConnectionCharacteristicContextEnumType::device;
        return;
    }
    if (src == "entity") {
        dst = ElectricalConnectionCharacteristicContextEnumType::entity;
        return;
    }
    if (src == "inverter") {
        dst = ElectricalConnectionCharacteristicContextEnumType::inverter;
        return;
    }
    if (src == "pvString") {
        dst = ElectricalConnectionCharacteristicContextEnumType::pvString;
        return;
    }
    if (src == "battery") {
        dst = ElectricalConnectionCharacteristicContextEnumType::battery;
        return;
    }
    return;
}
bool convertToJson(const ElectricalConnectionCharacteristicTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMin:
            enumName = "powerConsumptionMin";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMax:
            enumName = "powerConsumptionMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMin:
            enumName = "powerConsumptionNominalMin";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMax:
            enumName = "powerConsumptionNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerProductionMin:
            enumName = "powerProductionMin";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerProductionMax:
            enumName = "powerProductionMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMin:
            enumName = "powerProductionNominalMin";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMax:
            enumName = "powerProductionNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::energyCapacityNominalMax:
            enumName = "energyCapacityNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::contractualConsumptionNominalMax:
            enumName = "contractualConsumptionNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::contractualProductionNominalMax:
            enumName = "contractualProductionNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::apparentPowerProductionNominalMax:
            enumName = "apparentPowerProductionNominalMax";
            break;
        case ElectricalConnectionCharacteristicTypeEnumType::apparentPowerConsumptionNominalMax:
            enumName = "apparentPowerConsumptionNominalMax";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicTypeEnumType &dst)
{
    if (src == "powerConsumptionMin") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMin;
        return;
    }
    if (src == "powerConsumptionMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMax;
        return;
    }
    if (src == "powerConsumptionNominalMin") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMin;
        return;
    }
    if (src == "powerConsumptionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMax;
        return;
    }
    if (src == "powerProductionMin") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerProductionMin;
        return;
    }
    if (src == "powerProductionMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerProductionMax;
        return;
    }
    if (src == "powerProductionNominalMin") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMin;
        return;
    }
    if (src == "powerProductionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMax;
        return;
    }
    if (src == "energyCapacityNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::energyCapacityNominalMax;
        return;
    }
    if (src == "contractualConsumptionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::contractualConsumptionNominalMax;
        return;
    }
    if (src == "contractualProductionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::contractualProductionNominalMax;
        return;
    }
    if (src == "apparentPowerProductionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::apparentPowerProductionNominalMax;
        return;
    }
    if (src == "apparentPowerConsumptionNominalMax") {
        dst = ElectricalConnectionCharacteristicTypeEnumType::apparentPowerConsumptionNominalMax;
        return;
    }
    return;
}
bool convertToJson(const HvacSystemFunctionTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case HvacSystemFunctionTypeEnumType::heating:
            enumName = "heating";
            break;
        case HvacSystemFunctionTypeEnumType::cooling:
            enumName = "cooling";
            break;
        case HvacSystemFunctionTypeEnumType::ventilation:
            enumName = "ventilation";
            break;
        case HvacSystemFunctionTypeEnumType::dhw:
            enumName = "dhw";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionTypeEnumType &dst)
{
    if (src == "heating") {
        dst = HvacSystemFunctionTypeEnumType::heating;
        return;
    }
    if (src == "cooling") {
        dst = HvacSystemFunctionTypeEnumType::cooling;
        return;
    }
    if (src == "ventilation") {
        dst = HvacSystemFunctionTypeEnumType::ventilation;
        return;
    }
    if (src == "dhw") {
        dst = HvacSystemFunctionTypeEnumType::dhw;
        return;
    }
    return;
}
bool convertToJson(const HvacOperationModeTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case HvacOperationModeTypeEnumType::var_auto:
            enumName = "auto";
            break;
        case HvacOperationModeTypeEnumType::on:
            enumName = "on";
            break;
        case HvacOperationModeTypeEnumType::off:
            enumName = "off";
            break;
        case HvacOperationModeTypeEnumType::eco:
            enumName = "eco";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, HvacOperationModeTypeEnumType &dst)
{
    if (src == "auto") {
        dst = HvacOperationModeTypeEnumType::var_auto;
        return;
    }
    if (src == "on") {
        dst = HvacOperationModeTypeEnumType::on;
        return;
    }
    if (src == "off") {
        dst = HvacOperationModeTypeEnumType::off;
        return;
    }
    if (src == "eco") {
        dst = HvacOperationModeTypeEnumType::eco;
        return;
    }
    return;
}
bool convertToJson(const HvacOverrunTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case HvacOverrunTypeEnumType::oneTimeDhw:
            enumName = "oneTimeDhw";
            break;
        case HvacOverrunTypeEnumType::party:
            enumName = "party";
            break;
        case HvacOverrunTypeEnumType::sgReadyCondition1:
            enumName = "sgReadyCondition1";
            break;
        case HvacOverrunTypeEnumType::sgReadyCondition3:
            enumName = "sgReadyCondition3";
            break;
        case HvacOverrunTypeEnumType::sgReadyCondition4:
            enumName = "sgReadyCondition4";
            break;
        case HvacOverrunTypeEnumType::oneDayAway:
            enumName = "oneDayAway";
            break;
        case HvacOverrunTypeEnumType::oneDayAtHome:
            enumName = "oneDayAtHome";
            break;
        case HvacOverrunTypeEnumType::oneTimeVentilation:
            enumName = "oneTimeVentilation";
            break;
        case HvacOverrunTypeEnumType::hvacSystemOff:
            enumName = "hvacSystemOff";
            break;
        case HvacOverrunTypeEnumType::valveKick:
            enumName = "valveKick";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunTypeEnumType &dst)
{
    if (src == "oneTimeDhw") {
        dst = HvacOverrunTypeEnumType::oneTimeDhw;
        return;
    }
    if (src == "party") {
        dst = HvacOverrunTypeEnumType::party;
        return;
    }
    if (src == "sgReadyCondition1") {
        dst = HvacOverrunTypeEnumType::sgReadyCondition1;
        return;
    }
    if (src == "sgReadyCondition3") {
        dst = HvacOverrunTypeEnumType::sgReadyCondition3;
        return;
    }
    if (src == "sgReadyCondition4") {
        dst = HvacOverrunTypeEnumType::sgReadyCondition4;
        return;
    }
    if (src == "oneDayAway") {
        dst = HvacOverrunTypeEnumType::oneDayAway;
        return;
    }
    if (src == "oneDayAtHome") {
        dst = HvacOverrunTypeEnumType::oneDayAtHome;
        return;
    }
    if (src == "oneTimeVentilation") {
        dst = HvacOverrunTypeEnumType::oneTimeVentilation;
        return;
    }
    if (src == "hvacSystemOff") {
        dst = HvacOverrunTypeEnumType::hvacSystemOff;
        return;
    }
    if (src == "valveKick") {
        dst = HvacOverrunTypeEnumType::valveKick;
        return;
    }
    return;
}
bool convertToJson(const HvacOverrunStatusEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case HvacOverrunStatusEnumType::active:
            enumName = "active";
            break;
        case HvacOverrunStatusEnumType::running:
            enumName = "running";
            break;
        case HvacOverrunStatusEnumType::finished:
            enumName = "finished";
            break;
        case HvacOverrunStatusEnumType::inactive:
            enumName = "inactive";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunStatusEnumType &dst)
{
    if (src == "active") {
        dst = HvacOverrunStatusEnumType::active;
        return;
    }
    if (src == "running") {
        dst = HvacOverrunStatusEnumType::running;
        return;
    }
    if (src == "finished") {
        dst = HvacOverrunStatusEnumType::finished;
        return;
    }
    if (src == "inactive") {
        dst = HvacOverrunStatusEnumType::inactive;
        return;
    }
    return;
}
bool convertToJson(const SetpointTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case SetpointTypeEnumType::valueAbsolute:
            enumName = "valueAbsolute";
            break;
        case SetpointTypeEnumType::valueRelative:
            enumName = "valueRelative";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, SetpointTypeEnumType &dst)
{
    if (src == "valueAbsolute") {
        dst = SetpointTypeEnumType::valueAbsolute;
        return;
    }
    if (src == "valueRelative") {
        dst = SetpointTypeEnumType::valueRelative;
        return;
    }
    return;
}
bool convertToJson(const TimeSlotTimeModeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case TimeSlotTimeModeEnumType::absolute:
            enumName = "absolute";
            break;
        case TimeSlotTimeModeEnumType::recurring:
            enumName = "recurring";
            break;
        case TimeSlotTimeModeEnumType::both:
            enumName = "both";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, TimeSlotTimeModeEnumType &dst)
{
    if (src == "absolute") {
        dst = TimeSlotTimeModeEnumType::absolute;
        return;
    }
    if (src == "recurring") {
        dst = TimeSlotTimeModeEnumType::recurring;
        return;
    }
    if (src == "both") {
        dst = TimeSlotTimeModeEnumType::both;
        return;
    }
    return;
}
bool convertToJson(const TierBoundaryTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case TierBoundaryTypeEnumType::powerBoundary:
            enumName = "powerBoundary";
            break;
        case TierBoundaryTypeEnumType::energyBoundary:
            enumName = "energyBoundary";
            break;
        case TierBoundaryTypeEnumType::countBoundary:
            enumName = "countBoundary";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryTypeEnumType &dst)
{
    if (src == "powerBoundary") {
        dst = TierBoundaryTypeEnumType::powerBoundary;
        return;
    }
    if (src == "energyBoundary") {
        dst = TierBoundaryTypeEnumType::energyBoundary;
        return;
    }
    if (src == "countBoundary") {
        dst = TierBoundaryTypeEnumType::countBoundary;
        return;
    }
    return;
}
bool convertToJson(const TierTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case TierTypeEnumType::fixedCost:
            enumName = "fixedCost";
            break;
        case TierTypeEnumType::dynamicCost:
            enumName = "dynamicCost";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, TierTypeEnumType &dst)
{
    if (src == "fixedCost") {
        dst = TierTypeEnumType::fixedCost;
        return;
    }
    if (src == "dynamicCost") {
        dst = TierTypeEnumType::dynamicCost;
        return;
    }
    return;
}
bool convertToJson(const IncentiveTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case IncentiveTypeEnumType::absoluteCost:
            enumName = "absoluteCost";
            break;
        case IncentiveTypeEnumType::relativeCost:
            enumName = "relativeCost";
            break;
        case IncentiveTypeEnumType::renewableEnergyPercentage:
            enumName = "renewableEnergyPercentage";
            break;
        case IncentiveTypeEnumType::co2Emission:
            enumName = "co2Emission";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, IncentiveTypeEnumType &dst)
{
    if (src == "absoluteCost") {
        dst = IncentiveTypeEnumType::absoluteCost;
        return;
    }
    if (src == "relativeCost") {
        dst = IncentiveTypeEnumType::relativeCost;
        return;
    }
    if (src == "renewableEnergyPercentage") {
        dst = IncentiveTypeEnumType::renewableEnergyPercentage;
        return;
    }
    if (src == "co2Emission") {
        dst = IncentiveTypeEnumType::co2Emission;
        return;
    }
    return;
}
bool convertToJson(const IncentiveValueTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case IncentiveValueTypeEnumType::value:
            enumName = "value";
            break;
        case IncentiveValueTypeEnumType::averageValue:
            enumName = "averageValue";
            break;
        case IncentiveValueTypeEnumType::minValue:
            enumName = "minValue";
            break;
        case IncentiveValueTypeEnumType::maxValue:
            enumName = "maxValue";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, IncentiveValueTypeEnumType &dst)
{
    if (src == "value") {
        dst = IncentiveValueTypeEnumType::value;
        return;
    }
    if (src == "averageValue") {
        dst = IncentiveValueTypeEnumType::averageValue;
        return;
    }
    if (src == "minValue") {
        dst = IncentiveValueTypeEnumType::minValue;
        return;
    }
    if (src == "maxValue") {
        dst = IncentiveValueTypeEnumType::maxValue;
        return;
    }
    return;
}
bool convertToJson(const LoadControlEventActionEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case LoadControlEventActionEnumType::pause:
            enumName = "pause";
            break;
        case LoadControlEventActionEnumType::resume:
            enumName = "resume";
            break;
        case LoadControlEventActionEnumType::reduce:
            enumName = "reduce";
            break;
        case LoadControlEventActionEnumType::increase:
            enumName = "increase";
            break;
        case LoadControlEventActionEnumType::emergency:
            enumName = "emergency";
            break;
        case LoadControlEventActionEnumType::normal:
            enumName = "normal";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventActionEnumType &dst)
{
    if (src == "pause") {
        dst = LoadControlEventActionEnumType::pause;
        return;
    }
    if (src == "resume") {
        dst = LoadControlEventActionEnumType::resume;
        return;
    }
    if (src == "reduce") {
        dst = LoadControlEventActionEnumType::reduce;
        return;
    }
    if (src == "increase") {
        dst = LoadControlEventActionEnumType::increase;
        return;
    }
    if (src == "emergency") {
        dst = LoadControlEventActionEnumType::emergency;
        return;
    }
    if (src == "normal") {
        dst = LoadControlEventActionEnumType::normal;
        return;
    }
    return;
}
bool convertToJson(const LoadControlEventStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case LoadControlEventStateEnumType::eventAccepted:
            enumName = "eventAccepted";
            break;
        case LoadControlEventStateEnumType::eventStarted:
            enumName = "eventStarted";
            break;
        case LoadControlEventStateEnumType::eventStopped:
            enumName = "eventStopped";
            break;
        case LoadControlEventStateEnumType::eventRejected:
            enumName = "eventRejected";
            break;
        case LoadControlEventStateEnumType::eventCancelled:
            enumName = "eventCancelled";
            break;
        case LoadControlEventStateEnumType::eventError:
            enumName = "eventError";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventStateEnumType &dst)
{
    if (src == "eventAccepted") {
        dst = LoadControlEventStateEnumType::eventAccepted;
        return;
    }
    if (src == "eventStarted") {
        dst = LoadControlEventStateEnumType::eventStarted;
        return;
    }
    if (src == "eventStopped") {
        dst = LoadControlEventStateEnumType::eventStopped;
        return;
    }
    if (src == "eventRejected") {
        dst = LoadControlEventStateEnumType::eventRejected;
        return;
    }
    if (src == "eventCancelled") {
        dst = LoadControlEventStateEnumType::eventCancelled;
        return;
    }
    if (src == "eventError") {
        dst = LoadControlEventStateEnumType::eventError;
        return;
    }
    return;
}
bool convertToJson(const LoadControlLimitTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case LoadControlLimitTypeEnumType::minValueLimit:
            enumName = "minValueLimit";
            break;
        case LoadControlLimitTypeEnumType::maxValueLimit:
            enumName = "maxValueLimit";
            break;
        case LoadControlLimitTypeEnumType::signDependentAbsValueLimit:
            enumName = "signDependentAbsValueLimit";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitTypeEnumType &dst)
{
    if (src == "minValueLimit") {
        dst = LoadControlLimitTypeEnumType::minValueLimit;
        return;
    }
    if (src == "maxValueLimit") {
        dst = LoadControlLimitTypeEnumType::maxValueLimit;
        return;
    }
    if (src == "signDependentAbsValueLimit") {
        dst = LoadControlLimitTypeEnumType::signDependentAbsValueLimit;
        return;
    }
    return;
}
bool convertToJson(const LoadControlCategoryEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case LoadControlCategoryEnumType::obligation:
            enumName = "obligation";
            break;
        case LoadControlCategoryEnumType::recommendation:
            enumName = "recommendation";
            break;
        case LoadControlCategoryEnumType::optimization:
            enumName = "optimization";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, LoadControlCategoryEnumType &dst)
{
    if (src == "obligation") {
        dst = LoadControlCategoryEnumType::obligation;
        return;
    }
    if (src == "recommendation") {
        dst = LoadControlCategoryEnumType::recommendation;
        return;
    }
    if (src == "optimization") {
        dst = LoadControlCategoryEnumType::optimization;
        return;
    }
    return;
}
bool convertToJson(const NetworkManagementFeatureSetType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case NetworkManagementFeatureSetType::gateway:
            enumName = "gateway";
            break;
        case NetworkManagementFeatureSetType::router:
            enumName = "router";
            break;
        case NetworkManagementFeatureSetType::smart:
            enumName = "smart";
            break;
        case NetworkManagementFeatureSetType::simple:
            enumName = "simple";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureSetType &dst)
{
    if (src == "gateway") {
        dst = NetworkManagementFeatureSetType::gateway;
        return;
    }
    if (src == "router") {
        dst = NetworkManagementFeatureSetType::router;
        return;
    }
    if (src == "smart") {
        dst = NetworkManagementFeatureSetType::smart;
        return;
    }
    if (src == "simple") {
        dst = NetworkManagementFeatureSetType::simple;
        return;
    }
    return;
}
bool convertToJson(const NetworkManagementProcessStateStateType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case NetworkManagementProcessStateStateType::succeeded:
            enumName = "succeeded";
            break;
        case NetworkManagementProcessStateStateType::failed:
            enumName = "failed";
            break;
        case NetworkManagementProcessStateStateType::aborted:
            enumName = "aborted";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateStateType &dst)
{
    if (src == "succeeded") {
        dst = NetworkManagementProcessStateStateType::succeeded;
        return;
    }
    if (src == "failed") {
        dst = NetworkManagementProcessStateStateType::failed;
        return;
    }
    if (src == "aborted") {
        dst = NetworkManagementProcessStateStateType::aborted;
        return;
    }
    return;
}
bool convertToJson(const NetworkManagementStateChangeType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case NetworkManagementStateChangeType::added:
            enumName = "added";
            break;
        case NetworkManagementStateChangeType::removed:
            enumName = "removed";
            break;
        case NetworkManagementStateChangeType::modified:
            enumName = "modified";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementStateChangeType &dst)
{
    if (src == "added") {
        dst = NetworkManagementStateChangeType::added;
        return;
    }
    if (src == "removed") {
        dst = NetworkManagementStateChangeType::removed;
        return;
    }
    if (src == "modified") {
        dst = NetworkManagementStateChangeType::modified;
        return;
    }
    return;
}
bool convertToJson(const SensingStateEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case SensingStateEnumType::on:
            enumName = "on";
            break;
        case SensingStateEnumType::off:
            enumName = "off";
            break;
        case SensingStateEnumType::toggle:
            enumName = "toggle";
            break;
        case SensingStateEnumType::level:
            enumName = "level";
            break;
        case SensingStateEnumType::levelUp:
            enumName = "levelUp";
            break;
        case SensingStateEnumType::levelDown:
            enumName = "levelDown";
            break;
        case SensingStateEnumType::levelStart:
            enumName = "levelStart";
            break;
        case SensingStateEnumType::levelStop:
            enumName = "levelStop";
            break;
        case SensingStateEnumType::levelAbsolute:
            enumName = "levelAbsolute";
            break;
        case SensingStateEnumType::levelRelative:
            enumName = "levelRelative";
            break;
        case SensingStateEnumType::levelPercentageAbsolute:
            enumName = "levelPercentageAbsolute";
            break;
        case SensingStateEnumType::levelPercentageRelative:
            enumName = "levelPercentageRelative";
            break;
        case SensingStateEnumType::pressed:
            enumName = "pressed";
            break;
        case SensingStateEnumType::longPressed:
            enumName = "longPressed";
            break;
        case SensingStateEnumType::released:
            enumName = "released";
            break;
        case SensingStateEnumType::changed:
            enumName = "changed";
            break;
        case SensingStateEnumType::started:
            enumName = "started";
            break;
        case SensingStateEnumType::stopped:
            enumName = "stopped";
            break;
        case SensingStateEnumType::paused:
            enumName = "paused";
            break;
        case SensingStateEnumType::middle:
            enumName = "middle";
            break;
        case SensingStateEnumType::up:
            enumName = "up";
            break;
        case SensingStateEnumType::down:
            enumName = "down";
            break;
        case SensingStateEnumType::forward:
            enumName = "forward";
            break;
        case SensingStateEnumType::backwards:
            enumName = "backwards";
            break;
        case SensingStateEnumType::open:
            enumName = "open";
            break;
        case SensingStateEnumType::closed:
            enumName = "closed";
            break;
        case SensingStateEnumType::opening:
            enumName = "opening";
            break;
        case SensingStateEnumType::closing:
            enumName = "closing";
            break;
        case SensingStateEnumType::high:
            enumName = "high";
            break;
        case SensingStateEnumType::low:
            enumName = "low";
            break;
        case SensingStateEnumType::day:
            enumName = "day";
            break;
        case SensingStateEnumType::night:
            enumName = "night";
            break;
        case SensingStateEnumType::detected:
            enumName = "detected";
            break;
        case SensingStateEnumType::notDetected:
            enumName = "notDetected";
            break;
        case SensingStateEnumType::alarmed:
            enumName = "alarmed";
            break;
        case SensingStateEnumType::notAlarmed:
            enumName = "notAlarmed";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, SensingStateEnumType &dst)
{
    if (src == "on") {
        dst = SensingStateEnumType::on;
        return;
    }
    if (src == "off") {
        dst = SensingStateEnumType::off;
        return;
    }
    if (src == "toggle") {
        dst = SensingStateEnumType::toggle;
        return;
    }
    if (src == "level") {
        dst = SensingStateEnumType::level;
        return;
    }
    if (src == "levelUp") {
        dst = SensingStateEnumType::levelUp;
        return;
    }
    if (src == "levelDown") {
        dst = SensingStateEnumType::levelDown;
        return;
    }
    if (src == "levelStart") {
        dst = SensingStateEnumType::levelStart;
        return;
    }
    if (src == "levelStop") {
        dst = SensingStateEnumType::levelStop;
        return;
    }
    if (src == "levelAbsolute") {
        dst = SensingStateEnumType::levelAbsolute;
        return;
    }
    if (src == "levelRelative") {
        dst = SensingStateEnumType::levelRelative;
        return;
    }
    if (src == "levelPercentageAbsolute") {
        dst = SensingStateEnumType::levelPercentageAbsolute;
        return;
    }
    if (src == "levelPercentageRelative") {
        dst = SensingStateEnumType::levelPercentageRelative;
        return;
    }
    if (src == "pressed") {
        dst = SensingStateEnumType::pressed;
        return;
    }
    if (src == "longPressed") {
        dst = SensingStateEnumType::longPressed;
        return;
    }
    if (src == "released") {
        dst = SensingStateEnumType::released;
        return;
    }
    if (src == "changed") {
        dst = SensingStateEnumType::changed;
        return;
    }
    if (src == "started") {
        dst = SensingStateEnumType::started;
        return;
    }
    if (src == "stopped") {
        dst = SensingStateEnumType::stopped;
        return;
    }
    if (src == "paused") {
        dst = SensingStateEnumType::paused;
        return;
    }
    if (src == "middle") {
        dst = SensingStateEnumType::middle;
        return;
    }
    if (src == "up") {
        dst = SensingStateEnumType::up;
        return;
    }
    if (src == "down") {
        dst = SensingStateEnumType::down;
        return;
    }
    if (src == "forward") {
        dst = SensingStateEnumType::forward;
        return;
    }
    if (src == "backwards") {
        dst = SensingStateEnumType::backwards;
        return;
    }
    if (src == "open") {
        dst = SensingStateEnumType::open;
        return;
    }
    if (src == "closed") {
        dst = SensingStateEnumType::closed;
        return;
    }
    if (src == "opening") {
        dst = SensingStateEnumType::opening;
        return;
    }
    if (src == "closing") {
        dst = SensingStateEnumType::closing;
        return;
    }
    if (src == "high") {
        dst = SensingStateEnumType::high;
        return;
    }
    if (src == "low") {
        dst = SensingStateEnumType::low;
        return;
    }
    if (src == "day") {
        dst = SensingStateEnumType::day;
        return;
    }
    if (src == "night") {
        dst = SensingStateEnumType::night;
        return;
    }
    if (src == "detected") {
        dst = SensingStateEnumType::detected;
        return;
    }
    if (src == "notDetected") {
        dst = SensingStateEnumType::notDetected;
        return;
    }
    if (src == "alarmed") {
        dst = SensingStateEnumType::alarmed;
        return;
    }
    if (src == "notAlarmed") {
        dst = SensingStateEnumType::notAlarmed;
        return;
    }
    return;
}
bool convertToJson(const SensingTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case SensingTypeEnumType::var_switch:
            enumName = "switch";
            break;
        case SensingTypeEnumType::button:
            enumName = "button";
            break;
        case SensingTypeEnumType::level:
            enumName = "level";
            break;
        case SensingTypeEnumType::levelSwitch:
            enumName = "levelSwitch";
            break;
        case SensingTypeEnumType::windowHandle:
            enumName = "windowHandle";
            break;
        case SensingTypeEnumType::contactSensor:
            enumName = "contactSensor";
            break;
        case SensingTypeEnumType::occupancySensor:
            enumName = "occupancySensor";
            break;
        case SensingTypeEnumType::motionDetector:
            enumName = "motionDetector";
            break;
        case SensingTypeEnumType::fireDetector:
            enumName = "fireDetector";
            break;
        case SensingTypeEnumType::smokeDetector:
            enumName = "smokeDetector";
            break;
        case SensingTypeEnumType::heatDetector:
            enumName = "heatDetector";
            break;
        case SensingTypeEnumType::waterDetector:
            enumName = "waterDetector";
            break;
        case SensingTypeEnumType::gasDetector:
            enumName = "gasDetector";
            break;
        case SensingTypeEnumType::alarmSensor:
            enumName = "alarmSensor";
            break;
        case SensingTypeEnumType::powerAlarmSensor:
            enumName = "powerAlarmSensor";
            break;
        case SensingTypeEnumType::dayNightIndicator:
            enumName = "dayNightIndicator";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, SensingTypeEnumType &dst)
{
    if (src == "switch") {
        dst = SensingTypeEnumType::var_switch;
        return;
    }
    if (src == "button") {
        dst = SensingTypeEnumType::button;
        return;
    }
    if (src == "level") {
        dst = SensingTypeEnumType::level;
        return;
    }
    if (src == "levelSwitch") {
        dst = SensingTypeEnumType::levelSwitch;
        return;
    }
    if (src == "windowHandle") {
        dst = SensingTypeEnumType::windowHandle;
        return;
    }
    if (src == "contactSensor") {
        dst = SensingTypeEnumType::contactSensor;
        return;
    }
    if (src == "occupancySensor") {
        dst = SensingTypeEnumType::occupancySensor;
        return;
    }
    if (src == "motionDetector") {
        dst = SensingTypeEnumType::motionDetector;
        return;
    }
    if (src == "fireDetector") {
        dst = SensingTypeEnumType::fireDetector;
        return;
    }
    if (src == "smokeDetector") {
        dst = SensingTypeEnumType::smokeDetector;
        return;
    }
    if (src == "heatDetector") {
        dst = SensingTypeEnumType::heatDetector;
        return;
    }
    if (src == "waterDetector") {
        dst = SensingTypeEnumType::waterDetector;
        return;
    }
    if (src == "gasDetector") {
        dst = SensingTypeEnumType::gasDetector;
        return;
    }
    if (src == "alarmSensor") {
        dst = SensingTypeEnumType::alarmSensor;
        return;
    }
    if (src == "powerAlarmSensor") {
        dst = SensingTypeEnumType::powerAlarmSensor;
        return;
    }
    if (src == "dayNightIndicator") {
        dst = SensingTypeEnumType::dayNightIndicator;
        return;
    }
    return;
}
bool convertToJson(const StateInformationFunctionalityEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case StateInformationFunctionalityEnumType::externalOverrideFromGrid:
            enumName = "externalOverrideFromGrid";
            break;
        case StateInformationFunctionalityEnumType::autonomousGridSupport:
            enumName = "autonomousGridSupport";
            break;
        case StateInformationFunctionalityEnumType::islandingMode:
            enumName = "islandingMode";
            break;
        case StateInformationFunctionalityEnumType::balancing:
            enumName = "balancing";
            break;
        case StateInformationFunctionalityEnumType::trickleCharging:
            enumName = "trickleCharging";
            break;
        case StateInformationFunctionalityEnumType::calibration:
            enumName = "calibration";
            break;
        case StateInformationFunctionalityEnumType::commissioningMissing:
            enumName = "commissioningMissing";
            break;
        case StateInformationFunctionalityEnumType::sleeping:
            enumName = "sleeping";
            break;
        case StateInformationFunctionalityEnumType::starting:
            enumName = "starting";
            break;
        case StateInformationFunctionalityEnumType::mppt:
            enumName = "mppt";
            break;
        case StateInformationFunctionalityEnumType::throttled:
            enumName = "throttled";
            break;
        case StateInformationFunctionalityEnumType::shuttingDown:
            enumName = "shuttingDown";
            break;
        case StateInformationFunctionalityEnumType::manualShutdown:
            enumName = "manualShutdown";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, StateInformationFunctionalityEnumType &dst)
{
    if (src == "externalOverrideFromGrid") {
        dst = StateInformationFunctionalityEnumType::externalOverrideFromGrid;
        return;
    }
    if (src == "autonomousGridSupport") {
        dst = StateInformationFunctionalityEnumType::autonomousGridSupport;
        return;
    }
    if (src == "islandingMode") {
        dst = StateInformationFunctionalityEnumType::islandingMode;
        return;
    }
    if (src == "balancing") {
        dst = StateInformationFunctionalityEnumType::balancing;
        return;
    }
    if (src == "trickleCharging") {
        dst = StateInformationFunctionalityEnumType::trickleCharging;
        return;
    }
    if (src == "calibration") {
        dst = StateInformationFunctionalityEnumType::calibration;
        return;
    }
    if (src == "commissioningMissing") {
        dst = StateInformationFunctionalityEnumType::commissioningMissing;
        return;
    }
    if (src == "sleeping") {
        dst = StateInformationFunctionalityEnumType::sleeping;
        return;
    }
    if (src == "starting") {
        dst = StateInformationFunctionalityEnumType::starting;
        return;
    }
    if (src == "mppt") {
        dst = StateInformationFunctionalityEnumType::mppt;
        return;
    }
    if (src == "throttled") {
        dst = StateInformationFunctionalityEnumType::throttled;
        return;
    }
    if (src == "shuttingDown") {
        dst = StateInformationFunctionalityEnumType::shuttingDown;
        return;
    }
    if (src == "manualShutdown") {
        dst = StateInformationFunctionalityEnumType::manualShutdown;
        return;
    }
    return;
}
bool convertToJson(const StateInformationFailureEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case StateInformationFailureEnumType::inverterDefective:
            enumName = "inverterDefective";
            break;
        case StateInformationFailureEnumType::batteryOvercurrentProtection:
            enumName = "batteryOvercurrentProtection";
            break;
        case StateInformationFailureEnumType::pvStringOvercurrentProtection:
            enumName = "pvStringOvercurrentProtection";
            break;
        case StateInformationFailureEnumType::gridFault:
            enumName = "gridFault";
            break;
        case StateInformationFailureEnumType::groundFault:
            enumName = "groundFault";
            break;
        case StateInformationFailureEnumType::acDisconnected:
            enumName = "acDisconnected";
            break;
        case StateInformationFailureEnumType::dcDisconnected:
            enumName = "dcDisconnected";
            break;
        case StateInformationFailureEnumType::cabinetOpen:
            enumName = "cabinetOpen";
            break;
        case StateInformationFailureEnumType::overTemperature:
            enumName = "overTemperature";
            break;
        case StateInformationFailureEnumType::underTemperature:
            enumName = "underTemperature";
            break;
        case StateInformationFailureEnumType::frequencyAboveLimit:
            enumName = "frequencyAboveLimit";
            break;
        case StateInformationFailureEnumType::frequencyBelowLimit:
            enumName = "frequencyBelowLimit";
            break;
        case StateInformationFailureEnumType::acVoltageAboveLimit:
            enumName = "acVoltageAboveLimit";
            break;
        case StateInformationFailureEnumType::acVoltageBelowLimit:
            enumName = "acVoltageBelowLimit";
            break;
        case StateInformationFailureEnumType::dcVoltageAboveLimit:
            enumName = "dcVoltageAboveLimit";
            break;
        case StateInformationFailureEnumType::dcVoltageBelowLimit:
            enumName = "dcVoltageBelowLimit";
            break;
        case StateInformationFailureEnumType::hardwareTestFailure:
            enumName = "hardwareTestFailure";
            break;
        case StateInformationFailureEnumType::genericInternalError:
            enumName = "genericInternalError";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, StateInformationFailureEnumType &dst)
{
    if (src == "inverterDefective") {
        dst = StateInformationFailureEnumType::inverterDefective;
        return;
    }
    if (src == "batteryOvercurrentProtection") {
        dst = StateInformationFailureEnumType::batteryOvercurrentProtection;
        return;
    }
    if (src == "pvStringOvercurrentProtection") {
        dst = StateInformationFailureEnumType::pvStringOvercurrentProtection;
        return;
    }
    if (src == "gridFault") {
        dst = StateInformationFailureEnumType::gridFault;
        return;
    }
    if (src == "groundFault") {
        dst = StateInformationFailureEnumType::groundFault;
        return;
    }
    if (src == "acDisconnected") {
        dst = StateInformationFailureEnumType::acDisconnected;
        return;
    }
    if (src == "dcDisconnected") {
        dst = StateInformationFailureEnumType::dcDisconnected;
        return;
    }
    if (src == "cabinetOpen") {
        dst = StateInformationFailureEnumType::cabinetOpen;
        return;
    }
    if (src == "overTemperature") {
        dst = StateInformationFailureEnumType::overTemperature;
        return;
    }
    if (src == "underTemperature") {
        dst = StateInformationFailureEnumType::underTemperature;
        return;
    }
    if (src == "frequencyAboveLimit") {
        dst = StateInformationFailureEnumType::frequencyAboveLimit;
        return;
    }
    if (src == "frequencyBelowLimit") {
        dst = StateInformationFailureEnumType::frequencyBelowLimit;
        return;
    }
    if (src == "acVoltageAboveLimit") {
        dst = StateInformationFailureEnumType::acVoltageAboveLimit;
        return;
    }
    if (src == "acVoltageBelowLimit") {
        dst = StateInformationFailureEnumType::acVoltageBelowLimit;
        return;
    }
    if (src == "dcVoltageAboveLimit") {
        dst = StateInformationFailureEnumType::dcVoltageAboveLimit;
        return;
    }
    if (src == "dcVoltageBelowLimit") {
        dst = StateInformationFailureEnumType::dcVoltageBelowLimit;
        return;
    }
    if (src == "hardwareTestFailure") {
        dst = StateInformationFailureEnumType::hardwareTestFailure;
        return;
    }
    if (src == "genericInternalError") {
        dst = StateInformationFailureEnumType::genericInternalError;
        return;
    }
    return;
}
bool convertToJson(const StateInformationCategoryEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case StateInformationCategoryEnumType::functionality:
            enumName = "functionality";
            break;
        case StateInformationCategoryEnumType::failure:
            enumName = "failure";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, StateInformationCategoryEnumType &dst)
{
    if (src == "functionality") {
        dst = StateInformationCategoryEnumType::functionality;
        return;
    }
    if (src == "failure") {
        dst = StateInformationCategoryEnumType::failure;
        return;
    }
    return;
}
bool convertToJson(const SupplyConditionEventTypeEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case SupplyConditionEventTypeEnumType::thesholdExceeded:
            enumName = "thesholdExceeded";
            break;
        case SupplyConditionEventTypeEnumType::fallenBelowThreshold:
            enumName = "fallenBelowThreshold";
            break;
        case SupplyConditionEventTypeEnumType::supplyInterrupt:
            enumName = "supplyInterrupt";
            break;
        case SupplyConditionEventTypeEnumType::releaseOfLimitations:
            enumName = "releaseOfLimitations";
            break;
        case SupplyConditionEventTypeEnumType::otherProblem:
            enumName = "otherProblem";
            break;
        case SupplyConditionEventTypeEnumType::gridConditionUpdate:
            enumName = "gridConditionUpdate";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionEventTypeEnumType &dst)
{
    if (src == "thesholdExceeded") {
        dst = SupplyConditionEventTypeEnumType::thesholdExceeded;
        return;
    }
    if (src == "fallenBelowThreshold") {
        dst = SupplyConditionEventTypeEnumType::fallenBelowThreshold;
        return;
    }
    if (src == "supplyInterrupt") {
        dst = SupplyConditionEventTypeEnumType::supplyInterrupt;
        return;
    }
    if (src == "releaseOfLimitations") {
        dst = SupplyConditionEventTypeEnumType::releaseOfLimitations;
        return;
    }
    if (src == "otherProblem") {
        dst = SupplyConditionEventTypeEnumType::otherProblem;
        return;
    }
    if (src == "gridConditionUpdate") {
        dst = SupplyConditionEventTypeEnumType::gridConditionUpdate;
        return;
    }
    return;
}
bool convertToJson(const SupplyConditionOriginatorEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case SupplyConditionOriginatorEnumType::externDSO:
            enumName = "externDSO";
            break;
        case SupplyConditionOriginatorEnumType::externSupplier:
            enumName = "externSupplier";
            break;
        case SupplyConditionOriginatorEnumType::internalLimit:
            enumName = "internalLimit";
            break;
        case SupplyConditionOriginatorEnumType::internalService:
            enumName = "internalService";
            break;
        case SupplyConditionOriginatorEnumType::internalUser:
            enumName = "internalUser";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionOriginatorEnumType &dst)
{
    if (src == "externDSO") {
        dst = SupplyConditionOriginatorEnumType::externDSO;
        return;
    }
    if (src == "externSupplier") {
        dst = SupplyConditionOriginatorEnumType::externSupplier;
        return;
    }
    if (src == "internalLimit") {
        dst = SupplyConditionOriginatorEnumType::internalLimit;
        return;
    }
    if (src == "internalService") {
        dst = SupplyConditionOriginatorEnumType::internalService;
        return;
    }
    if (src == "internalUser") {
        dst = SupplyConditionOriginatorEnumType::internalUser;
        return;
    }
    return;
}
bool convertToJson(const GridConditionEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case GridConditionEnumType::consumptionRed:
            enumName = "consumptionRed";
            break;
        case GridConditionEnumType::consumptionYellow:
            enumName = "consumptionYellow";
            break;
        case GridConditionEnumType::good:
            enumName = "good";
            break;
        case GridConditionEnumType::productionYellow:
            enumName = "productionYellow";
            break;
        case GridConditionEnumType::productionRed:
            enumName = "productionRed";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, GridConditionEnumType &dst)
{
    if (src == "consumptionRed") {
        dst = GridConditionEnumType::consumptionRed;
        return;
    }
    if (src == "consumptionYellow") {
        dst = GridConditionEnumType::consumptionYellow;
        return;
    }
    if (src == "good") {
        dst = GridConditionEnumType::good;
        return;
    }
    if (src == "productionYellow") {
        dst = GridConditionEnumType::productionYellow;
        return;
    }
    if (src == "productionRed") {
        dst = GridConditionEnumType::productionRed;
        return;
    }
    return;
}
bool convertToJson(const TaskManagementJobSourceEnumType &src, JsonVariant &dst)
{
    String enumName;
    switch (src) {
        case TaskManagementJobSourceEnumType::internalMechanism:
            enumName = "internalMechanism";
            break;
        case TaskManagementJobSourceEnumType::userInteraction:
            enumName = "userInteraction";
            break;
        case TaskManagementJobSourceEnumType::externalConfiguration:
            enumName = "externalConfiguration";
            break;
    }
    return dst.set(enumName);
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobSourceEnumType &dst)
{
    if (src == "internalMechanism") {
        dst = TaskManagementJobSourceEnumType::internalMechanism;
        return;
    }
    if (src == "userInteraction") {
        dst = TaskManagementJobSourceEnumType::userInteraction;
        return;
    }
    if (src == "externalConfiguration") {
        dst = TaskManagementJobSourceEnumType::externalConfiguration;
        return;
    }
    return;
}
bool convertToJson(const MessagingDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.messagingNumber) {
        dst["messagingNumber"] = *src.messagingNumber;
    }
    if (src.type) {
        dst["type"] = *src.type;
    }
    if (src.text) {
        dst["text"] = *src.text;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MessagingDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["messagingNumber"]) {
                dst.messagingNumber = item["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
            } else {
                //dst.messagingNumber = std::nullopt;
            }
            if (item["type"]) {
                dst.type = item["type"].as<decltype(dst.type)::value_type>();
            } else {
                //dst.type = std::nullopt;
            }
            if (item["text"]) {
                dst.text = item["text"].as<decltype(dst.text)::value_type>();
            } else {
                //dst.text = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["messagingNumber"]) {
            dst.messagingNumber = src["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
        } else {
            //dst.messagingNumber = std::nullopt;
        }
        if (src["type"]) {
            dst.type = src["type"].as<decltype(dst.type)::value_type>();
        } else {
            //dst.type = std::nullopt;
        }
        if (src["text"]) {
            dst.text = src["text"].as<decltype(dst.text)::value_type>();
        } else {
            //dst.text = std::nullopt;
        }
    }
}
bool convertToJson(const ElementTagType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElementTagType &dst)
{
}
bool convertToJson(const MessagingDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.messagingNumber) {
        dst["messagingNumber"] = *src.messagingNumber;
    }
    if (src.type) {
        dst["type"] = *src.type;
    }
    if (src.text) {
        dst["text"] = *src.text;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MessagingDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["messagingNumber"]) {
                dst.messagingNumber = item["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
            } else {
                //dst.messagingNumber = std::nullopt;
            }
            if (item["type"]) {
                dst.type = item["type"].as<decltype(dst.type)::value_type>();
            } else {
                //dst.type = std::nullopt;
            }
            if (item["text"]) {
                dst.text = item["text"].as<decltype(dst.text)::value_type>();
            } else {
                //dst.text = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["messagingNumber"]) {
            dst.messagingNumber = src["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
        } else {
            //dst.messagingNumber = std::nullopt;
        }
        if (src["type"]) {
            dst.type = src["type"].as<decltype(dst.type)::value_type>();
        } else {
            //dst.type = std::nullopt;
        }
        if (src["text"]) {
            dst.text = src["text"].as<decltype(dst.text)::value_type>();
        } else {
            //dst.text = std::nullopt;
        }
    }
}
bool convertToJson(const MessagingListDataType &src, JsonVariant &dst)
{
    if (src.messagingData) {
        dst["messagingData"] = *src.messagingData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MessagingListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["messagingData"]) {
                dst.messagingData = item["messagingData"].as<decltype(dst.messagingData)::value_type>();
            } else {
                //dst.messagingData = std::nullopt;
            }
        }
    } else {
        if (src["messagingData"]) {
            dst.messagingData = src["messagingData"].as<decltype(dst.messagingData)::value_type>();
        } else {
            //dst.messagingData = std::nullopt;
        }
    }
}
bool convertToJson(const TimestampIntervalType &src, JsonVariant &dst)
{
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimestampIntervalType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const MessagingListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }
    if (src.messagingNumber) {
        dst["messagingNumber"] = *src.messagingNumber;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MessagingListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
            if (item["messagingNumber"]) {
                dst.messagingNumber = item["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
            } else {
                //dst.messagingNumber = std::nullopt;
            }
        }
    } else {
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
        if (src["messagingNumber"]) {
            dst.messagingNumber = src["messagingNumber"].as<decltype(dst.messagingNumber)::value_type>();
        } else {
            //dst.messagingNumber = std::nullopt;
        }
    }
}
bool convertToJson(const TimePeriodType &src, JsonVariant &dst)
{
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimePeriodType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const TimePeriodElementsType &src, JsonVariant &dst)
{
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimePeriodElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const DaysOfWeekType &src, JsonVariant &dst)
{
    if (src.monday) {
        dst["monday"] = *src.monday;
    }
    if (src.tuesday) {
        dst["tuesday"] = *src.tuesday;
    }
    if (src.wednesday) {
        dst["wednesday"] = *src.wednesday;
    }
    if (src.thursday) {
        dst["thursday"] = *src.thursday;
    }
    if (src.friday) {
        dst["friday"] = *src.friday;
    }
    if (src.saturday) {
        dst["saturday"] = *src.saturday;
    }
    if (src.sunday) {
        dst["sunday"] = *src.sunday;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DaysOfWeekType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["monday"]) {
                dst.monday = item["monday"].as<decltype(dst.monday)::value_type>();
            } else {
                //dst.monday = std::nullopt;
            }
            if (item["tuesday"]) {
                dst.tuesday = item["tuesday"].as<decltype(dst.tuesday)::value_type>();
            } else {
                //dst.tuesday = std::nullopt;
            }
            if (item["wednesday"]) {
                dst.wednesday = item["wednesday"].as<decltype(dst.wednesday)::value_type>();
            } else {
                //dst.wednesday = std::nullopt;
            }
            if (item["thursday"]) {
                dst.thursday = item["thursday"].as<decltype(dst.thursday)::value_type>();
            } else {
                //dst.thursday = std::nullopt;
            }
            if (item["friday"]) {
                dst.friday = item["friday"].as<decltype(dst.friday)::value_type>();
            } else {
                //dst.friday = std::nullopt;
            }
            if (item["saturday"]) {
                dst.saturday = item["saturday"].as<decltype(dst.saturday)::value_type>();
            } else {
                //dst.saturday = std::nullopt;
            }
            if (item["sunday"]) {
                dst.sunday = item["sunday"].as<decltype(dst.sunday)::value_type>();
            } else {
                //dst.sunday = std::nullopt;
            }
        }
    } else {
        if (src["monday"]) {
            dst.monday = src["monday"].as<decltype(dst.monday)::value_type>();
        } else {
            //dst.monday = std::nullopt;
        }
        if (src["tuesday"]) {
            dst.tuesday = src["tuesday"].as<decltype(dst.tuesday)::value_type>();
        } else {
            //dst.tuesday = std::nullopt;
        }
        if (src["wednesday"]) {
            dst.wednesday = src["wednesday"].as<decltype(dst.wednesday)::value_type>();
        } else {
            //dst.wednesday = std::nullopt;
        }
        if (src["thursday"]) {
            dst.thursday = src["thursday"].as<decltype(dst.thursday)::value_type>();
        } else {
            //dst.thursday = std::nullopt;
        }
        if (src["friday"]) {
            dst.friday = src["friday"].as<decltype(dst.friday)::value_type>();
        } else {
            //dst.friday = std::nullopt;
        }
        if (src["saturday"]) {
            dst.saturday = src["saturday"].as<decltype(dst.saturday)::value_type>();
        } else {
            //dst.saturday = std::nullopt;
        }
        if (src["sunday"]) {
            dst.sunday = src["sunday"].as<decltype(dst.sunday)::value_type>();
        } else {
            //dst.sunday = std::nullopt;
        }
    }
}
bool convertToJson(const AbsoluteOrRecurringTimeType &src, JsonVariant &dst)
{
    if (src.dateTime) {
        dst["dateTime"] = *src.dateTime;
    }
    if (src.month) {
        dst["month"] = *src.month;
    }
    if (src.dayOfMonth) {
        dst["dayOfMonth"] = *src.dayOfMonth;
    }
    if (src.calendarWeek) {
        dst["calendarWeek"] = *src.calendarWeek;
    }
    if (src.dayOfWeekOccurrence) {
        dst["dayOfWeekOccurrence"] = *src.dayOfWeekOccurrence;
    }
    if (src.daysOfWeek) {
        dst["daysOfWeek"] = *src.daysOfWeek;
    }
    if (src.time) {
        dst["time"] = *src.time;
    }
    if (src.relative) {
        dst["relative"] = *src.relative;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AbsoluteOrRecurringTimeType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["dateTime"]) {
                dst.dateTime = item["dateTime"].as<decltype(dst.dateTime)::value_type>();
            } else {
                //dst.dateTime = std::nullopt;
            }
            if (item["month"]) {
                dst.month = item["month"].as<decltype(dst.month)::value_type>();
            } else {
                //dst.month = std::nullopt;
            }
            if (item["dayOfMonth"]) {
                dst.dayOfMonth = item["dayOfMonth"].as<decltype(dst.dayOfMonth)::value_type>();
            } else {
                //dst.dayOfMonth = std::nullopt;
            }
            if (item["calendarWeek"]) {
                dst.calendarWeek = item["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
            } else {
                //dst.calendarWeek = std::nullopt;
            }
            if (item["dayOfWeekOccurrence"]) {
                dst.dayOfWeekOccurrence = item["dayOfWeekOccurrence"].as<decltype(dst.dayOfWeekOccurrence)::value_type>();
            } else {
                //dst.dayOfWeekOccurrence = std::nullopt;
            }
            if (item["daysOfWeek"]) {
                dst.daysOfWeek = item["daysOfWeek"].as<decltype(dst.daysOfWeek)::value_type>();
            } else {
                //dst.daysOfWeek = std::nullopt;
            }
            if (item["time"]) {
                dst.time = item["time"].as<decltype(dst.time)::value_type>();
            } else {
                //dst.time = std::nullopt;
            }
            if (item["relative"]) {
                dst.relative = item["relative"].as<decltype(dst.relative)::value_type>();
            } else {
                //dst.relative = std::nullopt;
            }
        }
    } else {
        if (src["dateTime"]) {
            dst.dateTime = src["dateTime"].as<decltype(dst.dateTime)::value_type>();
        } else {
            //dst.dateTime = std::nullopt;
        }
        if (src["month"]) {
            dst.month = src["month"].as<decltype(dst.month)::value_type>();
        } else {
            //dst.month = std::nullopt;
        }
        if (src["dayOfMonth"]) {
            dst.dayOfMonth = src["dayOfMonth"].as<decltype(dst.dayOfMonth)::value_type>();
        } else {
            //dst.dayOfMonth = std::nullopt;
        }
        if (src["calendarWeek"]) {
            dst.calendarWeek = src["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
        } else {
            //dst.calendarWeek = std::nullopt;
        }
        if (src["dayOfWeekOccurrence"]) {
            dst.dayOfWeekOccurrence = src["dayOfWeekOccurrence"].as<decltype(dst.dayOfWeekOccurrence)::value_type>();
        } else {
            //dst.dayOfWeekOccurrence = std::nullopt;
        }
        if (src["daysOfWeek"]) {
            dst.daysOfWeek = src["daysOfWeek"].as<decltype(dst.daysOfWeek)::value_type>();
        } else {
            //dst.daysOfWeek = std::nullopt;
        }
        if (src["time"]) {
            dst.time = src["time"].as<decltype(dst.time)::value_type>();
        } else {
            //dst.time = std::nullopt;
        }
        if (src["relative"]) {
            dst.relative = src["relative"].as<decltype(dst.relative)::value_type>();
        } else {
            //dst.relative = std::nullopt;
        }
    }
}
bool convertToJson(const AbsoluteOrRecurringTimeElementsType &src, JsonVariant &dst)
{
    if (src.dateTime) {
        dst["dateTime"] = *src.dateTime;
    }
    if (src.month) {
        dst["month"] = *src.month;
    }
    if (src.dayOfMonth) {
        dst["dayOfMonth"] = *src.dayOfMonth;
    }
    if (src.calendarWeek) {
        dst["calendarWeek"] = *src.calendarWeek;
    }
    if (src.dayOfWeekOccurrence) {
        dst["dayOfWeekOccurrence"] = *src.dayOfWeekOccurrence;
    }
    if (src.daysOfWeek) {
        dst["daysOfWeek"] = *src.daysOfWeek;
    }
    if (src.time) {
        dst["time"] = *src.time;
    }
    if (src.relative) {
        dst["relative"] = *src.relative;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AbsoluteOrRecurringTimeElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["dateTime"]) {
                dst.dateTime = item["dateTime"].as<decltype(dst.dateTime)::value_type>();
            } else {
                //dst.dateTime = std::nullopt;
            }
            if (item["month"]) {
                dst.month = item["month"].as<decltype(dst.month)::value_type>();
            } else {
                //dst.month = std::nullopt;
            }
            if (item["dayOfMonth"]) {
                dst.dayOfMonth = item["dayOfMonth"].as<decltype(dst.dayOfMonth)::value_type>();
            } else {
                //dst.dayOfMonth = std::nullopt;
            }
            if (item["calendarWeek"]) {
                dst.calendarWeek = item["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
            } else {
                //dst.calendarWeek = std::nullopt;
            }
            if (item["dayOfWeekOccurrence"]) {
                dst.dayOfWeekOccurrence = item["dayOfWeekOccurrence"].as<decltype(dst.dayOfWeekOccurrence)::value_type>();
            } else {
                //dst.dayOfWeekOccurrence = std::nullopt;
            }
            if (item["daysOfWeek"]) {
                dst.daysOfWeek = item["daysOfWeek"].as<decltype(dst.daysOfWeek)::value_type>();
            } else {
                //dst.daysOfWeek = std::nullopt;
            }
            if (item["time"]) {
                dst.time = item["time"].as<decltype(dst.time)::value_type>();
            } else {
                //dst.time = std::nullopt;
            }
            if (item["relative"]) {
                dst.relative = item["relative"].as<decltype(dst.relative)::value_type>();
            } else {
                //dst.relative = std::nullopt;
            }
        }
    } else {
        if (src["dateTime"]) {
            dst.dateTime = src["dateTime"].as<decltype(dst.dateTime)::value_type>();
        } else {
            //dst.dateTime = std::nullopt;
        }
        if (src["month"]) {
            dst.month = src["month"].as<decltype(dst.month)::value_type>();
        } else {
            //dst.month = std::nullopt;
        }
        if (src["dayOfMonth"]) {
            dst.dayOfMonth = src["dayOfMonth"].as<decltype(dst.dayOfMonth)::value_type>();
        } else {
            //dst.dayOfMonth = std::nullopt;
        }
        if (src["calendarWeek"]) {
            dst.calendarWeek = src["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
        } else {
            //dst.calendarWeek = std::nullopt;
        }
        if (src["dayOfWeekOccurrence"]) {
            dst.dayOfWeekOccurrence = src["dayOfWeekOccurrence"].as<decltype(dst.dayOfWeekOccurrence)::value_type>();
        } else {
            //dst.dayOfWeekOccurrence = std::nullopt;
        }
        if (src["daysOfWeek"]) {
            dst.daysOfWeek = src["daysOfWeek"].as<decltype(dst.daysOfWeek)::value_type>();
        } else {
            //dst.daysOfWeek = std::nullopt;
        }
        if (src["time"]) {
            dst.time = src["time"].as<decltype(dst.time)::value_type>();
        } else {
            //dst.time = std::nullopt;
        }
        if (src["relative"]) {
            dst.relative = src["relative"].as<decltype(dst.relative)::value_type>();
        } else {
            //dst.relative = std::nullopt;
        }
    }
}
bool convertToJson(const RecurrenceInformationType &src, JsonVariant &dst)
{
    if (src.recurringInterval) {
        dst["recurringInterval"] = *src.recurringInterval;
    }
    if (src.recurringIntervalStep) {
        dst["recurringIntervalStep"] = *src.recurringIntervalStep;
    }
    if (src.firstExecution) {
        dst["firstExecution"] = *src.firstExecution;
    }
    if (src.executionCount) {
        dst["executionCount"] = *src.executionCount;
    }
    if (src.lastExecution) {
        dst["lastExecution"] = *src.lastExecution;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, RecurrenceInformationType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["recurringInterval"]) {
                dst.recurringInterval = item["recurringInterval"].as<decltype(dst.recurringInterval)::value_type>();
            } else {
                //dst.recurringInterval = std::nullopt;
            }
            if (item["recurringIntervalStep"]) {
                dst.recurringIntervalStep = item["recurringIntervalStep"].as<decltype(dst.recurringIntervalStep)::value_type>();
            } else {
                //dst.recurringIntervalStep = std::nullopt;
            }
            if (item["firstExecution"]) {
                dst.firstExecution = item["firstExecution"].as<decltype(dst.firstExecution)::value_type>();
            } else {
                //dst.firstExecution = std::nullopt;
            }
            if (item["executionCount"]) {
                dst.executionCount = item["executionCount"].as<decltype(dst.executionCount)::value_type>();
            } else {
                //dst.executionCount = std::nullopt;
            }
            if (item["lastExecution"]) {
                dst.lastExecution = item["lastExecution"].as<decltype(dst.lastExecution)::value_type>();
            } else {
                //dst.lastExecution = std::nullopt;
            }
        }
    } else {
        if (src["recurringInterval"]) {
            dst.recurringInterval = src["recurringInterval"].as<decltype(dst.recurringInterval)::value_type>();
        } else {
            //dst.recurringInterval = std::nullopt;
        }
        if (src["recurringIntervalStep"]) {
            dst.recurringIntervalStep = src["recurringIntervalStep"].as<decltype(dst.recurringIntervalStep)::value_type>();
        } else {
            //dst.recurringIntervalStep = std::nullopt;
        }
        if (src["firstExecution"]) {
            dst.firstExecution = src["firstExecution"].as<decltype(dst.firstExecution)::value_type>();
        } else {
            //dst.firstExecution = std::nullopt;
        }
        if (src["executionCount"]) {
            dst.executionCount = src["executionCount"].as<decltype(dst.executionCount)::value_type>();
        } else {
            //dst.executionCount = std::nullopt;
        }
        if (src["lastExecution"]) {
            dst.lastExecution = src["lastExecution"].as<decltype(dst.lastExecution)::value_type>();
        } else {
            //dst.lastExecution = std::nullopt;
        }
    }
}
bool convertToJson(const RecurrenceInformationElementsType &src, JsonVariant &dst)
{
    if (src.recurringInterval) {
        dst["recurringInterval"] = *src.recurringInterval;
    }
    if (src.recurringIntervalStep) {
        dst["recurringIntervalStep"] = *src.recurringIntervalStep;
    }
    if (src.firstExecution) {
        dst["firstExecution"] = *src.firstExecution;
    }
    if (src.executionCount) {
        dst["executionCount"] = *src.executionCount;
    }
    if (src.lastExecution) {
        dst["lastExecution"] = *src.lastExecution;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, RecurrenceInformationElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["recurringInterval"]) {
                dst.recurringInterval = item["recurringInterval"].as<decltype(dst.recurringInterval)::value_type>();
            } else {
                //dst.recurringInterval = std::nullopt;
            }
            if (item["recurringIntervalStep"]) {
                dst.recurringIntervalStep = item["recurringIntervalStep"].as<decltype(dst.recurringIntervalStep)::value_type>();
            } else {
                //dst.recurringIntervalStep = std::nullopt;
            }
            if (item["firstExecution"]) {
                dst.firstExecution = item["firstExecution"].as<decltype(dst.firstExecution)::value_type>();
            } else {
                //dst.firstExecution = std::nullopt;
            }
            if (item["executionCount"]) {
                dst.executionCount = item["executionCount"].as<decltype(dst.executionCount)::value_type>();
            } else {
                //dst.executionCount = std::nullopt;
            }
            if (item["lastExecution"]) {
                dst.lastExecution = item["lastExecution"].as<decltype(dst.lastExecution)::value_type>();
            } else {
                //dst.lastExecution = std::nullopt;
            }
        }
    } else {
        if (src["recurringInterval"]) {
            dst.recurringInterval = src["recurringInterval"].as<decltype(dst.recurringInterval)::value_type>();
        } else {
            //dst.recurringInterval = std::nullopt;
        }
        if (src["recurringIntervalStep"]) {
            dst.recurringIntervalStep = src["recurringIntervalStep"].as<decltype(dst.recurringIntervalStep)::value_type>();
        } else {
            //dst.recurringIntervalStep = std::nullopt;
        }
        if (src["firstExecution"]) {
            dst.firstExecution = src["firstExecution"].as<decltype(dst.firstExecution)::value_type>();
        } else {
            //dst.firstExecution = std::nullopt;
        }
        if (src["executionCount"]) {
            dst.executionCount = src["executionCount"].as<decltype(dst.executionCount)::value_type>();
        } else {
            //dst.executionCount = std::nullopt;
        }
        if (src["lastExecution"]) {
            dst.lastExecution = src["lastExecution"].as<decltype(dst.lastExecution)::value_type>();
        } else {
            //dst.lastExecution = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberType &src, JsonVariant &dst)
{
    if (src.number) {
        dst["number"] = *src.number;
    }
    if (src.scale) {
        dst["scale"] = *src.scale;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["number"]) {
                dst.number = item["number"].as<decltype(dst.number)::value_type>();
            } else {
                //dst.number = std::nullopt;
            }
            if (item["scale"]) {
                dst.scale = item["scale"].as<decltype(dst.scale)::value_type>();
            } else {
                //dst.scale = std::nullopt;
            }
        }
    } else {
        if (src["number"]) {
            dst.number = src["number"].as<decltype(dst.number)::value_type>();
        } else {
            //dst.number = std::nullopt;
        }
        if (src["scale"]) {
            dst.scale = src["scale"].as<decltype(dst.scale)::value_type>();
        } else {
            //dst.scale = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberRangeType &src, JsonVariant &dst)
{
    if (src.min) {
        dst["min"] = *src.min;
    }
    if (src.max) {
        dst["max"] = *src.max;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberRangeType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["min"]) {
                dst.min = item["min"].as<decltype(dst.min)::value_type>();
            } else {
                //dst.min = std::nullopt;
            }
            if (item["max"]) {
                dst.max = item["max"].as<decltype(dst.max)::value_type>();
            } else {
                //dst.max = std::nullopt;
            }
        }
    } else {
        if (src["min"]) {
            dst.min = src["min"].as<decltype(dst.min)::value_type>();
        } else {
            //dst.min = std::nullopt;
        }
        if (src["max"]) {
            dst.max = src["max"].as<decltype(dst.max)::value_type>();
        } else {
            //dst.max = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberElementsType &src, JsonVariant &dst)
{
    if (src.number) {
        dst["number"] = *src.number;
    }
    if (src.scale) {
        dst["scale"] = *src.scale;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["number"]) {
                dst.number = item["number"].as<decltype(dst.number)::value_type>();
            } else {
                //dst.number = std::nullopt;
            }
            if (item["scale"]) {
                dst.scale = item["scale"].as<decltype(dst.scale)::value_type>();
            } else {
                //dst.scale = std::nullopt;
            }
        }
    } else {
        if (src["number"]) {
            dst.number = src["number"].as<decltype(dst.number)::value_type>();
        } else {
            //dst.number = std::nullopt;
        }
        if (src["scale"]) {
            dst.scale = src["scale"].as<decltype(dst.scale)::value_type>();
        } else {
            //dst.scale = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberRangeElementsType &src, JsonVariant &dst)
{
    if (src.min) {
        dst["min"] = *src.min;
    }
    if (src.max) {
        dst["max"] = *src.max;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberRangeElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["min"]) {
                dst.min = item["min"].as<decltype(dst.min)::value_type>();
            } else {
                //dst.min = std::nullopt;
            }
            if (item["max"]) {
                dst.max = item["max"].as<decltype(dst.max)::value_type>();
            } else {
                //dst.max = std::nullopt;
            }
        }
    } else {
        if (src["min"]) {
            dst.min = src["min"].as<decltype(dst.min)::value_type>();
        } else {
            //dst.min = std::nullopt;
        }
        if (src["max"]) {
            dst.max = src["max"].as<decltype(dst.max)::value_type>();
        } else {
            //dst.max = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberSetType &src, JsonVariant &dst)
{
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.range) {
        dst["range"] = *src.range;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberSetType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["range"]) {
                dst.range = item["range"].as<decltype(dst.range)::value_type>();
            } else {
                //dst.range = std::nullopt;
            }
        }
    } else {
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["range"]) {
            dst.range = src["range"].as<decltype(dst.range)::value_type>();
        } else {
            //dst.range = std::nullopt;
        }
    }
}
bool convertToJson(const ScaledNumberSetElementsType &src, JsonVariant &dst)
{
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.range) {
        dst["range"] = *src.range;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ScaledNumberSetElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["range"]) {
                dst.range = item["range"].as<decltype(dst.range)::value_type>();
            } else {
                //dst.range = std::nullopt;
            }
        }
    } else {
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["range"]) {
            dst.range = src["range"].as<decltype(dst.range)::value_type>();
        } else {
            //dst.range = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceAddressType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceAddressType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceAddressElementsType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceAddressElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
    }
}
bool convertToJson(const EntityAddressType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }
    if (src.entity) {
        dst["entity"] = *src.entity;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, EntityAddressType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
            if (item["entity"]) {
                dst.entity = item["entity"].as<decltype(dst.entity)::value_type>();
            } else {
                //dst.entity = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
        if (src["entity"]) {
            dst.entity = src["entity"].as<decltype(dst.entity)::value_type>();
        } else {
            //dst.entity = std::nullopt;
        }
    }
}
bool convertToJson(const EntityAddressElementsType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }
    if (src.entity) {
        dst["entity"] = *src.entity;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, EntityAddressElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
            if (item["entity"]) {
                dst.entity = item["entity"].as<decltype(dst.entity)::value_type>();
            } else {
                //dst.entity = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
        if (src["entity"]) {
            dst.entity = src["entity"].as<decltype(dst.entity)::value_type>();
        } else {
            //dst.entity = std::nullopt;
        }
    }
}
bool convertToJson(const FeatureAddressType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }
    if (src.entity) {
        dst["entity"] = *src.entity;
    }
    if (src.feature) {
        dst["feature"] = *src.feature;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, FeatureAddressType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
            if (item["entity"]) {
                dst.entity = item["entity"].as<decltype(dst.entity)::value_type>();
            } else {
                //dst.entity = std::nullopt;
            }
            if (item["feature"]) {
                dst.feature = item["feature"].as<decltype(dst.feature)::value_type>();
            } else {
                //dst.feature = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
        if (src["entity"]) {
            dst.entity = src["entity"].as<decltype(dst.entity)::value_type>();
        } else {
            //dst.entity = std::nullopt;
        }
        if (src["feature"]) {
            dst.feature = src["feature"].as<decltype(dst.feature)::value_type>();
        } else {
            //dst.feature = std::nullopt;
        }
    }
}
bool convertToJson(const FeatureAddressElementsType &src, JsonVariant &dst)
{
    if (src.device) {
        dst["device"] = *src.device;
    }
    if (src.entity) {
        dst["entity"] = *src.entity;
    }
    if (src.feature) {
        dst["feature"] = *src.feature;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, FeatureAddressElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["device"]) {
                dst.device = item["device"].as<decltype(dst.device)::value_type>();
            } else {
                //dst.device = std::nullopt;
            }
            if (item["entity"]) {
                dst.entity = item["entity"].as<decltype(dst.entity)::value_type>();
            } else {
                //dst.entity = std::nullopt;
            }
            if (item["feature"]) {
                dst.feature = item["feature"].as<decltype(dst.feature)::value_type>();
            } else {
                //dst.feature = std::nullopt;
            }
        }
    } else {
        if (src["device"]) {
            dst.device = src["device"].as<decltype(dst.device)::value_type>();
        } else {
            //dst.device = std::nullopt;
        }
        if (src["entity"]) {
            dst.entity = src["entity"].as<decltype(dst.entity)::value_type>();
        } else {
            //dst.entity = std::nullopt;
        }
        if (src["feature"]) {
            dst.feature = src["feature"].as<decltype(dst.feature)::value_type>();
        } else {
            //dst.feature = std::nullopt;
        }
    }
}
bool convertToJson(const PossibleOperationsClassifierType &src, JsonVariant &dst)
{
    if (src.partial) {
        dst["partial"] = *src.partial;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PossibleOperationsClassifierType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["partial"]) {
                dst.partial = item["partial"].as<decltype(dst.partial)::value_type>();
            } else {
                //dst.partial = std::nullopt;
            }
        }
    } else {
        if (src["partial"]) {
            dst.partial = src["partial"].as<decltype(dst.partial)::value_type>();
        } else {
            //dst.partial = std::nullopt;
        }
    }
}
bool convertToJson(const PossibleOperationsReadType &src, JsonVariant &dst)
{
    if (src.partial) {
        dst["partial"] = *src.partial;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PossibleOperationsReadType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["partial"]) {
                dst.partial = item["partial"].as<decltype(dst.partial)::value_type>();
            } else {
                //dst.partial = std::nullopt;
            }
        }
    } else {
        if (src["partial"]) {
            dst.partial = src["partial"].as<decltype(dst.partial)::value_type>();
        } else {
            //dst.partial = std::nullopt;
        }
    }
}
bool convertToJson(const PossibleOperationsWriteType &src, JsonVariant &dst)
{
    if (src.partial) {
        dst["partial"] = *src.partial;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PossibleOperationsWriteType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["partial"]) {
                dst.partial = item["partial"].as<decltype(dst.partial)::value_type>();
            } else {
                //dst.partial = std::nullopt;
            }
        }
    } else {
        if (src["partial"]) {
            dst.partial = src["partial"].as<decltype(dst.partial)::value_type>();
        } else {
            //dst.partial = std::nullopt;
        }
    }
}
bool convertToJson(const PossibleOperationsType &src, JsonVariant &dst)
{
    if (src.read) {
        dst["read"] = *src.read;
    }
    if (src.write) {
        dst["write"] = *src.write;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PossibleOperationsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["read"]) {
                dst.read = item["read"].as<decltype(dst.read)::value_type>();
            } else {
                //dst.read = std::nullopt;
            }
            if (item["write"]) {
                dst.write = item["write"].as<decltype(dst.write)::value_type>();
            } else {
                //dst.write = std::nullopt;
            }
        }
    } else {
        if (src["read"]) {
            dst.read = src["read"].as<decltype(dst.read)::value_type>();
        } else {
            //dst.read = std::nullopt;
        }
        if (src["write"]) {
            dst.write = src["write"].as<decltype(dst.write)::value_type>();
        } else {
            //dst.write = std::nullopt;
        }
    }
}
bool convertToJson(const PossibleOperationsElementsType &src, JsonVariant &dst)
{
    if (src.read) {
        dst["read"] = *src.read;
    }
    if (src.write) {
        dst["write"] = *src.write;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PossibleOperationsElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["read"]) {
                dst.read = item["read"].as<decltype(dst.read)::value_type>();
            } else {
                //dst.read = std::nullopt;
            }
            if (item["write"]) {
                dst.write = item["write"].as<decltype(dst.write)::value_type>();
            } else {
                //dst.write = std::nullopt;
            }
        }
    } else {
        if (src["read"]) {
            dst.read = src["read"].as<decltype(dst.read)::value_type>();
        } else {
            //dst.read = std::nullopt;
        }
        if (src["write"]) {
            dst.write = src["write"].as<decltype(dst.write)::value_type>();
        } else {
            //dst.write = std::nullopt;
        }
    }
}
bool convertToJson(const FunctionPropertyType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }
    if (src.possibleOperations) {
        dst["possibleOperations"] = *src.possibleOperations;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, FunctionPropertyType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
            if (item["possibleOperations"]) {
                dst.possibleOperations = item["possibleOperations"].as<decltype(dst.possibleOperations)::value_type>();
            } else {
                //dst.possibleOperations = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
        if (src["possibleOperations"]) {
            dst.possibleOperations = src["possibleOperations"].as<decltype(dst.possibleOperations)::value_type>();
        } else {
            //dst.possibleOperations = std::nullopt;
        }
    }
}
bool convertToJson(const FunctionPropertyElementsType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }
    if (src.possibleOperations) {
        dst["possibleOperations"] = *src.possibleOperations;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, FunctionPropertyElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
            if (item["possibleOperations"]) {
                dst.possibleOperations = item["possibleOperations"].as<decltype(dst.possibleOperations)::value_type>();
            } else {
                //dst.possibleOperations = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
        if (src["possibleOperations"]) {
            dst.possibleOperations = src["possibleOperations"].as<decltype(dst.possibleOperations)::value_type>();
        } else {
            //dst.possibleOperations = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesSlotType &src, JsonVariant &dst)
{
    if (src.timeSeriesSlotId) {
        dst["timeSeriesSlotId"] = *src.timeSeriesSlotId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.duration) {
        dst["duration"] = *src.duration;
    }
    if (src.recurrenceInformation) {
        dst["recurrenceInformation"] = *src.recurrenceInformation;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.minValue) {
        dst["minValue"] = *src.minValue;
    }
    if (src.maxValue) {
        dst["maxValue"] = *src.maxValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesSlotType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesSlotId"]) {
                dst.timeSeriesSlotId = item["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
            } else {
                //dst.timeSeriesSlotId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["duration"]) {
                dst.duration = item["duration"].as<decltype(dst.duration)::value_type>();
            } else {
                //dst.duration = std::nullopt;
            }
            if (item["recurrenceInformation"]) {
                dst.recurrenceInformation = item["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
            } else {
                //dst.recurrenceInformation = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["minValue"]) {
                dst.minValue = item["minValue"].as<decltype(dst.minValue)::value_type>();
            } else {
                //dst.minValue = std::nullopt;
            }
            if (item["maxValue"]) {
                dst.maxValue = item["maxValue"].as<decltype(dst.maxValue)::value_type>();
            } else {
                //dst.maxValue = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesSlotId"]) {
            dst.timeSeriesSlotId = src["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
        } else {
            //dst.timeSeriesSlotId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["duration"]) {
            dst.duration = src["duration"].as<decltype(dst.duration)::value_type>();
        } else {
            //dst.duration = std::nullopt;
        }
        if (src["recurrenceInformation"]) {
            dst.recurrenceInformation = src["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
        } else {
            //dst.recurrenceInformation = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["minValue"]) {
            dst.minValue = src["minValue"].as<decltype(dst.minValue)::value_type>();
        } else {
            //dst.minValue = std::nullopt;
        }
        if (src["maxValue"]) {
            dst.maxValue = src["maxValue"].as<decltype(dst.maxValue)::value_type>();
        } else {
            //dst.maxValue = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesSlotElementsType &src, JsonVariant &dst)
{
    if (src.timeSeriesSlotId) {
        dst["timeSeriesSlotId"] = *src.timeSeriesSlotId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.duration) {
        dst["duration"] = *src.duration;
    }
    if (src.recurrenceInformation) {
        dst["recurrenceInformation"] = *src.recurrenceInformation;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.minValue) {
        dst["minValue"] = *src.minValue;
    }
    if (src.maxValue) {
        dst["maxValue"] = *src.maxValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesSlotElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesSlotId"]) {
                dst.timeSeriesSlotId = item["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
            } else {
                //dst.timeSeriesSlotId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["duration"]) {
                dst.duration = item["duration"].as<decltype(dst.duration)::value_type>();
            } else {
                //dst.duration = std::nullopt;
            }
            if (item["recurrenceInformation"]) {
                dst.recurrenceInformation = item["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
            } else {
                //dst.recurrenceInformation = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["minValue"]) {
                dst.minValue = item["minValue"].as<decltype(dst.minValue)::value_type>();
            } else {
                //dst.minValue = std::nullopt;
            }
            if (item["maxValue"]) {
                dst.maxValue = item["maxValue"].as<decltype(dst.maxValue)::value_type>();
            } else {
                //dst.maxValue = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesSlotId"]) {
            dst.timeSeriesSlotId = src["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
        } else {
            //dst.timeSeriesSlotId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["duration"]) {
            dst.duration = src["duration"].as<decltype(dst.duration)::value_type>();
        } else {
            //dst.duration = std::nullopt;
        }
        if (src["recurrenceInformation"]) {
            dst.recurrenceInformation = src["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
        } else {
            //dst.recurrenceInformation = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["minValue"]) {
            dst.minValue = src["minValue"].as<decltype(dst.minValue)::value_type>();
        } else {
            //dst.minValue = std::nullopt;
        }
        if (src["maxValue"]) {
            dst.maxValue = src["maxValue"].as<decltype(dst.maxValue)::value_type>();
        } else {
            //dst.maxValue = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeSeriesSlot) {
        dst["timeSeriesSlot"] = *src.timeSeriesSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeSeriesSlot"]) {
                dst.timeSeriesSlot = item["timeSeriesSlot"].as<decltype(dst.timeSeriesSlot)::value_type>();
            } else {
                //dst.timeSeriesSlot = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeSeriesSlot"]) {
            dst.timeSeriesSlot = src["timeSeriesSlot"].as<decltype(dst.timeSeriesSlot)::value_type>();
        } else {
            //dst.timeSeriesSlot = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDataElementsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeSeriesSlot) {
        dst["timeSeriesSlot"] = *src.timeSeriesSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeSeriesSlot"]) {
                dst.timeSeriesSlot = item["timeSeriesSlot"].as<decltype(dst.timeSeriesSlot)::value_type>();
            } else {
                //dst.timeSeriesSlot = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeSeriesSlot"]) {
            dst.timeSeriesSlot = src["timeSeriesSlot"].as<decltype(dst.timeSeriesSlot)::value_type>();
        } else {
            //dst.timeSeriesSlot = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesListDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesData) {
        dst["timeSeriesData"] = *src.timeSeriesData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesData"]) {
                dst.timeSeriesData = item["timeSeriesData"].as<decltype(dst.timeSeriesData)::value_type>();
            } else {
                //dst.timeSeriesData = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesData"]) {
            dst.timeSeriesData = src["timeSeriesData"].as<decltype(dst.timeSeriesData)::value_type>();
        } else {
            //dst.timeSeriesData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timeSeriesSlotId) {
        dst["timeSeriesSlotId"] = *src.timeSeriesSlotId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timeSeriesSlotId"]) {
                dst.timeSeriesSlotId = item["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
            } else {
                //dst.timeSeriesSlotId = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timeSeriesSlotId"]) {
            dst.timeSeriesSlotId = src["timeSeriesSlotId"].as<decltype(dst.timeSeriesSlotId)::value_type>();
        } else {
            //dst.timeSeriesSlotId = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDescriptionDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timeSeriesType) {
        dst["timeSeriesType"] = *src.timeSeriesType;
    }
    if (src.timeSeriesWriteable) {
        dst["timeSeriesWriteable"] = *src.timeSeriesWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timeSeriesType"]) {
                dst.timeSeriesType = item["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
            } else {
                //dst.timeSeriesType = std::nullopt;
            }
            if (item["timeSeriesWriteable"]) {
                dst.timeSeriesWriteable = item["timeSeriesWriteable"].as<decltype(dst.timeSeriesWriteable)::value_type>();
            } else {
                //dst.timeSeriesWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timeSeriesType"]) {
            dst.timeSeriesType = src["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
        } else {
            //dst.timeSeriesType = std::nullopt;
        }
        if (src["timeSeriesWriteable"]) {
            dst.timeSeriesWriteable = src["timeSeriesWriteable"].as<decltype(dst.timeSeriesWriteable)::value_type>();
        } else {
            //dst.timeSeriesWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timeSeriesType) {
        dst["timeSeriesType"] = *src.timeSeriesType;
    }
    if (src.timeSeriesWriteable) {
        dst["timeSeriesWriteable"] = *src.timeSeriesWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timeSeriesType"]) {
                dst.timeSeriesType = item["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
            } else {
                //dst.timeSeriesType = std::nullopt;
            }
            if (item["timeSeriesWriteable"]) {
                dst.timeSeriesWriteable = item["timeSeriesWriteable"].as<decltype(dst.timeSeriesWriteable)::value_type>();
            } else {
                //dst.timeSeriesWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timeSeriesType"]) {
            dst.timeSeriesType = src["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
        } else {
            //dst.timeSeriesType = std::nullopt;
        }
        if (src["timeSeriesWriteable"]) {
            dst.timeSeriesWriteable = src["timeSeriesWriteable"].as<decltype(dst.timeSeriesWriteable)::value_type>();
        } else {
            //dst.timeSeriesWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesDescriptionData) {
        dst["timeSeriesDescriptionData"] = *src.timeSeriesDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesDescriptionData"]) {
                dst.timeSeriesDescriptionData = item["timeSeriesDescriptionData"].as<decltype(dst.timeSeriesDescriptionData)::value_type>();
            } else {
                //dst.timeSeriesDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesDescriptionData"]) {
            dst.timeSeriesDescriptionData = src["timeSeriesDescriptionData"].as<decltype(dst.timeSeriesDescriptionData)::value_type>();
        } else {
            //dst.timeSeriesDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.timeSeriesType) {
        dst["timeSeriesType"] = *src.timeSeriesType;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["timeSeriesType"]) {
                dst.timeSeriesType = item["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
            } else {
                //dst.timeSeriesType = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["timeSeriesType"]) {
            dst.timeSeriesType = src["timeSeriesType"].as<decltype(dst.timeSeriesType)::value_type>();
        } else {
            //dst.timeSeriesType = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesConstraintsDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.slotCountMin) {
        dst["slotCountMin"] = *src.slotCountMin;
    }
    if (src.slotCountMax) {
        dst["slotCountMax"] = *src.slotCountMax;
    }
    if (src.slotDurationMin) {
        dst["slotDurationMin"] = *src.slotDurationMin;
    }
    if (src.slotDurationMax) {
        dst["slotDurationMax"] = *src.slotDurationMax;
    }
    if (src.slotDurationStepSize) {
        dst["slotDurationStepSize"] = *src.slotDurationStepSize;
    }
    if (src.earliestTimeSeriesStartTime) {
        dst["earliestTimeSeriesStartTime"] = *src.earliestTimeSeriesStartTime;
    }
    if (src.latestTimeSeriesEndTime) {
        dst["latestTimeSeriesEndTime"] = *src.latestTimeSeriesEndTime;
    }
    if (src.slotValueMin) {
        dst["slotValueMin"] = *src.slotValueMin;
    }
    if (src.slotValueMax) {
        dst["slotValueMax"] = *src.slotValueMax;
    }
    if (src.slotValueStepSize) {
        dst["slotValueStepSize"] = *src.slotValueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["slotCountMin"]) {
                dst.slotCountMin = item["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
            } else {
                //dst.slotCountMin = std::nullopt;
            }
            if (item["slotCountMax"]) {
                dst.slotCountMax = item["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
            } else {
                //dst.slotCountMax = std::nullopt;
            }
            if (item["slotDurationMin"]) {
                dst.slotDurationMin = item["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
            } else {
                //dst.slotDurationMin = std::nullopt;
            }
            if (item["slotDurationMax"]) {
                dst.slotDurationMax = item["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
            } else {
                //dst.slotDurationMax = std::nullopt;
            }
            if (item["slotDurationStepSize"]) {
                dst.slotDurationStepSize = item["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
            } else {
                //dst.slotDurationStepSize = std::nullopt;
            }
            if (item["earliestTimeSeriesStartTime"]) {
                dst.earliestTimeSeriesStartTime =
                    item["earliestTimeSeriesStartTime"].as<decltype(dst.earliestTimeSeriesStartTime)::value_type>();
            } else {
                //dst.earliestTimeSeriesStartTime = std::nullopt;
            }
            if (item["latestTimeSeriesEndTime"]) {
                dst.latestTimeSeriesEndTime = item["latestTimeSeriesEndTime"].as<decltype(dst.latestTimeSeriesEndTime)::value_type>();
            } else {
                //dst.latestTimeSeriesEndTime = std::nullopt;
            }
            if (item["slotValueMin"]) {
                dst.slotValueMin = item["slotValueMin"].as<decltype(dst.slotValueMin)::value_type>();
            } else {
                //dst.slotValueMin = std::nullopt;
            }
            if (item["slotValueMax"]) {
                dst.slotValueMax = item["slotValueMax"].as<decltype(dst.slotValueMax)::value_type>();
            } else {
                //dst.slotValueMax = std::nullopt;
            }
            if (item["slotValueStepSize"]) {
                dst.slotValueStepSize = item["slotValueStepSize"].as<decltype(dst.slotValueStepSize)::value_type>();
            } else {
                //dst.slotValueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["slotCountMin"]) {
            dst.slotCountMin = src["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
        } else {
            //dst.slotCountMin = std::nullopt;
        }
        if (src["slotCountMax"]) {
            dst.slotCountMax = src["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
        } else {
            //dst.slotCountMax = std::nullopt;
        }
        if (src["slotDurationMin"]) {
            dst.slotDurationMin = src["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
        } else {
            //dst.slotDurationMin = std::nullopt;
        }
        if (src["slotDurationMax"]) {
            dst.slotDurationMax = src["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
        } else {
            //dst.slotDurationMax = std::nullopt;
        }
        if (src["slotDurationStepSize"]) {
            dst.slotDurationStepSize = src["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
        } else {
            //dst.slotDurationStepSize = std::nullopt;
        }
        if (src["earliestTimeSeriesStartTime"]) {
            dst.earliestTimeSeriesStartTime =
                src["earliestTimeSeriesStartTime"].as<decltype(dst.earliestTimeSeriesStartTime)::value_type>();
        } else {
            //dst.earliestTimeSeriesStartTime = std::nullopt;
        }
        if (src["latestTimeSeriesEndTime"]) {
            dst.latestTimeSeriesEndTime = src["latestTimeSeriesEndTime"].as<decltype(dst.latestTimeSeriesEndTime)::value_type>();
        } else {
            //dst.latestTimeSeriesEndTime = std::nullopt;
        }
        if (src["slotValueMin"]) {
            dst.slotValueMin = src["slotValueMin"].as<decltype(dst.slotValueMin)::value_type>();
        } else {
            //dst.slotValueMin = std::nullopt;
        }
        if (src["slotValueMax"]) {
            dst.slotValueMax = src["slotValueMax"].as<decltype(dst.slotValueMax)::value_type>();
        } else {
            //dst.slotValueMax = std::nullopt;
        }
        if (src["slotValueStepSize"]) {
            dst.slotValueStepSize = src["slotValueStepSize"].as<decltype(dst.slotValueStepSize)::value_type>();
        } else {
            //dst.slotValueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }
    if (src.slotCountMin) {
        dst["slotCountMin"] = *src.slotCountMin;
    }
    if (src.slotCountMax) {
        dst["slotCountMax"] = *src.slotCountMax;
    }
    if (src.slotDurationMin) {
        dst["slotDurationMin"] = *src.slotDurationMin;
    }
    if (src.slotDurationMax) {
        dst["slotDurationMax"] = *src.slotDurationMax;
    }
    if (src.slotDurationStepSize) {
        dst["slotDurationStepSize"] = *src.slotDurationStepSize;
    }
    if (src.earliestTimeSeriesStartTime) {
        dst["earliestTimeSeriesStartTime"] = *src.earliestTimeSeriesStartTime;
    }
    if (src.latestTimeSeriesEndTime) {
        dst["latestTimeSeriesEndTime"] = *src.latestTimeSeriesEndTime;
    }
    if (src.slotValueMin) {
        dst["slotValueMin"] = *src.slotValueMin;
    }
    if (src.slotValueMax) {
        dst["slotValueMax"] = *src.slotValueMax;
    }
    if (src.slotValueStepSize) {
        dst["slotValueStepSize"] = *src.slotValueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
            if (item["slotCountMin"]) {
                dst.slotCountMin = item["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
            } else {
                //dst.slotCountMin = std::nullopt;
            }
            if (item["slotCountMax"]) {
                dst.slotCountMax = item["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
            } else {
                //dst.slotCountMax = std::nullopt;
            }
            if (item["slotDurationMin"]) {
                dst.slotDurationMin = item["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
            } else {
                //dst.slotDurationMin = std::nullopt;
            }
            if (item["slotDurationMax"]) {
                dst.slotDurationMax = item["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
            } else {
                //dst.slotDurationMax = std::nullopt;
            }
            if (item["slotDurationStepSize"]) {
                dst.slotDurationStepSize = item["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
            } else {
                //dst.slotDurationStepSize = std::nullopt;
            }
            if (item["earliestTimeSeriesStartTime"]) {
                dst.earliestTimeSeriesStartTime =
                    item["earliestTimeSeriesStartTime"].as<decltype(dst.earliestTimeSeriesStartTime)::value_type>();
            } else {
                //dst.earliestTimeSeriesStartTime = std::nullopt;
            }
            if (item["latestTimeSeriesEndTime"]) {
                dst.latestTimeSeriesEndTime = item["latestTimeSeriesEndTime"].as<decltype(dst.latestTimeSeriesEndTime)::value_type>();
            } else {
                //dst.latestTimeSeriesEndTime = std::nullopt;
            }
            if (item["slotValueMin"]) {
                dst.slotValueMin = item["slotValueMin"].as<decltype(dst.slotValueMin)::value_type>();
            } else {
                //dst.slotValueMin = std::nullopt;
            }
            if (item["slotValueMax"]) {
                dst.slotValueMax = item["slotValueMax"].as<decltype(dst.slotValueMax)::value_type>();
            } else {
                //dst.slotValueMax = std::nullopt;
            }
            if (item["slotValueStepSize"]) {
                dst.slotValueStepSize = item["slotValueStepSize"].as<decltype(dst.slotValueStepSize)::value_type>();
            } else {
                //dst.slotValueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
        if (src["slotCountMin"]) {
            dst.slotCountMin = src["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
        } else {
            //dst.slotCountMin = std::nullopt;
        }
        if (src["slotCountMax"]) {
            dst.slotCountMax = src["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
        } else {
            //dst.slotCountMax = std::nullopt;
        }
        if (src["slotDurationMin"]) {
            dst.slotDurationMin = src["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
        } else {
            //dst.slotDurationMin = std::nullopt;
        }
        if (src["slotDurationMax"]) {
            dst.slotDurationMax = src["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
        } else {
            //dst.slotDurationMax = std::nullopt;
        }
        if (src["slotDurationStepSize"]) {
            dst.slotDurationStepSize = src["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
        } else {
            //dst.slotDurationStepSize = std::nullopt;
        }
        if (src["earliestTimeSeriesStartTime"]) {
            dst.earliestTimeSeriesStartTime =
                src["earliestTimeSeriesStartTime"].as<decltype(dst.earliestTimeSeriesStartTime)::value_type>();
        } else {
            //dst.earliestTimeSeriesStartTime = std::nullopt;
        }
        if (src["latestTimeSeriesEndTime"]) {
            dst.latestTimeSeriesEndTime = src["latestTimeSeriesEndTime"].as<decltype(dst.latestTimeSeriesEndTime)::value_type>();
        } else {
            //dst.latestTimeSeriesEndTime = std::nullopt;
        }
        if (src["slotValueMin"]) {
            dst.slotValueMin = src["slotValueMin"].as<decltype(dst.slotValueMin)::value_type>();
        } else {
            //dst.slotValueMin = std::nullopt;
        }
        if (src["slotValueMax"]) {
            dst.slotValueMax = src["slotValueMax"].as<decltype(dst.slotValueMax)::value_type>();
        } else {
            //dst.slotValueMax = std::nullopt;
        }
        if (src["slotValueStepSize"]) {
            dst.slotValueStepSize = src["slotValueStepSize"].as<decltype(dst.slotValueStepSize)::value_type>();
        } else {
            //dst.slotValueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.timeSeriesConstraintsData) {
        dst["timeSeriesConstraintsData"] = *src.timeSeriesConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesConstraintsData"]) {
                dst.timeSeriesConstraintsData = item["timeSeriesConstraintsData"].as<decltype(dst.timeSeriesConstraintsData)::value_type>();
            } else {
                //dst.timeSeriesConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesConstraintsData"]) {
            dst.timeSeriesConstraintsData = src["timeSeriesConstraintsData"].as<decltype(dst.timeSeriesConstraintsData)::value_type>();
        } else {
            //dst.timeSeriesConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeSeriesConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeSeriesId) {
        dst["timeSeriesId"] = *src.timeSeriesId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeSeriesConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeSeriesId"]) {
                dst.timeSeriesId = item["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
            } else {
                //dst.timeSeriesId = std::nullopt;
            }
        }
    } else {
        if (src["timeSeriesId"]) {
            dst.timeSeriesId = src["timeSeriesId"].as<decltype(dst.timeSeriesId)::value_type>();
        } else {
            //dst.timeSeriesId = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDataType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.valueTendency) {
        dst["valueTendency"] = *src.valueTendency;
    }
    if (src.valueState) {
        dst["valueState"] = *src.valueState;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["valueTendency"]) {
                dst.valueTendency = item["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
            } else {
                //dst.valueTendency = std::nullopt;
            }
            if (item["valueState"]) {
                dst.valueState = item["valueState"].as<decltype(dst.valueState)::value_type>();
            } else {
                //dst.valueState = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["valueTendency"]) {
            dst.valueTendency = src["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
        } else {
            //dst.valueTendency = std::nullopt;
        }
        if (src["valueState"]) {
            dst.valueState = src["valueState"].as<decltype(dst.valueState)::value_type>();
        } else {
            //dst.valueState = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDataElementsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.valueTendency) {
        dst["valueTendency"] = *src.valueTendency;
    }
    if (src.valueState) {
        dst["valueState"] = *src.valueState;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["valueTendency"]) {
                dst.valueTendency = item["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
            } else {
                //dst.valueTendency = std::nullopt;
            }
            if (item["valueState"]) {
                dst.valueState = item["valueState"].as<decltype(dst.valueState)::value_type>();
            } else {
                //dst.valueState = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["valueTendency"]) {
            dst.valueTendency = src["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
        } else {
            //dst.valueTendency = std::nullopt;
        }
        if (src["valueState"]) {
            dst.valueState = src["valueState"].as<decltype(dst.valueState)::value_type>();
        } else {
            //dst.valueState = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementListDataType &src, JsonVariant &dst)
{
    if (src.measurementData) {
        dst["measurementData"] = *src.measurementData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementData"]) {
                dst.measurementData = item["measurementData"].as<decltype(dst.measurementData)::value_type>();
            } else {
                //dst.measurementData = std::nullopt;
            }
        }
    } else {
        if (src["measurementData"]) {
            dst.measurementData = src["measurementData"].as<decltype(dst.measurementData)::value_type>();
        } else {
            //dst.measurementData = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementSeriesDataType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.valueTendency) {
        dst["valueTendency"] = *src.valueTendency;
    }
    if (src.valueState) {
        dst["valueState"] = *src.valueState;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["valueTendency"]) {
                dst.valueTendency = item["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
            } else {
                //dst.valueTendency = std::nullopt;
            }
            if (item["valueState"]) {
                dst.valueState = item["valueState"].as<decltype(dst.valueState)::value_type>();
            } else {
                //dst.valueState = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["valueTendency"]) {
            dst.valueTendency = src["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
        } else {
            //dst.valueTendency = std::nullopt;
        }
        if (src["valueState"]) {
            dst.valueState = src["valueState"].as<decltype(dst.valueState)::value_type>();
        } else {
            //dst.valueState = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementSeriesDataElementsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.valueTendency) {
        dst["valueTendency"] = *src.valueTendency;
    }
    if (src.valueState) {
        dst["valueState"] = *src.valueState;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["valueTendency"]) {
                dst.valueTendency = item["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
            } else {
                //dst.valueTendency = std::nullopt;
            }
            if (item["valueState"]) {
                dst.valueState = item["valueState"].as<decltype(dst.valueState)::value_type>();
            } else {
                //dst.valueState = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["valueTendency"]) {
            dst.valueTendency = src["valueTendency"].as<decltype(dst.valueTendency)::value_type>();
        } else {
            //dst.valueTendency = std::nullopt;
        }
        if (src["valueState"]) {
            dst.valueState = src["valueState"].as<decltype(dst.valueState)::value_type>();
        } else {
            //dst.valueState = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementSeriesListDataType &src, JsonVariant &dst)
{
    if (src.measurementSeriesData) {
        dst["measurementSeriesData"] = *src.measurementSeriesData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementSeriesData"]) {
                dst.measurementSeriesData = item["measurementSeriesData"].as<decltype(dst.measurementSeriesData)::value_type>();
            } else {
                //dst.measurementSeriesData = std::nullopt;
            }
        }
    } else {
        if (src["measurementSeriesData"]) {
            dst.measurementSeriesData = src["measurementSeriesData"].as<decltype(dst.measurementSeriesData)::value_type>();
        } else {
            //dst.measurementSeriesData = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementSeriesListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementSeriesListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementConstraintsDataType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.measurementConstraintsData) {
        dst["measurementConstraintsData"] = *src.measurementConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementConstraintsData"]) {
                dst.measurementConstraintsData =
                    item["measurementConstraintsData"].as<decltype(dst.measurementConstraintsData)::value_type>();
            } else {
                //dst.measurementConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["measurementConstraintsData"]) {
            dst.measurementConstraintsData = src["measurementConstraintsData"].as<decltype(dst.measurementConstraintsData)::value_type>();
        } else {
            //dst.measurementConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDescriptionDataType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.measurementType) {
        dst["measurementType"] = *src.measurementType;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.calibrationValue) {
        dst["calibrationValue"] = *src.calibrationValue;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["measurementType"]) {
                dst.measurementType = item["measurementType"].as<decltype(dst.measurementType)::value_type>();
            } else {
                //dst.measurementType = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["calibrationValue"]) {
                dst.calibrationValue = item["calibrationValue"].as<decltype(dst.calibrationValue)::value_type>();
            } else {
                //dst.calibrationValue = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["measurementType"]) {
            dst.measurementType = src["measurementType"].as<decltype(dst.measurementType)::value_type>();
        } else {
            //dst.measurementType = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["calibrationValue"]) {
            dst.calibrationValue = src["calibrationValue"].as<decltype(dst.calibrationValue)::value_type>();
        } else {
            //dst.calibrationValue = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.measurementType) {
        dst["measurementType"] = *src.measurementType;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.calibrationValue) {
        dst["calibrationValue"] = *src.calibrationValue;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["measurementType"]) {
                dst.measurementType = item["measurementType"].as<decltype(dst.measurementType)::value_type>();
            } else {
                //dst.measurementType = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["calibrationValue"]) {
                dst.calibrationValue = item["calibrationValue"].as<decltype(dst.calibrationValue)::value_type>();
            } else {
                //dst.calibrationValue = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["measurementType"]) {
            dst.measurementType = src["measurementType"].as<decltype(dst.measurementType)::value_type>();
        } else {
            //dst.measurementType = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["calibrationValue"]) {
            dst.calibrationValue = src["calibrationValue"].as<decltype(dst.calibrationValue)::value_type>();
        } else {
            //dst.calibrationValue = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.measurementDescriptionData) {
        dst["measurementDescriptionData"] = *src.measurementDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementDescriptionData"]) {
                dst.measurementDescriptionData =
                    item["measurementDescriptionData"].as<decltype(dst.measurementDescriptionData)::value_type>();
            } else {
                //dst.measurementDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["measurementDescriptionData"]) {
            dst.measurementDescriptionData = src["measurementDescriptionData"].as<decltype(dst.measurementDescriptionData)::value_type>();
        } else {
            //dst.measurementDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.measurementType) {
        dst["measurementType"] = *src.measurementType;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["measurementType"]) {
                dst.measurementType = item["measurementType"].as<decltype(dst.measurementType)::value_type>();
            } else {
                //dst.measurementType = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["measurementType"]) {
            dst.measurementType = src["measurementType"].as<decltype(dst.measurementType)::value_type>();
        } else {
            //dst.measurementType = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementThresholdRelationDataType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementThresholdRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementThresholdRelationListDataType &src, JsonVariant &dst)
{
    if (src.measurementThresholdRelationData) {
        dst["measurementThresholdRelationData"] = *src.measurementThresholdRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementThresholdRelationData"]) {
                dst.measurementThresholdRelationData =
                    item["measurementThresholdRelationData"].as<decltype(dst.measurementThresholdRelationData)::value_type>();
            } else {
                //dst.measurementThresholdRelationData = std::nullopt;
            }
        }
    } else {
        if (src["measurementThresholdRelationData"]) {
            dst.measurementThresholdRelationData =
                src["measurementThresholdRelationData"].as<decltype(dst.measurementThresholdRelationData)::value_type>();
        } else {
            //dst.measurementThresholdRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const MeasurementThresholdRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, MeasurementThresholdRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDataType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdValue) {
        dst["thresholdValue"] = *src.thresholdValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdValue"]) {
                dst.thresholdValue = item["thresholdValue"].as<decltype(dst.thresholdValue)::value_type>();
            } else {
                //dst.thresholdValue = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdValue"]) {
            dst.thresholdValue = src["thresholdValue"].as<decltype(dst.thresholdValue)::value_type>();
        } else {
            //dst.thresholdValue = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDataElementsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdValue) {
        dst["thresholdValue"] = *src.thresholdValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdValue"]) {
                dst.thresholdValue = item["thresholdValue"].as<decltype(dst.thresholdValue)::value_type>();
            } else {
                //dst.thresholdValue = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdValue"]) {
            dst.thresholdValue = src["thresholdValue"].as<decltype(dst.thresholdValue)::value_type>();
        } else {
            //dst.thresholdValue = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdListDataType &src, JsonVariant &dst)
{
    if (src.thresholdData) {
        dst["thresholdData"] = *src.thresholdData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdData"]) {
                dst.thresholdData = item["thresholdData"].as<decltype(dst.thresholdData)::value_type>();
            } else {
                //dst.thresholdData = std::nullopt;
            }
        }
    } else {
        if (src["thresholdData"]) {
            dst.thresholdData = src["thresholdData"].as<decltype(dst.thresholdData)::value_type>();
        } else {
            //dst.thresholdData = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdConstraintsDataType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdRangeMin) {
        dst["thresholdRangeMin"] = *src.thresholdRangeMin;
    }
    if (src.thresholdRangeMax) {
        dst["thresholdRangeMax"] = *src.thresholdRangeMax;
    }
    if (src.thresholdStepSize) {
        dst["thresholdStepSize"] = *src.thresholdStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdRangeMin"]) {
                dst.thresholdRangeMin = item["thresholdRangeMin"].as<decltype(dst.thresholdRangeMin)::value_type>();
            } else {
                //dst.thresholdRangeMin = std::nullopt;
            }
            if (item["thresholdRangeMax"]) {
                dst.thresholdRangeMax = item["thresholdRangeMax"].as<decltype(dst.thresholdRangeMax)::value_type>();
            } else {
                //dst.thresholdRangeMax = std::nullopt;
            }
            if (item["thresholdStepSize"]) {
                dst.thresholdStepSize = item["thresholdStepSize"].as<decltype(dst.thresholdStepSize)::value_type>();
            } else {
                //dst.thresholdStepSize = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdRangeMin"]) {
            dst.thresholdRangeMin = src["thresholdRangeMin"].as<decltype(dst.thresholdRangeMin)::value_type>();
        } else {
            //dst.thresholdRangeMin = std::nullopt;
        }
        if (src["thresholdRangeMax"]) {
            dst.thresholdRangeMax = src["thresholdRangeMax"].as<decltype(dst.thresholdRangeMax)::value_type>();
        } else {
            //dst.thresholdRangeMax = std::nullopt;
        }
        if (src["thresholdStepSize"]) {
            dst.thresholdStepSize = src["thresholdStepSize"].as<decltype(dst.thresholdStepSize)::value_type>();
        } else {
            //dst.thresholdStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdRangeMin) {
        dst["thresholdRangeMin"] = *src.thresholdRangeMin;
    }
    if (src.thresholdRangeMax) {
        dst["thresholdRangeMax"] = *src.thresholdRangeMax;
    }
    if (src.thresholdStepSize) {
        dst["thresholdStepSize"] = *src.thresholdStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdRangeMin"]) {
                dst.thresholdRangeMin = item["thresholdRangeMin"].as<decltype(dst.thresholdRangeMin)::value_type>();
            } else {
                //dst.thresholdRangeMin = std::nullopt;
            }
            if (item["thresholdRangeMax"]) {
                dst.thresholdRangeMax = item["thresholdRangeMax"].as<decltype(dst.thresholdRangeMax)::value_type>();
            } else {
                //dst.thresholdRangeMax = std::nullopt;
            }
            if (item["thresholdStepSize"]) {
                dst.thresholdStepSize = item["thresholdStepSize"].as<decltype(dst.thresholdStepSize)::value_type>();
            } else {
                //dst.thresholdStepSize = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdRangeMin"]) {
            dst.thresholdRangeMin = src["thresholdRangeMin"].as<decltype(dst.thresholdRangeMin)::value_type>();
        } else {
            //dst.thresholdRangeMin = std::nullopt;
        }
        if (src["thresholdRangeMax"]) {
            dst.thresholdRangeMax = src["thresholdRangeMax"].as<decltype(dst.thresholdRangeMax)::value_type>();
        } else {
            //dst.thresholdRangeMax = std::nullopt;
        }
        if (src["thresholdStepSize"]) {
            dst.thresholdStepSize = src["thresholdStepSize"].as<decltype(dst.thresholdStepSize)::value_type>();
        } else {
            //dst.thresholdStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.thresholdConstraintsData) {
        dst["thresholdConstraintsData"] = *src.thresholdConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdConstraintsData"]) {
                dst.thresholdConstraintsData = item["thresholdConstraintsData"].as<decltype(dst.thresholdConstraintsData)::value_type>();
            } else {
                //dst.thresholdConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["thresholdConstraintsData"]) {
            dst.thresholdConstraintsData = src["thresholdConstraintsData"].as<decltype(dst.thresholdConstraintsData)::value_type>();
        } else {
            //dst.thresholdConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDescriptionDataType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdType) {
        dst["thresholdType"] = *src.thresholdType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdType"]) {
                dst.thresholdType = item["thresholdType"].as<decltype(dst.thresholdType)::value_type>();
            } else {
                //dst.thresholdType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdType"]) {
            dst.thresholdType = src["thresholdType"].as<decltype(dst.thresholdType)::value_type>();
        } else {
            //dst.thresholdType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdType) {
        dst["thresholdType"] = *src.thresholdType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdType"]) {
                dst.thresholdType = item["thresholdType"].as<decltype(dst.thresholdType)::value_type>();
            } else {
                //dst.thresholdType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdType"]) {
            dst.thresholdType = src["thresholdType"].as<decltype(dst.thresholdType)::value_type>();
        } else {
            //dst.thresholdType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.thresholdDescriptionData) {
        dst["thresholdDescriptionData"] = *src.thresholdDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdDescriptionData"]) {
                dst.thresholdDescriptionData = item["thresholdDescriptionData"].as<decltype(dst.thresholdDescriptionData)::value_type>();
            } else {
                //dst.thresholdDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["thresholdDescriptionData"]) {
            dst.thresholdDescriptionData = src["thresholdDescriptionData"].as<decltype(dst.thresholdDescriptionData)::value_type>();
        } else {
            //dst.thresholdDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const ThresholdDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ThresholdDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlActivityDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.activityState) {
        dst["activityState"] = *src.activityState;
    }
    if (src.isActivityStateChangeable) {
        dst["isActivityStateChangeable"] = *src.isActivityStateChangeable;
    }
    if (src.energyMode) {
        dst["energyMode"] = *src.energyMode;
    }
    if (src.isEnergyModeChangeable) {
        dst["isEnergyModeChangeable"] = *src.isEnergyModeChangeable;
    }
    if (src.power) {
        dst["power"] = *src.power;
    }
    if (src.isPowerChangeable) {
        dst["isPowerChangeable"] = *src.isPowerChangeable;
    }
    if (src.energy) {
        dst["energy"] = *src.energy;
    }
    if (src.isEnergyChangeable) {
        dst["isEnergyChangeable"] = *src.isEnergyChangeable;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlActivityDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["activityState"]) {
                dst.activityState = item["activityState"].as<decltype(dst.activityState)::value_type>();
            } else {
                //dst.activityState = std::nullopt;
            }
            if (item["isActivityStateChangeable"]) {
                dst.isActivityStateChangeable = item["isActivityStateChangeable"].as<decltype(dst.isActivityStateChangeable)::value_type>();
            } else {
                //dst.isActivityStateChangeable = std::nullopt;
            }
            if (item["energyMode"]) {
                dst.energyMode = item["energyMode"].as<decltype(dst.energyMode)::value_type>();
            } else {
                //dst.energyMode = std::nullopt;
            }
            if (item["isEnergyModeChangeable"]) {
                dst.isEnergyModeChangeable = item["isEnergyModeChangeable"].as<decltype(dst.isEnergyModeChangeable)::value_type>();
            } else {
                //dst.isEnergyModeChangeable = std::nullopt;
            }
            if (item["power"]) {
                dst.power = item["power"].as<decltype(dst.power)::value_type>();
            } else {
                //dst.power = std::nullopt;
            }
            if (item["isPowerChangeable"]) {
                dst.isPowerChangeable = item["isPowerChangeable"].as<decltype(dst.isPowerChangeable)::value_type>();
            } else {
                //dst.isPowerChangeable = std::nullopt;
            }
            if (item["energy"]) {
                dst.energy = item["energy"].as<decltype(dst.energy)::value_type>();
            } else {
                //dst.energy = std::nullopt;
            }
            if (item["isEnergyChangeable"]) {
                dst.isEnergyChangeable = item["isEnergyChangeable"].as<decltype(dst.isEnergyChangeable)::value_type>();
            } else {
                //dst.isEnergyChangeable = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["activityState"]) {
            dst.activityState = src["activityState"].as<decltype(dst.activityState)::value_type>();
        } else {
            //dst.activityState = std::nullopt;
        }
        if (src["isActivityStateChangeable"]) {
            dst.isActivityStateChangeable = src["isActivityStateChangeable"].as<decltype(dst.isActivityStateChangeable)::value_type>();
        } else {
            //dst.isActivityStateChangeable = std::nullopt;
        }
        if (src["energyMode"]) {
            dst.energyMode = src["energyMode"].as<decltype(dst.energyMode)::value_type>();
        } else {
            //dst.energyMode = std::nullopt;
        }
        if (src["isEnergyModeChangeable"]) {
            dst.isEnergyModeChangeable = src["isEnergyModeChangeable"].as<decltype(dst.isEnergyModeChangeable)::value_type>();
        } else {
            //dst.isEnergyModeChangeable = std::nullopt;
        }
        if (src["power"]) {
            dst.power = src["power"].as<decltype(dst.power)::value_type>();
        } else {
            //dst.power = std::nullopt;
        }
        if (src["isPowerChangeable"]) {
            dst.isPowerChangeable = src["isPowerChangeable"].as<decltype(dst.isPowerChangeable)::value_type>();
        } else {
            //dst.isPowerChangeable = std::nullopt;
        }
        if (src["energy"]) {
            dst.energy = src["energy"].as<decltype(dst.energy)::value_type>();
        } else {
            //dst.energy = std::nullopt;
        }
        if (src["isEnergyChangeable"]) {
            dst.isEnergyChangeable = src["isEnergyChangeable"].as<decltype(dst.isEnergyChangeable)::value_type>();
        } else {
            //dst.isEnergyChangeable = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlActivityDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.activityState) {
        dst["activityState"] = *src.activityState;
    }
    if (src.isActivityStateChangeable) {
        dst["isActivityStateChangeable"] = *src.isActivityStateChangeable;
    }
    if (src.energyMode) {
        dst["energyMode"] = *src.energyMode;
    }
    if (src.isEnergyModeChangeable) {
        dst["isEnergyModeChangeable"] = *src.isEnergyModeChangeable;
    }
    if (src.power) {
        dst["power"] = *src.power;
    }
    if (src.isPowerChangeable) {
        dst["isPowerChangeable"] = *src.isPowerChangeable;
    }
    if (src.energy) {
        dst["energy"] = *src.energy;
    }
    if (src.isEnergyChangeable) {
        dst["isEnergyChangeable"] = *src.isEnergyChangeable;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlActivityDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["activityState"]) {
                dst.activityState = item["activityState"].as<decltype(dst.activityState)::value_type>();
            } else {
                //dst.activityState = std::nullopt;
            }
            if (item["isActivityStateChangeable"]) {
                dst.isActivityStateChangeable = item["isActivityStateChangeable"].as<decltype(dst.isActivityStateChangeable)::value_type>();
            } else {
                //dst.isActivityStateChangeable = std::nullopt;
            }
            if (item["energyMode"]) {
                dst.energyMode = item["energyMode"].as<decltype(dst.energyMode)::value_type>();
            } else {
                //dst.energyMode = std::nullopt;
            }
            if (item["isEnergyModeChangeable"]) {
                dst.isEnergyModeChangeable = item["isEnergyModeChangeable"].as<decltype(dst.isEnergyModeChangeable)::value_type>();
            } else {
                //dst.isEnergyModeChangeable = std::nullopt;
            }
            if (item["power"]) {
                dst.power = item["power"].as<decltype(dst.power)::value_type>();
            } else {
                //dst.power = std::nullopt;
            }
            if (item["isPowerChangeable"]) {
                dst.isPowerChangeable = item["isPowerChangeable"].as<decltype(dst.isPowerChangeable)::value_type>();
            } else {
                //dst.isPowerChangeable = std::nullopt;
            }
            if (item["energy"]) {
                dst.energy = item["energy"].as<decltype(dst.energy)::value_type>();
            } else {
                //dst.energy = std::nullopt;
            }
            if (item["isEnergyChangeable"]) {
                dst.isEnergyChangeable = item["isEnergyChangeable"].as<decltype(dst.isEnergyChangeable)::value_type>();
            } else {
                //dst.isEnergyChangeable = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["activityState"]) {
            dst.activityState = src["activityState"].as<decltype(dst.activityState)::value_type>();
        } else {
            //dst.activityState = std::nullopt;
        }
        if (src["isActivityStateChangeable"]) {
            dst.isActivityStateChangeable = src["isActivityStateChangeable"].as<decltype(dst.isActivityStateChangeable)::value_type>();
        } else {
            //dst.isActivityStateChangeable = std::nullopt;
        }
        if (src["energyMode"]) {
            dst.energyMode = src["energyMode"].as<decltype(dst.energyMode)::value_type>();
        } else {
            //dst.energyMode = std::nullopt;
        }
        if (src["isEnergyModeChangeable"]) {
            dst.isEnergyModeChangeable = src["isEnergyModeChangeable"].as<decltype(dst.isEnergyModeChangeable)::value_type>();
        } else {
            //dst.isEnergyModeChangeable = std::nullopt;
        }
        if (src["power"]) {
            dst.power = src["power"].as<decltype(dst.power)::value_type>();
        } else {
            //dst.power = std::nullopt;
        }
        if (src["isPowerChangeable"]) {
            dst.isPowerChangeable = src["isPowerChangeable"].as<decltype(dst.isPowerChangeable)::value_type>();
        } else {
            //dst.isPowerChangeable = std::nullopt;
        }
        if (src["energy"]) {
            dst.energy = src["energy"].as<decltype(dst.energy)::value_type>();
        } else {
            //dst.energy = std::nullopt;
        }
        if (src["isEnergyChangeable"]) {
            dst.isEnergyChangeable = src["isEnergyChangeable"].as<decltype(dst.isEnergyChangeable)::value_type>();
        } else {
            //dst.isEnergyChangeable = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlActivityListDataType &src, JsonVariant &dst)
{
    if (src.directControlActivityData) {
        dst["directControlActivityData"] = *src.directControlActivityData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlActivityListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["directControlActivityData"]) {
                dst.directControlActivityData = item["directControlActivityData"].as<decltype(dst.directControlActivityData)::value_type>();
            } else {
                //dst.directControlActivityData = std::nullopt;
            }
        }
    } else {
        if (src["directControlActivityData"]) {
            dst.directControlActivityData = src["directControlActivityData"].as<decltype(dst.directControlActivityData)::value_type>();
        } else {
            //dst.directControlActivityData = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlActivityListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlActivityListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
        }
    } else {
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlDescriptionDataType &src, JsonVariant &dst)
{
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
        }
    } else {
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
    }
}
bool convertToJson(const DirectControlDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DirectControlDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
        }
    } else {
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.defaultDuration) {
        dst["defaultDuration"] = *src.defaultDuration;
    }
    if (src.durationUncertainty) {
        dst["durationUncertainty"] = *src.durationUncertainty;
    }
    if (src.slotActivated) {
        dst["slotActivated"] = *src.slotActivated;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["defaultDuration"]) {
                dst.defaultDuration = item["defaultDuration"].as<decltype(dst.defaultDuration)::value_type>();
            } else {
                //dst.defaultDuration = std::nullopt;
            }
            if (item["durationUncertainty"]) {
                dst.durationUncertainty = item["durationUncertainty"].as<decltype(dst.durationUncertainty)::value_type>();
            } else {
                //dst.durationUncertainty = std::nullopt;
            }
            if (item["slotActivated"]) {
                dst.slotActivated = item["slotActivated"].as<decltype(dst.slotActivated)::value_type>();
            } else {
                //dst.slotActivated = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["defaultDuration"]) {
            dst.defaultDuration = src["defaultDuration"].as<decltype(dst.defaultDuration)::value_type>();
        } else {
            //dst.defaultDuration = std::nullopt;
        }
        if (src["durationUncertainty"]) {
            dst.durationUncertainty = src["durationUncertainty"].as<decltype(dst.durationUncertainty)::value_type>();
        } else {
            //dst.durationUncertainty = std::nullopt;
        }
        if (src["slotActivated"]) {
            dst.slotActivated = src["slotActivated"].as<decltype(dst.slotActivated)::value_type>();
        } else {
            //dst.slotActivated = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.defaultDuration) {
        dst["defaultDuration"] = *src.defaultDuration;
    }
    if (src.durationUncertainty) {
        dst["durationUncertainty"] = *src.durationUncertainty;
    }
    if (src.slotActivated) {
        dst["slotActivated"] = *src.slotActivated;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["defaultDuration"]) {
                dst.defaultDuration = item["defaultDuration"].as<decltype(dst.defaultDuration)::value_type>();
            } else {
                //dst.defaultDuration = std::nullopt;
            }
            if (item["durationUncertainty"]) {
                dst.durationUncertainty = item["durationUncertainty"].as<decltype(dst.durationUncertainty)::value_type>();
            } else {
                //dst.durationUncertainty = std::nullopt;
            }
            if (item["slotActivated"]) {
                dst.slotActivated = item["slotActivated"].as<decltype(dst.slotActivated)::value_type>();
            } else {
                //dst.slotActivated = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["defaultDuration"]) {
            dst.defaultDuration = src["defaultDuration"].as<decltype(dst.defaultDuration)::value_type>();
        } else {
            //dst.defaultDuration = std::nullopt;
        }
        if (src["durationUncertainty"]) {
            dst.durationUncertainty = src["durationUncertainty"].as<decltype(dst.durationUncertainty)::value_type>();
        } else {
            //dst.durationUncertainty = std::nullopt;
        }
        if (src["slotActivated"]) {
            dst.slotActivated = src["slotActivated"].as<decltype(dst.slotActivated)::value_type>();
        } else {
            //dst.slotActivated = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleListDataType &src, JsonVariant &dst)
{
    if (src.powerTimeSlotScheduleData) {
        dst["powerTimeSlotScheduleData"] = *src.powerTimeSlotScheduleData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerTimeSlotScheduleData"]) {
                dst.powerTimeSlotScheduleData = item["powerTimeSlotScheduleData"].as<decltype(dst.powerTimeSlotScheduleData)::value_type>();
            } else {
                //dst.powerTimeSlotScheduleData = std::nullopt;
            }
        }
    } else {
        if (src["powerTimeSlotScheduleData"]) {
            dst.powerTimeSlotScheduleData = src["powerTimeSlotScheduleData"].as<decltype(dst.powerTimeSlotScheduleData)::value_type>();
        } else {
            //dst.powerTimeSlotScheduleData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotValueDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotValueDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotValueListDataType &src, JsonVariant &dst)
{
    if (src.powerTimeSlotValueData) {
        dst["powerTimeSlotValueData"] = *src.powerTimeSlotValueData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerTimeSlotValueData"]) {
                dst.powerTimeSlotValueData = item["powerTimeSlotValueData"].as<decltype(dst.powerTimeSlotValueData)::value_type>();
            } else {
                //dst.powerTimeSlotValueData = std::nullopt;
            }
        }
    } else {
        if (src["powerTimeSlotValueData"]) {
            dst.powerTimeSlotValueData = src["powerTimeSlotValueData"].as<decltype(dst.powerTimeSlotValueData)::value_type>();
        } else {
            //dst.powerTimeSlotValueData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotValueListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotValueListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.earliestStartTime) {
        dst["earliestStartTime"] = *src.earliestStartTime;
    }
    if (src.latestEndTime) {
        dst["latestEndTime"] = *src.latestEndTime;
    }
    if (src.minDuration) {
        dst["minDuration"] = *src.minDuration;
    }
    if (src.maxDuration) {
        dst["maxDuration"] = *src.maxDuration;
    }
    if (src.optionalSlot) {
        dst["optionalSlot"] = *src.optionalSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["earliestStartTime"]) {
                dst.earliestStartTime = item["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
            } else {
                //dst.earliestStartTime = std::nullopt;
            }
            if (item["latestEndTime"]) {
                dst.latestEndTime = item["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
            } else {
                //dst.latestEndTime = std::nullopt;
            }
            if (item["minDuration"]) {
                dst.minDuration = item["minDuration"].as<decltype(dst.minDuration)::value_type>();
            } else {
                //dst.minDuration = std::nullopt;
            }
            if (item["maxDuration"]) {
                dst.maxDuration = item["maxDuration"].as<decltype(dst.maxDuration)::value_type>();
            } else {
                //dst.maxDuration = std::nullopt;
            }
            if (item["optionalSlot"]) {
                dst.optionalSlot = item["optionalSlot"].as<decltype(dst.optionalSlot)::value_type>();
            } else {
                //dst.optionalSlot = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["earliestStartTime"]) {
            dst.earliestStartTime = src["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
        } else {
            //dst.earliestStartTime = std::nullopt;
        }
        if (src["latestEndTime"]) {
            dst.latestEndTime = src["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
        } else {
            //dst.latestEndTime = std::nullopt;
        }
        if (src["minDuration"]) {
            dst.minDuration = src["minDuration"].as<decltype(dst.minDuration)::value_type>();
        } else {
            //dst.minDuration = std::nullopt;
        }
        if (src["maxDuration"]) {
            dst.maxDuration = src["maxDuration"].as<decltype(dst.maxDuration)::value_type>();
        } else {
            //dst.maxDuration = std::nullopt;
        }
        if (src["optionalSlot"]) {
            dst.optionalSlot = src["optionalSlot"].as<decltype(dst.optionalSlot)::value_type>();
        } else {
            //dst.optionalSlot = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }
    if (src.earliestStartTime) {
        dst["earliestStartTime"] = *src.earliestStartTime;
    }
    if (src.latestEndTime) {
        dst["latestEndTime"] = *src.latestEndTime;
    }
    if (src.minDuration) {
        dst["minDuration"] = *src.minDuration;
    }
    if (src.maxDuration) {
        dst["maxDuration"] = *src.maxDuration;
    }
    if (src.optionalSlot) {
        dst["optionalSlot"] = *src.optionalSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
            if (item["earliestStartTime"]) {
                dst.earliestStartTime = item["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
            } else {
                //dst.earliestStartTime = std::nullopt;
            }
            if (item["latestEndTime"]) {
                dst.latestEndTime = item["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
            } else {
                //dst.latestEndTime = std::nullopt;
            }
            if (item["minDuration"]) {
                dst.minDuration = item["minDuration"].as<decltype(dst.minDuration)::value_type>();
            } else {
                //dst.minDuration = std::nullopt;
            }
            if (item["maxDuration"]) {
                dst.maxDuration = item["maxDuration"].as<decltype(dst.maxDuration)::value_type>();
            } else {
                //dst.maxDuration = std::nullopt;
            }
            if (item["optionalSlot"]) {
                dst.optionalSlot = item["optionalSlot"].as<decltype(dst.optionalSlot)::value_type>();
            } else {
                //dst.optionalSlot = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
        if (src["earliestStartTime"]) {
            dst.earliestStartTime = src["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
        } else {
            //dst.earliestStartTime = std::nullopt;
        }
        if (src["latestEndTime"]) {
            dst.latestEndTime = src["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
        } else {
            //dst.latestEndTime = std::nullopt;
        }
        if (src["minDuration"]) {
            dst.minDuration = src["minDuration"].as<decltype(dst.minDuration)::value_type>();
        } else {
            //dst.minDuration = std::nullopt;
        }
        if (src["maxDuration"]) {
            dst.maxDuration = src["maxDuration"].as<decltype(dst.maxDuration)::value_type>();
        } else {
            //dst.maxDuration = std::nullopt;
        }
        if (src["optionalSlot"]) {
            dst.optionalSlot = src["optionalSlot"].as<decltype(dst.optionalSlot)::value_type>();
        } else {
            //dst.optionalSlot = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.powerTimeSlotScheduleConstraintsData) {
        dst["powerTimeSlotScheduleConstraintsData"] = *src.powerTimeSlotScheduleConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerTimeSlotScheduleConstraintsData"]) {
                dst.powerTimeSlotScheduleConstraintsData =
                    item["powerTimeSlotScheduleConstraintsData"].as<decltype(dst.powerTimeSlotScheduleConstraintsData)::value_type>();
            } else {
                //dst.powerTimeSlotScheduleConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["powerTimeSlotScheduleConstraintsData"]) {
            dst.powerTimeSlotScheduleConstraintsData =
                src["powerTimeSlotScheduleConstraintsData"].as<decltype(dst.powerTimeSlotScheduleConstraintsData)::value_type>();
        } else {
            //dst.powerTimeSlotScheduleConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.slotNumber) {
        dst["slotNumber"] = *src.slotNumber;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerTimeSlotScheduleConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["slotNumber"]) {
                dst.slotNumber = item["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
            } else {
                //dst.slotNumber = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["slotNumber"]) {
            dst.slotNumber = src["slotNumber"].as<decltype(dst.slotNumber)::value_type>();
        } else {
            //dst.slotNumber = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceAlternativesRelationDataType &src, JsonVariant &dst)
{
    if (src.alternativesId) {
        dst["alternativesId"] = *src.alternativesId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesId"]) {
                dst.alternativesId = item["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
            } else {
                //dst.alternativesId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["alternativesId"]) {
            dst.alternativesId = src["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
        } else {
            //dst.alternativesId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceAlternativesRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.alternativesId) {
        dst["alternativesId"] = *src.alternativesId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesId"]) {
                dst.alternativesId = item["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
            } else {
                //dst.alternativesId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["alternativesId"]) {
            dst.alternativesId = src["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
        } else {
            //dst.alternativesId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceAlternativesRelationListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceAlternativesRelationData) {
        dst["powerSequenceAlternativesRelationData"] = *src.powerSequenceAlternativesRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceAlternativesRelationData"]) {
                dst.powerSequenceAlternativesRelationData =
                    item["powerSequenceAlternativesRelationData"].as<decltype(dst.powerSequenceAlternativesRelationData)::value_type>();
            } else {
                //dst.powerSequenceAlternativesRelationData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceAlternativesRelationData"]) {
            dst.powerSequenceAlternativesRelationData =
                src["powerSequenceAlternativesRelationData"].as<decltype(dst.powerSequenceAlternativesRelationData)::value_type>();
        } else {
            //dst.powerSequenceAlternativesRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceAlternativesRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.alternativesId) {
        dst["alternativesId"] = *src.alternativesId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceAlternativesRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesId"]) {
                dst.alternativesId = item["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
            } else {
                //dst.alternativesId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["alternativesId"]) {
            dst.alternativesId = src["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
        } else {
            //dst.alternativesId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceDescriptionDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.scope) {
        dst["scope"] = *src.scope;
    }
    if (src.taskIdentifier) {
        dst["taskIdentifier"] = *src.taskIdentifier;
    }
    if (src.repetitionsTotal) {
        dst["repetitionsTotal"] = *src.repetitionsTotal;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["scope"]) {
                dst.scope = item["scope"].as<decltype(dst.scope)::value_type>();
            } else {
                //dst.scope = std::nullopt;
            }
            if (item["taskIdentifier"]) {
                dst.taskIdentifier = item["taskIdentifier"].as<decltype(dst.taskIdentifier)::value_type>();
            } else {
                //dst.taskIdentifier = std::nullopt;
            }
            if (item["repetitionsTotal"]) {
                dst.repetitionsTotal = item["repetitionsTotal"].as<decltype(dst.repetitionsTotal)::value_type>();
            } else {
                //dst.repetitionsTotal = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["scope"]) {
            dst.scope = src["scope"].as<decltype(dst.scope)::value_type>();
        } else {
            //dst.scope = std::nullopt;
        }
        if (src["taskIdentifier"]) {
            dst.taskIdentifier = src["taskIdentifier"].as<decltype(dst.taskIdentifier)::value_type>();
        } else {
            //dst.taskIdentifier = std::nullopt;
        }
        if (src["repetitionsTotal"]) {
            dst.repetitionsTotal = src["repetitionsTotal"].as<decltype(dst.repetitionsTotal)::value_type>();
        } else {
            //dst.repetitionsTotal = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.valueSource) {
        dst["valueSource"] = *src.valueSource;
    }
    if (src.scope) {
        dst["scope"] = *src.scope;
    }
    if (src.taskIdentifier) {
        dst["taskIdentifier"] = *src.taskIdentifier;
    }
    if (src.repetitionsTotal) {
        dst["repetitionsTotal"] = *src.repetitionsTotal;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["valueSource"]) {
                dst.valueSource = item["valueSource"].as<decltype(dst.valueSource)::value_type>();
            } else {
                //dst.valueSource = std::nullopt;
            }
            if (item["scope"]) {
                dst.scope = item["scope"].as<decltype(dst.scope)::value_type>();
            } else {
                //dst.scope = std::nullopt;
            }
            if (item["taskIdentifier"]) {
                dst.taskIdentifier = item["taskIdentifier"].as<decltype(dst.taskIdentifier)::value_type>();
            } else {
                //dst.taskIdentifier = std::nullopt;
            }
            if (item["repetitionsTotal"]) {
                dst.repetitionsTotal = item["repetitionsTotal"].as<decltype(dst.repetitionsTotal)::value_type>();
            } else {
                //dst.repetitionsTotal = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["valueSource"]) {
            dst.valueSource = src["valueSource"].as<decltype(dst.valueSource)::value_type>();
        } else {
            //dst.valueSource = std::nullopt;
        }
        if (src["scope"]) {
            dst.scope = src["scope"].as<decltype(dst.scope)::value_type>();
        } else {
            //dst.scope = std::nullopt;
        }
        if (src["taskIdentifier"]) {
            dst.taskIdentifier = src["taskIdentifier"].as<decltype(dst.taskIdentifier)::value_type>();
        } else {
            //dst.taskIdentifier = std::nullopt;
        }
        if (src["repetitionsTotal"]) {
            dst.repetitionsTotal = src["repetitionsTotal"].as<decltype(dst.repetitionsTotal)::value_type>();
        } else {
            //dst.repetitionsTotal = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceDescriptionData) {
        dst["powerSequenceDescriptionData"] = *src.powerSequenceDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceDescriptionData"]) {
                dst.powerSequenceDescriptionData =
                    item["powerSequenceDescriptionData"].as<decltype(dst.powerSequenceDescriptionData)::value_type>();
            } else {
                //dst.powerSequenceDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceDescriptionData"]) {
            dst.powerSequenceDescriptionData =
                src["powerSequenceDescriptionData"].as<decltype(dst.powerSequenceDescriptionData)::value_type>();
        } else {
            //dst.powerSequenceDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceStateDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.activeSlotNumber) {
        dst["activeSlotNumber"] = *src.activeSlotNumber;
    }
    if (src.elapsedSlotTime) {
        dst["elapsedSlotTime"] = *src.elapsedSlotTime;
    }
    if (src.remainingSlotTime) {
        dst["remainingSlotTime"] = *src.remainingSlotTime;
    }
    if (src.sequenceRemoteControllable) {
        dst["sequenceRemoteControllable"] = *src.sequenceRemoteControllable;
    }
    if (src.activeRepetitionNumber) {
        dst["activeRepetitionNumber"] = *src.activeRepetitionNumber;
    }
    if (src.remainingPauseTime) {
        dst["remainingPauseTime"] = *src.remainingPauseTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["activeSlotNumber"]) {
                dst.activeSlotNumber = item["activeSlotNumber"].as<decltype(dst.activeSlotNumber)::value_type>();
            } else {
                //dst.activeSlotNumber = std::nullopt;
            }
            if (item["elapsedSlotTime"]) {
                dst.elapsedSlotTime = item["elapsedSlotTime"].as<decltype(dst.elapsedSlotTime)::value_type>();
            } else {
                //dst.elapsedSlotTime = std::nullopt;
            }
            if (item["remainingSlotTime"]) {
                dst.remainingSlotTime = item["remainingSlotTime"].as<decltype(dst.remainingSlotTime)::value_type>();
            } else {
                //dst.remainingSlotTime = std::nullopt;
            }
            if (item["sequenceRemoteControllable"]) {
                dst.sequenceRemoteControllable =
                    item["sequenceRemoteControllable"].as<decltype(dst.sequenceRemoteControllable)::value_type>();
            } else {
                //dst.sequenceRemoteControllable = std::nullopt;
            }
            if (item["activeRepetitionNumber"]) {
                dst.activeRepetitionNumber = item["activeRepetitionNumber"].as<decltype(dst.activeRepetitionNumber)::value_type>();
            } else {
                //dst.activeRepetitionNumber = std::nullopt;
            }
            if (item["remainingPauseTime"]) {
                dst.remainingPauseTime = item["remainingPauseTime"].as<decltype(dst.remainingPauseTime)::value_type>();
            } else {
                //dst.remainingPauseTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["activeSlotNumber"]) {
            dst.activeSlotNumber = src["activeSlotNumber"].as<decltype(dst.activeSlotNumber)::value_type>();
        } else {
            //dst.activeSlotNumber = std::nullopt;
        }
        if (src["elapsedSlotTime"]) {
            dst.elapsedSlotTime = src["elapsedSlotTime"].as<decltype(dst.elapsedSlotTime)::value_type>();
        } else {
            //dst.elapsedSlotTime = std::nullopt;
        }
        if (src["remainingSlotTime"]) {
            dst.remainingSlotTime = src["remainingSlotTime"].as<decltype(dst.remainingSlotTime)::value_type>();
        } else {
            //dst.remainingSlotTime = std::nullopt;
        }
        if (src["sequenceRemoteControllable"]) {
            dst.sequenceRemoteControllable = src["sequenceRemoteControllable"].as<decltype(dst.sequenceRemoteControllable)::value_type>();
        } else {
            //dst.sequenceRemoteControllable = std::nullopt;
        }
        if (src["activeRepetitionNumber"]) {
            dst.activeRepetitionNumber = src["activeRepetitionNumber"].as<decltype(dst.activeRepetitionNumber)::value_type>();
        } else {
            //dst.activeRepetitionNumber = std::nullopt;
        }
        if (src["remainingPauseTime"]) {
            dst.remainingPauseTime = src["remainingPauseTime"].as<decltype(dst.remainingPauseTime)::value_type>();
        } else {
            //dst.remainingPauseTime = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceStateDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.activeSlotNumber) {
        dst["activeSlotNumber"] = *src.activeSlotNumber;
    }
    if (src.elapsedSlotTime) {
        dst["elapsedSlotTime"] = *src.elapsedSlotTime;
    }
    if (src.remainingSlotTime) {
        dst["remainingSlotTime"] = *src.remainingSlotTime;
    }
    if (src.sequenceRemoteControllable) {
        dst["sequenceRemoteControllable"] = *src.sequenceRemoteControllable;
    }
    if (src.activeRepetitionNumber) {
        dst["activeRepetitionNumber"] = *src.activeRepetitionNumber;
    }
    if (src.remainingPauseTime) {
        dst["remainingPauseTime"] = *src.remainingPauseTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["activeSlotNumber"]) {
                dst.activeSlotNumber = item["activeSlotNumber"].as<decltype(dst.activeSlotNumber)::value_type>();
            } else {
                //dst.activeSlotNumber = std::nullopt;
            }
            if (item["elapsedSlotTime"]) {
                dst.elapsedSlotTime = item["elapsedSlotTime"].as<decltype(dst.elapsedSlotTime)::value_type>();
            } else {
                //dst.elapsedSlotTime = std::nullopt;
            }
            if (item["remainingSlotTime"]) {
                dst.remainingSlotTime = item["remainingSlotTime"].as<decltype(dst.remainingSlotTime)::value_type>();
            } else {
                //dst.remainingSlotTime = std::nullopt;
            }
            if (item["sequenceRemoteControllable"]) {
                dst.sequenceRemoteControllable =
                    item["sequenceRemoteControllable"].as<decltype(dst.sequenceRemoteControllable)::value_type>();
            } else {
                //dst.sequenceRemoteControllable = std::nullopt;
            }
            if (item["activeRepetitionNumber"]) {
                dst.activeRepetitionNumber = item["activeRepetitionNumber"].as<decltype(dst.activeRepetitionNumber)::value_type>();
            } else {
                //dst.activeRepetitionNumber = std::nullopt;
            }
            if (item["remainingPauseTime"]) {
                dst.remainingPauseTime = item["remainingPauseTime"].as<decltype(dst.remainingPauseTime)::value_type>();
            } else {
                //dst.remainingPauseTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["activeSlotNumber"]) {
            dst.activeSlotNumber = src["activeSlotNumber"].as<decltype(dst.activeSlotNumber)::value_type>();
        } else {
            //dst.activeSlotNumber = std::nullopt;
        }
        if (src["elapsedSlotTime"]) {
            dst.elapsedSlotTime = src["elapsedSlotTime"].as<decltype(dst.elapsedSlotTime)::value_type>();
        } else {
            //dst.elapsedSlotTime = std::nullopt;
        }
        if (src["remainingSlotTime"]) {
            dst.remainingSlotTime = src["remainingSlotTime"].as<decltype(dst.remainingSlotTime)::value_type>();
        } else {
            //dst.remainingSlotTime = std::nullopt;
        }
        if (src["sequenceRemoteControllable"]) {
            dst.sequenceRemoteControllable = src["sequenceRemoteControllable"].as<decltype(dst.sequenceRemoteControllable)::value_type>();
        } else {
            //dst.sequenceRemoteControllable = std::nullopt;
        }
        if (src["activeRepetitionNumber"]) {
            dst.activeRepetitionNumber = src["activeRepetitionNumber"].as<decltype(dst.activeRepetitionNumber)::value_type>();
        } else {
            //dst.activeRepetitionNumber = std::nullopt;
        }
        if (src["remainingPauseTime"]) {
            dst.remainingPauseTime = src["remainingPauseTime"].as<decltype(dst.remainingPauseTime)::value_type>();
        } else {
            //dst.remainingPauseTime = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceStateListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceStateData) {
        dst["powerSequenceStateData"] = *src.powerSequenceStateData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceStateData"]) {
                dst.powerSequenceStateData = item["powerSequenceStateData"].as<decltype(dst.powerSequenceStateData)::value_type>();
            } else {
                //dst.powerSequenceStateData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceStateData"]) {
            dst.powerSequenceStateData = src["powerSequenceStateData"].as<decltype(dst.powerSequenceStateData)::value_type>();
        } else {
            //dst.powerSequenceStateData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceStateListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceStateListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceScheduleData) {
        dst["powerSequenceScheduleData"] = *src.powerSequenceScheduleData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceScheduleData"]) {
                dst.powerSequenceScheduleData = item["powerSequenceScheduleData"].as<decltype(dst.powerSequenceScheduleData)::value_type>();
            } else {
                //dst.powerSequenceScheduleData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceScheduleData"]) {
            dst.powerSequenceScheduleData = src["powerSequenceScheduleData"].as<decltype(dst.powerSequenceScheduleData)::value_type>();
        } else {
            //dst.powerSequenceScheduleData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConstraintsDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.earliestStartTime) {
        dst["earliestStartTime"] = *src.earliestStartTime;
    }
    if (src.latestStartTime) {
        dst["latestStartTime"] = *src.latestStartTime;
    }
    if (src.earliestEndTime) {
        dst["earliestEndTime"] = *src.earliestEndTime;
    }
    if (src.latestEndTime) {
        dst["latestEndTime"] = *src.latestEndTime;
    }
    if (src.optionalSequence) {
        dst["optionalSequence"] = *src.optionalSequence;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["earliestStartTime"]) {
                dst.earliestStartTime = item["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
            } else {
                //dst.earliestStartTime = std::nullopt;
            }
            if (item["latestStartTime"]) {
                dst.latestStartTime = item["latestStartTime"].as<decltype(dst.latestStartTime)::value_type>();
            } else {
                //dst.latestStartTime = std::nullopt;
            }
            if (item["earliestEndTime"]) {
                dst.earliestEndTime = item["earliestEndTime"].as<decltype(dst.earliestEndTime)::value_type>();
            } else {
                //dst.earliestEndTime = std::nullopt;
            }
            if (item["latestEndTime"]) {
                dst.latestEndTime = item["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
            } else {
                //dst.latestEndTime = std::nullopt;
            }
            if (item["optionalSequence"]) {
                dst.optionalSequence = item["optionalSequence"].as<decltype(dst.optionalSequence)::value_type>();
            } else {
                //dst.optionalSequence = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["earliestStartTime"]) {
            dst.earliestStartTime = src["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
        } else {
            //dst.earliestStartTime = std::nullopt;
        }
        if (src["latestStartTime"]) {
            dst.latestStartTime = src["latestStartTime"].as<decltype(dst.latestStartTime)::value_type>();
        } else {
            //dst.latestStartTime = std::nullopt;
        }
        if (src["earliestEndTime"]) {
            dst.earliestEndTime = src["earliestEndTime"].as<decltype(dst.earliestEndTime)::value_type>();
        } else {
            //dst.earliestEndTime = std::nullopt;
        }
        if (src["latestEndTime"]) {
            dst.latestEndTime = src["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
        } else {
            //dst.latestEndTime = std::nullopt;
        }
        if (src["optionalSequence"]) {
            dst.optionalSequence = src["optionalSequence"].as<decltype(dst.optionalSequence)::value_type>();
        } else {
            //dst.optionalSequence = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.earliestStartTime) {
        dst["earliestStartTime"] = *src.earliestStartTime;
    }
    if (src.latestStartTime) {
        dst["latestStartTime"] = *src.latestStartTime;
    }
    if (src.earliestEndTime) {
        dst["earliestEndTime"] = *src.earliestEndTime;
    }
    if (src.latestEndTime) {
        dst["latestEndTime"] = *src.latestEndTime;
    }
    if (src.optionalSequence) {
        dst["optionalSequence"] = *src.optionalSequence;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["earliestStartTime"]) {
                dst.earliestStartTime = item["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
            } else {
                //dst.earliestStartTime = std::nullopt;
            }
            if (item["latestStartTime"]) {
                dst.latestStartTime = item["latestStartTime"].as<decltype(dst.latestStartTime)::value_type>();
            } else {
                //dst.latestStartTime = std::nullopt;
            }
            if (item["earliestEndTime"]) {
                dst.earliestEndTime = item["earliestEndTime"].as<decltype(dst.earliestEndTime)::value_type>();
            } else {
                //dst.earliestEndTime = std::nullopt;
            }
            if (item["latestEndTime"]) {
                dst.latestEndTime = item["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
            } else {
                //dst.latestEndTime = std::nullopt;
            }
            if (item["optionalSequence"]) {
                dst.optionalSequence = item["optionalSequence"].as<decltype(dst.optionalSequence)::value_type>();
            } else {
                //dst.optionalSequence = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["earliestStartTime"]) {
            dst.earliestStartTime = src["earliestStartTime"].as<decltype(dst.earliestStartTime)::value_type>();
        } else {
            //dst.earliestStartTime = std::nullopt;
        }
        if (src["latestStartTime"]) {
            dst.latestStartTime = src["latestStartTime"].as<decltype(dst.latestStartTime)::value_type>();
        } else {
            //dst.latestStartTime = std::nullopt;
        }
        if (src["earliestEndTime"]) {
            dst.earliestEndTime = src["earliestEndTime"].as<decltype(dst.earliestEndTime)::value_type>();
        } else {
            //dst.earliestEndTime = std::nullopt;
        }
        if (src["latestEndTime"]) {
            dst.latestEndTime = src["latestEndTime"].as<decltype(dst.latestEndTime)::value_type>();
        } else {
            //dst.latestEndTime = std::nullopt;
        }
        if (src["optionalSequence"]) {
            dst.optionalSequence = src["optionalSequence"].as<decltype(dst.optionalSequence)::value_type>();
        } else {
            //dst.optionalSequence = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceScheduleConstraintsData) {
        dst["powerSequenceScheduleConstraintsData"] = *src.powerSequenceScheduleConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceScheduleConstraintsData"]) {
                dst.powerSequenceScheduleConstraintsData =
                    item["powerSequenceScheduleConstraintsData"].as<decltype(dst.powerSequenceScheduleConstraintsData)::value_type>();
            } else {
                //dst.powerSequenceScheduleConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceScheduleConstraintsData"]) {
            dst.powerSequenceScheduleConstraintsData =
                src["powerSequenceScheduleConstraintsData"].as<decltype(dst.powerSequenceScheduleConstraintsData)::value_type>();
        } else {
            //dst.powerSequenceScheduleConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.potentialStartTime) {
        dst["potentialStartTime"] = *src.potentialStartTime;
    }
    if (src.price) {
        dst["price"] = *src.price;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["potentialStartTime"]) {
                dst.potentialStartTime = item["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
            } else {
                //dst.potentialStartTime = std::nullopt;
            }
            if (item["price"]) {
                dst.price = item["price"].as<decltype(dst.price)::value_type>();
            } else {
                //dst.price = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["potentialStartTime"]) {
            dst.potentialStartTime = src["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
        } else {
            //dst.potentialStartTime = std::nullopt;
        }
        if (src["price"]) {
            dst.price = src["price"].as<decltype(dst.price)::value_type>();
        } else {
            //dst.price = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.potentialStartTime) {
        dst["potentialStartTime"] = *src.potentialStartTime;
    }
    if (src.price) {
        dst["price"] = *src.price;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["potentialStartTime"]) {
                dst.potentialStartTime = item["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
            } else {
                //dst.potentialStartTime = std::nullopt;
            }
            if (item["price"]) {
                dst.price = item["price"].as<decltype(dst.price)::value_type>();
            } else {
                //dst.price = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["potentialStartTime"]) {
            dst.potentialStartTime = src["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
        } else {
            //dst.potentialStartTime = std::nullopt;
        }
        if (src["price"]) {
            dst.price = src["price"].as<decltype(dst.price)::value_type>();
        } else {
            //dst.price = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceListDataType &src, JsonVariant &dst)
{
    if (src.powerSequencePriceData) {
        dst["powerSequencePriceData"] = *src.powerSequencePriceData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequencePriceData"]) {
                dst.powerSequencePriceData = item["powerSequencePriceData"].as<decltype(dst.powerSequencePriceData)::value_type>();
            } else {
                //dst.powerSequencePriceData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequencePriceData"]) {
            dst.powerSequencePriceData = src["powerSequencePriceData"].as<decltype(dst.powerSequencePriceData)::value_type>();
        } else {
            //dst.powerSequencePriceData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.potentialStartTimeInterval) {
        dst["potentialStartTimeInterval"] = *src.potentialStartTimeInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["potentialStartTimeInterval"]) {
                dst.potentialStartTimeInterval =
                    item["potentialStartTimeInterval"].as<decltype(dst.potentialStartTimeInterval)::value_type>();
            } else {
                //dst.potentialStartTimeInterval = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["potentialStartTimeInterval"]) {
            dst.potentialStartTimeInterval = src["potentialStartTimeInterval"].as<decltype(dst.potentialStartTimeInterval)::value_type>();
        } else {
            //dst.potentialStartTimeInterval = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceSchedulePreferenceDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.greenest) {
        dst["greenest"] = *src.greenest;
    }
    if (src.cheapest) {
        dst["cheapest"] = *src.cheapest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["greenest"]) {
                dst.greenest = item["greenest"].as<decltype(dst.greenest)::value_type>();
            } else {
                //dst.greenest = std::nullopt;
            }
            if (item["cheapest"]) {
                dst.cheapest = item["cheapest"].as<decltype(dst.cheapest)::value_type>();
            } else {
                //dst.cheapest = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["greenest"]) {
            dst.greenest = src["greenest"].as<decltype(dst.greenest)::value_type>();
        } else {
            //dst.greenest = std::nullopt;
        }
        if (src["cheapest"]) {
            dst.cheapest = src["cheapest"].as<decltype(dst.cheapest)::value_type>();
        } else {
            //dst.cheapest = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceSchedulePreferenceDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.greenest) {
        dst["greenest"] = *src.greenest;
    }
    if (src.cheapest) {
        dst["cheapest"] = *src.cheapest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["greenest"]) {
                dst.greenest = item["greenest"].as<decltype(dst.greenest)::value_type>();
            } else {
                //dst.greenest = std::nullopt;
            }
            if (item["cheapest"]) {
                dst.cheapest = item["cheapest"].as<decltype(dst.cheapest)::value_type>();
            } else {
                //dst.cheapest = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["greenest"]) {
            dst.greenest = src["greenest"].as<decltype(dst.greenest)::value_type>();
        } else {
            //dst.greenest = std::nullopt;
        }
        if (src["cheapest"]) {
            dst.cheapest = src["cheapest"].as<decltype(dst.cheapest)::value_type>();
        } else {
            //dst.cheapest = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceSchedulePreferenceListDataType &src, JsonVariant &dst)
{
    if (src.powerSequenceSchedulePreferenceData) {
        dst["powerSequenceSchedulePreferenceData"] = *src.powerSequenceSchedulePreferenceData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["powerSequenceSchedulePreferenceData"]) {
                dst.powerSequenceSchedulePreferenceData =
                    item["powerSequenceSchedulePreferenceData"].as<decltype(dst.powerSequenceSchedulePreferenceData)::value_type>();
            } else {
                //dst.powerSequenceSchedulePreferenceData = std::nullopt;
            }
        }
    } else {
        if (src["powerSequenceSchedulePreferenceData"]) {
            dst.powerSequenceSchedulePreferenceData =
                src["powerSequenceSchedulePreferenceData"].as<decltype(dst.powerSequenceSchedulePreferenceData)::value_type>();
        } else {
            //dst.powerSequenceSchedulePreferenceData = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceSchedulePreferenceListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceSchedulePreferenceListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceNodeScheduleInformationDataType &src, JsonVariant &dst)
{
    if (src.nodeRemoteControllable) {
        dst["nodeRemoteControllable"] = *src.nodeRemoteControllable;
    }
    if (src.supportsSingleSlotSchedulingOnly) {
        dst["supportsSingleSlotSchedulingOnly"] = *src.supportsSingleSlotSchedulingOnly;
    }
    if (src.alternativesCount) {
        dst["alternativesCount"] = *src.alternativesCount;
    }
    if (src.totalSequencesCountMax) {
        dst["totalSequencesCountMax"] = *src.totalSequencesCountMax;
    }
    if (src.supportsReselection) {
        dst["supportsReselection"] = *src.supportsReselection;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceNodeScheduleInformationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeRemoteControllable"]) {
                dst.nodeRemoteControllable = item["nodeRemoteControllable"].as<decltype(dst.nodeRemoteControllable)::value_type>();
            } else {
                //dst.nodeRemoteControllable = std::nullopt;
            }
            if (item["supportsSingleSlotSchedulingOnly"]) {
                dst.supportsSingleSlotSchedulingOnly =
                    item["supportsSingleSlotSchedulingOnly"].as<decltype(dst.supportsSingleSlotSchedulingOnly)::value_type>();
            } else {
                //dst.supportsSingleSlotSchedulingOnly = std::nullopt;
            }
            if (item["alternativesCount"]) {
                dst.alternativesCount = item["alternativesCount"].as<decltype(dst.alternativesCount)::value_type>();
            } else {
                //dst.alternativesCount = std::nullopt;
            }
            if (item["totalSequencesCountMax"]) {
                dst.totalSequencesCountMax = item["totalSequencesCountMax"].as<decltype(dst.totalSequencesCountMax)::value_type>();
            } else {
                //dst.totalSequencesCountMax = std::nullopt;
            }
            if (item["supportsReselection"]) {
                dst.supportsReselection = item["supportsReselection"].as<decltype(dst.supportsReselection)::value_type>();
            } else {
                //dst.supportsReselection = std::nullopt;
            }
        }
    } else {
        if (src["nodeRemoteControllable"]) {
            dst.nodeRemoteControllable = src["nodeRemoteControllable"].as<decltype(dst.nodeRemoteControllable)::value_type>();
        } else {
            //dst.nodeRemoteControllable = std::nullopt;
        }
        if (src["supportsSingleSlotSchedulingOnly"]) {
            dst.supportsSingleSlotSchedulingOnly =
                src["supportsSingleSlotSchedulingOnly"].as<decltype(dst.supportsSingleSlotSchedulingOnly)::value_type>();
        } else {
            //dst.supportsSingleSlotSchedulingOnly = std::nullopt;
        }
        if (src["alternativesCount"]) {
            dst.alternativesCount = src["alternativesCount"].as<decltype(dst.alternativesCount)::value_type>();
        } else {
            //dst.alternativesCount = std::nullopt;
        }
        if (src["totalSequencesCountMax"]) {
            dst.totalSequencesCountMax = src["totalSequencesCountMax"].as<decltype(dst.totalSequencesCountMax)::value_type>();
        } else {
            //dst.totalSequencesCountMax = std::nullopt;
        }
        if (src["supportsReselection"]) {
            dst.supportsReselection = src["supportsReselection"].as<decltype(dst.supportsReselection)::value_type>();
        } else {
            //dst.supportsReselection = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceNodeScheduleInformationDataElementsType &src, JsonVariant &dst)
{
    if (src.nodeRemoteControllable) {
        dst["nodeRemoteControllable"] = *src.nodeRemoteControllable;
    }
    if (src.supportsSingleSlotSchedulingOnly) {
        dst["supportsSingleSlotSchedulingOnly"] = *src.supportsSingleSlotSchedulingOnly;
    }
    if (src.alternativesCount) {
        dst["alternativesCount"] = *src.alternativesCount;
    }
    if (src.totalSequencesCountMax) {
        dst["totalSequencesCountMax"] = *src.totalSequencesCountMax;
    }
    if (src.supportsReselection) {
        dst["supportsReselection"] = *src.supportsReselection;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceNodeScheduleInformationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeRemoteControllable"]) {
                dst.nodeRemoteControllable = item["nodeRemoteControllable"].as<decltype(dst.nodeRemoteControllable)::value_type>();
            } else {
                //dst.nodeRemoteControllable = std::nullopt;
            }
            if (item["supportsSingleSlotSchedulingOnly"]) {
                dst.supportsSingleSlotSchedulingOnly =
                    item["supportsSingleSlotSchedulingOnly"].as<decltype(dst.supportsSingleSlotSchedulingOnly)::value_type>();
            } else {
                //dst.supportsSingleSlotSchedulingOnly = std::nullopt;
            }
            if (item["alternativesCount"]) {
                dst.alternativesCount = item["alternativesCount"].as<decltype(dst.alternativesCount)::value_type>();
            } else {
                //dst.alternativesCount = std::nullopt;
            }
            if (item["totalSequencesCountMax"]) {
                dst.totalSequencesCountMax = item["totalSequencesCountMax"].as<decltype(dst.totalSequencesCountMax)::value_type>();
            } else {
                //dst.totalSequencesCountMax = std::nullopt;
            }
            if (item["supportsReselection"]) {
                dst.supportsReselection = item["supportsReselection"].as<decltype(dst.supportsReselection)::value_type>();
            } else {
                //dst.supportsReselection = std::nullopt;
            }
        }
    } else {
        if (src["nodeRemoteControllable"]) {
            dst.nodeRemoteControllable = src["nodeRemoteControllable"].as<decltype(dst.nodeRemoteControllable)::value_type>();
        } else {
            //dst.nodeRemoteControllable = std::nullopt;
        }
        if (src["supportsSingleSlotSchedulingOnly"]) {
            dst.supportsSingleSlotSchedulingOnly =
                src["supportsSingleSlotSchedulingOnly"].as<decltype(dst.supportsSingleSlotSchedulingOnly)::value_type>();
        } else {
            //dst.supportsSingleSlotSchedulingOnly = std::nullopt;
        }
        if (src["alternativesCount"]) {
            dst.alternativesCount = src["alternativesCount"].as<decltype(dst.alternativesCount)::value_type>();
        } else {
            //dst.alternativesCount = std::nullopt;
        }
        if (src["totalSequencesCountMax"]) {
            dst.totalSequencesCountMax = src["totalSequencesCountMax"].as<decltype(dst.totalSequencesCountMax)::value_type>();
        } else {
            //dst.totalSequencesCountMax = std::nullopt;
        }
        if (src["supportsReselection"]) {
            dst.supportsReselection = src["supportsReselection"].as<decltype(dst.supportsReselection)::value_type>();
        } else {
            //dst.supportsReselection = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConfigurationRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequenceScheduleConfigurationRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceCalculationRequestCallType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.potentialStartTime) {
        dst["potentialStartTime"] = *src.potentialStartTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceCalculationRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["potentialStartTime"]) {
                dst.potentialStartTime = item["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
            } else {
                //dst.potentialStartTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["potentialStartTime"]) {
            dst.potentialStartTime = src["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
        } else {
            //dst.potentialStartTime = std::nullopt;
        }
    }
}
bool convertToJson(const PowerSequencePriceCalculationRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.potentialStartTime) {
        dst["potentialStartTime"] = *src.potentialStartTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, PowerSequencePriceCalculationRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["potentialStartTime"]) {
                dst.potentialStartTime = item["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
            } else {
                //dst.potentialStartTime = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["potentialStartTime"]) {
            dst.potentialStartTime = src["potentialStartTime"].as<decltype(dst.potentialStartTime)::value_type>();
        } else {
            //dst.potentialStartTime = std::nullopt;
        }
    }
}
bool convertToJson(const ResultDataType &src, JsonVariant &dst)
{
    if (src.errorNumber) {
        dst["errorNumber"] = *src.errorNumber;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ResultDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["errorNumber"]) {
                dst.errorNumber = item["errorNumber"].as<decltype(dst.errorNumber)::value_type>();
            } else {
                //dst.errorNumber = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["errorNumber"]) {
            dst.errorNumber = src["errorNumber"].as<decltype(dst.errorNumber)::value_type>();
        } else {
            //dst.errorNumber = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementEntryDataType &src, JsonVariant &dst)
{
    if (src.bindingId) {
        dst["bindingId"] = *src.bindingId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingId"]) {
                dst.bindingId = item["bindingId"].as<decltype(dst.bindingId)::value_type>();
            } else {
                //dst.bindingId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["bindingId"]) {
            dst.bindingId = src["bindingId"].as<decltype(dst.bindingId)::value_type>();
        } else {
            //dst.bindingId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementEntryDataElementsType &src, JsonVariant &dst)
{
    if (src.bindingId) {
        dst["bindingId"] = *src.bindingId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingId"]) {
                dst.bindingId = item["bindingId"].as<decltype(dst.bindingId)::value_type>();
            } else {
                //dst.bindingId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["bindingId"]) {
            dst.bindingId = src["bindingId"].as<decltype(dst.bindingId)::value_type>();
        } else {
            //dst.bindingId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementEntryListDataType &src, JsonVariant &dst)
{
    if (src.bindingManagementEntryData) {
        dst["bindingManagementEntryData"] = *src.bindingManagementEntryData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingManagementEntryData"]) {
                dst.bindingManagementEntryData =
                    item["bindingManagementEntryData"].as<decltype(dst.bindingManagementEntryData)::value_type>();
            } else {
                //dst.bindingManagementEntryData = std::nullopt;
            }
        }
    } else {
        if (src["bindingManagementEntryData"]) {
            dst.bindingManagementEntryData = src["bindingManagementEntryData"].as<decltype(dst.bindingManagementEntryData)::value_type>();
        } else {
            //dst.bindingManagementEntryData = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementEntryListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.bindingId) {
        dst["bindingId"] = *src.bindingId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementEntryListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingId"]) {
                dst.bindingId = item["bindingId"].as<decltype(dst.bindingId)::value_type>();
            } else {
                //dst.bindingId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["bindingId"]) {
            dst.bindingId = src["bindingId"].as<decltype(dst.bindingId)::value_type>();
        } else {
            //dst.bindingId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementRequestCallType &src, JsonVariant &dst)
{
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.serverFeatureType) {
        dst["serverFeatureType"] = *src.serverFeatureType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["serverFeatureType"]) {
                dst.serverFeatureType = item["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
            } else {
                //dst.serverFeatureType = std::nullopt;
            }
        }
    } else {
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["serverFeatureType"]) {
            dst.serverFeatureType = src["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
        } else {
            //dst.serverFeatureType = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.serverFeatureType) {
        dst["serverFeatureType"] = *src.serverFeatureType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["serverFeatureType"]) {
                dst.serverFeatureType = item["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
            } else {
                //dst.serverFeatureType = std::nullopt;
            }
        }
    } else {
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["serverFeatureType"]) {
            dst.serverFeatureType = src["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
        } else {
            //dst.serverFeatureType = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementDeleteCallType &src, JsonVariant &dst)
{
    if (src.bindingId) {
        dst["bindingId"] = *src.bindingId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementDeleteCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingId"]) {
                dst.bindingId = item["bindingId"].as<decltype(dst.bindingId)::value_type>();
            } else {
                //dst.bindingId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["bindingId"]) {
            dst.bindingId = src["bindingId"].as<decltype(dst.bindingId)::value_type>();
        } else {
            //dst.bindingId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const BindingManagementDeleteCallElementsType &src, JsonVariant &dst)
{
    if (src.bindingId) {
        dst["bindingId"] = *src.bindingId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BindingManagementDeleteCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingId"]) {
                dst.bindingId = item["bindingId"].as<decltype(dst.bindingId)::value_type>();
            } else {
                //dst.bindingId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["bindingId"]) {
            dst.bindingId = src["bindingId"].as<decltype(dst.bindingId)::value_type>();
        } else {
            //dst.bindingId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorLevelDataType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorLevelDataElementsType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorLevelDescriptionDataType &src, JsonVariant &dst)
{
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.levelDefaultUnit) {
        dst["levelDefaultUnit"] = *src.levelDefaultUnit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["levelDefaultUnit"]) {
                dst.levelDefaultUnit = item["levelDefaultUnit"].as<decltype(dst.levelDefaultUnit)::value_type>();
            } else {
                //dst.levelDefaultUnit = std::nullopt;
            }
        }
    } else {
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["levelDefaultUnit"]) {
            dst.levelDefaultUnit = src["levelDefaultUnit"].as<decltype(dst.levelDefaultUnit)::value_type>();
        } else {
            //dst.levelDefaultUnit = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorLevelDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.levelDefaultUnit) {
        dst["levelDefaultUnit"] = *src.levelDefaultUnit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorLevelDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["levelDefaultUnit"]) {
                dst.levelDefaultUnit = item["levelDefaultUnit"].as<decltype(dst.levelDefaultUnit)::value_type>();
            } else {
                //dst.levelDefaultUnit = std::nullopt;
            }
        }
    } else {
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["levelDefaultUnit"]) {
            dst.levelDefaultUnit = src["levelDefaultUnit"].as<decltype(dst.levelDefaultUnit)::value_type>();
        } else {
            //dst.levelDefaultUnit = std::nullopt;
        }
    }
}
bool convertToJson(const CmdControlType &src, JsonVariant &dst)
{
    if (src.var_delete) {
        dst["delete"] = *src.var_delete;
    }
    if (src.partial) {
        dst["partial"] = *src.partial;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, CmdControlType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["delete"]) {
                dst.var_delete = item["delete"].as<decltype(dst.var_delete)::value_type>();
            } else {
                //dst.var_delete = std::nullopt;
            }
            if (item["partial"]) {
                dst.partial = item["partial"].as<decltype(dst.partial)::value_type>();
            } else {
                //dst.partial = std::nullopt;
            }
        }
    } else {
        if (src["delete"]) {
            dst.var_delete = src["delete"].as<decltype(dst.var_delete)::value_type>();
        } else {
            //dst.var_delete = std::nullopt;
        }
        if (src["partial"]) {
            dst.partial = src["partial"].as<decltype(dst.partial)::value_type>();
        } else {
            //dst.partial = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorSwitchDataType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorSwitchDataElementsType &src, JsonVariant &dst)
{
    if (src.function) {
        dst["function"] = *src.function;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["function"]) {
                dst.function = item["function"].as<decltype(dst.function)::value_type>();
            } else {
                //dst.function = std::nullopt;
            }
        }
    } else {
        if (src["function"]) {
            dst.function = src["function"].as<decltype(dst.function)::value_type>();
        } else {
            //dst.function = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorSwitchDescriptionDataType &src, JsonVariant &dst)
{
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ActuatorSwitchDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ActuatorSwitchDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const AlarmDataType &src, JsonVariant &dst)
{
    if (src.alarmId) {
        dst["alarmId"] = *src.alarmId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.alarmType) {
        dst["alarmType"] = *src.alarmType;
    }
    if (src.measuredValue) {
        dst["measuredValue"] = *src.measuredValue;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AlarmDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alarmId"]) {
                dst.alarmId = item["alarmId"].as<decltype(dst.alarmId)::value_type>();
            } else {
                //dst.alarmId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["alarmType"]) {
                dst.alarmType = item["alarmType"].as<decltype(dst.alarmType)::value_type>();
            } else {
                //dst.alarmType = std::nullopt;
            }
            if (item["measuredValue"]) {
                dst.measuredValue = item["measuredValue"].as<decltype(dst.measuredValue)::value_type>();
            } else {
                //dst.measuredValue = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["alarmId"]) {
            dst.alarmId = src["alarmId"].as<decltype(dst.alarmId)::value_type>();
        } else {
            //dst.alarmId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["alarmType"]) {
            dst.alarmType = src["alarmType"].as<decltype(dst.alarmType)::value_type>();
        } else {
            //dst.alarmType = std::nullopt;
        }
        if (src["measuredValue"]) {
            dst.measuredValue = src["measuredValue"].as<decltype(dst.measuredValue)::value_type>();
        } else {
            //dst.measuredValue = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const AlarmDataElementsType &src, JsonVariant &dst)
{
    if (src.alarmId) {
        dst["alarmId"] = *src.alarmId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.alarmType) {
        dst["alarmType"] = *src.alarmType;
    }
    if (src.measuredValue) {
        dst["measuredValue"] = *src.measuredValue;
    }
    if (src.evaluationPeriod) {
        dst["evaluationPeriod"] = *src.evaluationPeriod;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AlarmDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alarmId"]) {
                dst.alarmId = item["alarmId"].as<decltype(dst.alarmId)::value_type>();
            } else {
                //dst.alarmId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["alarmType"]) {
                dst.alarmType = item["alarmType"].as<decltype(dst.alarmType)::value_type>();
            } else {
                //dst.alarmType = std::nullopt;
            }
            if (item["measuredValue"]) {
                dst.measuredValue = item["measuredValue"].as<decltype(dst.measuredValue)::value_type>();
            } else {
                //dst.measuredValue = std::nullopt;
            }
            if (item["evaluationPeriod"]) {
                dst.evaluationPeriod = item["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
            } else {
                //dst.evaluationPeriod = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["alarmId"]) {
            dst.alarmId = src["alarmId"].as<decltype(dst.alarmId)::value_type>();
        } else {
            //dst.alarmId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["alarmType"]) {
            dst.alarmType = src["alarmType"].as<decltype(dst.alarmType)::value_type>();
        } else {
            //dst.alarmType = std::nullopt;
        }
        if (src["measuredValue"]) {
            dst.measuredValue = src["measuredValue"].as<decltype(dst.measuredValue)::value_type>();
        } else {
            //dst.measuredValue = std::nullopt;
        }
        if (src["evaluationPeriod"]) {
            dst.evaluationPeriod = src["evaluationPeriod"].as<decltype(dst.evaluationPeriod)::value_type>();
        } else {
            //dst.evaluationPeriod = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const AlarmListDataType &src, JsonVariant &dst)
{
    if (src.alarmData) {
        dst["alarmData"] = *src.alarmData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AlarmListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alarmData"]) {
                dst.alarmData = item["alarmData"].as<decltype(dst.alarmData)::value_type>();
            } else {
                //dst.alarmData = std::nullopt;
            }
        }
    } else {
        if (src["alarmData"]) {
            dst.alarmData = src["alarmData"].as<decltype(dst.alarmData)::value_type>();
        } else {
            //dst.alarmData = std::nullopt;
        }
    }
}
bool convertToJson(const AlarmListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.alarmId) {
        dst["alarmId"] = *src.alarmId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, AlarmListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alarmId"]) {
                dst.alarmId = item["alarmId"].as<decltype(dst.alarmId)::value_type>();
            } else {
                //dst.alarmId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["alarmId"]) {
            dst.alarmId = src["alarmId"].as<decltype(dst.alarmId)::value_type>();
        } else {
            //dst.alarmId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const BillValueType &src, JsonVariant &dst)
{
    if (src.valueId) {
        dst["valueId"] = *src.valueId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.valuePercentage) {
        dst["valuePercentage"] = *src.valuePercentage;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillValueType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["valueId"]) {
                dst.valueId = item["valueId"].as<decltype(dst.valueId)::value_type>();
            } else {
                //dst.valueId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["valuePercentage"]) {
                dst.valuePercentage = item["valuePercentage"].as<decltype(dst.valuePercentage)::value_type>();
            } else {
                //dst.valuePercentage = std::nullopt;
            }
        }
    } else {
        if (src["valueId"]) {
            dst.valueId = src["valueId"].as<decltype(dst.valueId)::value_type>();
        } else {
            //dst.valueId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["valuePercentage"]) {
            dst.valuePercentage = src["valuePercentage"].as<decltype(dst.valuePercentage)::value_type>();
        } else {
            //dst.valuePercentage = std::nullopt;
        }
    }
}
bool convertToJson(const BillValueElementsType &src, JsonVariant &dst)
{
    if (src.valueId) {
        dst["valueId"] = *src.valueId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.valuePercentage) {
        dst["valuePercentage"] = *src.valuePercentage;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillValueElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["valueId"]) {
                dst.valueId = item["valueId"].as<decltype(dst.valueId)::value_type>();
            } else {
                //dst.valueId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["valuePercentage"]) {
                dst.valuePercentage = item["valuePercentage"].as<decltype(dst.valuePercentage)::value_type>();
            } else {
                //dst.valuePercentage = std::nullopt;
            }
        }
    } else {
        if (src["valueId"]) {
            dst.valueId = src["valueId"].as<decltype(dst.valueId)::value_type>();
        } else {
            //dst.valueId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["valuePercentage"]) {
            dst.valuePercentage = src["valuePercentage"].as<decltype(dst.valuePercentage)::value_type>();
        } else {
            //dst.valuePercentage = std::nullopt;
        }
    }
}
bool convertToJson(const BillCostType &src, JsonVariant &dst)
{
    if (src.costId) {
        dst["costId"] = *src.costId;
    }
    if (src.costType) {
        dst["costType"] = *src.costType;
    }
    if (src.valueId) {
        dst["valueId"] = *src.valueId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.cost) {
        dst["cost"] = *src.cost;
    }
    if (src.costPercentage) {
        dst["costPercentage"] = *src.costPercentage;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillCostType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["costId"]) {
                dst.costId = item["costId"].as<decltype(dst.costId)::value_type>();
            } else {
                //dst.costId = std::nullopt;
            }
            if (item["costType"]) {
                dst.costType = item["costType"].as<decltype(dst.costType)::value_type>();
            } else {
                //dst.costType = std::nullopt;
            }
            if (item["valueId"]) {
                dst.valueId = item["valueId"].as<decltype(dst.valueId)::value_type>();
            } else {
                //dst.valueId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["cost"]) {
                dst.cost = item["cost"].as<decltype(dst.cost)::value_type>();
            } else {
                //dst.cost = std::nullopt;
            }
            if (item["costPercentage"]) {
                dst.costPercentage = item["costPercentage"].as<decltype(dst.costPercentage)::value_type>();
            } else {
                //dst.costPercentage = std::nullopt;
            }
        }
    } else {
        if (src["costId"]) {
            dst.costId = src["costId"].as<decltype(dst.costId)::value_type>();
        } else {
            //dst.costId = std::nullopt;
        }
        if (src["costType"]) {
            dst.costType = src["costType"].as<decltype(dst.costType)::value_type>();
        } else {
            //dst.costType = std::nullopt;
        }
        if (src["valueId"]) {
            dst.valueId = src["valueId"].as<decltype(dst.valueId)::value_type>();
        } else {
            //dst.valueId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["cost"]) {
            dst.cost = src["cost"].as<decltype(dst.cost)::value_type>();
        } else {
            //dst.cost = std::nullopt;
        }
        if (src["costPercentage"]) {
            dst.costPercentage = src["costPercentage"].as<decltype(dst.costPercentage)::value_type>();
        } else {
            //dst.costPercentage = std::nullopt;
        }
    }
}
bool convertToJson(const BillCostElementsType &src, JsonVariant &dst)
{
    if (src.costId) {
        dst["costId"] = *src.costId;
    }
    if (src.costType) {
        dst["costType"] = *src.costType;
    }
    if (src.valueId) {
        dst["valueId"] = *src.valueId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.cost) {
        dst["cost"] = *src.cost;
    }
    if (src.costPercentage) {
        dst["costPercentage"] = *src.costPercentage;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillCostElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["costId"]) {
                dst.costId = item["costId"].as<decltype(dst.costId)::value_type>();
            } else {
                //dst.costId = std::nullopt;
            }
            if (item["costType"]) {
                dst.costType = item["costType"].as<decltype(dst.costType)::value_type>();
            } else {
                //dst.costType = std::nullopt;
            }
            if (item["valueId"]) {
                dst.valueId = item["valueId"].as<decltype(dst.valueId)::value_type>();
            } else {
                //dst.valueId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["cost"]) {
                dst.cost = item["cost"].as<decltype(dst.cost)::value_type>();
            } else {
                //dst.cost = std::nullopt;
            }
            if (item["costPercentage"]) {
                dst.costPercentage = item["costPercentage"].as<decltype(dst.costPercentage)::value_type>();
            } else {
                //dst.costPercentage = std::nullopt;
            }
        }
    } else {
        if (src["costId"]) {
            dst.costId = src["costId"].as<decltype(dst.costId)::value_type>();
        } else {
            //dst.costId = std::nullopt;
        }
        if (src["costType"]) {
            dst.costType = src["costType"].as<decltype(dst.costType)::value_type>();
        } else {
            //dst.costType = std::nullopt;
        }
        if (src["valueId"]) {
            dst.valueId = src["valueId"].as<decltype(dst.valueId)::value_type>();
        } else {
            //dst.valueId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["cost"]) {
            dst.cost = src["cost"].as<decltype(dst.cost)::value_type>();
        } else {
            //dst.cost = std::nullopt;
        }
        if (src["costPercentage"]) {
            dst.costPercentage = src["costPercentage"].as<decltype(dst.costPercentage)::value_type>();
        } else {
            //dst.costPercentage = std::nullopt;
        }
    }
}
bool convertToJson(const BillPositionType &src, JsonVariant &dst)
{
    if (src.positionId) {
        dst["positionId"] = *src.positionId;
    }
    if (src.positionType) {
        dst["positionType"] = *src.positionType;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.cost) {
        dst["cost"] = *src.cost;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillPositionType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["positionId"]) {
                dst.positionId = item["positionId"].as<decltype(dst.positionId)::value_type>();
            } else {
                //dst.positionId = std::nullopt;
            }
            if (item["positionType"]) {
                dst.positionType = item["positionType"].as<decltype(dst.positionType)::value_type>();
            } else {
                //dst.positionType = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["cost"]) {
                dst.cost = item["cost"].as<decltype(dst.cost)::value_type>();
            } else {
                //dst.cost = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["positionId"]) {
            dst.positionId = src["positionId"].as<decltype(dst.positionId)::value_type>();
        } else {
            //dst.positionId = std::nullopt;
        }
        if (src["positionType"]) {
            dst.positionType = src["positionType"].as<decltype(dst.positionType)::value_type>();
        } else {
            //dst.positionType = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["cost"]) {
            dst.cost = src["cost"].as<decltype(dst.cost)::value_type>();
        } else {
            //dst.cost = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const BillPositionElementsType &src, JsonVariant &dst)
{
    if (src.positionId) {
        dst["positionId"] = *src.positionId;
    }
    if (src.positionType) {
        dst["positionType"] = *src.positionType;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.cost) {
        dst["cost"] = *src.cost;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillPositionElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["positionId"]) {
                dst.positionId = item["positionId"].as<decltype(dst.positionId)::value_type>();
            } else {
                //dst.positionId = std::nullopt;
            }
            if (item["positionType"]) {
                dst.positionType = item["positionType"].as<decltype(dst.positionType)::value_type>();
            } else {
                //dst.positionType = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["cost"]) {
                dst.cost = item["cost"].as<decltype(dst.cost)::value_type>();
            } else {
                //dst.cost = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["positionId"]) {
            dst.positionId = src["positionId"].as<decltype(dst.positionId)::value_type>();
        } else {
            //dst.positionId = std::nullopt;
        }
        if (src["positionType"]) {
            dst.positionType = src["positionType"].as<decltype(dst.positionType)::value_type>();
        } else {
            //dst.positionType = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["cost"]) {
            dst.cost = src["cost"].as<decltype(dst.cost)::value_type>();
        } else {
            //dst.cost = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const BillDataType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.billType) {
        dst["billType"] = *src.billType;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.total) {
        dst["total"] = *src.total;
    }
    if (src.position) {
        dst["position"] = *src.position;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["billType"]) {
                dst.billType = item["billType"].as<decltype(dst.billType)::value_type>();
            } else {
                //dst.billType = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["total"]) {
                dst.total = item["total"].as<decltype(dst.total)::value_type>();
            } else {
                //dst.total = std::nullopt;
            }
            if (item["position"]) {
                dst.position = item["position"].as<decltype(dst.position)::value_type>();
            } else {
                //dst.position = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["billType"]) {
            dst.billType = src["billType"].as<decltype(dst.billType)::value_type>();
        } else {
            //dst.billType = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["total"]) {
            dst.total = src["total"].as<decltype(dst.total)::value_type>();
        } else {
            //dst.total = std::nullopt;
        }
        if (src["position"]) {
            dst.position = src["position"].as<decltype(dst.position)::value_type>();
        } else {
            //dst.position = std::nullopt;
        }
    }
}
bool convertToJson(const BillDataElementsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.billType) {
        dst["billType"] = *src.billType;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.total) {
        dst["total"] = *src.total;
    }
    if (src.position) {
        dst["position"] = *src.position;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["billType"]) {
                dst.billType = item["billType"].as<decltype(dst.billType)::value_type>();
            } else {
                //dst.billType = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["total"]) {
                dst.total = item["total"].as<decltype(dst.total)::value_type>();
            } else {
                //dst.total = std::nullopt;
            }
            if (item["position"]) {
                dst.position = item["position"].as<decltype(dst.position)::value_type>();
            } else {
                //dst.position = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["billType"]) {
            dst.billType = src["billType"].as<decltype(dst.billType)::value_type>();
        } else {
            //dst.billType = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["total"]) {
            dst.total = src["total"].as<decltype(dst.total)::value_type>();
        } else {
            //dst.total = std::nullopt;
        }
        if (src["position"]) {
            dst.position = src["position"].as<decltype(dst.position)::value_type>();
        } else {
            //dst.position = std::nullopt;
        }
    }
}
bool convertToJson(const BillListDataType &src, JsonVariant &dst)
{
    if (src.billData) {
        dst["billData"] = *src.billData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billData"]) {
                dst.billData = item["billData"].as<decltype(dst.billData)::value_type>();
            } else {
                //dst.billData = std::nullopt;
            }
        }
    } else {
        if (src["billData"]) {
            dst.billData = src["billData"].as<decltype(dst.billData)::value_type>();
        } else {
            //dst.billData = std::nullopt;
        }
    }
}
bool convertToJson(const BillListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const BillConstraintsDataType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.positionCountMin) {
        dst["positionCountMin"] = *src.positionCountMin;
    }
    if (src.positionCountMax) {
        dst["positionCountMax"] = *src.positionCountMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["positionCountMin"]) {
                dst.positionCountMin = item["positionCountMin"].as<decltype(dst.positionCountMin)::value_type>();
            } else {
                //dst.positionCountMin = std::nullopt;
            }
            if (item["positionCountMax"]) {
                dst.positionCountMax = item["positionCountMax"].as<decltype(dst.positionCountMax)::value_type>();
            } else {
                //dst.positionCountMax = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["positionCountMin"]) {
            dst.positionCountMin = src["positionCountMin"].as<decltype(dst.positionCountMin)::value_type>();
        } else {
            //dst.positionCountMin = std::nullopt;
        }
        if (src["positionCountMax"]) {
            dst.positionCountMax = src["positionCountMax"].as<decltype(dst.positionCountMax)::value_type>();
        } else {
            //dst.positionCountMax = std::nullopt;
        }
    }
}
bool convertToJson(const BillConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.positionCountMin) {
        dst["positionCountMin"] = *src.positionCountMin;
    }
    if (src.positionCountMax) {
        dst["positionCountMax"] = *src.positionCountMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["positionCountMin"]) {
                dst.positionCountMin = item["positionCountMin"].as<decltype(dst.positionCountMin)::value_type>();
            } else {
                //dst.positionCountMin = std::nullopt;
            }
            if (item["positionCountMax"]) {
                dst.positionCountMax = item["positionCountMax"].as<decltype(dst.positionCountMax)::value_type>();
            } else {
                //dst.positionCountMax = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["positionCountMin"]) {
            dst.positionCountMin = src["positionCountMin"].as<decltype(dst.positionCountMin)::value_type>();
        } else {
            //dst.positionCountMin = std::nullopt;
        }
        if (src["positionCountMax"]) {
            dst.positionCountMax = src["positionCountMax"].as<decltype(dst.positionCountMax)::value_type>();
        } else {
            //dst.positionCountMax = std::nullopt;
        }
    }
}
bool convertToJson(const BillConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.billConstraintsData) {
        dst["billConstraintsData"] = *src.billConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billConstraintsData"]) {
                dst.billConstraintsData = item["billConstraintsData"].as<decltype(dst.billConstraintsData)::value_type>();
            } else {
                //dst.billConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["billConstraintsData"]) {
            dst.billConstraintsData = src["billConstraintsData"].as<decltype(dst.billConstraintsData)::value_type>();
        } else {
            //dst.billConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const BillConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
    }
}
bool convertToJson(const BillDescriptionDataType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.billWriteable) {
        dst["billWriteable"] = *src.billWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.supportedBillType) {
        dst["supportedBillType"] = *src.supportedBillType;
    }
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["billWriteable"]) {
                dst.billWriteable = item["billWriteable"].as<decltype(dst.billWriteable)::value_type>();
            } else {
                //dst.billWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["supportedBillType"]) {
                dst.supportedBillType = item["supportedBillType"].as<decltype(dst.supportedBillType)::value_type>();
            } else {
                //dst.supportedBillType = std::nullopt;
            }
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["billWriteable"]) {
            dst.billWriteable = src["billWriteable"].as<decltype(dst.billWriteable)::value_type>();
        } else {
            //dst.billWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["supportedBillType"]) {
            dst.supportedBillType = src["supportedBillType"].as<decltype(dst.supportedBillType)::value_type>();
        } else {
            //dst.supportedBillType = std::nullopt;
        }
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
    }
}
bool convertToJson(const BillDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }
    if (src.billWriteable) {
        dst["billWriteable"] = *src.billWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.supportedBillType) {
        dst["supportedBillType"] = *src.supportedBillType;
    }
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
            if (item["billWriteable"]) {
                dst.billWriteable = item["billWriteable"].as<decltype(dst.billWriteable)::value_type>();
            } else {
                //dst.billWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["supportedBillType"]) {
                dst.supportedBillType = item["supportedBillType"].as<decltype(dst.supportedBillType)::value_type>();
            } else {
                //dst.supportedBillType = std::nullopt;
            }
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
        if (src["billWriteable"]) {
            dst.billWriteable = src["billWriteable"].as<decltype(dst.billWriteable)::value_type>();
        } else {
            //dst.billWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["supportedBillType"]) {
            dst.supportedBillType = src["supportedBillType"].as<decltype(dst.supportedBillType)::value_type>();
        } else {
            //dst.supportedBillType = std::nullopt;
        }
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
    }
}
bool convertToJson(const BillDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.billDescriptionData) {
        dst["billDescriptionData"] = *src.billDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billDescriptionData"]) {
                dst.billDescriptionData = item["billDescriptionData"].as<decltype(dst.billDescriptionData)::value_type>();
            } else {
                //dst.billDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["billDescriptionData"]) {
            dst.billDescriptionData = src["billDescriptionData"].as<decltype(dst.billDescriptionData)::value_type>();
        } else {
            //dst.billDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const BillDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.billId) {
        dst["billId"] = *src.billId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, BillDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["billId"]) {
                dst.billId = item["billId"].as<decltype(dst.billId)::value_type>();
            } else {
                //dst.billId = std::nullopt;
            }
        }
    } else {
        if (src["billId"]) {
            dst.billId = src["billId"].as<decltype(dst.billId)::value_type>();
        } else {
            //dst.billId = std::nullopt;
        }
    }
}
bool convertToJson(const IdentificationDataType &src, JsonVariant &dst)
{
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.identificationType) {
        dst["identificationType"] = *src.identificationType;
    }
    if (src.identificationValue) {
        dst["identificationValue"] = *src.identificationValue;
    }
    if (src.authorized) {
        dst["authorized"] = *src.authorized;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IdentificationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["identificationType"]) {
                dst.identificationType = item["identificationType"].as<decltype(dst.identificationType)::value_type>();
            } else {
                //dst.identificationType = std::nullopt;
            }
            if (item["identificationValue"]) {
                dst.identificationValue = item["identificationValue"].as<decltype(dst.identificationValue)::value_type>();
            } else {
                //dst.identificationValue = std::nullopt;
            }
            if (item["authorized"]) {
                dst.authorized = item["authorized"].as<decltype(dst.authorized)::value_type>();
            } else {
                //dst.authorized = std::nullopt;
            }
        }
    } else {
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["identificationType"]) {
            dst.identificationType = src["identificationType"].as<decltype(dst.identificationType)::value_type>();
        } else {
            //dst.identificationType = std::nullopt;
        }
        if (src["identificationValue"]) {
            dst.identificationValue = src["identificationValue"].as<decltype(dst.identificationValue)::value_type>();
        } else {
            //dst.identificationValue = std::nullopt;
        }
        if (src["authorized"]) {
            dst.authorized = src["authorized"].as<decltype(dst.authorized)::value_type>();
        } else {
            //dst.authorized = std::nullopt;
        }
    }
}
bool convertToJson(const IdentificationDataElementsType &src, JsonVariant &dst)
{
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.identificationType) {
        dst["identificationType"] = *src.identificationType;
    }
    if (src.identificationValue) {
        dst["identificationValue"] = *src.identificationValue;
    }
    if (src.authorized) {
        dst["authorized"] = *src.authorized;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IdentificationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["identificationType"]) {
                dst.identificationType = item["identificationType"].as<decltype(dst.identificationType)::value_type>();
            } else {
                //dst.identificationType = std::nullopt;
            }
            if (item["identificationValue"]) {
                dst.identificationValue = item["identificationValue"].as<decltype(dst.identificationValue)::value_type>();
            } else {
                //dst.identificationValue = std::nullopt;
            }
            if (item["authorized"]) {
                dst.authorized = item["authorized"].as<decltype(dst.authorized)::value_type>();
            } else {
                //dst.authorized = std::nullopt;
            }
        }
    } else {
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["identificationType"]) {
            dst.identificationType = src["identificationType"].as<decltype(dst.identificationType)::value_type>();
        } else {
            //dst.identificationType = std::nullopt;
        }
        if (src["identificationValue"]) {
            dst.identificationValue = src["identificationValue"].as<decltype(dst.identificationValue)::value_type>();
        } else {
            //dst.identificationValue = std::nullopt;
        }
        if (src["authorized"]) {
            dst.authorized = src["authorized"].as<decltype(dst.authorized)::value_type>();
        } else {
            //dst.authorized = std::nullopt;
        }
    }
}
bool convertToJson(const IdentificationListDataType &src, JsonVariant &dst)
{
    if (src.identificationData) {
        dst["identificationData"] = *src.identificationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IdentificationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["identificationData"]) {
                dst.identificationData = item["identificationData"].as<decltype(dst.identificationData)::value_type>();
            } else {
                //dst.identificationData = std::nullopt;
            }
        }
    } else {
        if (src["identificationData"]) {
            dst.identificationData = src["identificationData"].as<decltype(dst.identificationData)::value_type>();
        } else {
            //dst.identificationData = std::nullopt;
        }
    }
}
bool convertToJson(const IdentificationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.identificationType) {
        dst["identificationType"] = *src.identificationType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IdentificationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["identificationType"]) {
                dst.identificationType = item["identificationType"].as<decltype(dst.identificationType)::value_type>();
            } else {
                //dst.identificationType = std::nullopt;
            }
        }
    } else {
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["identificationType"]) {
            dst.identificationType = src["identificationType"].as<decltype(dst.identificationType)::value_type>();
        } else {
            //dst.identificationType = std::nullopt;
        }
    }
}
bool convertToJson(const SessionIdentificationDataType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.isLatestSession) {
        dst["isLatestSession"] = *src.isLatestSession;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionIdentificationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["isLatestSession"]) {
                dst.isLatestSession = item["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
            } else {
                //dst.isLatestSession = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["isLatestSession"]) {
            dst.isLatestSession = src["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
        } else {
            //dst.isLatestSession = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const SessionIdentificationDataElementsType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.isLatestSession) {
        dst["isLatestSession"] = *src.isLatestSession;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionIdentificationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["isLatestSession"]) {
                dst.isLatestSession = item["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
            } else {
                //dst.isLatestSession = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["isLatestSession"]) {
            dst.isLatestSession = src["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
        } else {
            //dst.isLatestSession = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const SessionIdentificationListDataType &src, JsonVariant &dst)
{
    if (src.sessionIdentificationData) {
        dst["sessionIdentificationData"] = *src.sessionIdentificationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionIdentificationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionIdentificationData"]) {
                dst.sessionIdentificationData = item["sessionIdentificationData"].as<decltype(dst.sessionIdentificationData)::value_type>();
            } else {
                //dst.sessionIdentificationData = std::nullopt;
            }
        }
    } else {
        if (src["sessionIdentificationData"]) {
            dst.sessionIdentificationData = src["sessionIdentificationData"].as<decltype(dst.sessionIdentificationData)::value_type>();
        } else {
            //dst.sessionIdentificationData = std::nullopt;
        }
    }
}
bool convertToJson(const SessionIdentificationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.identificationId) {
        dst["identificationId"] = *src.identificationId;
    }
    if (src.isLatestSession) {
        dst["isLatestSession"] = *src.isLatestSession;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionIdentificationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["identificationId"]) {
                dst.identificationId = item["identificationId"].as<decltype(dst.identificationId)::value_type>();
            } else {
                //dst.identificationId = std::nullopt;
            }
            if (item["isLatestSession"]) {
                dst.isLatestSession = item["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
            } else {
                //dst.isLatestSession = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["identificationId"]) {
            dst.identificationId = src["identificationId"].as<decltype(dst.identificationId)::value_type>();
        } else {
            //dst.identificationId = std::nullopt;
        }
        if (src["isLatestSession"]) {
            dst.isLatestSession = src["isLatestSession"].as<decltype(dst.isLatestSession)::value_type>();
        } else {
            //dst.isLatestSession = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const SessionMeasurementRelationDataType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
    }
}
bool convertToJson(const SessionMeasurementRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
    }
}
bool convertToJson(const SessionMeasurementRelationListDataType &src, JsonVariant &dst)
{
    if (src.sessionMeasurementRelationData) {
        dst["sessionMeasurementRelationData"] = *src.sessionMeasurementRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionMeasurementRelationData"]) {
                dst.sessionMeasurementRelationData =
                    item["sessionMeasurementRelationData"].as<decltype(dst.sessionMeasurementRelationData)::value_type>();
            } else {
                //dst.sessionMeasurementRelationData = std::nullopt;
            }
        }
    } else {
        if (src["sessionMeasurementRelationData"]) {
            dst.sessionMeasurementRelationData =
                src["sessionMeasurementRelationData"].as<decltype(dst.sessionMeasurementRelationData)::value_type>();
        } else {
            //dst.sessionMeasurementRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const SessionMeasurementRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sessionId) {
        dst["sessionId"] = *src.sessionId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SessionMeasurementRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sessionId"]) {
                dst.sessionId = item["sessionId"].as<decltype(dst.sessionId)::value_type>();
            } else {
                //dst.sessionId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
        }
    } else {
        if (src["sessionId"]) {
            dst.sessionId = src["sessionId"].as<decltype(dst.sessionId)::value_type>();
        } else {
            //dst.sessionId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
    }
}
bool convertToJson(const DataTunnelingHeaderType &src, JsonVariant &dst)
{
    if (src.purposeId) {
        dst["purposeId"] = *src.purposeId;
    }
    if (src.channelId) {
        dst["channelId"] = *src.channelId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DataTunnelingHeaderType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["purposeId"]) {
                dst.purposeId = item["purposeId"].as<decltype(dst.purposeId)::value_type>();
            } else {
                //dst.purposeId = std::nullopt;
            }
            if (item["channelId"]) {
                dst.channelId = item["channelId"].as<decltype(dst.channelId)::value_type>();
            } else {
                //dst.channelId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["purposeId"]) {
            dst.purposeId = src["purposeId"].as<decltype(dst.purposeId)::value_type>();
        } else {
            //dst.purposeId = std::nullopt;
        }
        if (src["channelId"]) {
            dst.channelId = src["channelId"].as<decltype(dst.channelId)::value_type>();
        } else {
            //dst.channelId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const DataTunnelingHeaderElementsType &src, JsonVariant &dst)
{
    if (src.purposeId) {
        dst["purposeId"] = *src.purposeId;
    }
    if (src.channelId) {
        dst["channelId"] = *src.channelId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DataTunnelingHeaderElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["purposeId"]) {
                dst.purposeId = item["purposeId"].as<decltype(dst.purposeId)::value_type>();
            } else {
                //dst.purposeId = std::nullopt;
            }
            if (item["channelId"]) {
                dst.channelId = item["channelId"].as<decltype(dst.channelId)::value_type>();
            } else {
                //dst.channelId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["purposeId"]) {
            dst.purposeId = src["purposeId"].as<decltype(dst.purposeId)::value_type>();
        } else {
            //dst.purposeId = std::nullopt;
        }
        if (src["channelId"]) {
            dst.channelId = src["channelId"].as<decltype(dst.channelId)::value_type>();
        } else {
            //dst.channelId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const DataTunnelingCallType &src, JsonVariant &dst)
{
    if (src.header) {
        dst["header"] = *src.header;
    }
    if (src.payload) {
        dst["payload"] = *src.payload;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DataTunnelingCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["header"]) {
                dst.header = item["header"].as<decltype(dst.header)::value_type>();
            } else {
                //dst.header = std::nullopt;
            }
            if (item["payload"]) {
                dst.payload = item["payload"].as<decltype(dst.payload)::value_type>();
            } else {
                //dst.payload = std::nullopt;
            }
        }
    } else {
        if (src["header"]) {
            dst.header = src["header"].as<decltype(dst.header)::value_type>();
        } else {
            //dst.header = std::nullopt;
        }
        if (src["payload"]) {
            dst.payload = src["payload"].as<decltype(dst.payload)::value_type>();
        } else {
            //dst.payload = std::nullopt;
        }
    }
}
bool convertToJson(const DataTunnelingCallElementsType &src, JsonVariant &dst)
{
    if (src.header) {
        dst["header"] = *src.header;
    }
    if (src.payload) {
        dst["payload"] = *src.payload;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DataTunnelingCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["header"]) {
                dst.header = item["header"].as<decltype(dst.header)::value_type>();
            } else {
                //dst.header = std::nullopt;
            }
            if (item["payload"]) {
                dst.payload = item["payload"].as<decltype(dst.payload)::value_type>();
            } else {
                //dst.payload = std::nullopt;
            }
        }
    } else {
        if (src["header"]) {
            dst.header = src["header"].as<decltype(dst.header)::value_type>();
        } else {
            //dst.header = std::nullopt;
        }
        if (src["payload"]) {
            dst.payload = src["payload"].as<decltype(dst.payload)::value_type>();
        } else {
            //dst.payload = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceClassificationManufacturerDataType &src, JsonVariant &dst)
{
    if (src.deviceName) {
        dst["deviceName"] = *src.deviceName;
    }
    if (src.deviceCode) {
        dst["deviceCode"] = *src.deviceCode;
    }
    if (src.serialNumber) {
        dst["serialNumber"] = *src.serialNumber;
    }
    if (src.softwareRevision) {
        dst["softwareRevision"] = *src.softwareRevision;
    }
    if (src.hardwareRevision) {
        dst["hardwareRevision"] = *src.hardwareRevision;
    }
    if (src.vendorName) {
        dst["vendorName"] = *src.vendorName;
    }
    if (src.vendorCode) {
        dst["vendorCode"] = *src.vendorCode;
    }
    if (src.brandName) {
        dst["brandName"] = *src.brandName;
    }
    if (src.powerSource) {
        dst["powerSource"] = *src.powerSource;
    }
    if (src.manufacturerNodeIdentification) {
        dst["manufacturerNodeIdentification"] = *src.manufacturerNodeIdentification;
    }
    if (src.manufacturerLabel) {
        dst["manufacturerLabel"] = *src.manufacturerLabel;
    }
    if (src.manufacturerDescription) {
        dst["manufacturerDescription"] = *src.manufacturerDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceClassificationManufacturerDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceName"]) {
                dst.deviceName = item["deviceName"].as<decltype(dst.deviceName)::value_type>();
            } else {
                //dst.deviceName = std::nullopt;
            }
            if (item["deviceCode"]) {
                dst.deviceCode = item["deviceCode"].as<decltype(dst.deviceCode)::value_type>();
            } else {
                //dst.deviceCode = std::nullopt;
            }
            if (item["serialNumber"]) {
                dst.serialNumber = item["serialNumber"].as<decltype(dst.serialNumber)::value_type>();
            } else {
                //dst.serialNumber = std::nullopt;
            }
            if (item["softwareRevision"]) {
                dst.softwareRevision = item["softwareRevision"].as<decltype(dst.softwareRevision)::value_type>();
            } else {
                //dst.softwareRevision = std::nullopt;
            }
            if (item["hardwareRevision"]) {
                dst.hardwareRevision = item["hardwareRevision"].as<decltype(dst.hardwareRevision)::value_type>();
            } else {
                //dst.hardwareRevision = std::nullopt;
            }
            if (item["vendorName"]) {
                dst.vendorName = item["vendorName"].as<decltype(dst.vendorName)::value_type>();
            } else {
                //dst.vendorName = std::nullopt;
            }
            if (item["vendorCode"]) {
                dst.vendorCode = item["vendorCode"].as<decltype(dst.vendorCode)::value_type>();
            } else {
                //dst.vendorCode = std::nullopt;
            }
            if (item["brandName"]) {
                dst.brandName = item["brandName"].as<decltype(dst.brandName)::value_type>();
            } else {
                //dst.brandName = std::nullopt;
            }
            if (item["powerSource"]) {
                dst.powerSource = item["powerSource"].as<decltype(dst.powerSource)::value_type>();
            } else {
                //dst.powerSource = std::nullopt;
            }
            if (item["manufacturerNodeIdentification"]) {
                dst.manufacturerNodeIdentification =
                    item["manufacturerNodeIdentification"].as<decltype(dst.manufacturerNodeIdentification)::value_type>();
            } else {
                //dst.manufacturerNodeIdentification = std::nullopt;
            }
            if (item["manufacturerLabel"]) {
                dst.manufacturerLabel = item["manufacturerLabel"].as<decltype(dst.manufacturerLabel)::value_type>();
            } else {
                //dst.manufacturerLabel = std::nullopt;
            }
            if (item["manufacturerDescription"]) {
                dst.manufacturerDescription = item["manufacturerDescription"].as<decltype(dst.manufacturerDescription)::value_type>();
            } else {
                //dst.manufacturerDescription = std::nullopt;
            }
        }
    } else {
        if (src["deviceName"]) {
            dst.deviceName = src["deviceName"].as<decltype(dst.deviceName)::value_type>();
        } else {
            //dst.deviceName = std::nullopt;
        }
        if (src["deviceCode"]) {
            dst.deviceCode = src["deviceCode"].as<decltype(dst.deviceCode)::value_type>();
        } else {
            //dst.deviceCode = std::nullopt;
        }
        if (src["serialNumber"]) {
            dst.serialNumber = src["serialNumber"].as<decltype(dst.serialNumber)::value_type>();
        } else {
            //dst.serialNumber = std::nullopt;
        }
        if (src["softwareRevision"]) {
            dst.softwareRevision = src["softwareRevision"].as<decltype(dst.softwareRevision)::value_type>();
        } else {
            //dst.softwareRevision = std::nullopt;
        }
        if (src["hardwareRevision"]) {
            dst.hardwareRevision = src["hardwareRevision"].as<decltype(dst.hardwareRevision)::value_type>();
        } else {
            //dst.hardwareRevision = std::nullopt;
        }
        if (src["vendorName"]) {
            dst.vendorName = src["vendorName"].as<decltype(dst.vendorName)::value_type>();
        } else {
            //dst.vendorName = std::nullopt;
        }
        if (src["vendorCode"]) {
            dst.vendorCode = src["vendorCode"].as<decltype(dst.vendorCode)::value_type>();
        } else {
            //dst.vendorCode = std::nullopt;
        }
        if (src["brandName"]) {
            dst.brandName = src["brandName"].as<decltype(dst.brandName)::value_type>();
        } else {
            //dst.brandName = std::nullopt;
        }
        if (src["powerSource"]) {
            dst.powerSource = src["powerSource"].as<decltype(dst.powerSource)::value_type>();
        } else {
            //dst.powerSource = std::nullopt;
        }
        if (src["manufacturerNodeIdentification"]) {
            dst.manufacturerNodeIdentification =
                src["manufacturerNodeIdentification"].as<decltype(dst.manufacturerNodeIdentification)::value_type>();
        } else {
            //dst.manufacturerNodeIdentification = std::nullopt;
        }
        if (src["manufacturerLabel"]) {
            dst.manufacturerLabel = src["manufacturerLabel"].as<decltype(dst.manufacturerLabel)::value_type>();
        } else {
            //dst.manufacturerLabel = std::nullopt;
        }
        if (src["manufacturerDescription"]) {
            dst.manufacturerDescription = src["manufacturerDescription"].as<decltype(dst.manufacturerDescription)::value_type>();
        } else {
            //dst.manufacturerDescription = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceClassificationManufacturerDataElementsType &src, JsonVariant &dst)
{
    if (src.deviceName) {
        dst["deviceName"] = *src.deviceName;
    }
    if (src.deviceCode) {
        dst["deviceCode"] = *src.deviceCode;
    }
    if (src.serialNumber) {
        dst["serialNumber"] = *src.serialNumber;
    }
    if (src.softwareRevision) {
        dst["softwareRevision"] = *src.softwareRevision;
    }
    if (src.hardwareRevision) {
        dst["hardwareRevision"] = *src.hardwareRevision;
    }
    if (src.vendorName) {
        dst["vendorName"] = *src.vendorName;
    }
    if (src.vendorCode) {
        dst["vendorCode"] = *src.vendorCode;
    }
    if (src.brandName) {
        dst["brandName"] = *src.brandName;
    }
    if (src.powerSource) {
        dst["powerSource"] = *src.powerSource;
    }
    if (src.manufacturerNodeIdentification) {
        dst["manufacturerNodeIdentification"] = *src.manufacturerNodeIdentification;
    }
    if (src.manufacturerLabel) {
        dst["manufacturerLabel"] = *src.manufacturerLabel;
    }
    if (src.manufacturerDescription) {
        dst["manufacturerDescription"] = *src.manufacturerDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceClassificationManufacturerDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceName"]) {
                dst.deviceName = item["deviceName"].as<decltype(dst.deviceName)::value_type>();
            } else {
                //dst.deviceName = std::nullopt;
            }
            if (item["deviceCode"]) {
                dst.deviceCode = item["deviceCode"].as<decltype(dst.deviceCode)::value_type>();
            } else {
                //dst.deviceCode = std::nullopt;
            }
            if (item["serialNumber"]) {
                dst.serialNumber = item["serialNumber"].as<decltype(dst.serialNumber)::value_type>();
            } else {
                //dst.serialNumber = std::nullopt;
            }
            if (item["softwareRevision"]) {
                dst.softwareRevision = item["softwareRevision"].as<decltype(dst.softwareRevision)::value_type>();
            } else {
                //dst.softwareRevision = std::nullopt;
            }
            if (item["hardwareRevision"]) {
                dst.hardwareRevision = item["hardwareRevision"].as<decltype(dst.hardwareRevision)::value_type>();
            } else {
                //dst.hardwareRevision = std::nullopt;
            }
            if (item["vendorName"]) {
                dst.vendorName = item["vendorName"].as<decltype(dst.vendorName)::value_type>();
            } else {
                //dst.vendorName = std::nullopt;
            }
            if (item["vendorCode"]) {
                dst.vendorCode = item["vendorCode"].as<decltype(dst.vendorCode)::value_type>();
            } else {
                //dst.vendorCode = std::nullopt;
            }
            if (item["brandName"]) {
                dst.brandName = item["brandName"].as<decltype(dst.brandName)::value_type>();
            } else {
                //dst.brandName = std::nullopt;
            }
            if (item["powerSource"]) {
                dst.powerSource = item["powerSource"].as<decltype(dst.powerSource)::value_type>();
            } else {
                //dst.powerSource = std::nullopt;
            }
            if (item["manufacturerNodeIdentification"]) {
                dst.manufacturerNodeIdentification =
                    item["manufacturerNodeIdentification"].as<decltype(dst.manufacturerNodeIdentification)::value_type>();
            } else {
                //dst.manufacturerNodeIdentification = std::nullopt;
            }
            if (item["manufacturerLabel"]) {
                dst.manufacturerLabel = item["manufacturerLabel"].as<decltype(dst.manufacturerLabel)::value_type>();
            } else {
                //dst.manufacturerLabel = std::nullopt;
            }
            if (item["manufacturerDescription"]) {
                dst.manufacturerDescription = item["manufacturerDescription"].as<decltype(dst.manufacturerDescription)::value_type>();
            } else {
                //dst.manufacturerDescription = std::nullopt;
            }
        }
    } else {
        if (src["deviceName"]) {
            dst.deviceName = src["deviceName"].as<decltype(dst.deviceName)::value_type>();
        } else {
            //dst.deviceName = std::nullopt;
        }
        if (src["deviceCode"]) {
            dst.deviceCode = src["deviceCode"].as<decltype(dst.deviceCode)::value_type>();
        } else {
            //dst.deviceCode = std::nullopt;
        }
        if (src["serialNumber"]) {
            dst.serialNumber = src["serialNumber"].as<decltype(dst.serialNumber)::value_type>();
        } else {
            //dst.serialNumber = std::nullopt;
        }
        if (src["softwareRevision"]) {
            dst.softwareRevision = src["softwareRevision"].as<decltype(dst.softwareRevision)::value_type>();
        } else {
            //dst.softwareRevision = std::nullopt;
        }
        if (src["hardwareRevision"]) {
            dst.hardwareRevision = src["hardwareRevision"].as<decltype(dst.hardwareRevision)::value_type>();
        } else {
            //dst.hardwareRevision = std::nullopt;
        }
        if (src["vendorName"]) {
            dst.vendorName = src["vendorName"].as<decltype(dst.vendorName)::value_type>();
        } else {
            //dst.vendorName = std::nullopt;
        }
        if (src["vendorCode"]) {
            dst.vendorCode = src["vendorCode"].as<decltype(dst.vendorCode)::value_type>();
        } else {
            //dst.vendorCode = std::nullopt;
        }
        if (src["brandName"]) {
            dst.brandName = src["brandName"].as<decltype(dst.brandName)::value_type>();
        } else {
            //dst.brandName = std::nullopt;
        }
        if (src["powerSource"]) {
            dst.powerSource = src["powerSource"].as<decltype(dst.powerSource)::value_type>();
        } else {
            //dst.powerSource = std::nullopt;
        }
        if (src["manufacturerNodeIdentification"]) {
            dst.manufacturerNodeIdentification =
                src["manufacturerNodeIdentification"].as<decltype(dst.manufacturerNodeIdentification)::value_type>();
        } else {
            //dst.manufacturerNodeIdentification = std::nullopt;
        }
        if (src["manufacturerLabel"]) {
            dst.manufacturerLabel = src["manufacturerLabel"].as<decltype(dst.manufacturerLabel)::value_type>();
        } else {
            //dst.manufacturerLabel = std::nullopt;
        }
        if (src["manufacturerDescription"]) {
            dst.manufacturerDescription = src["manufacturerDescription"].as<decltype(dst.manufacturerDescription)::value_type>();
        } else {
            //dst.manufacturerDescription = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceClassificationUserDataType &src, JsonVariant &dst)
{
    if (src.userNodeIdentification) {
        dst["userNodeIdentification"] = *src.userNodeIdentification;
    }
    if (src.userLabel) {
        dst["userLabel"] = *src.userLabel;
    }
    if (src.userDescription) {
        dst["userDescription"] = *src.userDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceClassificationUserDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["userNodeIdentification"]) {
                dst.userNodeIdentification = item["userNodeIdentification"].as<decltype(dst.userNodeIdentification)::value_type>();
            } else {
                //dst.userNodeIdentification = std::nullopt;
            }
            if (item["userLabel"]) {
                dst.userLabel = item["userLabel"].as<decltype(dst.userLabel)::value_type>();
            } else {
                //dst.userLabel = std::nullopt;
            }
            if (item["userDescription"]) {
                dst.userDescription = item["userDescription"].as<decltype(dst.userDescription)::value_type>();
            } else {
                //dst.userDescription = std::nullopt;
            }
        }
    } else {
        if (src["userNodeIdentification"]) {
            dst.userNodeIdentification = src["userNodeIdentification"].as<decltype(dst.userNodeIdentification)::value_type>();
        } else {
            //dst.userNodeIdentification = std::nullopt;
        }
        if (src["userLabel"]) {
            dst.userLabel = src["userLabel"].as<decltype(dst.userLabel)::value_type>();
        } else {
            //dst.userLabel = std::nullopt;
        }
        if (src["userDescription"]) {
            dst.userDescription = src["userDescription"].as<decltype(dst.userDescription)::value_type>();
        } else {
            //dst.userDescription = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceClassificationUserDataElementsType &src, JsonVariant &dst)
{
    if (src.userNodeIdentification) {
        dst["userNodeIdentification"] = *src.userNodeIdentification;
    }
    if (src.userLabel) {
        dst["userLabel"] = *src.userLabel;
    }
    if (src.userDescription) {
        dst["userDescription"] = *src.userDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceClassificationUserDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["userNodeIdentification"]) {
                dst.userNodeIdentification = item["userNodeIdentification"].as<decltype(dst.userNodeIdentification)::value_type>();
            } else {
                //dst.userNodeIdentification = std::nullopt;
            }
            if (item["userLabel"]) {
                dst.userLabel = item["userLabel"].as<decltype(dst.userLabel)::value_type>();
            } else {
                //dst.userLabel = std::nullopt;
            }
            if (item["userDescription"]) {
                dst.userDescription = item["userDescription"].as<decltype(dst.userDescription)::value_type>();
            } else {
                //dst.userDescription = std::nullopt;
            }
        }
    } else {
        if (src["userNodeIdentification"]) {
            dst.userNodeIdentification = src["userNodeIdentification"].as<decltype(dst.userNodeIdentification)::value_type>();
        } else {
            //dst.userNodeIdentification = std::nullopt;
        }
        if (src["userLabel"]) {
            dst.userLabel = src["userLabel"].as<decltype(dst.userLabel)::value_type>();
        } else {
            //dst.userLabel = std::nullopt;
        }
        if (src["userDescription"]) {
            dst.userDescription = src["userDescription"].as<decltype(dst.userDescription)::value_type>();
        } else {
            //dst.userDescription = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueValueType &src, JsonVariant &dst)
{
    if (src.boolean) {
        dst["boolean"] = *src.boolean;
    }
    if (src.date) {
        dst["date"] = *src.date;
    }
    if (src.dateTime) {
        dst["dateTime"] = *src.dateTime;
    }
    if (src.duration) {
        dst["duration"] = *src.duration;
    }
    if (src.string) {
        dst["string"] = *src.string;
    }
    if (src.time) {
        dst["time"] = *src.time;
    }
    if (src.scaledNumber) {
        dst["scaledNumber"] = *src.scaledNumber;
    }
    if (src.integer) {
        dst["integer"] = *src.integer;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueValueType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boolean"]) {
                dst.boolean = item["boolean"].as<decltype(dst.boolean)::value_type>();
            } else {
                //dst.boolean = std::nullopt;
            }
            if (item["date"]) {
                dst.date = item["date"].as<decltype(dst.date)::value_type>();
            } else {
                //dst.date = std::nullopt;
            }
            if (item["dateTime"]) {
                dst.dateTime = item["dateTime"].as<decltype(dst.dateTime)::value_type>();
            } else {
                //dst.dateTime = std::nullopt;
            }
            if (item["duration"]) {
                dst.duration = item["duration"].as<decltype(dst.duration)::value_type>();
            } else {
                //dst.duration = std::nullopt;
            }
            if (item["string"]) {
                dst.string = item["string"].as<decltype(dst.string)::value_type>();
            } else {
                //dst.string = std::nullopt;
            }
            if (item["time"]) {
                dst.time = item["time"].as<decltype(dst.time)::value_type>();
            } else {
                //dst.time = std::nullopt;
            }
            if (item["scaledNumber"]) {
                dst.scaledNumber = item["scaledNumber"].as<decltype(dst.scaledNumber)::value_type>();
            } else {
                //dst.scaledNumber = std::nullopt;
            }
            if (item["integer"]) {
                dst.integer = item["integer"].as<decltype(dst.integer)::value_type>();
            } else {
                //dst.integer = std::nullopt;
            }
        }
    } else {
        if (src["boolean"]) {
            dst.boolean = src["boolean"].as<decltype(dst.boolean)::value_type>();
        } else {
            //dst.boolean = std::nullopt;
        }
        if (src["date"]) {
            dst.date = src["date"].as<decltype(dst.date)::value_type>();
        } else {
            //dst.date = std::nullopt;
        }
        if (src["dateTime"]) {
            dst.dateTime = src["dateTime"].as<decltype(dst.dateTime)::value_type>();
        } else {
            //dst.dateTime = std::nullopt;
        }
        if (src["duration"]) {
            dst.duration = src["duration"].as<decltype(dst.duration)::value_type>();
        } else {
            //dst.duration = std::nullopt;
        }
        if (src["string"]) {
            dst.string = src["string"].as<decltype(dst.string)::value_type>();
        } else {
            //dst.string = std::nullopt;
        }
        if (src["time"]) {
            dst.time = src["time"].as<decltype(dst.time)::value_type>();
        } else {
            //dst.time = std::nullopt;
        }
        if (src["scaledNumber"]) {
            dst.scaledNumber = src["scaledNumber"].as<decltype(dst.scaledNumber)::value_type>();
        } else {
            //dst.scaledNumber = std::nullopt;
        }
        if (src["integer"]) {
            dst.integer = src["integer"].as<decltype(dst.integer)::value_type>();
        } else {
            //dst.integer = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueValueElementsType &src, JsonVariant &dst)
{
    if (src.boolean) {
        dst["boolean"] = *src.boolean;
    }
    if (src.date) {
        dst["date"] = *src.date;
    }
    if (src.dateTime) {
        dst["dateTime"] = *src.dateTime;
    }
    if (src.duration) {
        dst["duration"] = *src.duration;
    }
    if (src.string) {
        dst["string"] = *src.string;
    }
    if (src.time) {
        dst["time"] = *src.time;
    }
    if (src.scaledNumber) {
        dst["scaledNumber"] = *src.scaledNumber;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueValueElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boolean"]) {
                dst.boolean = item["boolean"].as<decltype(dst.boolean)::value_type>();
            } else {
                //dst.boolean = std::nullopt;
            }
            if (item["date"]) {
                dst.date = item["date"].as<decltype(dst.date)::value_type>();
            } else {
                //dst.date = std::nullopt;
            }
            if (item["dateTime"]) {
                dst.dateTime = item["dateTime"].as<decltype(dst.dateTime)::value_type>();
            } else {
                //dst.dateTime = std::nullopt;
            }
            if (item["duration"]) {
                dst.duration = item["duration"].as<decltype(dst.duration)::value_type>();
            } else {
                //dst.duration = std::nullopt;
            }
            if (item["string"]) {
                dst.string = item["string"].as<decltype(dst.string)::value_type>();
            } else {
                //dst.string = std::nullopt;
            }
            if (item["time"]) {
                dst.time = item["time"].as<decltype(dst.time)::value_type>();
            } else {
                //dst.time = std::nullopt;
            }
            if (item["scaledNumber"]) {
                dst.scaledNumber = item["scaledNumber"].as<decltype(dst.scaledNumber)::value_type>();
            } else {
                //dst.scaledNumber = std::nullopt;
            }
        }
    } else {
        if (src["boolean"]) {
            dst.boolean = src["boolean"].as<decltype(dst.boolean)::value_type>();
        } else {
            //dst.boolean = std::nullopt;
        }
        if (src["date"]) {
            dst.date = src["date"].as<decltype(dst.date)::value_type>();
        } else {
            //dst.date = std::nullopt;
        }
        if (src["dateTime"]) {
            dst.dateTime = src["dateTime"].as<decltype(dst.dateTime)::value_type>();
        } else {
            //dst.dateTime = std::nullopt;
        }
        if (src["duration"]) {
            dst.duration = src["duration"].as<decltype(dst.duration)::value_type>();
        } else {
            //dst.duration = std::nullopt;
        }
        if (src["string"]) {
            dst.string = src["string"].as<decltype(dst.string)::value_type>();
        } else {
            //dst.string = std::nullopt;
        }
        if (src["time"]) {
            dst.time = src["time"].as<decltype(dst.time)::value_type>();
        } else {
            //dst.time = std::nullopt;
        }
        if (src["scaledNumber"]) {
            dst.scaledNumber = src["scaledNumber"].as<decltype(dst.scaledNumber)::value_type>();
        } else {
            //dst.scaledNumber = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDataType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.isValueChangeable) {
        dst["isValueChangeable"] = *src.isValueChangeable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["isValueChangeable"]) {
                dst.isValueChangeable = item["isValueChangeable"].as<decltype(dst.isValueChangeable)::value_type>();
            } else {
                //dst.isValueChangeable = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["isValueChangeable"]) {
            dst.isValueChangeable = src["isValueChangeable"].as<decltype(dst.isValueChangeable)::value_type>();
        } else {
            //dst.isValueChangeable = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDataElementsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.isValueChangeable) {
        dst["isValueChangeable"] = *src.isValueChangeable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["isValueChangeable"]) {
                dst.isValueChangeable = item["isValueChangeable"].as<decltype(dst.isValueChangeable)::value_type>();
            } else {
                //dst.isValueChangeable = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["isValueChangeable"]) {
            dst.isValueChangeable = src["isValueChangeable"].as<decltype(dst.isValueChangeable)::value_type>();
        } else {
            //dst.isValueChangeable = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueListDataType &src, JsonVariant &dst)
{
    if (src.deviceConfigurationKeyValueData) {
        dst["deviceConfigurationKeyValueData"] = *src.deviceConfigurationKeyValueData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceConfigurationKeyValueData"]) {
                dst.deviceConfigurationKeyValueData =
                    item["deviceConfigurationKeyValueData"].as<decltype(dst.deviceConfigurationKeyValueData)::value_type>();
            } else {
                //dst.deviceConfigurationKeyValueData = std::nullopt;
            }
        }
    } else {
        if (src["deviceConfigurationKeyValueData"]) {
            dst.deviceConfigurationKeyValueData =
                src["deviceConfigurationKeyValueData"].as<decltype(dst.deviceConfigurationKeyValueData)::value_type>();
        } else {
            //dst.deviceConfigurationKeyValueData = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.keyName) {
        dst["keyName"] = *src.keyName;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["keyName"]) {
                dst.keyName = item["keyName"].as<decltype(dst.keyName)::value_type>();
            } else {
                //dst.keyName = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["keyName"]) {
            dst.keyName = src["keyName"].as<decltype(dst.keyName)::value_type>();
        } else {
            //dst.keyName = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.keyName) {
        dst["keyName"] = *src.keyName;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["keyName"]) {
                dst.keyName = item["keyName"].as<decltype(dst.keyName)::value_type>();
            } else {
                //dst.keyName = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["keyName"]) {
            dst.keyName = src["keyName"].as<decltype(dst.keyName)::value_type>();
        } else {
            //dst.keyName = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.deviceConfigurationKeyValueDescriptionData) {
        dst["deviceConfigurationKeyValueDescriptionData"] = *src.deviceConfigurationKeyValueDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceConfigurationKeyValueDescriptionData"]) {
                dst.deviceConfigurationKeyValueDescriptionData =
                    item["deviceConfigurationKeyValueDescriptionData"]
                        .as<decltype(dst.deviceConfigurationKeyValueDescriptionData)::value_type>();
            } else {
                //dst.deviceConfigurationKeyValueDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["deviceConfigurationKeyValueDescriptionData"]) {
            dst.deviceConfigurationKeyValueDescriptionData =
                src["deviceConfigurationKeyValueDescriptionData"]
                    .as<decltype(dst.deviceConfigurationKeyValueDescriptionData)::value_type>();
        } else {
            //dst.deviceConfigurationKeyValueDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.keyName) {
        dst["keyName"] = *src.keyName;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["keyName"]) {
                dst.keyName = item["keyName"].as<decltype(dst.keyName)::value_type>();
            } else {
                //dst.keyName = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["keyName"]) {
            dst.keyName = src["keyName"].as<decltype(dst.keyName)::value_type>();
        } else {
            //dst.keyName = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.deviceConfigurationKeyValueConstraintsData) {
        dst["deviceConfigurationKeyValueConstraintsData"] = *src.deviceConfigurationKeyValueConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceConfigurationKeyValueConstraintsData"]) {
                dst.deviceConfigurationKeyValueConstraintsData =
                    item["deviceConfigurationKeyValueConstraintsData"]
                        .as<decltype(dst.deviceConfigurationKeyValueConstraintsData)::value_type>();
            } else {
                //dst.deviceConfigurationKeyValueConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["deviceConfigurationKeyValueConstraintsData"]) {
            dst.deviceConfigurationKeyValueConstraintsData =
                src["deviceConfigurationKeyValueConstraintsData"]
                    .as<decltype(dst.deviceConfigurationKeyValueConstraintsData)::value_type>();
        } else {
            //dst.deviceConfigurationKeyValueConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.keyId) {
        dst["keyId"] = *src.keyId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceConfigurationKeyValueConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["keyId"]) {
                dst.keyId = item["keyId"].as<decltype(dst.keyId)::value_type>();
            } else {
                //dst.keyId = std::nullopt;
            }
        }
    } else {
        if (src["keyId"]) {
            dst.keyId = src["keyId"].as<decltype(dst.keyId)::value_type>();
        } else {
            //dst.keyId = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisStateDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.operatingState) {
        dst["operatingState"] = *src.operatingState;
    }
    if (src.vendorStateCode) {
        dst["vendorStateCode"] = *src.vendorStateCode;
    }
    if (src.lastErrorCode) {
        dst["lastErrorCode"] = *src.lastErrorCode;
    }
    if (src.upTime) {
        dst["upTime"] = *src.upTime;
    }
    if (src.totalUpTime) {
        dst["totalUpTime"] = *src.totalUpTime;
    }
    if (src.powerSupplyCondition) {
        dst["powerSupplyCondition"] = *src.powerSupplyCondition;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisStateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["operatingState"]) {
                dst.operatingState = item["operatingState"].as<decltype(dst.operatingState)::value_type>();
            } else {
                //dst.operatingState = std::nullopt;
            }
            if (item["vendorStateCode"]) {
                dst.vendorStateCode = item["vendorStateCode"].as<decltype(dst.vendorStateCode)::value_type>();
            } else {
                //dst.vendorStateCode = std::nullopt;
            }
            if (item["lastErrorCode"]) {
                dst.lastErrorCode = item["lastErrorCode"].as<decltype(dst.lastErrorCode)::value_type>();
            } else {
                //dst.lastErrorCode = std::nullopt;
            }
            if (item["upTime"]) {
                dst.upTime = item["upTime"].as<decltype(dst.upTime)::value_type>();
            } else {
                //dst.upTime = std::nullopt;
            }
            if (item["totalUpTime"]) {
                dst.totalUpTime = item["totalUpTime"].as<decltype(dst.totalUpTime)::value_type>();
            } else {
                //dst.totalUpTime = std::nullopt;
            }
            if (item["powerSupplyCondition"]) {
                dst.powerSupplyCondition = item["powerSupplyCondition"].as<decltype(dst.powerSupplyCondition)::value_type>();
            } else {
                //dst.powerSupplyCondition = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["operatingState"]) {
            dst.operatingState = src["operatingState"].as<decltype(dst.operatingState)::value_type>();
        } else {
            //dst.operatingState = std::nullopt;
        }
        if (src["vendorStateCode"]) {
            dst.vendorStateCode = src["vendorStateCode"].as<decltype(dst.vendorStateCode)::value_type>();
        } else {
            //dst.vendorStateCode = std::nullopt;
        }
        if (src["lastErrorCode"]) {
            dst.lastErrorCode = src["lastErrorCode"].as<decltype(dst.lastErrorCode)::value_type>();
        } else {
            //dst.lastErrorCode = std::nullopt;
        }
        if (src["upTime"]) {
            dst.upTime = src["upTime"].as<decltype(dst.upTime)::value_type>();
        } else {
            //dst.upTime = std::nullopt;
        }
        if (src["totalUpTime"]) {
            dst.totalUpTime = src["totalUpTime"].as<decltype(dst.totalUpTime)::value_type>();
        } else {
            //dst.totalUpTime = std::nullopt;
        }
        if (src["powerSupplyCondition"]) {
            dst.powerSupplyCondition = src["powerSupplyCondition"].as<decltype(dst.powerSupplyCondition)::value_type>();
        } else {
            //dst.powerSupplyCondition = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisStateDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.operatingState) {
        dst["operatingState"] = *src.operatingState;
    }
    if (src.vendorStateCode) {
        dst["vendorStateCode"] = *src.vendorStateCode;
    }
    if (src.lastErrorCode) {
        dst["lastErrorCode"] = *src.lastErrorCode;
    }
    if (src.upTime) {
        dst["upTime"] = *src.upTime;
    }
    if (src.totalUpTime) {
        dst["totalUpTime"] = *src.totalUpTime;
    }
    if (src.powerSupplyCondition) {
        dst["powerSupplyCondition"] = *src.powerSupplyCondition;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisStateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["operatingState"]) {
                dst.operatingState = item["operatingState"].as<decltype(dst.operatingState)::value_type>();
            } else {
                //dst.operatingState = std::nullopt;
            }
            if (item["vendorStateCode"]) {
                dst.vendorStateCode = item["vendorStateCode"].as<decltype(dst.vendorStateCode)::value_type>();
            } else {
                //dst.vendorStateCode = std::nullopt;
            }
            if (item["lastErrorCode"]) {
                dst.lastErrorCode = item["lastErrorCode"].as<decltype(dst.lastErrorCode)::value_type>();
            } else {
                //dst.lastErrorCode = std::nullopt;
            }
            if (item["upTime"]) {
                dst.upTime = item["upTime"].as<decltype(dst.upTime)::value_type>();
            } else {
                //dst.upTime = std::nullopt;
            }
            if (item["totalUpTime"]) {
                dst.totalUpTime = item["totalUpTime"].as<decltype(dst.totalUpTime)::value_type>();
            } else {
                //dst.totalUpTime = std::nullopt;
            }
            if (item["powerSupplyCondition"]) {
                dst.powerSupplyCondition = item["powerSupplyCondition"].as<decltype(dst.powerSupplyCondition)::value_type>();
            } else {
                //dst.powerSupplyCondition = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["operatingState"]) {
            dst.operatingState = src["operatingState"].as<decltype(dst.operatingState)::value_type>();
        } else {
            //dst.operatingState = std::nullopt;
        }
        if (src["vendorStateCode"]) {
            dst.vendorStateCode = src["vendorStateCode"].as<decltype(dst.vendorStateCode)::value_type>();
        } else {
            //dst.vendorStateCode = std::nullopt;
        }
        if (src["lastErrorCode"]) {
            dst.lastErrorCode = src["lastErrorCode"].as<decltype(dst.lastErrorCode)::value_type>();
        } else {
            //dst.lastErrorCode = std::nullopt;
        }
        if (src["upTime"]) {
            dst.upTime = src["upTime"].as<decltype(dst.upTime)::value_type>();
        } else {
            //dst.upTime = std::nullopt;
        }
        if (src["totalUpTime"]) {
            dst.totalUpTime = src["totalUpTime"].as<decltype(dst.totalUpTime)::value_type>();
        } else {
            //dst.totalUpTime = std::nullopt;
        }
        if (src["powerSupplyCondition"]) {
            dst.powerSupplyCondition = src["powerSupplyCondition"].as<decltype(dst.powerSupplyCondition)::value_type>();
        } else {
            //dst.powerSupplyCondition = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisHeartbeatDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.heartbeatCounter) {
        dst["heartbeatCounter"] = *src.heartbeatCounter;
    }
    if (src.heartbeatTimeout) {
        dst["heartbeatTimeout"] = *src.heartbeatTimeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisHeartbeatDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["heartbeatCounter"]) {
                dst.heartbeatCounter = item["heartbeatCounter"].as<decltype(dst.heartbeatCounter)::value_type>();
            } else {
                //dst.heartbeatCounter = std::nullopt;
            }
            if (item["heartbeatTimeout"]) {
                dst.heartbeatTimeout = item["heartbeatTimeout"].as<decltype(dst.heartbeatTimeout)::value_type>();
            } else {
                //dst.heartbeatTimeout = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["heartbeatCounter"]) {
            dst.heartbeatCounter = src["heartbeatCounter"].as<decltype(dst.heartbeatCounter)::value_type>();
        } else {
            //dst.heartbeatCounter = std::nullopt;
        }
        if (src["heartbeatTimeout"]) {
            dst.heartbeatTimeout = src["heartbeatTimeout"].as<decltype(dst.heartbeatTimeout)::value_type>();
        } else {
            //dst.heartbeatTimeout = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisHeartbeatDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.heartbeatCounter) {
        dst["heartbeatCounter"] = *src.heartbeatCounter;
    }
    if (src.heartbeatTimeout) {
        dst["heartbeatTimeout"] = *src.heartbeatTimeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisHeartbeatDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["heartbeatCounter"]) {
                dst.heartbeatCounter = item["heartbeatCounter"].as<decltype(dst.heartbeatCounter)::value_type>();
            } else {
                //dst.heartbeatCounter = std::nullopt;
            }
            if (item["heartbeatTimeout"]) {
                dst.heartbeatTimeout = item["heartbeatTimeout"].as<decltype(dst.heartbeatTimeout)::value_type>();
            } else {
                //dst.heartbeatTimeout = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["heartbeatCounter"]) {
            dst.heartbeatCounter = src["heartbeatCounter"].as<decltype(dst.heartbeatCounter)::value_type>();
        } else {
            //dst.heartbeatCounter = std::nullopt;
        }
        if (src["heartbeatTimeout"]) {
            dst.heartbeatTimeout = src["heartbeatTimeout"].as<decltype(dst.heartbeatTimeout)::value_type>();
        } else {
            //dst.heartbeatTimeout = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisServiceDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.installationTime) {
        dst["installationTime"] = *src.installationTime;
    }
    if (src.bootCounter) {
        dst["bootCounter"] = *src.bootCounter;
    }
    if (src.nextService) {
        dst["nextService"] = *src.nextService;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisServiceDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["installationTime"]) {
                dst.installationTime = item["installationTime"].as<decltype(dst.installationTime)::value_type>();
            } else {
                //dst.installationTime = std::nullopt;
            }
            if (item["bootCounter"]) {
                dst.bootCounter = item["bootCounter"].as<decltype(dst.bootCounter)::value_type>();
            } else {
                //dst.bootCounter = std::nullopt;
            }
            if (item["nextService"]) {
                dst.nextService = item["nextService"].as<decltype(dst.nextService)::value_type>();
            } else {
                //dst.nextService = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["installationTime"]) {
            dst.installationTime = src["installationTime"].as<decltype(dst.installationTime)::value_type>();
        } else {
            //dst.installationTime = std::nullopt;
        }
        if (src["bootCounter"]) {
            dst.bootCounter = src["bootCounter"].as<decltype(dst.bootCounter)::value_type>();
        } else {
            //dst.bootCounter = std::nullopt;
        }
        if (src["nextService"]) {
            dst.nextService = src["nextService"].as<decltype(dst.nextService)::value_type>();
        } else {
            //dst.nextService = std::nullopt;
        }
    }
}
bool convertToJson(const DeviceDiagnosisServiceDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.installationTime) {
        dst["installationTime"] = *src.installationTime;
    }
    if (src.bootCounter) {
        dst["bootCounter"] = *src.bootCounter;
    }
    if (src.nextService) {
        dst["nextService"] = *src.nextService;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, DeviceDiagnosisServiceDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["installationTime"]) {
                dst.installationTime = item["installationTime"].as<decltype(dst.installationTime)::value_type>();
            } else {
                //dst.installationTime = std::nullopt;
            }
            if (item["bootCounter"]) {
                dst.bootCounter = item["bootCounter"].as<decltype(dst.bootCounter)::value_type>();
            } else {
                //dst.bootCounter = std::nullopt;
            }
            if (item["nextService"]) {
                dst.nextService = item["nextService"].as<decltype(dst.nextService)::value_type>();
            } else {
                //dst.nextService = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["installationTime"]) {
            dst.installationTime = src["installationTime"].as<decltype(dst.installationTime)::value_type>();
        } else {
            //dst.installationTime = std::nullopt;
        }
        if (src["bootCounter"]) {
            dst.bootCounter = src["bootCounter"].as<decltype(dst.bootCounter)::value_type>();
        } else {
            //dst.bootCounter = std::nullopt;
        }
        if (src["nextService"]) {
            dst.nextService = src["nextService"].as<decltype(dst.nextService)::value_type>();
        } else {
            //dst.nextService = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionParameterDescriptionDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.voltageType) {
        dst["voltageType"] = *src.voltageType;
    }
    if (src.acMeasuredPhases) {
        dst["acMeasuredPhases"] = *src.acMeasuredPhases;
    }
    if (src.acMeasuredInReferenceTo) {
        dst["acMeasuredInReferenceTo"] = *src.acMeasuredInReferenceTo;
    }
    if (src.acMeasurementType) {
        dst["acMeasurementType"] = *src.acMeasurementType;
    }
    if (src.acMeasurementVariant) {
        dst["acMeasurementVariant"] = *src.acMeasurementVariant;
    }
    if (src.acMeasuredHarmonic) {
        dst["acMeasuredHarmonic"] = *src.acMeasuredHarmonic;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["voltageType"]) {
                dst.voltageType = item["voltageType"].as<decltype(dst.voltageType)::value_type>();
            } else {
                //dst.voltageType = std::nullopt;
            }
            if (item["acMeasuredPhases"]) {
                dst.acMeasuredPhases = item["acMeasuredPhases"].as<decltype(dst.acMeasuredPhases)::value_type>();
            } else {
                //dst.acMeasuredPhases = std::nullopt;
            }
            if (item["acMeasuredInReferenceTo"]) {
                dst.acMeasuredInReferenceTo = item["acMeasuredInReferenceTo"].as<decltype(dst.acMeasuredInReferenceTo)::value_type>();
            } else {
                //dst.acMeasuredInReferenceTo = std::nullopt;
            }
            if (item["acMeasurementType"]) {
                dst.acMeasurementType = item["acMeasurementType"].as<decltype(dst.acMeasurementType)::value_type>();
            } else {
                //dst.acMeasurementType = std::nullopt;
            }
            if (item["acMeasurementVariant"]) {
                dst.acMeasurementVariant = item["acMeasurementVariant"].as<decltype(dst.acMeasurementVariant)::value_type>();
            } else {
                //dst.acMeasurementVariant = std::nullopt;
            }
            if (item["acMeasuredHarmonic"]) {
                dst.acMeasuredHarmonic = item["acMeasuredHarmonic"].as<decltype(dst.acMeasuredHarmonic)::value_type>();
            } else {
                //dst.acMeasuredHarmonic = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["voltageType"]) {
            dst.voltageType = src["voltageType"].as<decltype(dst.voltageType)::value_type>();
        } else {
            //dst.voltageType = std::nullopt;
        }
        if (src["acMeasuredPhases"]) {
            dst.acMeasuredPhases = src["acMeasuredPhases"].as<decltype(dst.acMeasuredPhases)::value_type>();
        } else {
            //dst.acMeasuredPhases = std::nullopt;
        }
        if (src["acMeasuredInReferenceTo"]) {
            dst.acMeasuredInReferenceTo = src["acMeasuredInReferenceTo"].as<decltype(dst.acMeasuredInReferenceTo)::value_type>();
        } else {
            //dst.acMeasuredInReferenceTo = std::nullopt;
        }
        if (src["acMeasurementType"]) {
            dst.acMeasurementType = src["acMeasurementType"].as<decltype(dst.acMeasurementType)::value_type>();
        } else {
            //dst.acMeasurementType = std::nullopt;
        }
        if (src["acMeasurementVariant"]) {
            dst.acMeasurementVariant = src["acMeasurementVariant"].as<decltype(dst.acMeasurementVariant)::value_type>();
        } else {
            //dst.acMeasurementVariant = std::nullopt;
        }
        if (src["acMeasuredHarmonic"]) {
            dst.acMeasuredHarmonic = src["acMeasuredHarmonic"].as<decltype(dst.acMeasuredHarmonic)::value_type>();
        } else {
            //dst.acMeasuredHarmonic = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionParameterDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.voltageType) {
        dst["voltageType"] = *src.voltageType;
    }
    if (src.acMeasuredPhases) {
        dst["acMeasuredPhases"] = *src.acMeasuredPhases;
    }
    if (src.acMeasuredInReferenceTo) {
        dst["acMeasuredInReferenceTo"] = *src.acMeasuredInReferenceTo;
    }
    if (src.acMeasurementType) {
        dst["acMeasurementType"] = *src.acMeasurementType;
    }
    if (src.acMeasurementVariant) {
        dst["acMeasurementVariant"] = *src.acMeasurementVariant;
    }
    if (src.acMeasuredHarmonic) {
        dst["acMeasuredHarmonic"] = *src.acMeasuredHarmonic;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["voltageType"]) {
                dst.voltageType = item["voltageType"].as<decltype(dst.voltageType)::value_type>();
            } else {
                //dst.voltageType = std::nullopt;
            }
            if (item["acMeasuredPhases"]) {
                dst.acMeasuredPhases = item["acMeasuredPhases"].as<decltype(dst.acMeasuredPhases)::value_type>();
            } else {
                //dst.acMeasuredPhases = std::nullopt;
            }
            if (item["acMeasuredInReferenceTo"]) {
                dst.acMeasuredInReferenceTo = item["acMeasuredInReferenceTo"].as<decltype(dst.acMeasuredInReferenceTo)::value_type>();
            } else {
                //dst.acMeasuredInReferenceTo = std::nullopt;
            }
            if (item["acMeasurementType"]) {
                dst.acMeasurementType = item["acMeasurementType"].as<decltype(dst.acMeasurementType)::value_type>();
            } else {
                //dst.acMeasurementType = std::nullopt;
            }
            if (item["acMeasurementVariant"]) {
                dst.acMeasurementVariant = item["acMeasurementVariant"].as<decltype(dst.acMeasurementVariant)::value_type>();
            } else {
                //dst.acMeasurementVariant = std::nullopt;
            }
            if (item["acMeasuredHarmonic"]) {
                dst.acMeasuredHarmonic = item["acMeasuredHarmonic"].as<decltype(dst.acMeasuredHarmonic)::value_type>();
            } else {
                //dst.acMeasuredHarmonic = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["voltageType"]) {
            dst.voltageType = src["voltageType"].as<decltype(dst.voltageType)::value_type>();
        } else {
            //dst.voltageType = std::nullopt;
        }
        if (src["acMeasuredPhases"]) {
            dst.acMeasuredPhases = src["acMeasuredPhases"].as<decltype(dst.acMeasuredPhases)::value_type>();
        } else {
            //dst.acMeasuredPhases = std::nullopt;
        }
        if (src["acMeasuredInReferenceTo"]) {
            dst.acMeasuredInReferenceTo = src["acMeasuredInReferenceTo"].as<decltype(dst.acMeasuredInReferenceTo)::value_type>();
        } else {
            //dst.acMeasuredInReferenceTo = std::nullopt;
        }
        if (src["acMeasurementType"]) {
            dst.acMeasurementType = src["acMeasurementType"].as<decltype(dst.acMeasurementType)::value_type>();
        } else {
            //dst.acMeasurementType = std::nullopt;
        }
        if (src["acMeasurementVariant"]) {
            dst.acMeasurementVariant = src["acMeasurementVariant"].as<decltype(dst.acMeasurementVariant)::value_type>();
        } else {
            //dst.acMeasurementVariant = std::nullopt;
        }
        if (src["acMeasuredHarmonic"]) {
            dst.acMeasuredHarmonic = src["acMeasuredHarmonic"].as<decltype(dst.acMeasuredHarmonic)::value_type>();
        } else {
            //dst.acMeasuredHarmonic = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionParameterDescriptionData) {
        dst["electricalConnectionParameterDescriptionData"] = *src.electricalConnectionParameterDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionParameterDescriptionData"]) {
                dst.electricalConnectionParameterDescriptionData =
                    item["electricalConnectionParameterDescriptionData"]
                        .as<decltype(dst.electricalConnectionParameterDescriptionData)::value_type>();
            } else {
                //dst.electricalConnectionParameterDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionParameterDescriptionData"]) {
            dst.electricalConnectionParameterDescriptionData =
                src["electricalConnectionParameterDescriptionData"]
                    .as<decltype(dst.electricalConnectionParameterDescriptionData)::value_type>();
        } else {
            //dst.electricalConnectionParameterDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionParameterDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionPermittedValueSetDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.permittedValueSet) {
        dst["permittedValueSet"] = *src.permittedValueSet;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["permittedValueSet"]) {
                dst.permittedValueSet = item["permittedValueSet"].as<decltype(dst.permittedValueSet)::value_type>();
            } else {
                //dst.permittedValueSet = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["permittedValueSet"]) {
            dst.permittedValueSet = src["permittedValueSet"].as<decltype(dst.permittedValueSet)::value_type>();
        } else {
            //dst.permittedValueSet = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionPermittedValueSetDataElementsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.permittedValueSet) {
        dst["permittedValueSet"] = *src.permittedValueSet;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["permittedValueSet"]) {
                dst.permittedValueSet = item["permittedValueSet"].as<decltype(dst.permittedValueSet)::value_type>();
            } else {
                //dst.permittedValueSet = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["permittedValueSet"]) {
            dst.permittedValueSet = src["permittedValueSet"].as<decltype(dst.permittedValueSet)::value_type>();
        } else {
            //dst.permittedValueSet = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionPermittedValueSetData) {
        dst["electricalConnectionPermittedValueSetData"] = *src.electricalConnectionPermittedValueSetData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionPermittedValueSetData"]) {
                dst.electricalConnectionPermittedValueSetData =
                    item["electricalConnectionPermittedValueSetData"]
                        .as<decltype(dst.electricalConnectionPermittedValueSetData)::value_type>();
            } else {
                //dst.electricalConnectionPermittedValueSetData = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionPermittedValueSetData"]) {
            dst.electricalConnectionPermittedValueSetData =
                src["electricalConnectionPermittedValueSetData"].as<decltype(dst.electricalConnectionPermittedValueSetData)::value_type>();
        } else {
            //dst.electricalConnectionPermittedValueSetData = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionPermittedValueSetListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionCharacteristicDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.characteristicId) {
        dst["characteristicId"] = *src.characteristicId;
    }
    if (src.characteristicContext) {
        dst["characteristicContext"] = *src.characteristicContext;
    }
    if (src.characteristicType) {
        dst["characteristicType"] = *src.characteristicType;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["characteristicId"]) {
                dst.characteristicId = item["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
            } else {
                //dst.characteristicId = std::nullopt;
            }
            if (item["characteristicContext"]) {
                dst.characteristicContext = item["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
            } else {
                //dst.characteristicContext = std::nullopt;
            }
            if (item["characteristicType"]) {
                dst.characteristicType = item["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
            } else {
                //dst.characteristicType = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["characteristicId"]) {
            dst.characteristicId = src["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
        } else {
            //dst.characteristicId = std::nullopt;
        }
        if (src["characteristicContext"]) {
            dst.characteristicContext = src["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
        } else {
            //dst.characteristicContext = std::nullopt;
        }
        if (src["characteristicType"]) {
            dst.characteristicType = src["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
        } else {
            //dst.characteristicType = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionCharacteristicDataElementsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.characteristicId) {
        dst["characteristicId"] = *src.characteristicId;
    }
    if (src.characteristicContext) {
        dst["characteristicContext"] = *src.characteristicContext;
    }
    if (src.characteristicType) {
        dst["characteristicType"] = *src.characteristicType;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["characteristicId"]) {
                dst.characteristicId = item["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
            } else {
                //dst.characteristicId = std::nullopt;
            }
            if (item["characteristicContext"]) {
                dst.characteristicContext = item["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
            } else {
                //dst.characteristicContext = std::nullopt;
            }
            if (item["characteristicType"]) {
                dst.characteristicType = item["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
            } else {
                //dst.characteristicType = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["characteristicId"]) {
            dst.characteristicId = src["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
        } else {
            //dst.characteristicId = std::nullopt;
        }
        if (src["characteristicContext"]) {
            dst.characteristicContext = src["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
        } else {
            //dst.characteristicContext = std::nullopt;
        }
        if (src["characteristicType"]) {
            dst.characteristicType = src["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
        } else {
            //dst.characteristicType = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionCharacteristicListDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionCharacteristicData) {
        dst["electricalConnectionCharacteristicData"] = *src.electricalConnectionCharacteristicData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionCharacteristicData"]) {
                dst.electricalConnectionCharacteristicData =
                    item["electricalConnectionCharacteristicData"].as<decltype(dst.electricalConnectionCharacteristicData)::value_type>();
            } else {
                //dst.electricalConnectionCharacteristicData = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionCharacteristicData"]) {
            dst.electricalConnectionCharacteristicData =
                src["electricalConnectionCharacteristicData"].as<decltype(dst.electricalConnectionCharacteristicData)::value_type>();
        } else {
            //dst.electricalConnectionCharacteristicData = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionCharacteristicListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.parameterId) {
        dst["parameterId"] = *src.parameterId;
    }
    if (src.characteristicId) {
        dst["characteristicId"] = *src.characteristicId;
    }
    if (src.characteristicContext) {
        dst["characteristicContext"] = *src.characteristicContext;
    }
    if (src.characteristicType) {
        dst["characteristicType"] = *src.characteristicType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionCharacteristicListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["parameterId"]) {
                dst.parameterId = item["parameterId"].as<decltype(dst.parameterId)::value_type>();
            } else {
                //dst.parameterId = std::nullopt;
            }
            if (item["characteristicId"]) {
                dst.characteristicId = item["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
            } else {
                //dst.characteristicId = std::nullopt;
            }
            if (item["characteristicContext"]) {
                dst.characteristicContext = item["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
            } else {
                //dst.characteristicContext = std::nullopt;
            }
            if (item["characteristicType"]) {
                dst.characteristicType = item["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
            } else {
                //dst.characteristicType = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["parameterId"]) {
            dst.parameterId = src["parameterId"].as<decltype(dst.parameterId)::value_type>();
        } else {
            //dst.parameterId = std::nullopt;
        }
        if (src["characteristicId"]) {
            dst.characteristicId = src["characteristicId"].as<decltype(dst.characteristicId)::value_type>();
        } else {
            //dst.characteristicId = std::nullopt;
        }
        if (src["characteristicContext"]) {
            dst.characteristicContext = src["characteristicContext"].as<decltype(dst.characteristicContext)::value_type>();
        } else {
            //dst.characteristicContext = std::nullopt;
        }
        if (src["characteristicType"]) {
            dst.characteristicType = src["characteristicType"].as<decltype(dst.characteristicType)::value_type>();
        } else {
            //dst.characteristicType = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionStateDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.currentEnergyMode) {
        dst["currentEnergyMode"] = *src.currentEnergyMode;
    }
    if (src.consumptionTime) {
        dst["consumptionTime"] = *src.consumptionTime;
    }
    if (src.productionTime) {
        dst["productionTime"] = *src.productionTime;
    }
    if (src.totalConsumptionTime) {
        dst["totalConsumptionTime"] = *src.totalConsumptionTime;
    }
    if (src.totalProductionTime) {
        dst["totalProductionTime"] = *src.totalProductionTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["currentEnergyMode"]) {
                dst.currentEnergyMode = item["currentEnergyMode"].as<decltype(dst.currentEnergyMode)::value_type>();
            } else {
                //dst.currentEnergyMode = std::nullopt;
            }
            if (item["consumptionTime"]) {
                dst.consumptionTime = item["consumptionTime"].as<decltype(dst.consumptionTime)::value_type>();
            } else {
                //dst.consumptionTime = std::nullopt;
            }
            if (item["productionTime"]) {
                dst.productionTime = item["productionTime"].as<decltype(dst.productionTime)::value_type>();
            } else {
                //dst.productionTime = std::nullopt;
            }
            if (item["totalConsumptionTime"]) {
                dst.totalConsumptionTime = item["totalConsumptionTime"].as<decltype(dst.totalConsumptionTime)::value_type>();
            } else {
                //dst.totalConsumptionTime = std::nullopt;
            }
            if (item["totalProductionTime"]) {
                dst.totalProductionTime = item["totalProductionTime"].as<decltype(dst.totalProductionTime)::value_type>();
            } else {
                //dst.totalProductionTime = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["currentEnergyMode"]) {
            dst.currentEnergyMode = src["currentEnergyMode"].as<decltype(dst.currentEnergyMode)::value_type>();
        } else {
            //dst.currentEnergyMode = std::nullopt;
        }
        if (src["consumptionTime"]) {
            dst.consumptionTime = src["consumptionTime"].as<decltype(dst.consumptionTime)::value_type>();
        } else {
            //dst.consumptionTime = std::nullopt;
        }
        if (src["productionTime"]) {
            dst.productionTime = src["productionTime"].as<decltype(dst.productionTime)::value_type>();
        } else {
            //dst.productionTime = std::nullopt;
        }
        if (src["totalConsumptionTime"]) {
            dst.totalConsumptionTime = src["totalConsumptionTime"].as<decltype(dst.totalConsumptionTime)::value_type>();
        } else {
            //dst.totalConsumptionTime = std::nullopt;
        }
        if (src["totalProductionTime"]) {
            dst.totalProductionTime = src["totalProductionTime"].as<decltype(dst.totalProductionTime)::value_type>();
        } else {
            //dst.totalProductionTime = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionStateDataElementsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.currentEnergyMode) {
        dst["currentEnergyMode"] = *src.currentEnergyMode;
    }
    if (src.consumptionTime) {
        dst["consumptionTime"] = *src.consumptionTime;
    }
    if (src.productionTime) {
        dst["productionTime"] = *src.productionTime;
    }
    if (src.totalConsumptionTime) {
        dst["totalConsumptionTime"] = *src.totalConsumptionTime;
    }
    if (src.totalProductionTime) {
        dst["totalProductionTime"] = *src.totalProductionTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["currentEnergyMode"]) {
                dst.currentEnergyMode = item["currentEnergyMode"].as<decltype(dst.currentEnergyMode)::value_type>();
            } else {
                //dst.currentEnergyMode = std::nullopt;
            }
            if (item["consumptionTime"]) {
                dst.consumptionTime = item["consumptionTime"].as<decltype(dst.consumptionTime)::value_type>();
            } else {
                //dst.consumptionTime = std::nullopt;
            }
            if (item["productionTime"]) {
                dst.productionTime = item["productionTime"].as<decltype(dst.productionTime)::value_type>();
            } else {
                //dst.productionTime = std::nullopt;
            }
            if (item["totalConsumptionTime"]) {
                dst.totalConsumptionTime = item["totalConsumptionTime"].as<decltype(dst.totalConsumptionTime)::value_type>();
            } else {
                //dst.totalConsumptionTime = std::nullopt;
            }
            if (item["totalProductionTime"]) {
                dst.totalProductionTime = item["totalProductionTime"].as<decltype(dst.totalProductionTime)::value_type>();
            } else {
                //dst.totalProductionTime = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["currentEnergyMode"]) {
            dst.currentEnergyMode = src["currentEnergyMode"].as<decltype(dst.currentEnergyMode)::value_type>();
        } else {
            //dst.currentEnergyMode = std::nullopt;
        }
        if (src["consumptionTime"]) {
            dst.consumptionTime = src["consumptionTime"].as<decltype(dst.consumptionTime)::value_type>();
        } else {
            //dst.consumptionTime = std::nullopt;
        }
        if (src["productionTime"]) {
            dst.productionTime = src["productionTime"].as<decltype(dst.productionTime)::value_type>();
        } else {
            //dst.productionTime = std::nullopt;
        }
        if (src["totalConsumptionTime"]) {
            dst.totalConsumptionTime = src["totalConsumptionTime"].as<decltype(dst.totalConsumptionTime)::value_type>();
        } else {
            //dst.totalConsumptionTime = std::nullopt;
        }
        if (src["totalProductionTime"]) {
            dst.totalProductionTime = src["totalProductionTime"].as<decltype(dst.totalProductionTime)::value_type>();
        } else {
            //dst.totalProductionTime = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionStateListDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionStateData) {
        dst["electricalConnectionStateData"] = *src.electricalConnectionStateData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionStateData"]) {
                dst.electricalConnectionStateData =
                    item["electricalConnectionStateData"].as<decltype(dst.electricalConnectionStateData)::value_type>();
            } else {
                //dst.electricalConnectionStateData = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionStateData"]) {
            dst.electricalConnectionStateData =
                src["electricalConnectionStateData"].as<decltype(dst.electricalConnectionStateData)::value_type>();
        } else {
            //dst.electricalConnectionStateData = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionStateListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionStateListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionDescriptionDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.powerSupplyType) {
        dst["powerSupplyType"] = *src.powerSupplyType;
    }
    if (src.acConnectedPhases) {
        dst["acConnectedPhases"] = *src.acConnectedPhases;
    }
    if (src.acRmsPeriodDuration) {
        dst["acRmsPeriodDuration"] = *src.acRmsPeriodDuration;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["powerSupplyType"]) {
                dst.powerSupplyType = item["powerSupplyType"].as<decltype(dst.powerSupplyType)::value_type>();
            } else {
                //dst.powerSupplyType = std::nullopt;
            }
            if (item["acConnectedPhases"]) {
                dst.acConnectedPhases = item["acConnectedPhases"].as<decltype(dst.acConnectedPhases)::value_type>();
            } else {
                //dst.acConnectedPhases = std::nullopt;
            }
            if (item["acRmsPeriodDuration"]) {
                dst.acRmsPeriodDuration = item["acRmsPeriodDuration"].as<decltype(dst.acRmsPeriodDuration)::value_type>();
            } else {
                //dst.acRmsPeriodDuration = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["powerSupplyType"]) {
            dst.powerSupplyType = src["powerSupplyType"].as<decltype(dst.powerSupplyType)::value_type>();
        } else {
            //dst.powerSupplyType = std::nullopt;
        }
        if (src["acConnectedPhases"]) {
            dst.acConnectedPhases = src["acConnectedPhases"].as<decltype(dst.acConnectedPhases)::value_type>();
        } else {
            //dst.acConnectedPhases = std::nullopt;
        }
        if (src["acRmsPeriodDuration"]) {
            dst.acRmsPeriodDuration = src["acRmsPeriodDuration"].as<decltype(dst.acRmsPeriodDuration)::value_type>();
        } else {
            //dst.acRmsPeriodDuration = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.powerSupplyType) {
        dst["powerSupplyType"] = *src.powerSupplyType;
    }
    if (src.acConnectedPhases) {
        dst["acConnectedPhases"] = *src.acConnectedPhases;
    }
    if (src.acRmsPeriodDuration) {
        dst["acRmsPeriodDuration"] = *src.acRmsPeriodDuration;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["powerSupplyType"]) {
                dst.powerSupplyType = item["powerSupplyType"].as<decltype(dst.powerSupplyType)::value_type>();
            } else {
                //dst.powerSupplyType = std::nullopt;
            }
            if (item["acConnectedPhases"]) {
                dst.acConnectedPhases = item["acConnectedPhases"].as<decltype(dst.acConnectedPhases)::value_type>();
            } else {
                //dst.acConnectedPhases = std::nullopt;
            }
            if (item["acRmsPeriodDuration"]) {
                dst.acRmsPeriodDuration = item["acRmsPeriodDuration"].as<decltype(dst.acRmsPeriodDuration)::value_type>();
            } else {
                //dst.acRmsPeriodDuration = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["powerSupplyType"]) {
            dst.powerSupplyType = src["powerSupplyType"].as<decltype(dst.powerSupplyType)::value_type>();
        } else {
            //dst.powerSupplyType = std::nullopt;
        }
        if (src["acConnectedPhases"]) {
            dst.acConnectedPhases = src["acConnectedPhases"].as<decltype(dst.acConnectedPhases)::value_type>();
        } else {
            //dst.acConnectedPhases = std::nullopt;
        }
        if (src["acRmsPeriodDuration"]) {
            dst.acRmsPeriodDuration = src["acRmsPeriodDuration"].as<decltype(dst.acRmsPeriodDuration)::value_type>();
        } else {
            //dst.acRmsPeriodDuration = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.electricalConnectionDescriptionData) {
        dst["electricalConnectionDescriptionData"] = *src.electricalConnectionDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionDescriptionData"]) {
                dst.electricalConnectionDescriptionData =
                    item["electricalConnectionDescriptionData"].as<decltype(dst.electricalConnectionDescriptionData)::value_type>();
            } else {
                //dst.electricalConnectionDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionDescriptionData"]) {
            dst.electricalConnectionDescriptionData =
                src["electricalConnectionDescriptionData"].as<decltype(dst.electricalConnectionDescriptionData)::value_type>();
        } else {
            //dst.electricalConnectionDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const ElectricalConnectionDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.electricalConnectionId) {
        dst["electricalConnectionId"] = *src.electricalConnectionId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, ElectricalConnectionDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["electricalConnectionId"]) {
                dst.electricalConnectionId = item["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
            } else {
                //dst.electricalConnectionId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["electricalConnectionId"]) {
            dst.electricalConnectionId = src["electricalConnectionId"].as<decltype(dst.electricalConnectionId)::value_type>();
        } else {
            //dst.electricalConnectionId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDataType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.currentOperationModeId) {
        dst["currentOperationModeId"] = *src.currentOperationModeId;
    }
    if (src.isOperationModeIdChangeable) {
        dst["isOperationModeIdChangeable"] = *src.isOperationModeIdChangeable;
    }
    if (src.currentSetpointId) {
        dst["currentSetpointId"] = *src.currentSetpointId;
    }
    if (src.isSetpointIdChangeable) {
        dst["isSetpointIdChangeable"] = *src.isSetpointIdChangeable;
    }
    if (src.isOverrunActive) {
        dst["isOverrunActive"] = *src.isOverrunActive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["currentOperationModeId"]) {
                dst.currentOperationModeId = item["currentOperationModeId"].as<decltype(dst.currentOperationModeId)::value_type>();
            } else {
                //dst.currentOperationModeId = std::nullopt;
            }
            if (item["isOperationModeIdChangeable"]) {
                dst.isOperationModeIdChangeable =
                    item["isOperationModeIdChangeable"].as<decltype(dst.isOperationModeIdChangeable)::value_type>();
            } else {
                //dst.isOperationModeIdChangeable = std::nullopt;
            }
            if (item["currentSetpointId"]) {
                dst.currentSetpointId = item["currentSetpointId"].as<decltype(dst.currentSetpointId)::value_type>();
            } else {
                //dst.currentSetpointId = std::nullopt;
            }
            if (item["isSetpointIdChangeable"]) {
                dst.isSetpointIdChangeable = item["isSetpointIdChangeable"].as<decltype(dst.isSetpointIdChangeable)::value_type>();
            } else {
                //dst.isSetpointIdChangeable = std::nullopt;
            }
            if (item["isOverrunActive"]) {
                dst.isOverrunActive = item["isOverrunActive"].as<decltype(dst.isOverrunActive)::value_type>();
            } else {
                //dst.isOverrunActive = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["currentOperationModeId"]) {
            dst.currentOperationModeId = src["currentOperationModeId"].as<decltype(dst.currentOperationModeId)::value_type>();
        } else {
            //dst.currentOperationModeId = std::nullopt;
        }
        if (src["isOperationModeIdChangeable"]) {
            dst.isOperationModeIdChangeable =
                src["isOperationModeIdChangeable"].as<decltype(dst.isOperationModeIdChangeable)::value_type>();
        } else {
            //dst.isOperationModeIdChangeable = std::nullopt;
        }
        if (src["currentSetpointId"]) {
            dst.currentSetpointId = src["currentSetpointId"].as<decltype(dst.currentSetpointId)::value_type>();
        } else {
            //dst.currentSetpointId = std::nullopt;
        }
        if (src["isSetpointIdChangeable"]) {
            dst.isSetpointIdChangeable = src["isSetpointIdChangeable"].as<decltype(dst.isSetpointIdChangeable)::value_type>();
        } else {
            //dst.isSetpointIdChangeable = std::nullopt;
        }
        if (src["isOverrunActive"]) {
            dst.isOverrunActive = src["isOverrunActive"].as<decltype(dst.isOverrunActive)::value_type>();
        } else {
            //dst.isOverrunActive = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDataElementsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.currentOperationModeId) {
        dst["currentOperationModeId"] = *src.currentOperationModeId;
    }
    if (src.isOperationModeIdChangeable) {
        dst["isOperationModeIdChangeable"] = *src.isOperationModeIdChangeable;
    }
    if (src.currentSetpointId) {
        dst["currentSetpointId"] = *src.currentSetpointId;
    }
    if (src.isSetpointIdChangeable) {
        dst["isSetpointIdChangeable"] = *src.isSetpointIdChangeable;
    }
    if (src.isOverrunActive) {
        dst["isOverrunActive"] = *src.isOverrunActive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["currentOperationModeId"]) {
                dst.currentOperationModeId = item["currentOperationModeId"].as<decltype(dst.currentOperationModeId)::value_type>();
            } else {
                //dst.currentOperationModeId = std::nullopt;
            }
            if (item["isOperationModeIdChangeable"]) {
                dst.isOperationModeIdChangeable =
                    item["isOperationModeIdChangeable"].as<decltype(dst.isOperationModeIdChangeable)::value_type>();
            } else {
                //dst.isOperationModeIdChangeable = std::nullopt;
            }
            if (item["currentSetpointId"]) {
                dst.currentSetpointId = item["currentSetpointId"].as<decltype(dst.currentSetpointId)::value_type>();
            } else {
                //dst.currentSetpointId = std::nullopt;
            }
            if (item["isSetpointIdChangeable"]) {
                dst.isSetpointIdChangeable = item["isSetpointIdChangeable"].as<decltype(dst.isSetpointIdChangeable)::value_type>();
            } else {
                //dst.isSetpointIdChangeable = std::nullopt;
            }
            if (item["isOverrunActive"]) {
                dst.isOverrunActive = item["isOverrunActive"].as<decltype(dst.isOverrunActive)::value_type>();
            } else {
                //dst.isOverrunActive = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["currentOperationModeId"]) {
            dst.currentOperationModeId = src["currentOperationModeId"].as<decltype(dst.currentOperationModeId)::value_type>();
        } else {
            //dst.currentOperationModeId = std::nullopt;
        }
        if (src["isOperationModeIdChangeable"]) {
            dst.isOperationModeIdChangeable =
                src["isOperationModeIdChangeable"].as<decltype(dst.isOperationModeIdChangeable)::value_type>();
        } else {
            //dst.isOperationModeIdChangeable = std::nullopt;
        }
        if (src["currentSetpointId"]) {
            dst.currentSetpointId = src["currentSetpointId"].as<decltype(dst.currentSetpointId)::value_type>();
        } else {
            //dst.currentSetpointId = std::nullopt;
        }
        if (src["isSetpointIdChangeable"]) {
            dst.isSetpointIdChangeable = src["isSetpointIdChangeable"].as<decltype(dst.isSetpointIdChangeable)::value_type>();
        } else {
            //dst.isSetpointIdChangeable = std::nullopt;
        }
        if (src["isOverrunActive"]) {
            dst.isOverrunActive = src["isOverrunActive"].as<decltype(dst.isOverrunActive)::value_type>();
        } else {
            //dst.isOverrunActive = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionListDataType &src, JsonVariant &dst)
{
    if (src.hvacSystemFunctionData) {
        dst["hvacSystemFunctionData"] = *src.hvacSystemFunctionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacSystemFunctionData"]) {
                dst.hvacSystemFunctionData = item["hvacSystemFunctionData"].as<decltype(dst.hvacSystemFunctionData)::value_type>();
            } else {
                //dst.hvacSystemFunctionData = std::nullopt;
            }
        }
    } else {
        if (src["hvacSystemFunctionData"]) {
            dst.hvacSystemFunctionData = src["hvacSystemFunctionData"].as<decltype(dst.hvacSystemFunctionData)::value_type>();
        } else {
            //dst.hvacSystemFunctionData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataType &src, JsonVariant &dst)
{
    if (src.hvacSystemFunctionOperationModeRelationData) {
        dst["hvacSystemFunctionOperationModeRelationData"] = *src.hvacSystemFunctionOperationModeRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacSystemFunctionOperationModeRelationData"]) {
                dst.hvacSystemFunctionOperationModeRelationData =
                    item["hvacSystemFunctionOperationModeRelationData"]
                        .as<decltype(dst.hvacSystemFunctionOperationModeRelationData)::value_type>();
            } else {
                //dst.hvacSystemFunctionOperationModeRelationData = std::nullopt;
            }
        }
    } else {
        if (src["hvacSystemFunctionOperationModeRelationData"]) {
            dst.hvacSystemFunctionOperationModeRelationData =
                src["hvacSystemFunctionOperationModeRelationData"]
                    .as<decltype(dst.hvacSystemFunctionOperationModeRelationData)::value_type>();
        } else {
            //dst.hvacSystemFunctionOperationModeRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionOperationModeRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionSetpointRelationDataType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionSetpointRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataType &src, JsonVariant &dst)
{
    if (src.hvacSystemFunctionSetpointRelationData) {
        dst["hvacSystemFunctionSetpointRelationData"] = *src.hvacSystemFunctionSetpointRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacSystemFunctionSetpointRelationData"]) {
                dst.hvacSystemFunctionSetpointRelationData =
                    item["hvacSystemFunctionSetpointRelationData"].as<decltype(dst.hvacSystemFunctionSetpointRelationData)::value_type>();
            } else {
                //dst.hvacSystemFunctionSetpointRelationData = std::nullopt;
            }
        }
    } else {
        if (src["hvacSystemFunctionSetpointRelationData"]) {
            dst.hvacSystemFunctionSetpointRelationData =
                src["hvacSystemFunctionSetpointRelationData"].as<decltype(dst.hvacSystemFunctionSetpointRelationData)::value_type>();
        } else {
            //dst.hvacSystemFunctionSetpointRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionSetpointRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataType &src, JsonVariant &dst)
{
    if (src.hvacSystemFunctionPowerSequenceRelationData) {
        dst["hvacSystemFunctionPowerSequenceRelationData"] = *src.hvacSystemFunctionPowerSequenceRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacSystemFunctionPowerSequenceRelationData"]) {
                dst.hvacSystemFunctionPowerSequenceRelationData =
                    item["hvacSystemFunctionPowerSequenceRelationData"]
                        .as<decltype(dst.hvacSystemFunctionPowerSequenceRelationData)::value_type>();
            } else {
                //dst.hvacSystemFunctionPowerSequenceRelationData = std::nullopt;
            }
        }
    } else {
        if (src["hvacSystemFunctionPowerSequenceRelationData"]) {
            dst.hvacSystemFunctionPowerSequenceRelationData =
                src["hvacSystemFunctionPowerSequenceRelationData"]
                    .as<decltype(dst.hvacSystemFunctionPowerSequenceRelationData)::value_type>();
        } else {
            //dst.hvacSystemFunctionPowerSequenceRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDescriptionDataType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.systemFunctionType) {
        dst["systemFunctionType"] = *src.systemFunctionType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["systemFunctionType"]) {
                dst.systemFunctionType = item["systemFunctionType"].as<decltype(dst.systemFunctionType)::value_type>();
            } else {
                //dst.systemFunctionType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["systemFunctionType"]) {
            dst.systemFunctionType = src["systemFunctionType"].as<decltype(dst.systemFunctionType)::value_type>();
        } else {
            //dst.systemFunctionType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }
    if (src.systemFunctionType) {
        dst["systemFunctionType"] = *src.systemFunctionType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
            if (item["systemFunctionType"]) {
                dst.systemFunctionType = item["systemFunctionType"].as<decltype(dst.systemFunctionType)::value_type>();
            } else {
                //dst.systemFunctionType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
        if (src["systemFunctionType"]) {
            dst.systemFunctionType = src["systemFunctionType"].as<decltype(dst.systemFunctionType)::value_type>();
        } else {
            //dst.systemFunctionType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.hvacSystemFunctionDescriptionData) {
        dst["hvacSystemFunctionDescriptionData"] = *src.hvacSystemFunctionDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacSystemFunctionDescriptionData"]) {
                dst.hvacSystemFunctionDescriptionData =
                    item["hvacSystemFunctionDescriptionData"].as<decltype(dst.hvacSystemFunctionDescriptionData)::value_type>();
            } else {
                //dst.hvacSystemFunctionDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["hvacSystemFunctionDescriptionData"]) {
            dst.hvacSystemFunctionDescriptionData =
                src["hvacSystemFunctionDescriptionData"].as<decltype(dst.hvacSystemFunctionDescriptionData)::value_type>();
        } else {
            //dst.hvacSystemFunctionDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacSystemFunctionDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.systemFunctionId) {
        dst["systemFunctionId"] = *src.systemFunctionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacSystemFunctionDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["systemFunctionId"]) {
                dst.systemFunctionId = item["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
            } else {
                //dst.systemFunctionId = std::nullopt;
            }
        }
    } else {
        if (src["systemFunctionId"]) {
            dst.systemFunctionId = src["systemFunctionId"].as<decltype(dst.systemFunctionId)::value_type>();
        } else {
            //dst.systemFunctionId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOperationModeDescriptionDataType &src, JsonVariant &dst)
{
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }
    if (src.operationModeType) {
        dst["operationModeType"] = *src.operationModeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
            if (item["operationModeType"]) {
                dst.operationModeType = item["operationModeType"].as<decltype(dst.operationModeType)::value_type>();
            } else {
                //dst.operationModeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
        if (src["operationModeType"]) {
            dst.operationModeType = src["operationModeType"].as<decltype(dst.operationModeType)::value_type>();
        } else {
            //dst.operationModeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOperationModeDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }
    if (src.operationModeType) {
        dst["operationModeType"] = *src.operationModeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
            if (item["operationModeType"]) {
                dst.operationModeType = item["operationModeType"].as<decltype(dst.operationModeType)::value_type>();
            } else {
                //dst.operationModeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
        if (src["operationModeType"]) {
            dst.operationModeType = src["operationModeType"].as<decltype(dst.operationModeType)::value_type>();
        } else {
            //dst.operationModeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOperationModeDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.hvacOperationModeDescriptionData) {
        dst["hvacOperationModeDescriptionData"] = *src.hvacOperationModeDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacOperationModeDescriptionData"]) {
                dst.hvacOperationModeDescriptionData =
                    item["hvacOperationModeDescriptionData"].as<decltype(dst.hvacOperationModeDescriptionData)::value_type>();
            } else {
                //dst.hvacOperationModeDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["hvacOperationModeDescriptionData"]) {
            dst.hvacOperationModeDescriptionData =
                src["hvacOperationModeDescriptionData"].as<decltype(dst.hvacOperationModeDescriptionData)::value_type>();
        } else {
            //dst.hvacOperationModeDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOperationModeDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.operationModeId) {
        dst["operationModeId"] = *src.operationModeId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOperationModeDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operationModeId"]) {
                dst.operationModeId = item["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
            } else {
                //dst.operationModeId = std::nullopt;
            }
        }
    } else {
        if (src["operationModeId"]) {
            dst.operationModeId = src["operationModeId"].as<decltype(dst.operationModeId)::value_type>();
        } else {
            //dst.operationModeId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDataType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }
    if (src.overrunStatus) {
        dst["overrunStatus"] = *src.overrunStatus;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.isOverrunStatusChangeable) {
        dst["isOverrunStatusChangeable"] = *src.isOverrunStatusChangeable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
            if (item["overrunStatus"]) {
                dst.overrunStatus = item["overrunStatus"].as<decltype(dst.overrunStatus)::value_type>();
            } else {
                //dst.overrunStatus = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["isOverrunStatusChangeable"]) {
                dst.isOverrunStatusChangeable = item["isOverrunStatusChangeable"].as<decltype(dst.isOverrunStatusChangeable)::value_type>();
            } else {
                //dst.isOverrunStatusChangeable = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
        if (src["overrunStatus"]) {
            dst.overrunStatus = src["overrunStatus"].as<decltype(dst.overrunStatus)::value_type>();
        } else {
            //dst.overrunStatus = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["isOverrunStatusChangeable"]) {
            dst.isOverrunStatusChangeable = src["isOverrunStatusChangeable"].as<decltype(dst.isOverrunStatusChangeable)::value_type>();
        } else {
            //dst.isOverrunStatusChangeable = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDataElementsType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }
    if (src.overrunStatus) {
        dst["overrunStatus"] = *src.overrunStatus;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.isOverrunStatusChangeable) {
        dst["isOverrunStatusChangeable"] = *src.isOverrunStatusChangeable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
            if (item["overrunStatus"]) {
                dst.overrunStatus = item["overrunStatus"].as<decltype(dst.overrunStatus)::value_type>();
            } else {
                //dst.overrunStatus = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["isOverrunStatusChangeable"]) {
                dst.isOverrunStatusChangeable = item["isOverrunStatusChangeable"].as<decltype(dst.isOverrunStatusChangeable)::value_type>();
            } else {
                //dst.isOverrunStatusChangeable = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
        if (src["overrunStatus"]) {
            dst.overrunStatus = src["overrunStatus"].as<decltype(dst.overrunStatus)::value_type>();
        } else {
            //dst.overrunStatus = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["isOverrunStatusChangeable"]) {
            dst.isOverrunStatusChangeable = src["isOverrunStatusChangeable"].as<decltype(dst.isOverrunStatusChangeable)::value_type>();
        } else {
            //dst.isOverrunStatusChangeable = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunListDataType &src, JsonVariant &dst)
{
    if (src.hvacOverrunData) {
        dst["hvacOverrunData"] = *src.hvacOverrunData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacOverrunData"]) {
                dst.hvacOverrunData = item["hvacOverrunData"].as<decltype(dst.hvacOverrunData)::value_type>();
            } else {
                //dst.hvacOverrunData = std::nullopt;
            }
        }
    } else {
        if (src["hvacOverrunData"]) {
            dst.hvacOverrunData = src["hvacOverrunData"].as<decltype(dst.hvacOverrunData)::value_type>();
        } else {
            //dst.hvacOverrunData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDescriptionDataType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }
    if (src.overrunType) {
        dst["overrunType"] = *src.overrunType;
    }
    if (src.affectedSystemFunctionId) {
        dst["affectedSystemFunctionId"] = *src.affectedSystemFunctionId;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
            if (item["overrunType"]) {
                dst.overrunType = item["overrunType"].as<decltype(dst.overrunType)::value_type>();
            } else {
                //dst.overrunType = std::nullopt;
            }
            if (item["affectedSystemFunctionId"]) {
                dst.affectedSystemFunctionId = item["affectedSystemFunctionId"].as<decltype(dst.affectedSystemFunctionId)::value_type>();
            } else {
                //dst.affectedSystemFunctionId = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
        if (src["overrunType"]) {
            dst.overrunType = src["overrunType"].as<decltype(dst.overrunType)::value_type>();
        } else {
            //dst.overrunType = std::nullopt;
        }
        if (src["affectedSystemFunctionId"]) {
            dst.affectedSystemFunctionId = src["affectedSystemFunctionId"].as<decltype(dst.affectedSystemFunctionId)::value_type>();
        } else {
            //dst.affectedSystemFunctionId = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }
    if (src.overrunType) {
        dst["overrunType"] = *src.overrunType;
    }
    if (src.affectedSystemFunctionId) {
        dst["affectedSystemFunctionId"] = *src.affectedSystemFunctionId;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
            if (item["overrunType"]) {
                dst.overrunType = item["overrunType"].as<decltype(dst.overrunType)::value_type>();
            } else {
                //dst.overrunType = std::nullopt;
            }
            if (item["affectedSystemFunctionId"]) {
                dst.affectedSystemFunctionId = item["affectedSystemFunctionId"].as<decltype(dst.affectedSystemFunctionId)::value_type>();
            } else {
                //dst.affectedSystemFunctionId = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
        if (src["overrunType"]) {
            dst.overrunType = src["overrunType"].as<decltype(dst.overrunType)::value_type>();
        } else {
            //dst.overrunType = std::nullopt;
        }
        if (src["affectedSystemFunctionId"]) {
            dst.affectedSystemFunctionId = src["affectedSystemFunctionId"].as<decltype(dst.affectedSystemFunctionId)::value_type>();
        } else {
            //dst.affectedSystemFunctionId = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.hvacOverrunDescriptionData) {
        dst["hvacOverrunDescriptionData"] = *src.hvacOverrunDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["hvacOverrunDescriptionData"]) {
                dst.hvacOverrunDescriptionData =
                    item["hvacOverrunDescriptionData"].as<decltype(dst.hvacOverrunDescriptionData)::value_type>();
            } else {
                //dst.hvacOverrunDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["hvacOverrunDescriptionData"]) {
            dst.hvacOverrunDescriptionData = src["hvacOverrunDescriptionData"].as<decltype(dst.hvacOverrunDescriptionData)::value_type>();
        } else {
            //dst.hvacOverrunDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const HvacOverrunDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HvacOverrunDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDataType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.valueMin) {
        dst["valueMin"] = *src.valueMin;
    }
    if (src.valueMax) {
        dst["valueMax"] = *src.valueMax;
    }
    if (src.valueToleranceAbsolute) {
        dst["valueToleranceAbsolute"] = *src.valueToleranceAbsolute;
    }
    if (src.valueTolerancePercentage) {
        dst["valueTolerancePercentage"] = *src.valueTolerancePercentage;
    }
    if (src.isSetpointChangeable) {
        dst["isSetpointChangeable"] = *src.isSetpointChangeable;
    }
    if (src.isSetpointActive) {
        dst["isSetpointActive"] = *src.isSetpointActive;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["valueMin"]) {
                dst.valueMin = item["valueMin"].as<decltype(dst.valueMin)::value_type>();
            } else {
                //dst.valueMin = std::nullopt;
            }
            if (item["valueMax"]) {
                dst.valueMax = item["valueMax"].as<decltype(dst.valueMax)::value_type>();
            } else {
                //dst.valueMax = std::nullopt;
            }
            if (item["valueToleranceAbsolute"]) {
                dst.valueToleranceAbsolute = item["valueToleranceAbsolute"].as<decltype(dst.valueToleranceAbsolute)::value_type>();
            } else {
                //dst.valueToleranceAbsolute = std::nullopt;
            }
            if (item["valueTolerancePercentage"]) {
                dst.valueTolerancePercentage = item["valueTolerancePercentage"].as<decltype(dst.valueTolerancePercentage)::value_type>();
            } else {
                //dst.valueTolerancePercentage = std::nullopt;
            }
            if (item["isSetpointChangeable"]) {
                dst.isSetpointChangeable = item["isSetpointChangeable"].as<decltype(dst.isSetpointChangeable)::value_type>();
            } else {
                //dst.isSetpointChangeable = std::nullopt;
            }
            if (item["isSetpointActive"]) {
                dst.isSetpointActive = item["isSetpointActive"].as<decltype(dst.isSetpointActive)::value_type>();
            } else {
                //dst.isSetpointActive = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["valueMin"]) {
            dst.valueMin = src["valueMin"].as<decltype(dst.valueMin)::value_type>();
        } else {
            //dst.valueMin = std::nullopt;
        }
        if (src["valueMax"]) {
            dst.valueMax = src["valueMax"].as<decltype(dst.valueMax)::value_type>();
        } else {
            //dst.valueMax = std::nullopt;
        }
        if (src["valueToleranceAbsolute"]) {
            dst.valueToleranceAbsolute = src["valueToleranceAbsolute"].as<decltype(dst.valueToleranceAbsolute)::value_type>();
        } else {
            //dst.valueToleranceAbsolute = std::nullopt;
        }
        if (src["valueTolerancePercentage"]) {
            dst.valueTolerancePercentage = src["valueTolerancePercentage"].as<decltype(dst.valueTolerancePercentage)::value_type>();
        } else {
            //dst.valueTolerancePercentage = std::nullopt;
        }
        if (src["isSetpointChangeable"]) {
            dst.isSetpointChangeable = src["isSetpointChangeable"].as<decltype(dst.isSetpointChangeable)::value_type>();
        } else {
            //dst.isSetpointChangeable = std::nullopt;
        }
        if (src["isSetpointActive"]) {
            dst.isSetpointActive = src["isSetpointActive"].as<decltype(dst.isSetpointActive)::value_type>();
        } else {
            //dst.isSetpointActive = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDataElementsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }
    if (src.valueMin) {
        dst["valueMin"] = *src.valueMin;
    }
    if (src.valueMax) {
        dst["valueMax"] = *src.valueMax;
    }
    if (src.valueToleranceAbsolute) {
        dst["valueToleranceAbsolute"] = *src.valueToleranceAbsolute;
    }
    if (src.valueTolerancePercentage) {
        dst["valueTolerancePercentage"] = *src.valueTolerancePercentage;
    }
    if (src.isSetpointChangeable) {
        dst["isSetpointChangeable"] = *src.isSetpointChangeable;
    }
    if (src.isSetpointActive) {
        dst["isSetpointActive"] = *src.isSetpointActive;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
            if (item["valueMin"]) {
                dst.valueMin = item["valueMin"].as<decltype(dst.valueMin)::value_type>();
            } else {
                //dst.valueMin = std::nullopt;
            }
            if (item["valueMax"]) {
                dst.valueMax = item["valueMax"].as<decltype(dst.valueMax)::value_type>();
            } else {
                //dst.valueMax = std::nullopt;
            }
            if (item["valueToleranceAbsolute"]) {
                dst.valueToleranceAbsolute = item["valueToleranceAbsolute"].as<decltype(dst.valueToleranceAbsolute)::value_type>();
            } else {
                //dst.valueToleranceAbsolute = std::nullopt;
            }
            if (item["valueTolerancePercentage"]) {
                dst.valueTolerancePercentage = item["valueTolerancePercentage"].as<decltype(dst.valueTolerancePercentage)::value_type>();
            } else {
                //dst.valueTolerancePercentage = std::nullopt;
            }
            if (item["isSetpointChangeable"]) {
                dst.isSetpointChangeable = item["isSetpointChangeable"].as<decltype(dst.isSetpointChangeable)::value_type>();
            } else {
                //dst.isSetpointChangeable = std::nullopt;
            }
            if (item["isSetpointActive"]) {
                dst.isSetpointActive = item["isSetpointActive"].as<decltype(dst.isSetpointActive)::value_type>();
            } else {
                //dst.isSetpointActive = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
        if (src["valueMin"]) {
            dst.valueMin = src["valueMin"].as<decltype(dst.valueMin)::value_type>();
        } else {
            //dst.valueMin = std::nullopt;
        }
        if (src["valueMax"]) {
            dst.valueMax = src["valueMax"].as<decltype(dst.valueMax)::value_type>();
        } else {
            //dst.valueMax = std::nullopt;
        }
        if (src["valueToleranceAbsolute"]) {
            dst.valueToleranceAbsolute = src["valueToleranceAbsolute"].as<decltype(dst.valueToleranceAbsolute)::value_type>();
        } else {
            //dst.valueToleranceAbsolute = std::nullopt;
        }
        if (src["valueTolerancePercentage"]) {
            dst.valueTolerancePercentage = src["valueTolerancePercentage"].as<decltype(dst.valueTolerancePercentage)::value_type>();
        } else {
            //dst.valueTolerancePercentage = std::nullopt;
        }
        if (src["isSetpointChangeable"]) {
            dst.isSetpointChangeable = src["isSetpointChangeable"].as<decltype(dst.isSetpointChangeable)::value_type>();
        } else {
            //dst.isSetpointChangeable = std::nullopt;
        }
        if (src["isSetpointActive"]) {
            dst.isSetpointActive = src["isSetpointActive"].as<decltype(dst.isSetpointActive)::value_type>();
        } else {
            //dst.isSetpointActive = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointListDataType &src, JsonVariant &dst)
{
    if (src.setpointData) {
        dst["setpointData"] = *src.setpointData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointData"]) {
                dst.setpointData = item["setpointData"].as<decltype(dst.setpointData)::value_type>();
            } else {
                //dst.setpointData = std::nullopt;
            }
        }
    } else {
        if (src["setpointData"]) {
            dst.setpointData = src["setpointData"].as<decltype(dst.setpointData)::value_type>();
        } else {
            //dst.setpointData = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointConstraintsDataType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.setpointRangeMin) {
        dst["setpointRangeMin"] = *src.setpointRangeMin;
    }
    if (src.setpointRangeMax) {
        dst["setpointRangeMax"] = *src.setpointRangeMax;
    }
    if (src.setpointStepSize) {
        dst["setpointStepSize"] = *src.setpointStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["setpointRangeMin"]) {
                dst.setpointRangeMin = item["setpointRangeMin"].as<decltype(dst.setpointRangeMin)::value_type>();
            } else {
                //dst.setpointRangeMin = std::nullopt;
            }
            if (item["setpointRangeMax"]) {
                dst.setpointRangeMax = item["setpointRangeMax"].as<decltype(dst.setpointRangeMax)::value_type>();
            } else {
                //dst.setpointRangeMax = std::nullopt;
            }
            if (item["setpointStepSize"]) {
                dst.setpointStepSize = item["setpointStepSize"].as<decltype(dst.setpointStepSize)::value_type>();
            } else {
                //dst.setpointStepSize = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["setpointRangeMin"]) {
            dst.setpointRangeMin = src["setpointRangeMin"].as<decltype(dst.setpointRangeMin)::value_type>();
        } else {
            //dst.setpointRangeMin = std::nullopt;
        }
        if (src["setpointRangeMax"]) {
            dst.setpointRangeMax = src["setpointRangeMax"].as<decltype(dst.setpointRangeMax)::value_type>();
        } else {
            //dst.setpointRangeMax = std::nullopt;
        }
        if (src["setpointStepSize"]) {
            dst.setpointStepSize = src["setpointStepSize"].as<decltype(dst.setpointStepSize)::value_type>();
        } else {
            //dst.setpointStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.setpointRangeMin) {
        dst["setpointRangeMin"] = *src.setpointRangeMin;
    }
    if (src.setpointRangeMax) {
        dst["setpointRangeMax"] = *src.setpointRangeMax;
    }
    if (src.setpointStepSize) {
        dst["setpointStepSize"] = *src.setpointStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["setpointRangeMin"]) {
                dst.setpointRangeMin = item["setpointRangeMin"].as<decltype(dst.setpointRangeMin)::value_type>();
            } else {
                //dst.setpointRangeMin = std::nullopt;
            }
            if (item["setpointRangeMax"]) {
                dst.setpointRangeMax = item["setpointRangeMax"].as<decltype(dst.setpointRangeMax)::value_type>();
            } else {
                //dst.setpointRangeMax = std::nullopt;
            }
            if (item["setpointStepSize"]) {
                dst.setpointStepSize = item["setpointStepSize"].as<decltype(dst.setpointStepSize)::value_type>();
            } else {
                //dst.setpointStepSize = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["setpointRangeMin"]) {
            dst.setpointRangeMin = src["setpointRangeMin"].as<decltype(dst.setpointRangeMin)::value_type>();
        } else {
            //dst.setpointRangeMin = std::nullopt;
        }
        if (src["setpointRangeMax"]) {
            dst.setpointRangeMax = src["setpointRangeMax"].as<decltype(dst.setpointRangeMax)::value_type>();
        } else {
            //dst.setpointRangeMax = std::nullopt;
        }
        if (src["setpointStepSize"]) {
            dst.setpointStepSize = src["setpointStepSize"].as<decltype(dst.setpointStepSize)::value_type>();
        } else {
            //dst.setpointStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.setpointConstraintsData) {
        dst["setpointConstraintsData"] = *src.setpointConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointConstraintsData"]) {
                dst.setpointConstraintsData = item["setpointConstraintsData"].as<decltype(dst.setpointConstraintsData)::value_type>();
            } else {
                //dst.setpointConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["setpointConstraintsData"]) {
            dst.setpointConstraintsData = src["setpointConstraintsData"].as<decltype(dst.setpointConstraintsData)::value_type>();
        } else {
            //dst.setpointConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDescriptionDataType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.setpointType) {
        dst["setpointType"] = *src.setpointType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["setpointType"]) {
                dst.setpointType = item["setpointType"].as<decltype(dst.setpointType)::value_type>();
            } else {
                //dst.setpointType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["setpointType"]) {
            dst.setpointType = src["setpointType"].as<decltype(dst.setpointType)::value_type>();
        } else {
            //dst.setpointType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.setpointType) {
        dst["setpointType"] = *src.setpointType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["setpointType"]) {
                dst.setpointType = item["setpointType"].as<decltype(dst.setpointType)::value_type>();
            } else {
                //dst.setpointType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["setpointType"]) {
            dst.setpointType = src["setpointType"].as<decltype(dst.setpointType)::value_type>();
        } else {
            //dst.setpointType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.setpointDescriptionData) {
        dst["setpointDescriptionData"] = *src.setpointDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointDescriptionData"]) {
                dst.setpointDescriptionData = item["setpointDescriptionData"].as<decltype(dst.setpointDescriptionData)::value_type>();
            } else {
                //dst.setpointDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["setpointDescriptionData"]) {
            dst.setpointDescriptionData = src["setpointDescriptionData"].as<decltype(dst.setpointDescriptionData)::value_type>();
        } else {
            //dst.setpointDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const SetpointDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.setpointId) {
        dst["setpointId"] = *src.setpointId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.setpointType) {
        dst["setpointType"] = *src.setpointType;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SetpointDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setpointId"]) {
                dst.setpointId = item["setpointId"].as<decltype(dst.setpointId)::value_type>();
            } else {
                //dst.setpointId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["setpointType"]) {
                dst.setpointType = item["setpointType"].as<decltype(dst.setpointType)::value_type>();
            } else {
                //dst.setpointType = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["setpointId"]) {
            dst.setpointId = src["setpointId"].as<decltype(dst.setpointId)::value_type>();
        } else {
            //dst.setpointId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["setpointType"]) {
            dst.setpointType = src["setpointType"].as<decltype(dst.setpointType)::value_type>();
        } else {
            //dst.setpointType = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDataType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.timeSlotId) {
        dst["timeSlotId"] = *src.timeSlotId;
    }
    if (src.recurrenceInformation) {
        dst["recurrenceInformation"] = *src.recurrenceInformation;
    }
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["timeSlotId"]) {
                dst.timeSlotId = item["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
            } else {
                //dst.timeSlotId = std::nullopt;
            }
            if (item["recurrenceInformation"]) {
                dst.recurrenceInformation = item["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
            } else {
                //dst.recurrenceInformation = std::nullopt;
            }
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["timeSlotId"]) {
            dst.timeSlotId = src["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
        } else {
            //dst.timeSlotId = std::nullopt;
        }
        if (src["recurrenceInformation"]) {
            dst.recurrenceInformation = src["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
        } else {
            //dst.recurrenceInformation = std::nullopt;
        }
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDataElementsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.timeSlotId) {
        dst["timeSlotId"] = *src.timeSlotId;
    }
    if (src.recurrenceInformation) {
        dst["recurrenceInformation"] = *src.recurrenceInformation;
    }
    if (src.startTime) {
        dst["startTime"] = *src.startTime;
    }
    if (src.endTime) {
        dst["endTime"] = *src.endTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["timeSlotId"]) {
                dst.timeSlotId = item["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
            } else {
                //dst.timeSlotId = std::nullopt;
            }
            if (item["recurrenceInformation"]) {
                dst.recurrenceInformation = item["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
            } else {
                //dst.recurrenceInformation = std::nullopt;
            }
            if (item["startTime"]) {
                dst.startTime = item["startTime"].as<decltype(dst.startTime)::value_type>();
            } else {
                //dst.startTime = std::nullopt;
            }
            if (item["endTime"]) {
                dst.endTime = item["endTime"].as<decltype(dst.endTime)::value_type>();
            } else {
                //dst.endTime = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["timeSlotId"]) {
            dst.timeSlotId = src["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
        } else {
            //dst.timeSlotId = std::nullopt;
        }
        if (src["recurrenceInformation"]) {
            dst.recurrenceInformation = src["recurrenceInformation"].as<decltype(dst.recurrenceInformation)::value_type>();
        } else {
            //dst.recurrenceInformation = std::nullopt;
        }
        if (src["startTime"]) {
            dst.startTime = src["startTime"].as<decltype(dst.startTime)::value_type>();
        } else {
            //dst.startTime = std::nullopt;
        }
        if (src["endTime"]) {
            dst.endTime = src["endTime"].as<decltype(dst.endTime)::value_type>();
        } else {
            //dst.endTime = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableListDataType &src, JsonVariant &dst)
{
    if (src.timeTableData) {
        dst["timeTableData"] = *src.timeTableData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableData"]) {
                dst.timeTableData = item["timeTableData"].as<decltype(dst.timeTableData)::value_type>();
            } else {
                //dst.timeTableData = std::nullopt;
            }
        }
    } else {
        if (src["timeTableData"]) {
            dst.timeTableData = src["timeTableData"].as<decltype(dst.timeTableData)::value_type>();
        } else {
            //dst.timeTableData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.timeSlotId) {
        dst["timeSlotId"] = *src.timeSlotId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["timeSlotId"]) {
                dst.timeSlotId = item["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
            } else {
                //dst.timeSlotId = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["timeSlotId"]) {
            dst.timeSlotId = src["timeSlotId"].as<decltype(dst.timeSlotId)::value_type>();
        } else {
            //dst.timeSlotId = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableConstraintsDataType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.slotCountMin) {
        dst["slotCountMin"] = *src.slotCountMin;
    }
    if (src.slotCountMax) {
        dst["slotCountMax"] = *src.slotCountMax;
    }
    if (src.slotDurationMin) {
        dst["slotDurationMin"] = *src.slotDurationMin;
    }
    if (src.slotDurationMax) {
        dst["slotDurationMax"] = *src.slotDurationMax;
    }
    if (src.slotDurationStepSize) {
        dst["slotDurationStepSize"] = *src.slotDurationStepSize;
    }
    if (src.slotShiftStepSize) {
        dst["slotShiftStepSize"] = *src.slotShiftStepSize;
    }
    if (src.firstSlotBeginsAt) {
        dst["firstSlotBeginsAt"] = *src.firstSlotBeginsAt;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["slotCountMin"]) {
                dst.slotCountMin = item["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
            } else {
                //dst.slotCountMin = std::nullopt;
            }
            if (item["slotCountMax"]) {
                dst.slotCountMax = item["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
            } else {
                //dst.slotCountMax = std::nullopt;
            }
            if (item["slotDurationMin"]) {
                dst.slotDurationMin = item["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
            } else {
                //dst.slotDurationMin = std::nullopt;
            }
            if (item["slotDurationMax"]) {
                dst.slotDurationMax = item["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
            } else {
                //dst.slotDurationMax = std::nullopt;
            }
            if (item["slotDurationStepSize"]) {
                dst.slotDurationStepSize = item["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
            } else {
                //dst.slotDurationStepSize = std::nullopt;
            }
            if (item["slotShiftStepSize"]) {
                dst.slotShiftStepSize = item["slotShiftStepSize"].as<decltype(dst.slotShiftStepSize)::value_type>();
            } else {
                //dst.slotShiftStepSize = std::nullopt;
            }
            if (item["firstSlotBeginsAt"]) {
                dst.firstSlotBeginsAt = item["firstSlotBeginsAt"].as<decltype(dst.firstSlotBeginsAt)::value_type>();
            } else {
                //dst.firstSlotBeginsAt = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["slotCountMin"]) {
            dst.slotCountMin = src["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
        } else {
            //dst.slotCountMin = std::nullopt;
        }
        if (src["slotCountMax"]) {
            dst.slotCountMax = src["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
        } else {
            //dst.slotCountMax = std::nullopt;
        }
        if (src["slotDurationMin"]) {
            dst.slotDurationMin = src["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
        } else {
            //dst.slotDurationMin = std::nullopt;
        }
        if (src["slotDurationMax"]) {
            dst.slotDurationMax = src["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
        } else {
            //dst.slotDurationMax = std::nullopt;
        }
        if (src["slotDurationStepSize"]) {
            dst.slotDurationStepSize = src["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
        } else {
            //dst.slotDurationStepSize = std::nullopt;
        }
        if (src["slotShiftStepSize"]) {
            dst.slotShiftStepSize = src["slotShiftStepSize"].as<decltype(dst.slotShiftStepSize)::value_type>();
        } else {
            //dst.slotShiftStepSize = std::nullopt;
        }
        if (src["firstSlotBeginsAt"]) {
            dst.firstSlotBeginsAt = src["firstSlotBeginsAt"].as<decltype(dst.firstSlotBeginsAt)::value_type>();
        } else {
            //dst.firstSlotBeginsAt = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.slotCountMin) {
        dst["slotCountMin"] = *src.slotCountMin;
    }
    if (src.slotCountMax) {
        dst["slotCountMax"] = *src.slotCountMax;
    }
    if (src.slotDurationMin) {
        dst["slotDurationMin"] = *src.slotDurationMin;
    }
    if (src.slotDurationMax) {
        dst["slotDurationMax"] = *src.slotDurationMax;
    }
    if (src.slotDurationStepSize) {
        dst["slotDurationStepSize"] = *src.slotDurationStepSize;
    }
    if (src.slotShiftStepSize) {
        dst["slotShiftStepSize"] = *src.slotShiftStepSize;
    }
    if (src.firstSlotBeginsAt) {
        dst["firstSlotBeginsAt"] = *src.firstSlotBeginsAt;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["slotCountMin"]) {
                dst.slotCountMin = item["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
            } else {
                //dst.slotCountMin = std::nullopt;
            }
            if (item["slotCountMax"]) {
                dst.slotCountMax = item["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
            } else {
                //dst.slotCountMax = std::nullopt;
            }
            if (item["slotDurationMin"]) {
                dst.slotDurationMin = item["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
            } else {
                //dst.slotDurationMin = std::nullopt;
            }
            if (item["slotDurationMax"]) {
                dst.slotDurationMax = item["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
            } else {
                //dst.slotDurationMax = std::nullopt;
            }
            if (item["slotDurationStepSize"]) {
                dst.slotDurationStepSize = item["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
            } else {
                //dst.slotDurationStepSize = std::nullopt;
            }
            if (item["slotShiftStepSize"]) {
                dst.slotShiftStepSize = item["slotShiftStepSize"].as<decltype(dst.slotShiftStepSize)::value_type>();
            } else {
                //dst.slotShiftStepSize = std::nullopt;
            }
            if (item["firstSlotBeginsAt"]) {
                dst.firstSlotBeginsAt = item["firstSlotBeginsAt"].as<decltype(dst.firstSlotBeginsAt)::value_type>();
            } else {
                //dst.firstSlotBeginsAt = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["slotCountMin"]) {
            dst.slotCountMin = src["slotCountMin"].as<decltype(dst.slotCountMin)::value_type>();
        } else {
            //dst.slotCountMin = std::nullopt;
        }
        if (src["slotCountMax"]) {
            dst.slotCountMax = src["slotCountMax"].as<decltype(dst.slotCountMax)::value_type>();
        } else {
            //dst.slotCountMax = std::nullopt;
        }
        if (src["slotDurationMin"]) {
            dst.slotDurationMin = src["slotDurationMin"].as<decltype(dst.slotDurationMin)::value_type>();
        } else {
            //dst.slotDurationMin = std::nullopt;
        }
        if (src["slotDurationMax"]) {
            dst.slotDurationMax = src["slotDurationMax"].as<decltype(dst.slotDurationMax)::value_type>();
        } else {
            //dst.slotDurationMax = std::nullopt;
        }
        if (src["slotDurationStepSize"]) {
            dst.slotDurationStepSize = src["slotDurationStepSize"].as<decltype(dst.slotDurationStepSize)::value_type>();
        } else {
            //dst.slotDurationStepSize = std::nullopt;
        }
        if (src["slotShiftStepSize"]) {
            dst.slotShiftStepSize = src["slotShiftStepSize"].as<decltype(dst.slotShiftStepSize)::value_type>();
        } else {
            //dst.slotShiftStepSize = std::nullopt;
        }
        if (src["firstSlotBeginsAt"]) {
            dst.firstSlotBeginsAt = src["firstSlotBeginsAt"].as<decltype(dst.firstSlotBeginsAt)::value_type>();
        } else {
            //dst.firstSlotBeginsAt = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.timeTableConstraintsData) {
        dst["timeTableConstraintsData"] = *src.timeTableConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableConstraintsData"]) {
                dst.timeTableConstraintsData = item["timeTableConstraintsData"].as<decltype(dst.timeTableConstraintsData)::value_type>();
            } else {
                //dst.timeTableConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["timeTableConstraintsData"]) {
            dst.timeTableConstraintsData = src["timeTableConstraintsData"].as<decltype(dst.timeTableConstraintsData)::value_type>();
        } else {
            //dst.timeTableConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDescriptionDataType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.timeSlotCountChangeable) {
        dst["timeSlotCountChangeable"] = *src.timeSlotCountChangeable;
    }
    if (src.timeSlotTimesChangeable) {
        dst["timeSlotTimesChangeable"] = *src.timeSlotTimesChangeable;
    }
    if (src.timeSlotTimeMode) {
        dst["timeSlotTimeMode"] = *src.timeSlotTimeMode;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["timeSlotCountChangeable"]) {
                dst.timeSlotCountChangeable = item["timeSlotCountChangeable"].as<decltype(dst.timeSlotCountChangeable)::value_type>();
            } else {
                //dst.timeSlotCountChangeable = std::nullopt;
            }
            if (item["timeSlotTimesChangeable"]) {
                dst.timeSlotTimesChangeable = item["timeSlotTimesChangeable"].as<decltype(dst.timeSlotTimesChangeable)::value_type>();
            } else {
                //dst.timeSlotTimesChangeable = std::nullopt;
            }
            if (item["timeSlotTimeMode"]) {
                dst.timeSlotTimeMode = item["timeSlotTimeMode"].as<decltype(dst.timeSlotTimeMode)::value_type>();
            } else {
                //dst.timeSlotTimeMode = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["timeSlotCountChangeable"]) {
            dst.timeSlotCountChangeable = src["timeSlotCountChangeable"].as<decltype(dst.timeSlotCountChangeable)::value_type>();
        } else {
            //dst.timeSlotCountChangeable = std::nullopt;
        }
        if (src["timeSlotTimesChangeable"]) {
            dst.timeSlotTimesChangeable = src["timeSlotTimesChangeable"].as<decltype(dst.timeSlotTimesChangeable)::value_type>();
        } else {
            //dst.timeSlotTimesChangeable = std::nullopt;
        }
        if (src["timeSlotTimeMode"]) {
            dst.timeSlotTimeMode = src["timeSlotTimeMode"].as<decltype(dst.timeSlotTimeMode)::value_type>();
        } else {
            //dst.timeSlotTimeMode = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.timeSlotCountChangeable) {
        dst["timeSlotCountChangeable"] = *src.timeSlotCountChangeable;
    }
    if (src.timeSlotTimesChangeable) {
        dst["timeSlotTimesChangeable"] = *src.timeSlotTimesChangeable;
    }
    if (src.timeSlotTimeMode) {
        dst["timeSlotTimeMode"] = *src.timeSlotTimeMode;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["timeSlotCountChangeable"]) {
                dst.timeSlotCountChangeable = item["timeSlotCountChangeable"].as<decltype(dst.timeSlotCountChangeable)::value_type>();
            } else {
                //dst.timeSlotCountChangeable = std::nullopt;
            }
            if (item["timeSlotTimesChangeable"]) {
                dst.timeSlotTimesChangeable = item["timeSlotTimesChangeable"].as<decltype(dst.timeSlotTimesChangeable)::value_type>();
            } else {
                //dst.timeSlotTimesChangeable = std::nullopt;
            }
            if (item["timeSlotTimeMode"]) {
                dst.timeSlotTimeMode = item["timeSlotTimeMode"].as<decltype(dst.timeSlotTimeMode)::value_type>();
            } else {
                //dst.timeSlotTimeMode = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["timeSlotCountChangeable"]) {
            dst.timeSlotCountChangeable = src["timeSlotCountChangeable"].as<decltype(dst.timeSlotCountChangeable)::value_type>();
        } else {
            //dst.timeSlotCountChangeable = std::nullopt;
        }
        if (src["timeSlotTimesChangeable"]) {
            dst.timeSlotTimesChangeable = src["timeSlotTimesChangeable"].as<decltype(dst.timeSlotTimesChangeable)::value_type>();
        } else {
            //dst.timeSlotTimesChangeable = std::nullopt;
        }
        if (src["timeSlotTimeMode"]) {
            dst.timeSlotTimeMode = src["timeSlotTimeMode"].as<decltype(dst.timeSlotTimeMode)::value_type>();
        } else {
            //dst.timeSlotTimeMode = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.timeTableDescriptionData) {
        dst["timeTableDescriptionData"] = *src.timeTableDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableDescriptionData"]) {
                dst.timeTableDescriptionData = item["timeTableDescriptionData"].as<decltype(dst.timeTableDescriptionData)::value_type>();
            } else {
                //dst.timeTableDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["timeTableDescriptionData"]) {
            dst.timeTableDescriptionData = src["timeTableDescriptionData"].as<decltype(dst.timeTableDescriptionData)::value_type>();
        } else {
            //dst.timeTableDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TimeTableDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeTableDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
        }
    } else {
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDataType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.activeTierId) {
        dst["activeTierId"] = *src.activeTierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["activeTierId"]) {
                dst.activeTierId = item["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
            } else {
                //dst.activeTierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["activeTierId"]) {
            dst.activeTierId = src["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
        } else {
            //dst.activeTierId = std::nullopt;
        }
    }
}
bool convertToJson(const TierDataType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.activeIncentiveId) {
        dst["activeIncentiveId"] = *src.activeIncentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["activeIncentiveId"]) {
                dst.activeIncentiveId = item["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
            } else {
                //dst.activeIncentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["activeIncentiveId"]) {
            dst.activeIncentiveId = src["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
        } else {
            //dst.activeIncentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDataType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.lowerBoundaryValue) {
        dst["lowerBoundaryValue"] = *src.lowerBoundaryValue;
    }
    if (src.upperBoundaryValue) {
        dst["upperBoundaryValue"] = *src.upperBoundaryValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["lowerBoundaryValue"]) {
                dst.lowerBoundaryValue = item["lowerBoundaryValue"].as<decltype(dst.lowerBoundaryValue)::value_type>();
            } else {
                //dst.lowerBoundaryValue = std::nullopt;
            }
            if (item["upperBoundaryValue"]) {
                dst.upperBoundaryValue = item["upperBoundaryValue"].as<decltype(dst.upperBoundaryValue)::value_type>();
            } else {
                //dst.upperBoundaryValue = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["lowerBoundaryValue"]) {
            dst.lowerBoundaryValue = src["lowerBoundaryValue"].as<decltype(dst.lowerBoundaryValue)::value_type>();
        } else {
            //dst.lowerBoundaryValue = std::nullopt;
        }
        if (src["upperBoundaryValue"]) {
            dst.upperBoundaryValue = src["upperBoundaryValue"].as<decltype(dst.upperBoundaryValue)::value_type>();
        } else {
            //dst.upperBoundaryValue = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDataType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableTierType &src, JsonVariant &dst)
{
    if (src.tier) {
        dst["tier"] = *src.tier;
    }
    if (src.boundary) {
        dst["boundary"] = *src.boundary;
    }
    if (src.incentive) {
        dst["incentive"] = *src.incentive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableTierType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
            if (item["boundary"]) {
                dst.boundary = item["boundary"].as<decltype(dst.boundary)::value_type>();
            } else {
                //dst.boundary = std::nullopt;
            }
            if (item["incentive"]) {
                dst.incentive = item["incentive"].as<decltype(dst.incentive)::value_type>();
            } else {
                //dst.incentive = std::nullopt;
            }
        }
    } else {
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
        if (src["boundary"]) {
            dst.boundary = src["boundary"].as<decltype(dst.boundary)::value_type>();
        } else {
            //dst.boundary = std::nullopt;
        }
        if (src["incentive"]) {
            dst.incentive = src["incentive"].as<decltype(dst.incentive)::value_type>();
        } else {
            //dst.incentive = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableIncentiveSlotType &src, JsonVariant &dst)
{
    if (src.timeInterval) {
        dst["timeInterval"] = *src.timeInterval;
    }
    if (src.tier) {
        dst["tier"] = *src.tier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableIncentiveSlotType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeInterval"]) {
                dst.timeInterval = item["timeInterval"].as<decltype(dst.timeInterval)::value_type>();
            } else {
                //dst.timeInterval = std::nullopt;
            }
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
        }
    } else {
        if (src["timeInterval"]) {
            dst.timeInterval = src["timeInterval"].as<decltype(dst.timeInterval)::value_type>();
        } else {
            //dst.timeInterval = std::nullopt;
        }
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }
    if (src.incentiveSlot) {
        dst["incentiveSlot"] = *src.incentiveSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
            if (item["incentiveSlot"]) {
                dst.incentiveSlot = item["incentiveSlot"].as<decltype(dst.incentiveSlot)::value_type>();
            } else {
                //dst.incentiveSlot = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
        if (src["incentiveSlot"]) {
            dst.incentiveSlot = src["incentiveSlot"].as<decltype(dst.incentiveSlot)::value_type>();
        } else {
            //dst.incentiveSlot = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDataType &src, JsonVariant &dst)
{
    if (src.incentiveTable) {
        dst["incentiveTable"] = *src.incentiveTable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTable"]) {
                dst.incentiveTable = item["incentiveTable"].as<decltype(dst.incentiveTable)::value_type>();
            } else {
                //dst.incentiveTable = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTable"]) {
            dst.incentiveTable = src["incentiveTable"].as<decltype(dst.incentiveTable)::value_type>();
        } else {
            //dst.incentiveTable = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDataElementsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.activeTierId) {
        dst["activeTierId"] = *src.activeTierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["activeTierId"]) {
                dst.activeTierId = item["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
            } else {
                //dst.activeTierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["activeTierId"]) {
            dst.activeTierId = src["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
        } else {
            //dst.activeTierId = std::nullopt;
        }
    }
}
bool convertToJson(const TierDataElementsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.activeIncentiveId) {
        dst["activeIncentiveId"] = *src.activeIncentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["activeIncentiveId"]) {
                dst.activeIncentiveId = item["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
            } else {
                //dst.activeIncentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["activeIncentiveId"]) {
            dst.activeIncentiveId = src["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
        } else {
            //dst.activeIncentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDataElementsType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.lowerBoundaryValue) {
        dst["lowerBoundaryValue"] = *src.lowerBoundaryValue;
    }
    if (src.upperBoundaryValue) {
        dst["upperBoundaryValue"] = *src.upperBoundaryValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["lowerBoundaryValue"]) {
                dst.lowerBoundaryValue = item["lowerBoundaryValue"].as<decltype(dst.lowerBoundaryValue)::value_type>();
            } else {
                //dst.lowerBoundaryValue = std::nullopt;
            }
            if (item["upperBoundaryValue"]) {
                dst.upperBoundaryValue = item["upperBoundaryValue"].as<decltype(dst.upperBoundaryValue)::value_type>();
            } else {
                //dst.upperBoundaryValue = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["lowerBoundaryValue"]) {
            dst.lowerBoundaryValue = src["lowerBoundaryValue"].as<decltype(dst.lowerBoundaryValue)::value_type>();
        } else {
            //dst.lowerBoundaryValue = std::nullopt;
        }
        if (src["upperBoundaryValue"]) {
            dst.upperBoundaryValue = src["upperBoundaryValue"].as<decltype(dst.upperBoundaryValue)::value_type>();
        } else {
            //dst.upperBoundaryValue = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDataElementsType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.timeTableId) {
        dst["timeTableId"] = *src.timeTableId;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["timeTableId"]) {
                dst.timeTableId = item["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
            } else {
                //dst.timeTableId = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["timeTableId"]) {
            dst.timeTableId = src["timeTableId"].as<decltype(dst.timeTableId)::value_type>();
        } else {
            //dst.timeTableId = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableTierElementsType &src, JsonVariant &dst)
{
    if (src.tier) {
        dst["tier"] = *src.tier;
    }
    if (src.boundary) {
        dst["boundary"] = *src.boundary;
    }
    if (src.incentive) {
        dst["incentive"] = *src.incentive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableTierElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
            if (item["boundary"]) {
                dst.boundary = item["boundary"].as<decltype(dst.boundary)::value_type>();
            } else {
                //dst.boundary = std::nullopt;
            }
            if (item["incentive"]) {
                dst.incentive = item["incentive"].as<decltype(dst.incentive)::value_type>();
            } else {
                //dst.incentive = std::nullopt;
            }
        }
    } else {
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
        if (src["boundary"]) {
            dst.boundary = src["boundary"].as<decltype(dst.boundary)::value_type>();
        } else {
            //dst.boundary = std::nullopt;
        }
        if (src["incentive"]) {
            dst.incentive = src["incentive"].as<decltype(dst.incentive)::value_type>();
        } else {
            //dst.incentive = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableIncentiveSlotElementsType &src, JsonVariant &dst)
{
    if (src.timeInterval) {
        dst["timeInterval"] = *src.timeInterval;
    }
    if (src.tier) {
        dst["tier"] = *src.tier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableIncentiveSlotElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timeInterval"]) {
                dst.timeInterval = item["timeInterval"].as<decltype(dst.timeInterval)::value_type>();
            } else {
                //dst.timeInterval = std::nullopt;
            }
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
        }
    } else {
        if (src["timeInterval"]) {
            dst.timeInterval = src["timeInterval"].as<decltype(dst.timeInterval)::value_type>();
        } else {
            //dst.timeInterval = std::nullopt;
        }
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableElementsType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }
    if (src.incentiveSlot) {
        dst["incentiveSlot"] = *src.incentiveSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
            if (item["incentiveSlot"]) {
                dst.incentiveSlot = item["incentiveSlot"].as<decltype(dst.incentiveSlot)::value_type>();
            } else {
                //dst.incentiveSlot = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
        if (src["incentiveSlot"]) {
            dst.incentiveSlot = src["incentiveSlot"].as<decltype(dst.incentiveSlot)::value_type>();
        } else {
            //dst.incentiveSlot = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDataElementsType &src, JsonVariant &dst)
{
    if (src.incentiveTable) {
        dst["incentiveTable"] = *src.incentiveTable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTable"]) {
                dst.incentiveTable = item["incentiveTable"].as<decltype(dst.incentiveTable)::value_type>();
            } else {
                //dst.incentiveTable = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTable"]) {
            dst.incentiveTable = src["incentiveTable"].as<decltype(dst.incentiveTable)::value_type>();
        } else {
            //dst.incentiveTable = std::nullopt;
        }
    }
}
bool convertToJson(const TariffListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.activeTierId) {
        dst["activeTierId"] = *src.activeTierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["activeTierId"]) {
                dst.activeTierId = item["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
            } else {
                //dst.activeTierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["activeTierId"]) {
            dst.activeTierId = src["activeTierId"].as<decltype(dst.activeTierId)::value_type>();
        } else {
            //dst.activeTierId = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDescriptionDataType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.tariffWriteable) {
        dst["tariffWriteable"] = *src.tariffWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.slotIdSupport) {
        dst["slotIdSupport"] = *src.slotIdSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["tariffWriteable"]) {
                dst.tariffWriteable = item["tariffWriteable"].as<decltype(dst.tariffWriteable)::value_type>();
            } else {
                //dst.tariffWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["slotIdSupport"]) {
                dst.slotIdSupport = item["slotIdSupport"].as<decltype(dst.slotIdSupport)::value_type>();
            } else {
                //dst.slotIdSupport = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["tariffWriteable"]) {
            dst.tariffWriteable = src["tariffWriteable"].as<decltype(dst.tariffWriteable)::value_type>();
        } else {
            //dst.tariffWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["slotIdSupport"]) {
            dst.slotIdSupport = src["slotIdSupport"].as<decltype(dst.slotIdSupport)::value_type>();
        } else {
            //dst.slotIdSupport = std::nullopt;
        }
    }
}
bool convertToJson(const TierDescriptionDataType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.tierType) {
        dst["tierType"] = *src.tierType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["tierType"]) {
                dst.tierType = item["tierType"].as<decltype(dst.tierType)::value_type>();
            } else {
                //dst.tierType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["tierType"]) {
            dst.tierType = src["tierType"].as<decltype(dst.tierType)::value_type>();
        } else {
            //dst.tierType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDescriptionDataType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }
    if (src.boundaryType) {
        dst["boundaryType"] = *src.boundaryType;
    }
    if (src.validForTierId) {
        dst["validForTierId"] = *src.validForTierId;
    }
    if (src.switchToTierIdWhenLower) {
        dst["switchToTierIdWhenLower"] = *src.switchToTierIdWhenLower;
    }
    if (src.switchToTierIdWhenHigher) {
        dst["switchToTierIdWhenHigher"] = *src.switchToTierIdWhenHigher;
    }
    if (src.boundaryUnit) {
        dst["boundaryUnit"] = *src.boundaryUnit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
            if (item["boundaryType"]) {
                dst.boundaryType = item["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
            } else {
                //dst.boundaryType = std::nullopt;
            }
            if (item["validForTierId"]) {
                dst.validForTierId = item["validForTierId"].as<decltype(dst.validForTierId)::value_type>();
            } else {
                //dst.validForTierId = std::nullopt;
            }
            if (item["switchToTierIdWhenLower"]) {
                dst.switchToTierIdWhenLower = item["switchToTierIdWhenLower"].as<decltype(dst.switchToTierIdWhenLower)::value_type>();
            } else {
                //dst.switchToTierIdWhenLower = std::nullopt;
            }
            if (item["switchToTierIdWhenHigher"]) {
                dst.switchToTierIdWhenHigher = item["switchToTierIdWhenHigher"].as<decltype(dst.switchToTierIdWhenHigher)::value_type>();
            } else {
                //dst.switchToTierIdWhenHigher = std::nullopt;
            }
            if (item["boundaryUnit"]) {
                dst.boundaryUnit = item["boundaryUnit"].as<decltype(dst.boundaryUnit)::value_type>();
            } else {
                //dst.boundaryUnit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
        if (src["boundaryType"]) {
            dst.boundaryType = src["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
        } else {
            //dst.boundaryType = std::nullopt;
        }
        if (src["validForTierId"]) {
            dst.validForTierId = src["validForTierId"].as<decltype(dst.validForTierId)::value_type>();
        } else {
            //dst.validForTierId = std::nullopt;
        }
        if (src["switchToTierIdWhenLower"]) {
            dst.switchToTierIdWhenLower = src["switchToTierIdWhenLower"].as<decltype(dst.switchToTierIdWhenLower)::value_type>();
        } else {
            //dst.switchToTierIdWhenLower = std::nullopt;
        }
        if (src["switchToTierIdWhenHigher"]) {
            dst.switchToTierIdWhenHigher = src["switchToTierIdWhenHigher"].as<decltype(dst.switchToTierIdWhenHigher)::value_type>();
        } else {
            //dst.switchToTierIdWhenHigher = std::nullopt;
        }
        if (src["boundaryUnit"]) {
            dst.boundaryUnit = src["boundaryUnit"].as<decltype(dst.boundaryUnit)::value_type>();
        } else {
            //dst.boundaryUnit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDescriptionDataType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.incentiveType) {
        dst["incentiveType"] = *src.incentiveType;
    }
    if (src.incentivePriority) {
        dst["incentivePriority"] = *src.incentivePriority;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["incentiveType"]) {
                dst.incentiveType = item["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
            } else {
                //dst.incentiveType = std::nullopt;
            }
            if (item["incentivePriority"]) {
                dst.incentivePriority = item["incentivePriority"].as<decltype(dst.incentivePriority)::value_type>();
            } else {
                //dst.incentivePriority = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["incentiveType"]) {
            dst.incentiveType = src["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
        } else {
            //dst.incentiveType = std::nullopt;
        }
        if (src["incentivePriority"]) {
            dst.incentivePriority = src["incentivePriority"].as<decltype(dst.incentivePriority)::value_type>();
        } else {
            //dst.incentivePriority = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionTierType &src, JsonVariant &dst)
{
    if (src.tierDescription) {
        dst["tierDescription"] = *src.tierDescription;
    }
    if (src.boundaryDescription) {
        dst["boundaryDescription"] = *src.boundaryDescription;
    }
    if (src.incentiveDescription) {
        dst["incentiveDescription"] = *src.incentiveDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionTierType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierDescription"]) {
                dst.tierDescription = item["tierDescription"].as<decltype(dst.tierDescription)::value_type>();
            } else {
                //dst.tierDescription = std::nullopt;
            }
            if (item["boundaryDescription"]) {
                dst.boundaryDescription = item["boundaryDescription"].as<decltype(dst.boundaryDescription)::value_type>();
            } else {
                //dst.boundaryDescription = std::nullopt;
            }
            if (item["incentiveDescription"]) {
                dst.incentiveDescription = item["incentiveDescription"].as<decltype(dst.incentiveDescription)::value_type>();
            } else {
                //dst.incentiveDescription = std::nullopt;
            }
        }
    } else {
        if (src["tierDescription"]) {
            dst.tierDescription = src["tierDescription"].as<decltype(dst.tierDescription)::value_type>();
        } else {
            //dst.tierDescription = std::nullopt;
        }
        if (src["boundaryDescription"]) {
            dst.boundaryDescription = src["boundaryDescription"].as<decltype(dst.boundaryDescription)::value_type>();
        } else {
            //dst.boundaryDescription = std::nullopt;
        }
        if (src["incentiveDescription"]) {
            dst.incentiveDescription = src["incentiveDescription"].as<decltype(dst.incentiveDescription)::value_type>();
        } else {
            //dst.incentiveDescription = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionType &src, JsonVariant &dst)
{
    if (src.tariffDescription) {
        dst["tariffDescription"] = *src.tariffDescription;
    }
    if (src.tier) {
        dst["tier"] = *src.tier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffDescription"]) {
                dst.tariffDescription = item["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
            } else {
                //dst.tariffDescription = std::nullopt;
            }
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
        }
    } else {
        if (src["tariffDescription"]) {
            dst.tariffDescription = src["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
        } else {
            //dst.tariffDescription = std::nullopt;
        }
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionDataType &src, JsonVariant &dst)
{
    if (src.incentiveTableDescription) {
        dst["incentiveTableDescription"] = *src.incentiveTableDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTableDescription"]) {
                dst.incentiveTableDescription = item["incentiveTableDescription"].as<decltype(dst.incentiveTableDescription)::value_type>();
            } else {
                //dst.incentiveTableDescription = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTableDescription"]) {
            dst.incentiveTableDescription = src["incentiveTableDescription"].as<decltype(dst.incentiveTableDescription)::value_type>();
        } else {
            //dst.incentiveTableDescription = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.tariffWriteable) {
        dst["tariffWriteable"] = *src.tariffWriteable;
    }
    if (src.updateRequired) {
        dst["updateRequired"] = *src.updateRequired;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.slotIdSupport) {
        dst["slotIdSupport"] = *src.slotIdSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["tariffWriteable"]) {
                dst.tariffWriteable = item["tariffWriteable"].as<decltype(dst.tariffWriteable)::value_type>();
            } else {
                //dst.tariffWriteable = std::nullopt;
            }
            if (item["updateRequired"]) {
                dst.updateRequired = item["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
            } else {
                //dst.updateRequired = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["slotIdSupport"]) {
                dst.slotIdSupport = item["slotIdSupport"].as<decltype(dst.slotIdSupport)::value_type>();
            } else {
                //dst.slotIdSupport = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["tariffWriteable"]) {
            dst.tariffWriteable = src["tariffWriteable"].as<decltype(dst.tariffWriteable)::value_type>();
        } else {
            //dst.tariffWriteable = std::nullopt;
        }
        if (src["updateRequired"]) {
            dst.updateRequired = src["updateRequired"].as<decltype(dst.updateRequired)::value_type>();
        } else {
            //dst.updateRequired = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["slotIdSupport"]) {
            dst.slotIdSupport = src["slotIdSupport"].as<decltype(dst.slotIdSupport)::value_type>();
        } else {
            //dst.slotIdSupport = std::nullopt;
        }
    }
}
bool convertToJson(const TierDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.tierType) {
        dst["tierType"] = *src.tierType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["tierType"]) {
                dst.tierType = item["tierType"].as<decltype(dst.tierType)::value_type>();
            } else {
                //dst.tierType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["tierType"]) {
            dst.tierType = src["tierType"].as<decltype(dst.tierType)::value_type>();
        } else {
            //dst.tierType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }
    if (src.boundaryType) {
        dst["boundaryType"] = *src.boundaryType;
    }
    if (src.validForTierId) {
        dst["validForTierId"] = *src.validForTierId;
    }
    if (src.switchToTierIdWhenLower) {
        dst["switchToTierIdWhenLower"] = *src.switchToTierIdWhenLower;
    }
    if (src.switchToTierIdWhenHigher) {
        dst["switchToTierIdWhenHigher"] = *src.switchToTierIdWhenHigher;
    }
    if (src.boundaryUnit) {
        dst["boundaryUnit"] = *src.boundaryUnit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
            if (item["boundaryType"]) {
                dst.boundaryType = item["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
            } else {
                //dst.boundaryType = std::nullopt;
            }
            if (item["validForTierId"]) {
                dst.validForTierId = item["validForTierId"].as<decltype(dst.validForTierId)::value_type>();
            } else {
                //dst.validForTierId = std::nullopt;
            }
            if (item["switchToTierIdWhenLower"]) {
                dst.switchToTierIdWhenLower = item["switchToTierIdWhenLower"].as<decltype(dst.switchToTierIdWhenLower)::value_type>();
            } else {
                //dst.switchToTierIdWhenLower = std::nullopt;
            }
            if (item["switchToTierIdWhenHigher"]) {
                dst.switchToTierIdWhenHigher = item["switchToTierIdWhenHigher"].as<decltype(dst.switchToTierIdWhenHigher)::value_type>();
            } else {
                //dst.switchToTierIdWhenHigher = std::nullopt;
            }
            if (item["boundaryUnit"]) {
                dst.boundaryUnit = item["boundaryUnit"].as<decltype(dst.boundaryUnit)::value_type>();
            } else {
                //dst.boundaryUnit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
        if (src["boundaryType"]) {
            dst.boundaryType = src["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
        } else {
            //dst.boundaryType = std::nullopt;
        }
        if (src["validForTierId"]) {
            dst.validForTierId = src["validForTierId"].as<decltype(dst.validForTierId)::value_type>();
        } else {
            //dst.validForTierId = std::nullopt;
        }
        if (src["switchToTierIdWhenLower"]) {
            dst.switchToTierIdWhenLower = src["switchToTierIdWhenLower"].as<decltype(dst.switchToTierIdWhenLower)::value_type>();
        } else {
            //dst.switchToTierIdWhenLower = std::nullopt;
        }
        if (src["switchToTierIdWhenHigher"]) {
            dst.switchToTierIdWhenHigher = src["switchToTierIdWhenHigher"].as<decltype(dst.switchToTierIdWhenHigher)::value_type>();
        } else {
            //dst.switchToTierIdWhenHigher = std::nullopt;
        }
        if (src["boundaryUnit"]) {
            dst.boundaryUnit = src["boundaryUnit"].as<decltype(dst.boundaryUnit)::value_type>();
        } else {
            //dst.boundaryUnit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.incentiveType) {
        dst["incentiveType"] = *src.incentiveType;
    }
    if (src.incentivePriority) {
        dst["incentivePriority"] = *src.incentivePriority;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["incentiveType"]) {
                dst.incentiveType = item["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
            } else {
                //dst.incentiveType = std::nullopt;
            }
            if (item["incentivePriority"]) {
                dst.incentivePriority = item["incentivePriority"].as<decltype(dst.incentivePriority)::value_type>();
            } else {
                //dst.incentivePriority = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["incentiveType"]) {
            dst.incentiveType = src["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
        } else {
            //dst.incentiveType = std::nullopt;
        }
        if (src["incentivePriority"]) {
            dst.incentivePriority = src["incentivePriority"].as<decltype(dst.incentivePriority)::value_type>();
        } else {
            //dst.incentivePriority = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionTierElementsType &src, JsonVariant &dst)
{
    if (src.tierDescription) {
        dst["tierDescription"] = *src.tierDescription;
    }
    if (src.boundaryDescription) {
        dst["boundaryDescription"] = *src.boundaryDescription;
    }
    if (src.incentiveDescription) {
        dst["incentiveDescription"] = *src.incentiveDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionTierElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierDescription"]) {
                dst.tierDescription = item["tierDescription"].as<decltype(dst.tierDescription)::value_type>();
            } else {
                //dst.tierDescription = std::nullopt;
            }
            if (item["boundaryDescription"]) {
                dst.boundaryDescription = item["boundaryDescription"].as<decltype(dst.boundaryDescription)::value_type>();
            } else {
                //dst.boundaryDescription = std::nullopt;
            }
            if (item["incentiveDescription"]) {
                dst.incentiveDescription = item["incentiveDescription"].as<decltype(dst.incentiveDescription)::value_type>();
            } else {
                //dst.incentiveDescription = std::nullopt;
            }
        }
    } else {
        if (src["tierDescription"]) {
            dst.tierDescription = src["tierDescription"].as<decltype(dst.tierDescription)::value_type>();
        } else {
            //dst.tierDescription = std::nullopt;
        }
        if (src["boundaryDescription"]) {
            dst.boundaryDescription = src["boundaryDescription"].as<decltype(dst.boundaryDescription)::value_type>();
        } else {
            //dst.boundaryDescription = std::nullopt;
        }
        if (src["incentiveDescription"]) {
            dst.incentiveDescription = src["incentiveDescription"].as<decltype(dst.incentiveDescription)::value_type>();
        } else {
            //dst.incentiveDescription = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionElementsType &src, JsonVariant &dst)
{
    if (src.tariffDescription) {
        dst["tariffDescription"] = *src.tariffDescription;
    }
    if (src.tier) {
        dst["tier"] = *src.tier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffDescription"]) {
                dst.tariffDescription = item["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
            } else {
                //dst.tariffDescription = std::nullopt;
            }
            if (item["tier"]) {
                dst.tier = item["tier"].as<decltype(dst.tier)::value_type>();
            } else {
                //dst.tier = std::nullopt;
            }
        }
    } else {
        if (src["tariffDescription"]) {
            dst.tariffDescription = src["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
        } else {
            //dst.tariffDescription = std::nullopt;
        }
        if (src["tier"]) {
            dst.tier = src["tier"].as<decltype(dst.tier)::value_type>();
        } else {
            //dst.tier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.incentiveTableDescription) {
        dst["incentiveTableDescription"] = *src.incentiveTableDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTableDescription"]) {
                dst.incentiveTableDescription = item["incentiveTableDescription"].as<decltype(dst.incentiveTableDescription)::value_type>();
            } else {
                //dst.incentiveTableDescription = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTableDescription"]) {
            dst.incentiveTableDescription = src["incentiveTableDescription"].as<decltype(dst.incentiveTableDescription)::value_type>();
        } else {
            //dst.incentiveTableDescription = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableDescriptionDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariffDescription) {
        dst["tariffDescription"] = *src.tariffDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableDescriptionDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffDescription"]) {
                dst.tariffDescription = item["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
            } else {
                //dst.tariffDescription = std::nullopt;
            }
        }
    } else {
        if (src["tariffDescription"]) {
            dst.tariffDescription = src["tariffDescription"].as<decltype(dst.tariffDescription)::value_type>();
        } else {
            //dst.tariffDescription = std::nullopt;
        }
    }
}
bool convertToJson(const TariffOverallConstraintsDataType &src, JsonVariant &dst)
{
    if (src.maxTariffCount) {
        dst["maxTariffCount"] = *src.maxTariffCount;
    }
    if (src.maxBoundaryCount) {
        dst["maxBoundaryCount"] = *src.maxBoundaryCount;
    }
    if (src.maxTierCount) {
        dst["maxTierCount"] = *src.maxTierCount;
    }
    if (src.maxIncentiveCount) {
        dst["maxIncentiveCount"] = *src.maxIncentiveCount;
    }
    if (src.maxBoundariesPerTariff) {
        dst["maxBoundariesPerTariff"] = *src.maxBoundariesPerTariff;
    }
    if (src.maxTiersPerTariff) {
        dst["maxTiersPerTariff"] = *src.maxTiersPerTariff;
    }
    if (src.maxBoundariesPerTier) {
        dst["maxBoundariesPerTier"] = *src.maxBoundariesPerTier;
    }
    if (src.maxIncentivesPerTier) {
        dst["maxIncentivesPerTier"] = *src.maxIncentivesPerTier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffOverallConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["maxTariffCount"]) {
                dst.maxTariffCount = item["maxTariffCount"].as<decltype(dst.maxTariffCount)::value_type>();
            } else {
                //dst.maxTariffCount = std::nullopt;
            }
            if (item["maxBoundaryCount"]) {
                dst.maxBoundaryCount = item["maxBoundaryCount"].as<decltype(dst.maxBoundaryCount)::value_type>();
            } else {
                //dst.maxBoundaryCount = std::nullopt;
            }
            if (item["maxTierCount"]) {
                dst.maxTierCount = item["maxTierCount"].as<decltype(dst.maxTierCount)::value_type>();
            } else {
                //dst.maxTierCount = std::nullopt;
            }
            if (item["maxIncentiveCount"]) {
                dst.maxIncentiveCount = item["maxIncentiveCount"].as<decltype(dst.maxIncentiveCount)::value_type>();
            } else {
                //dst.maxIncentiveCount = std::nullopt;
            }
            if (item["maxBoundariesPerTariff"]) {
                dst.maxBoundariesPerTariff = item["maxBoundariesPerTariff"].as<decltype(dst.maxBoundariesPerTariff)::value_type>();
            } else {
                //dst.maxBoundariesPerTariff = std::nullopt;
            }
            if (item["maxTiersPerTariff"]) {
                dst.maxTiersPerTariff = item["maxTiersPerTariff"].as<decltype(dst.maxTiersPerTariff)::value_type>();
            } else {
                //dst.maxTiersPerTariff = std::nullopt;
            }
            if (item["maxBoundariesPerTier"]) {
                dst.maxBoundariesPerTier = item["maxBoundariesPerTier"].as<decltype(dst.maxBoundariesPerTier)::value_type>();
            } else {
                //dst.maxBoundariesPerTier = std::nullopt;
            }
            if (item["maxIncentivesPerTier"]) {
                dst.maxIncentivesPerTier = item["maxIncentivesPerTier"].as<decltype(dst.maxIncentivesPerTier)::value_type>();
            } else {
                //dst.maxIncentivesPerTier = std::nullopt;
            }
        }
    } else {
        if (src["maxTariffCount"]) {
            dst.maxTariffCount = src["maxTariffCount"].as<decltype(dst.maxTariffCount)::value_type>();
        } else {
            //dst.maxTariffCount = std::nullopt;
        }
        if (src["maxBoundaryCount"]) {
            dst.maxBoundaryCount = src["maxBoundaryCount"].as<decltype(dst.maxBoundaryCount)::value_type>();
        } else {
            //dst.maxBoundaryCount = std::nullopt;
        }
        if (src["maxTierCount"]) {
            dst.maxTierCount = src["maxTierCount"].as<decltype(dst.maxTierCount)::value_type>();
        } else {
            //dst.maxTierCount = std::nullopt;
        }
        if (src["maxIncentiveCount"]) {
            dst.maxIncentiveCount = src["maxIncentiveCount"].as<decltype(dst.maxIncentiveCount)::value_type>();
        } else {
            //dst.maxIncentiveCount = std::nullopt;
        }
        if (src["maxBoundariesPerTariff"]) {
            dst.maxBoundariesPerTariff = src["maxBoundariesPerTariff"].as<decltype(dst.maxBoundariesPerTariff)::value_type>();
        } else {
            //dst.maxBoundariesPerTariff = std::nullopt;
        }
        if (src["maxTiersPerTariff"]) {
            dst.maxTiersPerTariff = src["maxTiersPerTariff"].as<decltype(dst.maxTiersPerTariff)::value_type>();
        } else {
            //dst.maxTiersPerTariff = std::nullopt;
        }
        if (src["maxBoundariesPerTier"]) {
            dst.maxBoundariesPerTier = src["maxBoundariesPerTier"].as<decltype(dst.maxBoundariesPerTier)::value_type>();
        } else {
            //dst.maxBoundariesPerTier = std::nullopt;
        }
        if (src["maxIncentivesPerTier"]) {
            dst.maxIncentivesPerTier = src["maxIncentivesPerTier"].as<decltype(dst.maxIncentivesPerTier)::value_type>();
        } else {
            //dst.maxIncentivesPerTier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableConstraintsType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }
    if (src.tariffConstraints) {
        dst["tariffConstraints"] = *src.tariffConstraints;
    }
    if (src.incentiveSlotConstraints) {
        dst["incentiveSlotConstraints"] = *src.incentiveSlotConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
            if (item["tariffConstraints"]) {
                dst.tariffConstraints = item["tariffConstraints"].as<decltype(dst.tariffConstraints)::value_type>();
            } else {
                //dst.tariffConstraints = std::nullopt;
            }
            if (item["incentiveSlotConstraints"]) {
                dst.incentiveSlotConstraints = item["incentiveSlotConstraints"].as<decltype(dst.incentiveSlotConstraints)::value_type>();
            } else {
                //dst.incentiveSlotConstraints = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
        if (src["tariffConstraints"]) {
            dst.tariffConstraints = src["tariffConstraints"].as<decltype(dst.tariffConstraints)::value_type>();
        } else {
            //dst.tariffConstraints = std::nullopt;
        }
        if (src["incentiveSlotConstraints"]) {
            dst.incentiveSlotConstraints = src["incentiveSlotConstraints"].as<decltype(dst.incentiveSlotConstraints)::value_type>();
        } else {
            //dst.incentiveSlotConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableConstraintsDataType &src, JsonVariant &dst)
{
    if (src.incentiveTableConstraints) {
        dst["incentiveTableConstraints"] = *src.incentiveTableConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTableConstraints"]) {
                dst.incentiveTableConstraints = item["incentiveTableConstraints"].as<decltype(dst.incentiveTableConstraints)::value_type>();
            } else {
                //dst.incentiveTableConstraints = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTableConstraints"]) {
            dst.incentiveTableConstraints = src["incentiveTableConstraints"].as<decltype(dst.incentiveTableConstraints)::value_type>();
        } else {
            //dst.incentiveTableConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const TariffOverallConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.maxTariffCount) {
        dst["maxTariffCount"] = *src.maxTariffCount;
    }
    if (src.maxBoundaryCount) {
        dst["maxBoundaryCount"] = *src.maxBoundaryCount;
    }
    if (src.maxTierCount) {
        dst["maxTierCount"] = *src.maxTierCount;
    }
    if (src.maxIncentiveCount) {
        dst["maxIncentiveCount"] = *src.maxIncentiveCount;
    }
    if (src.maxBoundariesPerTariff) {
        dst["maxBoundariesPerTariff"] = *src.maxBoundariesPerTariff;
    }
    if (src.maxTiersPerTariff) {
        dst["maxTiersPerTariff"] = *src.maxTiersPerTariff;
    }
    if (src.maxBoundariesPerTier) {
        dst["maxBoundariesPerTier"] = *src.maxBoundariesPerTier;
    }
    if (src.maxIncentivesPerTier) {
        dst["maxIncentivesPerTier"] = *src.maxIncentivesPerTier;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffOverallConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["maxTariffCount"]) {
                dst.maxTariffCount = item["maxTariffCount"].as<decltype(dst.maxTariffCount)::value_type>();
            } else {
                //dst.maxTariffCount = std::nullopt;
            }
            if (item["maxBoundaryCount"]) {
                dst.maxBoundaryCount = item["maxBoundaryCount"].as<decltype(dst.maxBoundaryCount)::value_type>();
            } else {
                //dst.maxBoundaryCount = std::nullopt;
            }
            if (item["maxTierCount"]) {
                dst.maxTierCount = item["maxTierCount"].as<decltype(dst.maxTierCount)::value_type>();
            } else {
                //dst.maxTierCount = std::nullopt;
            }
            if (item["maxIncentiveCount"]) {
                dst.maxIncentiveCount = item["maxIncentiveCount"].as<decltype(dst.maxIncentiveCount)::value_type>();
            } else {
                //dst.maxIncentiveCount = std::nullopt;
            }
            if (item["maxBoundariesPerTariff"]) {
                dst.maxBoundariesPerTariff = item["maxBoundariesPerTariff"].as<decltype(dst.maxBoundariesPerTariff)::value_type>();
            } else {
                //dst.maxBoundariesPerTariff = std::nullopt;
            }
            if (item["maxTiersPerTariff"]) {
                dst.maxTiersPerTariff = item["maxTiersPerTariff"].as<decltype(dst.maxTiersPerTariff)::value_type>();
            } else {
                //dst.maxTiersPerTariff = std::nullopt;
            }
            if (item["maxBoundariesPerTier"]) {
                dst.maxBoundariesPerTier = item["maxBoundariesPerTier"].as<decltype(dst.maxBoundariesPerTier)::value_type>();
            } else {
                //dst.maxBoundariesPerTier = std::nullopt;
            }
            if (item["maxIncentivesPerTier"]) {
                dst.maxIncentivesPerTier = item["maxIncentivesPerTier"].as<decltype(dst.maxIncentivesPerTier)::value_type>();
            } else {
                //dst.maxIncentivesPerTier = std::nullopt;
            }
        }
    } else {
        if (src["maxTariffCount"]) {
            dst.maxTariffCount = src["maxTariffCount"].as<decltype(dst.maxTariffCount)::value_type>();
        } else {
            //dst.maxTariffCount = std::nullopt;
        }
        if (src["maxBoundaryCount"]) {
            dst.maxBoundaryCount = src["maxBoundaryCount"].as<decltype(dst.maxBoundaryCount)::value_type>();
        } else {
            //dst.maxBoundaryCount = std::nullopt;
        }
        if (src["maxTierCount"]) {
            dst.maxTierCount = src["maxTierCount"].as<decltype(dst.maxTierCount)::value_type>();
        } else {
            //dst.maxTierCount = std::nullopt;
        }
        if (src["maxIncentiveCount"]) {
            dst.maxIncentiveCount = src["maxIncentiveCount"].as<decltype(dst.maxIncentiveCount)::value_type>();
        } else {
            //dst.maxIncentiveCount = std::nullopt;
        }
        if (src["maxBoundariesPerTariff"]) {
            dst.maxBoundariesPerTariff = src["maxBoundariesPerTariff"].as<decltype(dst.maxBoundariesPerTariff)::value_type>();
        } else {
            //dst.maxBoundariesPerTariff = std::nullopt;
        }
        if (src["maxTiersPerTariff"]) {
            dst.maxTiersPerTariff = src["maxTiersPerTariff"].as<decltype(dst.maxTiersPerTariff)::value_type>();
        } else {
            //dst.maxTiersPerTariff = std::nullopt;
        }
        if (src["maxBoundariesPerTier"]) {
            dst.maxBoundariesPerTier = src["maxBoundariesPerTier"].as<decltype(dst.maxBoundariesPerTier)::value_type>();
        } else {
            //dst.maxBoundariesPerTier = std::nullopt;
        }
        if (src["maxIncentivesPerTier"]) {
            dst.maxIncentivesPerTier = src["maxIncentivesPerTier"].as<decltype(dst.maxIncentivesPerTier)::value_type>();
        } else {
            //dst.maxIncentivesPerTier = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableConstraintsElementsType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }
    if (src.tariffConstraints) {
        dst["tariffConstraints"] = *src.tariffConstraints;
    }
    if (src.incentiveSlotConstraints) {
        dst["incentiveSlotConstraints"] = *src.incentiveSlotConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
            if (item["tariffConstraints"]) {
                dst.tariffConstraints = item["tariffConstraints"].as<decltype(dst.tariffConstraints)::value_type>();
            } else {
                //dst.tariffConstraints = std::nullopt;
            }
            if (item["incentiveSlotConstraints"]) {
                dst.incentiveSlotConstraints = item["incentiveSlotConstraints"].as<decltype(dst.incentiveSlotConstraints)::value_type>();
            } else {
                //dst.incentiveSlotConstraints = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
        if (src["tariffConstraints"]) {
            dst.tariffConstraints = src["tariffConstraints"].as<decltype(dst.tariffConstraints)::value_type>();
        } else {
            //dst.tariffConstraints = std::nullopt;
        }
        if (src["incentiveSlotConstraints"]) {
            dst.incentiveSlotConstraints = src["incentiveSlotConstraints"].as<decltype(dst.incentiveSlotConstraints)::value_type>();
        } else {
            //dst.incentiveSlotConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.incentiveTableConstraints) {
        dst["incentiveTableConstraints"] = *src.incentiveTableConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveTableConstraints"]) {
                dst.incentiveTableConstraints = item["incentiveTableConstraints"].as<decltype(dst.incentiveTableConstraints)::value_type>();
            } else {
                //dst.incentiveTableConstraints = std::nullopt;
            }
        }
    } else {
        if (src["incentiveTableConstraints"]) {
            dst.incentiveTableConstraints = src["incentiveTableConstraints"].as<decltype(dst.incentiveTableConstraints)::value_type>();
        } else {
            //dst.incentiveTableConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveTableConstraintsDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariff) {
        dst["tariff"] = *src.tariff;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveTableConstraintsDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariff"]) {
                dst.tariff = item["tariff"].as<decltype(dst.tariff)::value_type>();
            } else {
                //dst.tariff = std::nullopt;
            }
        }
    } else {
        if (src["tariff"]) {
            dst.tariff = src["tariff"].as<decltype(dst.tariff)::value_type>();
        } else {
            //dst.tariff = std::nullopt;
        }
    }
}
bool convertToJson(const TariffListDataType &src, JsonVariant &dst)
{
    if (src.tariffData) {
        dst["tariffData"] = *src.tariffData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffData"]) {
                dst.tariffData = item["tariffData"].as<decltype(dst.tariffData)::value_type>();
            } else {
                //dst.tariffData = std::nullopt;
            }
        }
    } else {
        if (src["tariffData"]) {
            dst.tariffData = src["tariffData"].as<decltype(dst.tariffData)::value_type>();
        } else {
            //dst.tariffData = std::nullopt;
        }
    }
}
bool convertToJson(const TariffTierRelationDataType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffTierRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffTierRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffTierRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffTierRelationListDataType &src, JsonVariant &dst)
{
    if (src.tariffTierRelationData) {
        dst["tariffTierRelationData"] = *src.tariffTierRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffTierRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffTierRelationData"]) {
                dst.tariffTierRelationData = item["tariffTierRelationData"].as<decltype(dst.tariffTierRelationData)::value_type>();
            } else {
                //dst.tariffTierRelationData = std::nullopt;
            }
        }
    } else {
        if (src["tariffTierRelationData"]) {
            dst.tariffTierRelationData = src["tariffTierRelationData"].as<decltype(dst.tariffTierRelationData)::value_type>();
        } else {
            //dst.tariffTierRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const TariffTierRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffTierRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffBoundaryRelationDataType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffBoundaryRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffBoundaryRelationListDataType &src, JsonVariant &dst)
{
    if (src.tariffBoundaryRelationData) {
        dst["tariffBoundaryRelationData"] = *src.tariffBoundaryRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffBoundaryRelationData"]) {
                dst.tariffBoundaryRelationData =
                    item["tariffBoundaryRelationData"].as<decltype(dst.tariffBoundaryRelationData)::value_type>();
            } else {
                //dst.tariffBoundaryRelationData = std::nullopt;
            }
        }
    } else {
        if (src["tariffBoundaryRelationData"]) {
            dst.tariffBoundaryRelationData = src["tariffBoundaryRelationData"].as<decltype(dst.tariffBoundaryRelationData)::value_type>();
        } else {
            //dst.tariffBoundaryRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const TariffBoundaryRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tariffId) {
        dst["tariffId"] = *src.tariffId;
    }
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffBoundaryRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffId"]) {
                dst.tariffId = item["tariffId"].as<decltype(dst.tariffId)::value_type>();
            } else {
                //dst.tariffId = std::nullopt;
            }
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
        }
    } else {
        if (src["tariffId"]) {
            dst.tariffId = src["tariffId"].as<decltype(dst.tariffId)::value_type>();
        } else {
            //dst.tariffId = std::nullopt;
        }
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
    }
}
bool convertToJson(const TariffDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.tariffDescriptionData) {
        dst["tariffDescriptionData"] = *src.tariffDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TariffDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tariffDescriptionData"]) {
                dst.tariffDescriptionData = item["tariffDescriptionData"].as<decltype(dst.tariffDescriptionData)::value_type>();
            } else {
                //dst.tariffDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["tariffDescriptionData"]) {
            dst.tariffDescriptionData = src["tariffDescriptionData"].as<decltype(dst.tariffDescriptionData)::value_type>();
        } else {
            //dst.tariffDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryListDataType &src, JsonVariant &dst)
{
    if (src.tierBoundaryData) {
        dst["tierBoundaryData"] = *src.tierBoundaryData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierBoundaryData"]) {
                dst.tierBoundaryData = item["tierBoundaryData"].as<decltype(dst.tierBoundaryData)::value_type>();
            } else {
                //dst.tierBoundaryData = std::nullopt;
            }
        }
    } else {
        if (src["tierBoundaryData"]) {
            dst.tierBoundaryData = src["tierBoundaryData"].as<decltype(dst.tierBoundaryData)::value_type>();
        } else {
            //dst.tierBoundaryData = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.tierBoundaryDescriptionData) {
        dst["tierBoundaryDescriptionData"] = *src.tierBoundaryDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierBoundaryDescriptionData"]) {
                dst.tierBoundaryDescriptionData =
                    item["tierBoundaryDescriptionData"].as<decltype(dst.tierBoundaryDescriptionData)::value_type>();
            } else {
                //dst.tierBoundaryDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["tierBoundaryDescriptionData"]) {
            dst.tierBoundaryDescriptionData =
                src["tierBoundaryDescriptionData"].as<decltype(dst.tierBoundaryDescriptionData)::value_type>();
        } else {
            //dst.tierBoundaryDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TierBoundaryDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.boundaryId) {
        dst["boundaryId"] = *src.boundaryId;
    }
    if (src.boundaryType) {
        dst["boundaryType"] = *src.boundaryType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierBoundaryDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["boundaryId"]) {
                dst.boundaryId = item["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
            } else {
                //dst.boundaryId = std::nullopt;
            }
            if (item["boundaryType"]) {
                dst.boundaryType = item["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
            } else {
                //dst.boundaryType = std::nullopt;
            }
        }
    } else {
        if (src["boundaryId"]) {
            dst.boundaryId = src["boundaryId"].as<decltype(dst.boundaryId)::value_type>();
        } else {
            //dst.boundaryId = std::nullopt;
        }
        if (src["boundaryType"]) {
            dst.boundaryType = src["boundaryType"].as<decltype(dst.boundaryType)::value_type>();
        } else {
            //dst.boundaryType = std::nullopt;
        }
    }
}
bool convertToJson(const CommodityDataType &src, JsonVariant &dst)
{
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, CommodityDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const CommodityDataElementsType &src, JsonVariant &dst)
{
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, CommodityDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const CommodityListDataType &src, JsonVariant &dst)
{
    if (src.commodityData) {
        dst["commodityData"] = *src.commodityData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, CommodityListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["commodityData"]) {
                dst.commodityData = item["commodityData"].as<decltype(dst.commodityData)::value_type>();
            } else {
                //dst.commodityData = std::nullopt;
            }
        }
    } else {
        if (src["commodityData"]) {
            dst.commodityData = src["commodityData"].as<decltype(dst.commodityData)::value_type>();
        } else {
            //dst.commodityData = std::nullopt;
        }
    }
}
bool convertToJson(const CommodityListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.commodityId) {
        dst["commodityId"] = *src.commodityId;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, CommodityListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["commodityId"]) {
                dst.commodityId = item["commodityId"].as<decltype(dst.commodityId)::value_type>();
            } else {
                //dst.commodityId = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
        }
    } else {
        if (src["commodityId"]) {
            dst.commodityId = src["commodityId"].as<decltype(dst.commodityId)::value_type>();
        } else {
            //dst.commodityId = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
    }
}
bool convertToJson(const TierListDataType &src, JsonVariant &dst)
{
    if (src.tierData) {
        dst["tierData"] = *src.tierData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierData"]) {
                dst.tierData = item["tierData"].as<decltype(dst.tierData)::value_type>();
            } else {
                //dst.tierData = std::nullopt;
            }
        }
    } else {
        if (src["tierData"]) {
            dst.tierData = src["tierData"].as<decltype(dst.tierData)::value_type>();
        } else {
            //dst.tierData = std::nullopt;
        }
    }
}
bool convertToJson(const TierListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.activeIncentiveId) {
        dst["activeIncentiveId"] = *src.activeIncentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["activeIncentiveId"]) {
                dst.activeIncentiveId = item["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
            } else {
                //dst.activeIncentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["activeIncentiveId"]) {
            dst.activeIncentiveId = src["activeIncentiveId"].as<decltype(dst.activeIncentiveId)::value_type>();
        } else {
            //dst.activeIncentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierIncentiveRelationDataType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierIncentiveRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierIncentiveRelationListDataType &src, JsonVariant &dst)
{
    if (src.tierIncentiveRelationData) {
        dst["tierIncentiveRelationData"] = *src.tierIncentiveRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierIncentiveRelationData"]) {
                dst.tierIncentiveRelationData = item["tierIncentiveRelationData"].as<decltype(dst.tierIncentiveRelationData)::value_type>();
            } else {
                //dst.tierIncentiveRelationData = std::nullopt;
            }
        }
    } else {
        if (src["tierIncentiveRelationData"]) {
            dst.tierIncentiveRelationData = src["tierIncentiveRelationData"].as<decltype(dst.tierIncentiveRelationData)::value_type>();
        } else {
            //dst.tierIncentiveRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const TierIncentiveRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierIncentiveRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
    }
}
bool convertToJson(const TierDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.tierDescriptionData) {
        dst["tierDescriptionData"] = *src.tierDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierDescriptionData"]) {
                dst.tierDescriptionData = item["tierDescriptionData"].as<decltype(dst.tierDescriptionData)::value_type>();
            } else {
                //dst.tierDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["tierDescriptionData"]) {
            dst.tierDescriptionData = src["tierDescriptionData"].as<decltype(dst.tierDescriptionData)::value_type>();
        } else {
            //dst.tierDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TierDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.tierId) {
        dst["tierId"] = *src.tierId;
    }
    if (src.tierType) {
        dst["tierType"] = *src.tierType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TierDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["tierId"]) {
                dst.tierId = item["tierId"].as<decltype(dst.tierId)::value_type>();
            } else {
                //dst.tierId = std::nullopt;
            }
            if (item["tierType"]) {
                dst.tierType = item["tierType"].as<decltype(dst.tierType)::value_type>();
            } else {
                //dst.tierType = std::nullopt;
            }
        }
    } else {
        if (src["tierId"]) {
            dst.tierId = src["tierId"].as<decltype(dst.tierId)::value_type>();
        } else {
            //dst.tierId = std::nullopt;
        }
        if (src["tierType"]) {
            dst.tierType = src["tierType"].as<decltype(dst.tierType)::value_type>();
        } else {
            //dst.tierType = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveListDataType &src, JsonVariant &dst)
{
    if (src.incentiveData) {
        dst["incentiveData"] = *src.incentiveData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveData"]) {
                dst.incentiveData = item["incentiveData"].as<decltype(dst.incentiveData)::value_type>();
            } else {
                //dst.incentiveData = std::nullopt;
            }
        }
    } else {
        if (src["incentiveData"]) {
            dst.incentiveData = src["incentiveData"].as<decltype(dst.incentiveData)::value_type>();
        } else {
            //dst.incentiveData = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.valueType) {
        dst["valueType"] = *src.valueType;
    }
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["valueType"]) {
                dst.valueType = item["valueType"].as<decltype(dst.valueType)::value_type>();
            } else {
                //dst.valueType = std::nullopt;
            }
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["valueType"]) {
            dst.valueType = src["valueType"].as<decltype(dst.valueType)::value_type>();
        } else {
            //dst.valueType = std::nullopt;
        }
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.incentiveDescriptionData) {
        dst["incentiveDescriptionData"] = *src.incentiveDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveDescriptionData"]) {
                dst.incentiveDescriptionData = item["incentiveDescriptionData"].as<decltype(dst.incentiveDescriptionData)::value_type>();
            } else {
                //dst.incentiveDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["incentiveDescriptionData"]) {
            dst.incentiveDescriptionData = src["incentiveDescriptionData"].as<decltype(dst.incentiveDescriptionData)::value_type>();
        } else {
            //dst.incentiveDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const IncentiveDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.incentiveId) {
        dst["incentiveId"] = *src.incentiveId;
    }
    if (src.incentiveType) {
        dst["incentiveType"] = *src.incentiveType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, IncentiveDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["incentiveId"]) {
                dst.incentiveId = item["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
            } else {
                //dst.incentiveId = std::nullopt;
            }
            if (item["incentiveType"]) {
                dst.incentiveType = item["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
            } else {
                //dst.incentiveType = std::nullopt;
            }
        }
    } else {
        if (src["incentiveId"]) {
            dst.incentiveId = src["incentiveId"].as<decltype(dst.incentiveId)::value_type>();
        } else {
            //dst.incentiveId = std::nullopt;
        }
        if (src["incentiveType"]) {
            dst.incentiveType = src["incentiveType"].as<decltype(dst.incentiveType)::value_type>();
        } else {
            //dst.incentiveType = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlNodeDataType &src, JsonVariant &dst)
{
    if (src.isNodeRemoteControllable) {
        dst["isNodeRemoteControllable"] = *src.isNodeRemoteControllable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlNodeDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isNodeRemoteControllable"]) {
                dst.isNodeRemoteControllable = item["isNodeRemoteControllable"].as<decltype(dst.isNodeRemoteControllable)::value_type>();
            } else {
                //dst.isNodeRemoteControllable = std::nullopt;
            }
        }
    } else {
        if (src["isNodeRemoteControllable"]) {
            dst.isNodeRemoteControllable = src["isNodeRemoteControllable"].as<decltype(dst.isNodeRemoteControllable)::value_type>();
        } else {
            //dst.isNodeRemoteControllable = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlNodeDataElementsType &src, JsonVariant &dst)
{
    if (src.isNodeRemoteControllable) {
        dst["isNodeRemoteControllable"] = *src.isNodeRemoteControllable;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlNodeDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isNodeRemoteControllable"]) {
                dst.isNodeRemoteControllable = item["isNodeRemoteControllable"].as<decltype(dst.isNodeRemoteControllable)::value_type>();
            } else {
                //dst.isNodeRemoteControllable = std::nullopt;
            }
        }
    } else {
        if (src["isNodeRemoteControllable"]) {
            dst.isNodeRemoteControllable = src["isNodeRemoteControllable"].as<decltype(dst.isNodeRemoteControllable)::value_type>();
        } else {
            //dst.isNodeRemoteControllable = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlEventDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }
    if (src.eventActionConsume) {
        dst["eventActionConsume"] = *src.eventActionConsume;
    }
    if (src.eventActionProduce) {
        dst["eventActionProduce"] = *src.eventActionProduce;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
            if (item["eventActionConsume"]) {
                dst.eventActionConsume = item["eventActionConsume"].as<decltype(dst.eventActionConsume)::value_type>();
            } else {
                //dst.eventActionConsume = std::nullopt;
            }
            if (item["eventActionProduce"]) {
                dst.eventActionProduce = item["eventActionProduce"].as<decltype(dst.eventActionProduce)::value_type>();
            } else {
                //dst.eventActionProduce = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
        if (src["eventActionConsume"]) {
            dst.eventActionConsume = src["eventActionConsume"].as<decltype(dst.eventActionConsume)::value_type>();
        } else {
            //dst.eventActionConsume = std::nullopt;
        }
        if (src["eventActionProduce"]) {
            dst.eventActionProduce = src["eventActionProduce"].as<decltype(dst.eventActionProduce)::value_type>();
        } else {
            //dst.eventActionProduce = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlEventDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }
    if (src.eventActionConsume) {
        dst["eventActionConsume"] = *src.eventActionConsume;
    }
    if (src.eventActionProduce) {
        dst["eventActionProduce"] = *src.eventActionProduce;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
            if (item["eventActionConsume"]) {
                dst.eventActionConsume = item["eventActionConsume"].as<decltype(dst.eventActionConsume)::value_type>();
            } else {
                //dst.eventActionConsume = std::nullopt;
            }
            if (item["eventActionProduce"]) {
                dst.eventActionProduce = item["eventActionProduce"].as<decltype(dst.eventActionProduce)::value_type>();
            } else {
                //dst.eventActionProduce = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
        if (src["eventActionConsume"]) {
            dst.eventActionConsume = src["eventActionConsume"].as<decltype(dst.eventActionConsume)::value_type>();
        } else {
            //dst.eventActionConsume = std::nullopt;
        }
        if (src["eventActionProduce"]) {
            dst.eventActionProduce = src["eventActionProduce"].as<decltype(dst.eventActionProduce)::value_type>();
        } else {
            //dst.eventActionProduce = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlEventListDataType &src, JsonVariant &dst)
{
    if (src.loadControlEventData) {
        dst["loadControlEventData"] = *src.loadControlEventData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["loadControlEventData"]) {
                dst.loadControlEventData = item["loadControlEventData"].as<decltype(dst.loadControlEventData)::value_type>();
            } else {
                //dst.loadControlEventData = std::nullopt;
            }
        }
    } else {
        if (src["loadControlEventData"]) {
            dst.loadControlEventData = src["loadControlEventData"].as<decltype(dst.loadControlEventData)::value_type>();
        } else {
            //dst.loadControlEventData = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlEventListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlEventListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
        }
    } else {
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlStateDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }
    if (src.eventStateConsume) {
        dst["eventStateConsume"] = *src.eventStateConsume;
    }
    if (src.appliedEventActionConsume) {
        dst["appliedEventActionConsume"] = *src.appliedEventActionConsume;
    }
    if (src.eventStateProduce) {
        dst["eventStateProduce"] = *src.eventStateProduce;
    }
    if (src.appliedEventActionProduce) {
        dst["appliedEventActionProduce"] = *src.appliedEventActionProduce;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlStateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
            if (item["eventStateConsume"]) {
                dst.eventStateConsume = item["eventStateConsume"].as<decltype(dst.eventStateConsume)::value_type>();
            } else {
                //dst.eventStateConsume = std::nullopt;
            }
            if (item["appliedEventActionConsume"]) {
                dst.appliedEventActionConsume = item["appliedEventActionConsume"].as<decltype(dst.appliedEventActionConsume)::value_type>();
            } else {
                //dst.appliedEventActionConsume = std::nullopt;
            }
            if (item["eventStateProduce"]) {
                dst.eventStateProduce = item["eventStateProduce"].as<decltype(dst.eventStateProduce)::value_type>();
            } else {
                //dst.eventStateProduce = std::nullopt;
            }
            if (item["appliedEventActionProduce"]) {
                dst.appliedEventActionProduce = item["appliedEventActionProduce"].as<decltype(dst.appliedEventActionProduce)::value_type>();
            } else {
                //dst.appliedEventActionProduce = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
        if (src["eventStateConsume"]) {
            dst.eventStateConsume = src["eventStateConsume"].as<decltype(dst.eventStateConsume)::value_type>();
        } else {
            //dst.eventStateConsume = std::nullopt;
        }
        if (src["appliedEventActionConsume"]) {
            dst.appliedEventActionConsume = src["appliedEventActionConsume"].as<decltype(dst.appliedEventActionConsume)::value_type>();
        } else {
            //dst.appliedEventActionConsume = std::nullopt;
        }
        if (src["eventStateProduce"]) {
            dst.eventStateProduce = src["eventStateProduce"].as<decltype(dst.eventStateProduce)::value_type>();
        } else {
            //dst.eventStateProduce = std::nullopt;
        }
        if (src["appliedEventActionProduce"]) {
            dst.appliedEventActionProduce = src["appliedEventActionProduce"].as<decltype(dst.appliedEventActionProduce)::value_type>();
        } else {
            //dst.appliedEventActionProduce = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlStateDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }
    if (src.eventStateConsume) {
        dst["eventStateConsume"] = *src.eventStateConsume;
    }
    if (src.appliedEventActionConsume) {
        dst["appliedEventActionConsume"] = *src.appliedEventActionConsume;
    }
    if (src.eventStateProduce) {
        dst["eventStateProduce"] = *src.eventStateProduce;
    }
    if (src.appliedEventActionProduce) {
        dst["appliedEventActionProduce"] = *src.appliedEventActionProduce;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlStateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
            if (item["eventStateConsume"]) {
                dst.eventStateConsume = item["eventStateConsume"].as<decltype(dst.eventStateConsume)::value_type>();
            } else {
                //dst.eventStateConsume = std::nullopt;
            }
            if (item["appliedEventActionConsume"]) {
                dst.appliedEventActionConsume = item["appliedEventActionConsume"].as<decltype(dst.appliedEventActionConsume)::value_type>();
            } else {
                //dst.appliedEventActionConsume = std::nullopt;
            }
            if (item["eventStateProduce"]) {
                dst.eventStateProduce = item["eventStateProduce"].as<decltype(dst.eventStateProduce)::value_type>();
            } else {
                //dst.eventStateProduce = std::nullopt;
            }
            if (item["appliedEventActionProduce"]) {
                dst.appliedEventActionProduce = item["appliedEventActionProduce"].as<decltype(dst.appliedEventActionProduce)::value_type>();
            } else {
                //dst.appliedEventActionProduce = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
        if (src["eventStateConsume"]) {
            dst.eventStateConsume = src["eventStateConsume"].as<decltype(dst.eventStateConsume)::value_type>();
        } else {
            //dst.eventStateConsume = std::nullopt;
        }
        if (src["appliedEventActionConsume"]) {
            dst.appliedEventActionConsume = src["appliedEventActionConsume"].as<decltype(dst.appliedEventActionConsume)::value_type>();
        } else {
            //dst.appliedEventActionConsume = std::nullopt;
        }
        if (src["eventStateProduce"]) {
            dst.eventStateProduce = src["eventStateProduce"].as<decltype(dst.eventStateProduce)::value_type>();
        } else {
            //dst.eventStateProduce = std::nullopt;
        }
        if (src["appliedEventActionProduce"]) {
            dst.appliedEventActionProduce = src["appliedEventActionProduce"].as<decltype(dst.appliedEventActionProduce)::value_type>();
        } else {
            //dst.appliedEventActionProduce = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlStateListDataType &src, JsonVariant &dst)
{
    if (src.loadControlStateData) {
        dst["loadControlStateData"] = *src.loadControlStateData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlStateListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["loadControlStateData"]) {
                dst.loadControlStateData = item["loadControlStateData"].as<decltype(dst.loadControlStateData)::value_type>();
            } else {
                //dst.loadControlStateData = std::nullopt;
            }
        }
    } else {
        if (src["loadControlStateData"]) {
            dst.loadControlStateData = src["loadControlStateData"].as<decltype(dst.loadControlStateData)::value_type>();
        } else {
            //dst.loadControlStateData = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlStateListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlStateListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
        }
    } else {
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDataType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.isLimitChangeable) {
        dst["isLimitChangeable"] = *src.isLimitChangeable;
    }
    if (src.isLimitActive) {
        dst["isLimitActive"] = *src.isLimitActive;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["isLimitChangeable"]) {
                dst.isLimitChangeable = item["isLimitChangeable"].as<decltype(dst.isLimitChangeable)::value_type>();
            } else {
                //dst.isLimitChangeable = std::nullopt;
            }
            if (item["isLimitActive"]) {
                dst.isLimitActive = item["isLimitActive"].as<decltype(dst.isLimitActive)::value_type>();
            } else {
                //dst.isLimitActive = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["isLimitChangeable"]) {
            dst.isLimitChangeable = src["isLimitChangeable"].as<decltype(dst.isLimitChangeable)::value_type>();
        } else {
            //dst.isLimitChangeable = std::nullopt;
        }
        if (src["isLimitActive"]) {
            dst.isLimitActive = src["isLimitActive"].as<decltype(dst.isLimitActive)::value_type>();
        } else {
            //dst.isLimitActive = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDataElementsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.isLimitChangeable) {
        dst["isLimitChangeable"] = *src.isLimitChangeable;
    }
    if (src.isLimitActive) {
        dst["isLimitActive"] = *src.isLimitActive;
    }
    if (src.timePeriod) {
        dst["timePeriod"] = *src.timePeriod;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["isLimitChangeable"]) {
                dst.isLimitChangeable = item["isLimitChangeable"].as<decltype(dst.isLimitChangeable)::value_type>();
            } else {
                //dst.isLimitChangeable = std::nullopt;
            }
            if (item["isLimitActive"]) {
                dst.isLimitActive = item["isLimitActive"].as<decltype(dst.isLimitActive)::value_type>();
            } else {
                //dst.isLimitActive = std::nullopt;
            }
            if (item["timePeriod"]) {
                dst.timePeriod = item["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
            } else {
                //dst.timePeriod = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["isLimitChangeable"]) {
            dst.isLimitChangeable = src["isLimitChangeable"].as<decltype(dst.isLimitChangeable)::value_type>();
        } else {
            //dst.isLimitChangeable = std::nullopt;
        }
        if (src["isLimitActive"]) {
            dst.isLimitActive = src["isLimitActive"].as<decltype(dst.isLimitActive)::value_type>();
        } else {
            //dst.isLimitActive = std::nullopt;
        }
        if (src["timePeriod"]) {
            dst.timePeriod = src["timePeriod"].as<decltype(dst.timePeriod)::value_type>();
        } else {
            //dst.timePeriod = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitListDataType &src, JsonVariant &dst)
{
    if (src.loadControlLimitData) {
        dst["loadControlLimitData"] = *src.loadControlLimitData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["loadControlLimitData"]) {
                dst.loadControlLimitData = item["loadControlLimitData"].as<decltype(dst.loadControlLimitData)::value_type>();
            } else {
                //dst.loadControlLimitData = std::nullopt;
            }
        }
    } else {
        if (src["loadControlLimitData"]) {
            dst.loadControlLimitData = src["loadControlLimitData"].as<decltype(dst.loadControlLimitData)::value_type>();
        } else {
            //dst.loadControlLimitData = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitConstraintsDataType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitConstraintsDataElementsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.valueRangeMin) {
        dst["valueRangeMin"] = *src.valueRangeMin;
    }
    if (src.valueRangeMax) {
        dst["valueRangeMax"] = *src.valueRangeMax;
    }
    if (src.valueStepSize) {
        dst["valueStepSize"] = *src.valueStepSize;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["valueRangeMin"]) {
                dst.valueRangeMin = item["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
            } else {
                //dst.valueRangeMin = std::nullopt;
            }
            if (item["valueRangeMax"]) {
                dst.valueRangeMax = item["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
            } else {
                //dst.valueRangeMax = std::nullopt;
            }
            if (item["valueStepSize"]) {
                dst.valueStepSize = item["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
            } else {
                //dst.valueStepSize = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["valueRangeMin"]) {
            dst.valueRangeMin = src["valueRangeMin"].as<decltype(dst.valueRangeMin)::value_type>();
        } else {
            //dst.valueRangeMin = std::nullopt;
        }
        if (src["valueRangeMax"]) {
            dst.valueRangeMax = src["valueRangeMax"].as<decltype(dst.valueRangeMax)::value_type>();
        } else {
            //dst.valueRangeMax = std::nullopt;
        }
        if (src["valueStepSize"]) {
            dst.valueStepSize = src["valueStepSize"].as<decltype(dst.valueStepSize)::value_type>();
        } else {
            //dst.valueStepSize = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitConstraintsListDataType &src, JsonVariant &dst)
{
    if (src.loadControlLimitConstraintsData) {
        dst["loadControlLimitConstraintsData"] = *src.loadControlLimitConstraintsData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["loadControlLimitConstraintsData"]) {
                dst.loadControlLimitConstraintsData =
                    item["loadControlLimitConstraintsData"].as<decltype(dst.loadControlLimitConstraintsData)::value_type>();
            } else {
                //dst.loadControlLimitConstraintsData = std::nullopt;
            }
        }
    } else {
        if (src["loadControlLimitConstraintsData"]) {
            dst.loadControlLimitConstraintsData =
                src["loadControlLimitConstraintsData"].as<decltype(dst.loadControlLimitConstraintsData)::value_type>();
        } else {
            //dst.loadControlLimitConstraintsData = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitConstraintsListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitConstraintsListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDescriptionDataType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.limitType) {
        dst["limitType"] = *src.limitType;
    }
    if (src.limitCategory) {
        dst["limitCategory"] = *src.limitCategory;
    }
    if (src.limitDirection) {
        dst["limitDirection"] = *src.limitDirection;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["limitType"]) {
                dst.limitType = item["limitType"].as<decltype(dst.limitType)::value_type>();
            } else {
                //dst.limitType = std::nullopt;
            }
            if (item["limitCategory"]) {
                dst.limitCategory = item["limitCategory"].as<decltype(dst.limitCategory)::value_type>();
            } else {
                //dst.limitCategory = std::nullopt;
            }
            if (item["limitDirection"]) {
                dst.limitDirection = item["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
            } else {
                //dst.limitDirection = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["limitType"]) {
            dst.limitType = src["limitType"].as<decltype(dst.limitType)::value_type>();
        } else {
            //dst.limitType = std::nullopt;
        }
        if (src["limitCategory"]) {
            dst.limitCategory = src["limitCategory"].as<decltype(dst.limitCategory)::value_type>();
        } else {
            //dst.limitCategory = std::nullopt;
        }
        if (src["limitDirection"]) {
            dst.limitDirection = src["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
        } else {
            //dst.limitDirection = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.limitType) {
        dst["limitType"] = *src.limitType;
    }
    if (src.limitCategory) {
        dst["limitCategory"] = *src.limitCategory;
    }
    if (src.limitDirection) {
        dst["limitDirection"] = *src.limitDirection;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["limitType"]) {
                dst.limitType = item["limitType"].as<decltype(dst.limitType)::value_type>();
            } else {
                //dst.limitType = std::nullopt;
            }
            if (item["limitCategory"]) {
                dst.limitCategory = item["limitCategory"].as<decltype(dst.limitCategory)::value_type>();
            } else {
                //dst.limitCategory = std::nullopt;
            }
            if (item["limitDirection"]) {
                dst.limitDirection = item["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
            } else {
                //dst.limitDirection = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["limitType"]) {
            dst.limitType = src["limitType"].as<decltype(dst.limitType)::value_type>();
        } else {
            //dst.limitType = std::nullopt;
        }
        if (src["limitCategory"]) {
            dst.limitCategory = src["limitCategory"].as<decltype(dst.limitCategory)::value_type>();
        } else {
            //dst.limitCategory = std::nullopt;
        }
        if (src["limitDirection"]) {
            dst.limitDirection = src["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
        } else {
            //dst.limitDirection = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.loadControlLimitDescriptionData) {
        dst["loadControlLimitDescriptionData"] = *src.loadControlLimitDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["loadControlLimitDescriptionData"]) {
                dst.loadControlLimitDescriptionData =
                    item["loadControlLimitDescriptionData"].as<decltype(dst.loadControlLimitDescriptionData)::value_type>();
            } else {
                //dst.loadControlLimitDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["loadControlLimitDescriptionData"]) {
            dst.loadControlLimitDescriptionData =
                src["loadControlLimitDescriptionData"].as<decltype(dst.loadControlLimitDescriptionData)::value_type>();
        } else {
            //dst.loadControlLimitDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const LoadControlLimitDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.limitId) {
        dst["limitId"] = *src.limitId;
    }
    if (src.limitType) {
        dst["limitType"] = *src.limitType;
    }
    if (src.limitDirection) {
        dst["limitDirection"] = *src.limitDirection;
    }
    if (src.measurementId) {
        dst["measurementId"] = *src.measurementId;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, LoadControlLimitDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["limitId"]) {
                dst.limitId = item["limitId"].as<decltype(dst.limitId)::value_type>();
            } else {
                //dst.limitId = std::nullopt;
            }
            if (item["limitType"]) {
                dst.limitType = item["limitType"].as<decltype(dst.limitType)::value_type>();
            } else {
                //dst.limitType = std::nullopt;
            }
            if (item["limitDirection"]) {
                dst.limitDirection = item["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
            } else {
                //dst.limitDirection = std::nullopt;
            }
            if (item["measurementId"]) {
                dst.measurementId = item["measurementId"].as<decltype(dst.measurementId)::value_type>();
            } else {
                //dst.measurementId = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
        }
    } else {
        if (src["limitId"]) {
            dst.limitId = src["limitId"].as<decltype(dst.limitId)::value_type>();
        } else {
            //dst.limitId = std::nullopt;
        }
        if (src["limitType"]) {
            dst.limitType = src["limitType"].as<decltype(dst.limitType)::value_type>();
        } else {
            //dst.limitType = std::nullopt;
        }
        if (src["limitDirection"]) {
            dst.limitDirection = src["limitDirection"].as<decltype(dst.limitDirection)::value_type>();
        } else {
            //dst.limitDirection = std::nullopt;
        }
        if (src["measurementId"]) {
            dst.measurementId = src["measurementId"].as<decltype(dst.measurementId)::value_type>();
        } else {
            //dst.measurementId = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementAddNodeCallType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementAddNodeCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementAddNodeCallElementsType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementAddNodeCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementRemoveNodeCallType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementRemoveNodeCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementRemoveNodeCallElementsType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementRemoveNodeCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementModifyNodeCallType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementModifyNodeCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementModifyNodeCallElementsType &src, JsonVariant &dst)
{
    if (src.nodeAddress) {
        dst["nodeAddress"] = *src.nodeAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementModifyNodeCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeAddress"]) {
                dst.nodeAddress = item["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
            } else {
                //dst.nodeAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["nodeAddress"]) {
            dst.nodeAddress = src["nodeAddress"].as<decltype(dst.nodeAddress)::value_type>();
        } else {
            //dst.nodeAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementScanNetworkCallType &src, JsonVariant &dst)
{
    if (src.scanSetup) {
        dst["scanSetup"] = *src.scanSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementScanNetworkCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["scanSetup"]) {
                dst.scanSetup = item["scanSetup"].as<decltype(dst.scanSetup)::value_type>();
            } else {
                //dst.scanSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
        }
    } else {
        if (src["scanSetup"]) {
            dst.scanSetup = src["scanSetup"].as<decltype(dst.scanSetup)::value_type>();
        } else {
            //dst.scanSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementScanNetworkCallElementsType &src, JsonVariant &dst)
{
    if (src.scanSetup) {
        dst["scanSetup"] = *src.scanSetup;
    }
    if (src.timeout) {
        dst["timeout"] = *src.timeout;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementScanNetworkCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["scanSetup"]) {
                dst.scanSetup = item["scanSetup"].as<decltype(dst.scanSetup)::value_type>();
            } else {
                //dst.scanSetup = std::nullopt;
            }
            if (item["timeout"]) {
                dst.timeout = item["timeout"].as<decltype(dst.timeout)::value_type>();
            } else {
                //dst.timeout = std::nullopt;
            }
        }
    } else {
        if (src["scanSetup"]) {
            dst.scanSetup = src["scanSetup"].as<decltype(dst.scanSetup)::value_type>();
        } else {
            //dst.scanSetup = std::nullopt;
        }
        if (src["timeout"]) {
            dst.timeout = src["timeout"].as<decltype(dst.timeout)::value_type>();
        } else {
            //dst.timeout = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDiscoverCallType &src, JsonVariant &dst)
{
    if (src.discoverAddress) {
        dst["discoverAddress"] = *src.discoverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDiscoverCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["discoverAddress"]) {
                dst.discoverAddress = item["discoverAddress"].as<decltype(dst.discoverAddress)::value_type>();
            } else {
                //dst.discoverAddress = std::nullopt;
            }
        }
    } else {
        if (src["discoverAddress"]) {
            dst.discoverAddress = src["discoverAddress"].as<decltype(dst.discoverAddress)::value_type>();
        } else {
            //dst.discoverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDiscoverCallElementsType &src, JsonVariant &dst)
{
    if (src.discoverAddress) {
        dst["discoverAddress"] = *src.discoverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDiscoverCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["discoverAddress"]) {
                dst.discoverAddress = item["discoverAddress"].as<decltype(dst.discoverAddress)::value_type>();
            } else {
                //dst.discoverAddress = std::nullopt;
            }
        }
    } else {
        if (src["discoverAddress"]) {
            dst.discoverAddress = src["discoverAddress"].as<decltype(dst.discoverAddress)::value_type>();
        } else {
            //dst.discoverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementAbortCallType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementAbortCallType &dst)
{
}
bool convertToJson(const NetworkManagementAbortCallElementsType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementAbortCallElementsType &dst)
{
}
bool convertToJson(const NetworkManagementProcessStateDataType &src, JsonVariant &dst)
{
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementProcessStateDataElementsType &src, JsonVariant &dst)
{
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementProcessStateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementJoiningModeDataType &src, JsonVariant &dst)
{
    if (src.setup) {
        dst["setup"] = *src.setup;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementJoiningModeDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setup"]) {
                dst.setup = item["setup"].as<decltype(dst.setup)::value_type>();
            } else {
                //dst.setup = std::nullopt;
            }
        }
    } else {
        if (src["setup"]) {
            dst.setup = src["setup"].as<decltype(dst.setup)::value_type>();
        } else {
            //dst.setup = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementJoiningModeDataElementsType &src, JsonVariant &dst)
{
    if (src.setup) {
        dst["setup"] = *src.setup;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementJoiningModeDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["setup"]) {
                dst.setup = item["setup"].as<decltype(dst.setup)::value_type>();
            } else {
                //dst.setup = std::nullopt;
            }
        }
    } else {
        if (src["setup"]) {
            dst.setup = src["setup"].as<decltype(dst.setup)::value_type>();
        } else {
            //dst.setup = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementReportCandidateDataType &src, JsonVariant &dst)
{
    if (src.candidateSetup) {
        dst["candidateSetup"] = *src.candidateSetup;
    }
    if (src.setupUsableForAdd) {
        dst["setupUsableForAdd"] = *src.setupUsableForAdd;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementReportCandidateDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["candidateSetup"]) {
                dst.candidateSetup = item["candidateSetup"].as<decltype(dst.candidateSetup)::value_type>();
            } else {
                //dst.candidateSetup = std::nullopt;
            }
            if (item["setupUsableForAdd"]) {
                dst.setupUsableForAdd = item["setupUsableForAdd"].as<decltype(dst.setupUsableForAdd)::value_type>();
            } else {
                //dst.setupUsableForAdd = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["candidateSetup"]) {
            dst.candidateSetup = src["candidateSetup"].as<decltype(dst.candidateSetup)::value_type>();
        } else {
            //dst.candidateSetup = std::nullopt;
        }
        if (src["setupUsableForAdd"]) {
            dst.setupUsableForAdd = src["setupUsableForAdd"].as<decltype(dst.setupUsableForAdd)::value_type>();
        } else {
            //dst.setupUsableForAdd = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementReportCandidateDataElementsType &src, JsonVariant &dst)
{
    if (src.candidateSetup) {
        dst["candidateSetup"] = *src.candidateSetup;
    }
    if (src.setupUsableForAdd) {
        dst["setupUsableForAdd"] = *src.setupUsableForAdd;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementReportCandidateDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["candidateSetup"]) {
                dst.candidateSetup = item["candidateSetup"].as<decltype(dst.candidateSetup)::value_type>();
            } else {
                //dst.candidateSetup = std::nullopt;
            }
            if (item["setupUsableForAdd"]) {
                dst.setupUsableForAdd = item["setupUsableForAdd"].as<decltype(dst.setupUsableForAdd)::value_type>();
            } else {
                //dst.setupUsableForAdd = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["candidateSetup"]) {
            dst.candidateSetup = src["candidateSetup"].as<decltype(dst.candidateSetup)::value_type>();
        } else {
            //dst.candidateSetup = std::nullopt;
        }
        if (src["setupUsableForAdd"]) {
            dst.setupUsableForAdd = src["setupUsableForAdd"].as<decltype(dst.setupUsableForAdd)::value_type>();
        } else {
            //dst.setupUsableForAdd = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDeviceDescriptionDataType &src, JsonVariant &dst)
{
    if (src.deviceAddress) {
        dst["deviceAddress"] = *src.deviceAddress;
    }
    if (src.deviceType) {
        dst["deviceType"] = *src.deviceType;
    }
    if (src.networkManagementResponsibleAddress) {
        dst["networkManagementResponsibleAddress"] = *src.networkManagementResponsibleAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.technologyAddress) {
        dst["technologyAddress"] = *src.technologyAddress;
    }
    if (src.communicationsTechnologyInformation) {
        dst["communicationsTechnologyInformation"] = *src.communicationsTechnologyInformation;
    }
    if (src.networkFeatureSet) {
        dst["networkFeatureSet"] = *src.networkFeatureSet;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceAddress"]) {
                dst.deviceAddress = item["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
            } else {
                //dst.deviceAddress = std::nullopt;
            }
            if (item["deviceType"]) {
                dst.deviceType = item["deviceType"].as<decltype(dst.deviceType)::value_type>();
            } else {
                //dst.deviceType = std::nullopt;
            }
            if (item["networkManagementResponsibleAddress"]) {
                dst.networkManagementResponsibleAddress =
                    item["networkManagementResponsibleAddress"].as<decltype(dst.networkManagementResponsibleAddress)::value_type>();
            } else {
                //dst.networkManagementResponsibleAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["technologyAddress"]) {
                dst.technologyAddress = item["technologyAddress"].as<decltype(dst.technologyAddress)::value_type>();
            } else {
                //dst.technologyAddress = std::nullopt;
            }
            if (item["communicationsTechnologyInformation"]) {
                dst.communicationsTechnologyInformation =
                    item["communicationsTechnologyInformation"].as<decltype(dst.communicationsTechnologyInformation)::value_type>();
            } else {
                //dst.communicationsTechnologyInformation = std::nullopt;
            }
            if (item["networkFeatureSet"]) {
                dst.networkFeatureSet = item["networkFeatureSet"].as<decltype(dst.networkFeatureSet)::value_type>();
            } else {
                //dst.networkFeatureSet = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["deviceAddress"]) {
            dst.deviceAddress = src["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
        } else {
            //dst.deviceAddress = std::nullopt;
        }
        if (src["deviceType"]) {
            dst.deviceType = src["deviceType"].as<decltype(dst.deviceType)::value_type>();
        } else {
            //dst.deviceType = std::nullopt;
        }
        if (src["networkManagementResponsibleAddress"]) {
            dst.networkManagementResponsibleAddress =
                src["networkManagementResponsibleAddress"].as<decltype(dst.networkManagementResponsibleAddress)::value_type>();
        } else {
            //dst.networkManagementResponsibleAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["technologyAddress"]) {
            dst.technologyAddress = src["technologyAddress"].as<decltype(dst.technologyAddress)::value_type>();
        } else {
            //dst.technologyAddress = std::nullopt;
        }
        if (src["communicationsTechnologyInformation"]) {
            dst.communicationsTechnologyInformation =
                src["communicationsTechnologyInformation"].as<decltype(dst.communicationsTechnologyInformation)::value_type>();
        } else {
            //dst.communicationsTechnologyInformation = std::nullopt;
        }
        if (src["networkFeatureSet"]) {
            dst.networkFeatureSet = src["networkFeatureSet"].as<decltype(dst.networkFeatureSet)::value_type>();
        } else {
            //dst.networkFeatureSet = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDeviceDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.deviceAddress) {
        dst["deviceAddress"] = *src.deviceAddress;
    }
    if (src.deviceType) {
        dst["deviceType"] = *src.deviceType;
    }
    if (src.networkManagementResponsibleAddress) {
        dst["networkManagementResponsibleAddress"] = *src.networkManagementResponsibleAddress;
    }
    if (src.nativeSetup) {
        dst["nativeSetup"] = *src.nativeSetup;
    }
    if (src.technologyAddress) {
        dst["technologyAddress"] = *src.technologyAddress;
    }
    if (src.communicationsTechnologyInformation) {
        dst["communicationsTechnologyInformation"] = *src.communicationsTechnologyInformation;
    }
    if (src.networkFeatureSet) {
        dst["networkFeatureSet"] = *src.networkFeatureSet;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceAddress"]) {
                dst.deviceAddress = item["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
            } else {
                //dst.deviceAddress = std::nullopt;
            }
            if (item["deviceType"]) {
                dst.deviceType = item["deviceType"].as<decltype(dst.deviceType)::value_type>();
            } else {
                //dst.deviceType = std::nullopt;
            }
            if (item["networkManagementResponsibleAddress"]) {
                dst.networkManagementResponsibleAddress =
                    item["networkManagementResponsibleAddress"].as<decltype(dst.networkManagementResponsibleAddress)::value_type>();
            } else {
                //dst.networkManagementResponsibleAddress = std::nullopt;
            }
            if (item["nativeSetup"]) {
                dst.nativeSetup = item["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
            } else {
                //dst.nativeSetup = std::nullopt;
            }
            if (item["technologyAddress"]) {
                dst.technologyAddress = item["technologyAddress"].as<decltype(dst.technologyAddress)::value_type>();
            } else {
                //dst.technologyAddress = std::nullopt;
            }
            if (item["communicationsTechnologyInformation"]) {
                dst.communicationsTechnologyInformation =
                    item["communicationsTechnologyInformation"].as<decltype(dst.communicationsTechnologyInformation)::value_type>();
            } else {
                //dst.communicationsTechnologyInformation = std::nullopt;
            }
            if (item["networkFeatureSet"]) {
                dst.networkFeatureSet = item["networkFeatureSet"].as<decltype(dst.networkFeatureSet)::value_type>();
            } else {
                //dst.networkFeatureSet = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["deviceAddress"]) {
            dst.deviceAddress = src["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
        } else {
            //dst.deviceAddress = std::nullopt;
        }
        if (src["deviceType"]) {
            dst.deviceType = src["deviceType"].as<decltype(dst.deviceType)::value_type>();
        } else {
            //dst.deviceType = std::nullopt;
        }
        if (src["networkManagementResponsibleAddress"]) {
            dst.networkManagementResponsibleAddress =
                src["networkManagementResponsibleAddress"].as<decltype(dst.networkManagementResponsibleAddress)::value_type>();
        } else {
            //dst.networkManagementResponsibleAddress = std::nullopt;
        }
        if (src["nativeSetup"]) {
            dst.nativeSetup = src["nativeSetup"].as<decltype(dst.nativeSetup)::value_type>();
        } else {
            //dst.nativeSetup = std::nullopt;
        }
        if (src["technologyAddress"]) {
            dst.technologyAddress = src["technologyAddress"].as<decltype(dst.technologyAddress)::value_type>();
        } else {
            //dst.technologyAddress = std::nullopt;
        }
        if (src["communicationsTechnologyInformation"]) {
            dst.communicationsTechnologyInformation =
                src["communicationsTechnologyInformation"].as<decltype(dst.communicationsTechnologyInformation)::value_type>();
        } else {
            //dst.communicationsTechnologyInformation = std::nullopt;
        }
        if (src["networkFeatureSet"]) {
            dst.networkFeatureSet = src["networkFeatureSet"].as<decltype(dst.networkFeatureSet)::value_type>();
        } else {
            //dst.networkFeatureSet = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDeviceDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.networkManagementDeviceDescriptionData) {
        dst["networkManagementDeviceDescriptionData"] = *src.networkManagementDeviceDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["networkManagementDeviceDescriptionData"]) {
                dst.networkManagementDeviceDescriptionData =
                    item["networkManagementDeviceDescriptionData"].as<decltype(dst.networkManagementDeviceDescriptionData)::value_type>();
            } else {
                //dst.networkManagementDeviceDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["networkManagementDeviceDescriptionData"]) {
            dst.networkManagementDeviceDescriptionData =
                src["networkManagementDeviceDescriptionData"].as<decltype(dst.networkManagementDeviceDescriptionData)::value_type>();
        } else {
            //dst.networkManagementDeviceDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementDeviceDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.deviceAddress) {
        dst["deviceAddress"] = *src.deviceAddress;
    }
    if (src.deviceType) {
        dst["deviceType"] = *src.deviceType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementDeviceDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceAddress"]) {
                dst.deviceAddress = item["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
            } else {
                //dst.deviceAddress = std::nullopt;
            }
            if (item["deviceType"]) {
                dst.deviceType = item["deviceType"].as<decltype(dst.deviceType)::value_type>();
            } else {
                //dst.deviceType = std::nullopt;
            }
        }
    } else {
        if (src["deviceAddress"]) {
            dst.deviceAddress = src["deviceAddress"].as<decltype(dst.deviceAddress)::value_type>();
        } else {
            //dst.deviceAddress = std::nullopt;
        }
        if (src["deviceType"]) {
            dst.deviceType = src["deviceType"].as<decltype(dst.deviceType)::value_type>();
        } else {
            //dst.deviceType = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementEntityDescriptionDataType &src, JsonVariant &dst)
{
    if (src.entityAddress) {
        dst["entityAddress"] = *src.entityAddress;
    }
    if (src.entityType) {
        dst["entityType"] = *src.entityType;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["entityAddress"]) {
                dst.entityAddress = item["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
            } else {
                //dst.entityAddress = std::nullopt;
            }
            if (item["entityType"]) {
                dst.entityType = item["entityType"].as<decltype(dst.entityType)::value_type>();
            } else {
                //dst.entityType = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["entityAddress"]) {
            dst.entityAddress = src["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
        } else {
            //dst.entityAddress = std::nullopt;
        }
        if (src["entityType"]) {
            dst.entityType = src["entityType"].as<decltype(dst.entityType)::value_type>();
        } else {
            //dst.entityType = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementEntityDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.entityAddress) {
        dst["entityAddress"] = *src.entityAddress;
    }
    if (src.entityType) {
        dst["entityType"] = *src.entityType;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["entityAddress"]) {
                dst.entityAddress = item["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
            } else {
                //dst.entityAddress = std::nullopt;
            }
            if (item["entityType"]) {
                dst.entityType = item["entityType"].as<decltype(dst.entityType)::value_type>();
            } else {
                //dst.entityType = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["entityAddress"]) {
            dst.entityAddress = src["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
        } else {
            //dst.entityAddress = std::nullopt;
        }
        if (src["entityType"]) {
            dst.entityType = src["entityType"].as<decltype(dst.entityType)::value_type>();
        } else {
            //dst.entityType = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementEntityDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.networkManagementEntityDescriptionData) {
        dst["networkManagementEntityDescriptionData"] = *src.networkManagementEntityDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["networkManagementEntityDescriptionData"]) {
                dst.networkManagementEntityDescriptionData =
                    item["networkManagementEntityDescriptionData"].as<decltype(dst.networkManagementEntityDescriptionData)::value_type>();
            } else {
                //dst.networkManagementEntityDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["networkManagementEntityDescriptionData"]) {
            dst.networkManagementEntityDescriptionData =
                src["networkManagementEntityDescriptionData"].as<decltype(dst.networkManagementEntityDescriptionData)::value_type>();
        } else {
            //dst.networkManagementEntityDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementEntityDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.entityAddress) {
        dst["entityAddress"] = *src.entityAddress;
    }
    if (src.entityType) {
        dst["entityType"] = *src.entityType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementEntityDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["entityAddress"]) {
                dst.entityAddress = item["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
            } else {
                //dst.entityAddress = std::nullopt;
            }
            if (item["entityType"]) {
                dst.entityType = item["entityType"].as<decltype(dst.entityType)::value_type>();
            } else {
                //dst.entityType = std::nullopt;
            }
        }
    } else {
        if (src["entityAddress"]) {
            dst.entityAddress = src["entityAddress"].as<decltype(dst.entityAddress)::value_type>();
        } else {
            //dst.entityAddress = std::nullopt;
        }
        if (src["entityType"]) {
            dst.entityType = src["entityType"].as<decltype(dst.entityType)::value_type>();
        } else {
            //dst.entityType = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementFeatureDescriptionDataType &src, JsonVariant &dst)
{
    if (src.featureAddress) {
        dst["featureAddress"] = *src.featureAddress;
    }
    if (src.featureType) {
        dst["featureType"] = *src.featureType;
    }
    if (src.specificUsage) {
        dst["specificUsage"] = *src.specificUsage;
    }
    if (src.featureGroup) {
        dst["featureGroup"] = *src.featureGroup;
    }
    if (src.role) {
        dst["role"] = *src.role;
    }
    if (src.supportedFunction) {
        dst["supportedFunction"] = *src.supportedFunction;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.maxResponseDelay) {
        dst["maxResponseDelay"] = *src.maxResponseDelay;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["featureAddress"]) {
                dst.featureAddress = item["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
            } else {
                //dst.featureAddress = std::nullopt;
            }
            if (item["featureType"]) {
                dst.featureType = item["featureType"].as<decltype(dst.featureType)::value_type>();
            } else {
                //dst.featureType = std::nullopt;
            }
            if (item["specificUsage"]) {
                dst.specificUsage = item["specificUsage"].as<decltype(dst.specificUsage)::value_type>();
            } else {
                //dst.specificUsage = std::nullopt;
            }
            if (item["featureGroup"]) {
                dst.featureGroup = item["featureGroup"].as<decltype(dst.featureGroup)::value_type>();
            } else {
                //dst.featureGroup = std::nullopt;
            }
            if (item["role"]) {
                dst.role = item["role"].as<decltype(dst.role)::value_type>();
            } else {
                //dst.role = std::nullopt;
            }
            if (item["supportedFunction"]) {
                dst.supportedFunction = item["supportedFunction"].as<decltype(dst.supportedFunction)::value_type>();
            } else {
                //dst.supportedFunction = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["maxResponseDelay"]) {
                dst.maxResponseDelay = item["maxResponseDelay"].as<decltype(dst.maxResponseDelay)::value_type>();
            } else {
                //dst.maxResponseDelay = std::nullopt;
            }
        }
    } else {
        if (src["featureAddress"]) {
            dst.featureAddress = src["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
        } else {
            //dst.featureAddress = std::nullopt;
        }
        if (src["featureType"]) {
            dst.featureType = src["featureType"].as<decltype(dst.featureType)::value_type>();
        } else {
            //dst.featureType = std::nullopt;
        }
        if (src["specificUsage"]) {
            dst.specificUsage = src["specificUsage"].as<decltype(dst.specificUsage)::value_type>();
        } else {
            //dst.specificUsage = std::nullopt;
        }
        if (src["featureGroup"]) {
            dst.featureGroup = src["featureGroup"].as<decltype(dst.featureGroup)::value_type>();
        } else {
            //dst.featureGroup = std::nullopt;
        }
        if (src["role"]) {
            dst.role = src["role"].as<decltype(dst.role)::value_type>();
        } else {
            //dst.role = std::nullopt;
        }
        if (src["supportedFunction"]) {
            dst.supportedFunction = src["supportedFunction"].as<decltype(dst.supportedFunction)::value_type>();
        } else {
            //dst.supportedFunction = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["maxResponseDelay"]) {
            dst.maxResponseDelay = src["maxResponseDelay"].as<decltype(dst.maxResponseDelay)::value_type>();
        } else {
            //dst.maxResponseDelay = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementFeatureDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.featureAddress) {
        dst["featureAddress"] = *src.featureAddress;
    }
    if (src.featureType) {
        dst["featureType"] = *src.featureType;
    }
    if (src.specificUsage) {
        dst["specificUsage"] = *src.specificUsage;
    }
    if (src.featureGroup) {
        dst["featureGroup"] = *src.featureGroup;
    }
    if (src.role) {
        dst["role"] = *src.role;
    }
    if (src.supportedFunction) {
        dst["supportedFunction"] = *src.supportedFunction;
    }
    if (src.lastStateChange) {
        dst["lastStateChange"] = *src.lastStateChange;
    }
    if (src.minimumTrustLevel) {
        dst["minimumTrustLevel"] = *src.minimumTrustLevel;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.maxResponseDelay) {
        dst["maxResponseDelay"] = *src.maxResponseDelay;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["featureAddress"]) {
                dst.featureAddress = item["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
            } else {
                //dst.featureAddress = std::nullopt;
            }
            if (item["featureType"]) {
                dst.featureType = item["featureType"].as<decltype(dst.featureType)::value_type>();
            } else {
                //dst.featureType = std::nullopt;
            }
            if (item["specificUsage"]) {
                dst.specificUsage = item["specificUsage"].as<decltype(dst.specificUsage)::value_type>();
            } else {
                //dst.specificUsage = std::nullopt;
            }
            if (item["featureGroup"]) {
                dst.featureGroup = item["featureGroup"].as<decltype(dst.featureGroup)::value_type>();
            } else {
                //dst.featureGroup = std::nullopt;
            }
            if (item["role"]) {
                dst.role = item["role"].as<decltype(dst.role)::value_type>();
            } else {
                //dst.role = std::nullopt;
            }
            if (item["supportedFunction"]) {
                dst.supportedFunction = item["supportedFunction"].as<decltype(dst.supportedFunction)::value_type>();
            } else {
                //dst.supportedFunction = std::nullopt;
            }
            if (item["lastStateChange"]) {
                dst.lastStateChange = item["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
            } else {
                //dst.lastStateChange = std::nullopt;
            }
            if (item["minimumTrustLevel"]) {
                dst.minimumTrustLevel = item["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
            } else {
                //dst.minimumTrustLevel = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["maxResponseDelay"]) {
                dst.maxResponseDelay = item["maxResponseDelay"].as<decltype(dst.maxResponseDelay)::value_type>();
            } else {
                //dst.maxResponseDelay = std::nullopt;
            }
        }
    } else {
        if (src["featureAddress"]) {
            dst.featureAddress = src["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
        } else {
            //dst.featureAddress = std::nullopt;
        }
        if (src["featureType"]) {
            dst.featureType = src["featureType"].as<decltype(dst.featureType)::value_type>();
        } else {
            //dst.featureType = std::nullopt;
        }
        if (src["specificUsage"]) {
            dst.specificUsage = src["specificUsage"].as<decltype(dst.specificUsage)::value_type>();
        } else {
            //dst.specificUsage = std::nullopt;
        }
        if (src["featureGroup"]) {
            dst.featureGroup = src["featureGroup"].as<decltype(dst.featureGroup)::value_type>();
        } else {
            //dst.featureGroup = std::nullopt;
        }
        if (src["role"]) {
            dst.role = src["role"].as<decltype(dst.role)::value_type>();
        } else {
            //dst.role = std::nullopt;
        }
        if (src["supportedFunction"]) {
            dst.supportedFunction = src["supportedFunction"].as<decltype(dst.supportedFunction)::value_type>();
        } else {
            //dst.supportedFunction = std::nullopt;
        }
        if (src["lastStateChange"]) {
            dst.lastStateChange = src["lastStateChange"].as<decltype(dst.lastStateChange)::value_type>();
        } else {
            //dst.lastStateChange = std::nullopt;
        }
        if (src["minimumTrustLevel"]) {
            dst.minimumTrustLevel = src["minimumTrustLevel"].as<decltype(dst.minimumTrustLevel)::value_type>();
        } else {
            //dst.minimumTrustLevel = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["maxResponseDelay"]) {
            dst.maxResponseDelay = src["maxResponseDelay"].as<decltype(dst.maxResponseDelay)::value_type>();
        } else {
            //dst.maxResponseDelay = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementFeatureDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.networkManagementFeatureDescriptionData) {
        dst["networkManagementFeatureDescriptionData"] = *src.networkManagementFeatureDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["networkManagementFeatureDescriptionData"]) {
                dst.networkManagementFeatureDescriptionData =
                    item["networkManagementFeatureDescriptionData"].as<decltype(dst.networkManagementFeatureDescriptionData)::value_type>();
            } else {
                //dst.networkManagementFeatureDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["networkManagementFeatureDescriptionData"]) {
            dst.networkManagementFeatureDescriptionData =
                src["networkManagementFeatureDescriptionData"].as<decltype(dst.networkManagementFeatureDescriptionData)::value_type>();
        } else {
            //dst.networkManagementFeatureDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const NetworkManagementFeatureDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.featureAddress) {
        dst["featureAddress"] = *src.featureAddress;
    }
    if (src.featureType) {
        dst["featureType"] = *src.featureType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NetworkManagementFeatureDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["featureAddress"]) {
                dst.featureAddress = item["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
            } else {
                //dst.featureAddress = std::nullopt;
            }
            if (item["featureType"]) {
                dst.featureType = item["featureType"].as<decltype(dst.featureType)::value_type>();
            } else {
                //dst.featureType = std::nullopt;
            }
        }
    } else {
        if (src["featureAddress"]) {
            dst.featureAddress = src["featureAddress"].as<decltype(dst.featureAddress)::value_type>();
        } else {
            //dst.featureAddress = std::nullopt;
        }
        if (src["featureType"]) {
            dst.featureType = src["featureType"].as<decltype(dst.featureType)::value_type>();
        } else {
            //dst.featureType = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSpecificationVersionListType &src, JsonVariant &dst)
{
    if (src.specificationVersion) {
        dst["specificationVersion"] = *src.specificationVersion;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSpecificationVersionListType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersion"]) {
                dst.specificationVersion = item["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
            } else {
                //dst.specificationVersion = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersion"]) {
            dst.specificationVersion = src["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
        } else {
            //dst.specificationVersion = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDeviceInformationType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryEntityInformationType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryFeatureInformationType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryDataType &src, JsonVariant &dst)
{
    if (src.specificationVersionList) {
        dst["specificationVersionList"] = *src.specificationVersionList;
    }
    if (src.deviceInformation) {
        dst["deviceInformation"] = *src.deviceInformation;
    }
    if (src.entityInformation) {
        dst["entityInformation"] = *src.entityInformation;
    }
    if (src.featureInformation) {
        dst["featureInformation"] = *src.featureInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersionList"]) {
                dst.specificationVersionList = item["specificationVersionList"].as<decltype(dst.specificationVersionList)::value_type>();
            } else {
                //dst.specificationVersionList = std::nullopt;
            }
            if (item["deviceInformation"]) {
                dst.deviceInformation = item["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
            } else {
                //dst.deviceInformation = std::nullopt;
            }
            if (item["entityInformation"]) {
                dst.entityInformation = item["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
            } else {
                //dst.entityInformation = std::nullopt;
            }
            if (item["featureInformation"]) {
                dst.featureInformation = item["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
            } else {
                //dst.featureInformation = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersionList"]) {
            dst.specificationVersionList = src["specificationVersionList"].as<decltype(dst.specificationVersionList)::value_type>();
        } else {
            //dst.specificationVersionList = std::nullopt;
        }
        if (src["deviceInformation"]) {
            dst.deviceInformation = src["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
        } else {
            //dst.deviceInformation = std::nullopt;
        }
        if (src["entityInformation"]) {
            dst.entityInformation = src["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
        } else {
            //dst.entityInformation = std::nullopt;
        }
        if (src["featureInformation"]) {
            dst.featureInformation = src["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
        } else {
            //dst.featureInformation = std::nullopt;
        }
    }
}
bool convertToJson(const SpecificationVersionDataElementsType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, SpecificationVersionDataElementsType &dst)
{
}
bool convertToJson(const NodeManagementSpecificationVersionListElementsType &src, JsonVariant &dst)
{
    if (src.specificationVersion) {
        dst["specificationVersion"] = *src.specificationVersion;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSpecificationVersionListElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersion"]) {
                dst.specificationVersion = item["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
            } else {
                //dst.specificationVersion = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersion"]) {
            dst.specificationVersion = src["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
        } else {
            //dst.specificationVersion = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationElementsType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDeviceInformationElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationElementsType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryEntityInformationElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationElementsType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryFeatureInformationElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryDataElementsType &src, JsonVariant &dst)
{
    if (src.specificationVersionList) {
        dst["specificationVersionList"] = *src.specificationVersionList;
    }
    if (src.deviceInformation) {
        dst["deviceInformation"] = *src.deviceInformation;
    }
    if (src.entityInformation) {
        dst["entityInformation"] = *src.entityInformation;
    }
    if (src.featureInformation) {
        dst["featureInformation"] = *src.featureInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersionList"]) {
                dst.specificationVersionList = item["specificationVersionList"].as<decltype(dst.specificationVersionList)::value_type>();
            } else {
                //dst.specificationVersionList = std::nullopt;
            }
            if (item["deviceInformation"]) {
                dst.deviceInformation = item["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
            } else {
                //dst.deviceInformation = std::nullopt;
            }
            if (item["entityInformation"]) {
                dst.entityInformation = item["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
            } else {
                //dst.entityInformation = std::nullopt;
            }
            if (item["featureInformation"]) {
                dst.featureInformation = item["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
            } else {
                //dst.featureInformation = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersionList"]) {
            dst.specificationVersionList = src["specificationVersionList"].as<decltype(dst.specificationVersionList)::value_type>();
        } else {
            //dst.specificationVersionList = std::nullopt;
        }
        if (src["deviceInformation"]) {
            dst.deviceInformation = src["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
        } else {
            //dst.deviceInformation = std::nullopt;
        }
        if (src["entityInformation"]) {
            dst.entityInformation = src["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
        } else {
            //dst.entityInformation = std::nullopt;
        }
        if (src["featureInformation"]) {
            dst.featureInformation = src["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
        } else {
            //dst.featureInformation = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDetailedDiscoveryDataSelectorsType &src, JsonVariant &dst)
{
    if (src.deviceInformation) {
        dst["deviceInformation"] = *src.deviceInformation;
    }
    if (src.entityInformation) {
        dst["entityInformation"] = *src.entityInformation;
    }
    if (src.featureInformation) {
        dst["featureInformation"] = *src.featureInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDetailedDiscoveryDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceInformation"]) {
                dst.deviceInformation = item["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
            } else {
                //dst.deviceInformation = std::nullopt;
            }
            if (item["entityInformation"]) {
                dst.entityInformation = item["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
            } else {
                //dst.entityInformation = std::nullopt;
            }
            if (item["featureInformation"]) {
                dst.featureInformation = item["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
            } else {
                //dst.featureInformation = std::nullopt;
            }
        }
    } else {
        if (src["deviceInformation"]) {
            dst.deviceInformation = src["deviceInformation"].as<decltype(dst.deviceInformation)::value_type>();
        } else {
            //dst.deviceInformation = std::nullopt;
        }
        if (src["entityInformation"]) {
            dst.entityInformation = src["entityInformation"].as<decltype(dst.entityInformation)::value_type>();
        } else {
            //dst.entityInformation = std::nullopt;
        }
        if (src["featureInformation"]) {
            dst.featureInformation = src["featureInformation"].as<decltype(dst.featureInformation)::value_type>();
        } else {
            //dst.featureInformation = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingDataType &src, JsonVariant &dst)
{
    if (src.bindingEntry) {
        dst["bindingEntry"] = *src.bindingEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingEntry"]) {
                dst.bindingEntry = item["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
            } else {
                //dst.bindingEntry = std::nullopt;
            }
        }
    } else {
        if (src["bindingEntry"]) {
            dst.bindingEntry = src["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
        } else {
            //dst.bindingEntry = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingDataElementsType &src, JsonVariant &dst)
{
    if (src.bindingEntry) {
        dst["bindingEntry"] = *src.bindingEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingEntry"]) {
                dst.bindingEntry = item["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
            } else {
                //dst.bindingEntry = std::nullopt;
            }
        }
    } else {
        if (src["bindingEntry"]) {
            dst.bindingEntry = src["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
        } else {
            //dst.bindingEntry = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingDataSelectorsType &src, JsonVariant &dst)
{
    if (src.bindingEntry) {
        dst["bindingEntry"] = *src.bindingEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingEntry"]) {
                dst.bindingEntry = item["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
            } else {
                //dst.bindingEntry = std::nullopt;
            }
        }
    } else {
        if (src["bindingEntry"]) {
            dst.bindingEntry = src["bindingEntry"].as<decltype(dst.bindingEntry)::value_type>();
        } else {
            //dst.bindingEntry = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingRequestCallType &src, JsonVariant &dst)
{
    if (src.bindingRequest) {
        dst["bindingRequest"] = *src.bindingRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingRequest"]) {
                dst.bindingRequest = item["bindingRequest"].as<decltype(dst.bindingRequest)::value_type>();
            } else {
                //dst.bindingRequest = std::nullopt;
            }
        }
    } else {
        if (src["bindingRequest"]) {
            dst.bindingRequest = src["bindingRequest"].as<decltype(dst.bindingRequest)::value_type>();
        } else {
            //dst.bindingRequest = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.bindingRequest) {
        dst["bindingRequest"] = *src.bindingRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingRequest"]) {
                dst.bindingRequest = item["bindingRequest"].as<decltype(dst.bindingRequest)::value_type>();
            } else {
                //dst.bindingRequest = std::nullopt;
            }
        }
    } else {
        if (src["bindingRequest"]) {
            dst.bindingRequest = src["bindingRequest"].as<decltype(dst.bindingRequest)::value_type>();
        } else {
            //dst.bindingRequest = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingDeleteCallType &src, JsonVariant &dst)
{
    if (src.bindingDelete) {
        dst["bindingDelete"] = *src.bindingDelete;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDeleteCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingDelete"]) {
                dst.bindingDelete = item["bindingDelete"].as<decltype(dst.bindingDelete)::value_type>();
            } else {
                //dst.bindingDelete = std::nullopt;
            }
        }
    } else {
        if (src["bindingDelete"]) {
            dst.bindingDelete = src["bindingDelete"].as<decltype(dst.bindingDelete)::value_type>();
        } else {
            //dst.bindingDelete = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementBindingDeleteCallElementsType &src, JsonVariant &dst)
{
    if (src.bindingDelete) {
        dst["bindingDelete"] = *src.bindingDelete;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementBindingDeleteCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["bindingDelete"]) {
                dst.bindingDelete = item["bindingDelete"].as<decltype(dst.bindingDelete)::value_type>();
            } else {
                //dst.bindingDelete = std::nullopt;
            }
        }
    } else {
        if (src["bindingDelete"]) {
            dst.bindingDelete = src["bindingDelete"].as<decltype(dst.bindingDelete)::value_type>();
        } else {
            //dst.bindingDelete = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementEntryDataType &src, JsonVariant &dst)
{
    if (src.subscriptionId) {
        dst["subscriptionId"] = *src.subscriptionId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionId"]) {
                dst.subscriptionId = item["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
            } else {
                //dst.subscriptionId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionId"]) {
            dst.subscriptionId = src["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
        } else {
            //dst.subscriptionId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionDataType &src, JsonVariant &dst)
{
    if (src.subscriptionEntry) {
        dst["subscriptionEntry"] = *src.subscriptionEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionEntry"]) {
                dst.subscriptionEntry = item["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
            } else {
                //dst.subscriptionEntry = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionEntry"]) {
            dst.subscriptionEntry = src["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
        } else {
            //dst.subscriptionEntry = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementEntryDataElementsType &src, JsonVariant &dst)
{
    if (src.subscriptionId) {
        dst["subscriptionId"] = *src.subscriptionId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionId"]) {
                dst.subscriptionId = item["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
            } else {
                //dst.subscriptionId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionId"]) {
            dst.subscriptionId = src["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
        } else {
            //dst.subscriptionId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.subscriptionEntry) {
        dst["subscriptionEntry"] = *src.subscriptionEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionEntry"]) {
                dst.subscriptionEntry = item["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
            } else {
                //dst.subscriptionEntry = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionEntry"]) {
            dst.subscriptionEntry = src["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
        } else {
            //dst.subscriptionEntry = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementEntryListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.subscriptionId) {
        dst["subscriptionId"] = *src.subscriptionId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionId"]) {
                dst.subscriptionId = item["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
            } else {
                //dst.subscriptionId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionId"]) {
            dst.subscriptionId = src["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
        } else {
            //dst.subscriptionId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionDataSelectorsType &src, JsonVariant &dst)
{
    if (src.subscriptionEntry) {
        dst["subscriptionEntry"] = *src.subscriptionEntry;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionEntry"]) {
                dst.subscriptionEntry = item["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
            } else {
                //dst.subscriptionEntry = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionEntry"]) {
            dst.subscriptionEntry = src["subscriptionEntry"].as<decltype(dst.subscriptionEntry)::value_type>();
        } else {
            //dst.subscriptionEntry = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementRequestCallType &src, JsonVariant &dst)
{
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.serverFeatureType) {
        dst["serverFeatureType"] = *src.serverFeatureType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["serverFeatureType"]) {
                dst.serverFeatureType = item["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
            } else {
                //dst.serverFeatureType = std::nullopt;
            }
        }
    } else {
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["serverFeatureType"]) {
            dst.serverFeatureType = src["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
        } else {
            //dst.serverFeatureType = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionRequestCallType &src, JsonVariant &dst)
{
    if (src.subscriptionRequest) {
        dst["subscriptionRequest"] = *src.subscriptionRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionRequest"]) {
                dst.subscriptionRequest = item["subscriptionRequest"].as<decltype(dst.subscriptionRequest)::value_type>();
            } else {
                //dst.subscriptionRequest = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionRequest"]) {
            dst.subscriptionRequest = src["subscriptionRequest"].as<decltype(dst.subscriptionRequest)::value_type>();
        } else {
            //dst.subscriptionRequest = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }
    if (src.serverFeatureType) {
        dst["serverFeatureType"] = *src.serverFeatureType;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
            if (item["serverFeatureType"]) {
                dst.serverFeatureType = item["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
            } else {
                //dst.serverFeatureType = std::nullopt;
            }
        }
    } else {
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
        if (src["serverFeatureType"]) {
            dst.serverFeatureType = src["serverFeatureType"].as<decltype(dst.serverFeatureType)::value_type>();
        } else {
            //dst.serverFeatureType = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.subscriptionRequest) {
        dst["subscriptionRequest"] = *src.subscriptionRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionRequest"]) {
                dst.subscriptionRequest = item["subscriptionRequest"].as<decltype(dst.subscriptionRequest)::value_type>();
            } else {
                //dst.subscriptionRequest = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionRequest"]) {
            dst.subscriptionRequest = src["subscriptionRequest"].as<decltype(dst.subscriptionRequest)::value_type>();
        } else {
            //dst.subscriptionRequest = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementDeleteCallType &src, JsonVariant &dst)
{
    if (src.subscriptionId) {
        dst["subscriptionId"] = *src.subscriptionId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementDeleteCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionId"]) {
                dst.subscriptionId = item["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
            } else {
                //dst.subscriptionId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionId"]) {
            dst.subscriptionId = src["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
        } else {
            //dst.subscriptionId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionDeleteCallType &src, JsonVariant &dst)
{
    if (src.subscriptionDelete) {
        dst["subscriptionDelete"] = *src.subscriptionDelete;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDeleteCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionDelete"]) {
                dst.subscriptionDelete = item["subscriptionDelete"].as<decltype(dst.subscriptionDelete)::value_type>();
            } else {
                //dst.subscriptionDelete = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionDelete"]) {
            dst.subscriptionDelete = src["subscriptionDelete"].as<decltype(dst.subscriptionDelete)::value_type>();
        } else {
            //dst.subscriptionDelete = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementDeleteCallElementsType &src, JsonVariant &dst)
{
    if (src.subscriptionId) {
        dst["subscriptionId"] = *src.subscriptionId;
    }
    if (src.clientAddress) {
        dst["clientAddress"] = *src.clientAddress;
    }
    if (src.serverAddress) {
        dst["serverAddress"] = *src.serverAddress;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementDeleteCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionId"]) {
                dst.subscriptionId = item["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
            } else {
                //dst.subscriptionId = std::nullopt;
            }
            if (item["clientAddress"]) {
                dst.clientAddress = item["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
            } else {
                //dst.clientAddress = std::nullopt;
            }
            if (item["serverAddress"]) {
                dst.serverAddress = item["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
            } else {
                //dst.serverAddress = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionId"]) {
            dst.subscriptionId = src["subscriptionId"].as<decltype(dst.subscriptionId)::value_type>();
        } else {
            //dst.subscriptionId = std::nullopt;
        }
        if (src["clientAddress"]) {
            dst.clientAddress = src["clientAddress"].as<decltype(dst.clientAddress)::value_type>();
        } else {
            //dst.clientAddress = std::nullopt;
        }
        if (src["serverAddress"]) {
            dst.serverAddress = src["serverAddress"].as<decltype(dst.serverAddress)::value_type>();
        } else {
            //dst.serverAddress = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementSubscriptionDeleteCallElementsType &src, JsonVariant &dst)
{
    if (src.subscriptionDelete) {
        dst["subscriptionDelete"] = *src.subscriptionDelete;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementSubscriptionDeleteCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionDelete"]) {
                dst.subscriptionDelete = item["subscriptionDelete"].as<decltype(dst.subscriptionDelete)::value_type>();
            } else {
                //dst.subscriptionDelete = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionDelete"]) {
            dst.subscriptionDelete = src["subscriptionDelete"].as<decltype(dst.subscriptionDelete)::value_type>();
        } else {
            //dst.subscriptionDelete = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDestinationDataType &src, JsonVariant &dst)
{
    if (src.deviceDescription) {
        dst["deviceDescription"] = *src.deviceDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceDescription"]) {
                dst.deviceDescription = item["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
            } else {
                //dst.deviceDescription = std::nullopt;
            }
        }
    } else {
        if (src["deviceDescription"]) {
            dst.deviceDescription = src["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
        } else {
            //dst.deviceDescription = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDestinationDataElementsType &src, JsonVariant &dst)
{
    if (src.deviceDescription) {
        dst["deviceDescription"] = *src.deviceDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceDescription"]) {
                dst.deviceDescription = item["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
            } else {
                //dst.deviceDescription = std::nullopt;
            }
        }
    } else {
        if (src["deviceDescription"]) {
            dst.deviceDescription = src["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
        } else {
            //dst.deviceDescription = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDestinationListDataType &src, JsonVariant &dst)
{
    if (src.nodeManagementDestinationData) {
        dst["nodeManagementDestinationData"] = *src.nodeManagementDestinationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeManagementDestinationData"]) {
                dst.nodeManagementDestinationData =
                    item["nodeManagementDestinationData"].as<decltype(dst.nodeManagementDestinationData)::value_type>();
            } else {
                //dst.nodeManagementDestinationData = std::nullopt;
            }
        }
    } else {
        if (src["nodeManagementDestinationData"]) {
            dst.nodeManagementDestinationData =
                src["nodeManagementDestinationData"].as<decltype(dst.nodeManagementDestinationData)::value_type>();
        } else {
            //dst.nodeManagementDestinationData = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementDestinationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.deviceDescription) {
        dst["deviceDescription"] = *src.deviceDescription;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementDestinationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["deviceDescription"]) {
                dst.deviceDescription = item["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
            } else {
                //dst.deviceDescription = std::nullopt;
            }
        }
    } else {
        if (src["deviceDescription"]) {
            dst.deviceDescription = src["deviceDescription"].as<decltype(dst.deviceDescription)::value_type>();
        } else {
            //dst.deviceDescription = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseSupportType &src, JsonVariant &dst)
{
    if (src.useCaseName) {
        dst["useCaseName"] = *src.useCaseName;
    }
    if (src.useCaseVersion) {
        dst["useCaseVersion"] = *src.useCaseVersion;
    }
    if (src.useCaseAvailable) {
        dst["useCaseAvailable"] = *src.useCaseAvailable;
    }
    if (src.scenarioSupport) {
        dst["scenarioSupport"] = *src.scenarioSupport;
    }
    if (src.useCaseDocumentSubRevision) {
        dst["useCaseDocumentSubRevision"] = *src.useCaseDocumentSubRevision;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseSupportType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseName"]) {
                dst.useCaseName = item["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
            } else {
                //dst.useCaseName = std::nullopt;
            }
            if (item["useCaseVersion"]) {
                dst.useCaseVersion = item["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
            } else {
                //dst.useCaseVersion = std::nullopt;
            }
            if (item["useCaseAvailable"]) {
                dst.useCaseAvailable = item["useCaseAvailable"].as<decltype(dst.useCaseAvailable)::value_type>();
            } else {
                //dst.useCaseAvailable = std::nullopt;
            }
            if (item["scenarioSupport"]) {
                dst.scenarioSupport = item["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
            } else {
                //dst.scenarioSupport = std::nullopt;
            }
            if (item["useCaseDocumentSubRevision"]) {
                dst.useCaseDocumentSubRevision =
                    item["useCaseDocumentSubRevision"].as<decltype(dst.useCaseDocumentSubRevision)::value_type>();
            } else {
                //dst.useCaseDocumentSubRevision = std::nullopt;
            }
        }
    } else {
        if (src["useCaseName"]) {
            dst.useCaseName = src["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
        } else {
            //dst.useCaseName = std::nullopt;
        }
        if (src["useCaseVersion"]) {
            dst.useCaseVersion = src["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
        } else {
            //dst.useCaseVersion = std::nullopt;
        }
        if (src["useCaseAvailable"]) {
            dst.useCaseAvailable = src["useCaseAvailable"].as<decltype(dst.useCaseAvailable)::value_type>();
        } else {
            //dst.useCaseAvailable = std::nullopt;
        }
        if (src["scenarioSupport"]) {
            dst.scenarioSupport = src["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
        } else {
            //dst.scenarioSupport = std::nullopt;
        }
        if (src["useCaseDocumentSubRevision"]) {
            dst.useCaseDocumentSubRevision = src["useCaseDocumentSubRevision"].as<decltype(dst.useCaseDocumentSubRevision)::value_type>();
        } else {
            //dst.useCaseDocumentSubRevision = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseInformationDataType &src, JsonVariant &dst)
{
    if (src.address) {
        dst["address"] = *src.address;
    }
    if (src.actor) {
        dst["actor"] = *src.actor;
    }
    if (src.useCaseSupport) {
        dst["useCaseSupport"] = *src.useCaseSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseInformationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["address"]) {
                dst.address = item["address"].as<decltype(dst.address)::value_type>();
            } else {
                //dst.address = std::nullopt;
            }
            if (item["actor"]) {
                dst.actor = item["actor"].as<decltype(dst.actor)::value_type>();
            } else {
                //dst.actor = std::nullopt;
            }
            if (item["useCaseSupport"]) {
                dst.useCaseSupport = item["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
            } else {
                //dst.useCaseSupport = std::nullopt;
            }
        }
    } else {
        if (src["address"]) {
            dst.address = src["address"].as<decltype(dst.address)::value_type>();
        } else {
            //dst.address = std::nullopt;
        }
        if (src["actor"]) {
            dst.actor = src["actor"].as<decltype(dst.actor)::value_type>();
        } else {
            //dst.actor = std::nullopt;
        }
        if (src["useCaseSupport"]) {
            dst.useCaseSupport = src["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
        } else {
            //dst.useCaseSupport = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementUseCaseDataType &src, JsonVariant &dst)
{
    if (src.useCaseInformation) {
        dst["useCaseInformation"] = *src.useCaseInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseInformation"]) {
                dst.useCaseInformation = item["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
            } else {
                //dst.useCaseInformation = std::nullopt;
            }
        }
    } else {
        if (src["useCaseInformation"]) {
            dst.useCaseInformation = src["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
        } else {
            //dst.useCaseInformation = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseSupportElementsType &src, JsonVariant &dst)
{
    if (src.useCaseName) {
        dst["useCaseName"] = *src.useCaseName;
    }
    if (src.useCaseVersion) {
        dst["useCaseVersion"] = *src.useCaseVersion;
    }
    if (src.useCaseAvailable) {
        dst["useCaseAvailable"] = *src.useCaseAvailable;
    }
    if (src.scenarioSupport) {
        dst["scenarioSupport"] = *src.scenarioSupport;
    }
    if (src.useCaseDocumentSubRevision) {
        dst["useCaseDocumentSubRevision"] = *src.useCaseDocumentSubRevision;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseSupportElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseName"]) {
                dst.useCaseName = item["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
            } else {
                //dst.useCaseName = std::nullopt;
            }
            if (item["useCaseVersion"]) {
                dst.useCaseVersion = item["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
            } else {
                //dst.useCaseVersion = std::nullopt;
            }
            if (item["useCaseAvailable"]) {
                dst.useCaseAvailable = item["useCaseAvailable"].as<decltype(dst.useCaseAvailable)::value_type>();
            } else {
                //dst.useCaseAvailable = std::nullopt;
            }
            if (item["scenarioSupport"]) {
                dst.scenarioSupport = item["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
            } else {
                //dst.scenarioSupport = std::nullopt;
            }
            if (item["useCaseDocumentSubRevision"]) {
                dst.useCaseDocumentSubRevision =
                    item["useCaseDocumentSubRevision"].as<decltype(dst.useCaseDocumentSubRevision)::value_type>();
            } else {
                //dst.useCaseDocumentSubRevision = std::nullopt;
            }
        }
    } else {
        if (src["useCaseName"]) {
            dst.useCaseName = src["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
        } else {
            //dst.useCaseName = std::nullopt;
        }
        if (src["useCaseVersion"]) {
            dst.useCaseVersion = src["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
        } else {
            //dst.useCaseVersion = std::nullopt;
        }
        if (src["useCaseAvailable"]) {
            dst.useCaseAvailable = src["useCaseAvailable"].as<decltype(dst.useCaseAvailable)::value_type>();
        } else {
            //dst.useCaseAvailable = std::nullopt;
        }
        if (src["scenarioSupport"]) {
            dst.scenarioSupport = src["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
        } else {
            //dst.scenarioSupport = std::nullopt;
        }
        if (src["useCaseDocumentSubRevision"]) {
            dst.useCaseDocumentSubRevision = src["useCaseDocumentSubRevision"].as<decltype(dst.useCaseDocumentSubRevision)::value_type>();
        } else {
            //dst.useCaseDocumentSubRevision = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseInformationDataElementsType &src, JsonVariant &dst)
{
    if (src.address) {
        dst["address"] = *src.address;
    }
    if (src.actor) {
        dst["actor"] = *src.actor;
    }
    if (src.useCaseSupport) {
        dst["useCaseSupport"] = *src.useCaseSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseInformationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["address"]) {
                dst.address = item["address"].as<decltype(dst.address)::value_type>();
            } else {
                //dst.address = std::nullopt;
            }
            if (item["actor"]) {
                dst.actor = item["actor"].as<decltype(dst.actor)::value_type>();
            } else {
                //dst.actor = std::nullopt;
            }
            if (item["useCaseSupport"]) {
                dst.useCaseSupport = item["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
            } else {
                //dst.useCaseSupport = std::nullopt;
            }
        }
    } else {
        if (src["address"]) {
            dst.address = src["address"].as<decltype(dst.address)::value_type>();
        } else {
            //dst.address = std::nullopt;
        }
        if (src["actor"]) {
            dst.actor = src["actor"].as<decltype(dst.actor)::value_type>();
        } else {
            //dst.actor = std::nullopt;
        }
        if (src["useCaseSupport"]) {
            dst.useCaseSupport = src["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
        } else {
            //dst.useCaseSupport = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementUseCaseDataElementsType &src, JsonVariant &dst)
{
    if (src.useCaseInformation) {
        dst["useCaseInformation"] = *src.useCaseInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseInformation"]) {
                dst.useCaseInformation = item["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
            } else {
                //dst.useCaseInformation = std::nullopt;
            }
        }
    } else {
        if (src["useCaseInformation"]) {
            dst.useCaseInformation = src["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
        } else {
            //dst.useCaseInformation = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseSupportSelectorsType &src, JsonVariant &dst)
{
    if (src.useCaseName) {
        dst["useCaseName"] = *src.useCaseName;
    }
    if (src.useCaseVersion) {
        dst["useCaseVersion"] = *src.useCaseVersion;
    }
    if (src.scenarioSupport) {
        dst["scenarioSupport"] = *src.scenarioSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseSupportSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseName"]) {
                dst.useCaseName = item["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
            } else {
                //dst.useCaseName = std::nullopt;
            }
            if (item["useCaseVersion"]) {
                dst.useCaseVersion = item["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
            } else {
                //dst.useCaseVersion = std::nullopt;
            }
            if (item["scenarioSupport"]) {
                dst.scenarioSupport = item["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
            } else {
                //dst.scenarioSupport = std::nullopt;
            }
        }
    } else {
        if (src["useCaseName"]) {
            dst.useCaseName = src["useCaseName"].as<decltype(dst.useCaseName)::value_type>();
        } else {
            //dst.useCaseName = std::nullopt;
        }
        if (src["useCaseVersion"]) {
            dst.useCaseVersion = src["useCaseVersion"].as<decltype(dst.useCaseVersion)::value_type>();
        } else {
            //dst.useCaseVersion = std::nullopt;
        }
        if (src["scenarioSupport"]) {
            dst.scenarioSupport = src["scenarioSupport"].as<decltype(dst.scenarioSupport)::value_type>();
        } else {
            //dst.scenarioSupport = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseInformationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.address) {
        dst["address"] = *src.address;
    }
    if (src.actor) {
        dst["actor"] = *src.actor;
    }
    if (src.useCaseSupport) {
        dst["useCaseSupport"] = *src.useCaseSupport;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseInformationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["address"]) {
                dst.address = item["address"].as<decltype(dst.address)::value_type>();
            } else {
                //dst.address = std::nullopt;
            }
            if (item["actor"]) {
                dst.actor = item["actor"].as<decltype(dst.actor)::value_type>();
            } else {
                //dst.actor = std::nullopt;
            }
            if (item["useCaseSupport"]) {
                dst.useCaseSupport = item["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
            } else {
                //dst.useCaseSupport = std::nullopt;
            }
        }
    } else {
        if (src["address"]) {
            dst.address = src["address"].as<decltype(dst.address)::value_type>();
        } else {
            //dst.address = std::nullopt;
        }
        if (src["actor"]) {
            dst.actor = src["actor"].as<decltype(dst.actor)::value_type>();
        } else {
            //dst.actor = std::nullopt;
        }
        if (src["useCaseSupport"]) {
            dst.useCaseSupport = src["useCaseSupport"].as<decltype(dst.useCaseSupport)::value_type>();
        } else {
            //dst.useCaseSupport = std::nullopt;
        }
    }
}
bool convertToJson(const NodeManagementUseCaseDataSelectorsType &src, JsonVariant &dst)
{
    if (src.useCaseInformation) {
        dst["useCaseInformation"] = *src.useCaseInformation;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, NodeManagementUseCaseDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseInformation"]) {
                dst.useCaseInformation = item["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
            } else {
                //dst.useCaseInformation = std::nullopt;
            }
        }
    } else {
        if (src["useCaseInformation"]) {
            dst.useCaseInformation = src["useCaseInformation"].as<decltype(dst.useCaseInformation)::value_type>();
        } else {
            //dst.useCaseInformation = std::nullopt;
        }
    }
}
bool convertToJson(const SubscriptionManagementEntryListDataType &src, JsonVariant &dst)
{
    if (src.subscriptionManagementEntryData) {
        dst["subscriptionManagementEntryData"] = *src.subscriptionManagementEntryData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SubscriptionManagementEntryListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["subscriptionManagementEntryData"]) {
                dst.subscriptionManagementEntryData =
                    item["subscriptionManagementEntryData"].as<decltype(dst.subscriptionManagementEntryData)::value_type>();
            } else {
                //dst.subscriptionManagementEntryData = std::nullopt;
            }
        }
    } else {
        if (src["subscriptionManagementEntryData"]) {
            dst.subscriptionManagementEntryData =
                src["subscriptionManagementEntryData"].as<decltype(dst.subscriptionManagementEntryData)::value_type>();
        } else {
            //dst.subscriptionManagementEntryData = std::nullopt;
        }
    }
}
bool convertToJson(const UseCaseInformationListDataType &src, JsonVariant &dst)
{
    if (src.useCaseInformationData) {
        dst["useCaseInformationData"] = *src.useCaseInformationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, UseCaseInformationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["useCaseInformationData"]) {
                dst.useCaseInformationData = item["useCaseInformationData"].as<decltype(dst.useCaseInformationData)::value_type>();
            } else {
                //dst.useCaseInformationData = std::nullopt;
            }
        }
    } else {
        if (src["useCaseInformationData"]) {
            dst.useCaseInformationData = src["useCaseInformationData"].as<decltype(dst.useCaseInformationData)::value_type>();
        } else {
            //dst.useCaseInformationData = std::nullopt;
        }
    }
}
bool convertToJson(const SpecificationVersionListDataType &src, JsonVariant &dst)
{
    if (src.specificationVersionData) {
        dst["specificationVersionData"] = *src.specificationVersionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SpecificationVersionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersionData"]) {
                dst.specificationVersionData = item["specificationVersionData"].as<decltype(dst.specificationVersionData)::value_type>();
            } else {
                //dst.specificationVersionData = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersionData"]) {
            dst.specificationVersionData = src["specificationVersionData"].as<decltype(dst.specificationVersionData)::value_type>();
        } else {
            //dst.specificationVersionData = std::nullopt;
        }
    }
}
bool convertToJson(const SpecificationVersionListDataSelectorsType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, SpecificationVersionListDataSelectorsType &dst)
{
}
bool convertToJson(const OperatingConstraintsInterruptDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.isPausable) {
        dst["isPausable"] = *src.isPausable;
    }
    if (src.isStoppable) {
        dst["isStoppable"] = *src.isStoppable;
    }
    if (src.notInterruptibleAtHighPower) {
        dst["notInterruptibleAtHighPower"] = *src.notInterruptibleAtHighPower;
    }
    if (src.maxCyclesPerDay) {
        dst["maxCyclesPerDay"] = *src.maxCyclesPerDay;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["isPausable"]) {
                dst.isPausable = item["isPausable"].as<decltype(dst.isPausable)::value_type>();
            } else {
                //dst.isPausable = std::nullopt;
            }
            if (item["isStoppable"]) {
                dst.isStoppable = item["isStoppable"].as<decltype(dst.isStoppable)::value_type>();
            } else {
                //dst.isStoppable = std::nullopt;
            }
            if (item["notInterruptibleAtHighPower"]) {
                dst.notInterruptibleAtHighPower =
                    item["notInterruptibleAtHighPower"].as<decltype(dst.notInterruptibleAtHighPower)::value_type>();
            } else {
                //dst.notInterruptibleAtHighPower = std::nullopt;
            }
            if (item["maxCyclesPerDay"]) {
                dst.maxCyclesPerDay = item["maxCyclesPerDay"].as<decltype(dst.maxCyclesPerDay)::value_type>();
            } else {
                //dst.maxCyclesPerDay = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["isPausable"]) {
            dst.isPausable = src["isPausable"].as<decltype(dst.isPausable)::value_type>();
        } else {
            //dst.isPausable = std::nullopt;
        }
        if (src["isStoppable"]) {
            dst.isStoppable = src["isStoppable"].as<decltype(dst.isStoppable)::value_type>();
        } else {
            //dst.isStoppable = std::nullopt;
        }
        if (src["notInterruptibleAtHighPower"]) {
            dst.notInterruptibleAtHighPower =
                src["notInterruptibleAtHighPower"].as<decltype(dst.notInterruptibleAtHighPower)::value_type>();
        } else {
            //dst.notInterruptibleAtHighPower = std::nullopt;
        }
        if (src["maxCyclesPerDay"]) {
            dst.maxCyclesPerDay = src["maxCyclesPerDay"].as<decltype(dst.maxCyclesPerDay)::value_type>();
        } else {
            //dst.maxCyclesPerDay = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsInterruptDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.isPausable) {
        dst["isPausable"] = *src.isPausable;
    }
    if (src.isStoppable) {
        dst["isStoppable"] = *src.isStoppable;
    }
    if (src.notInterruptibleAtHighPower) {
        dst["notInterruptibleAtHighPower"] = *src.notInterruptibleAtHighPower;
    }
    if (src.maxCyclesPerDay) {
        dst["maxCyclesPerDay"] = *src.maxCyclesPerDay;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["isPausable"]) {
                dst.isPausable = item["isPausable"].as<decltype(dst.isPausable)::value_type>();
            } else {
                //dst.isPausable = std::nullopt;
            }
            if (item["isStoppable"]) {
                dst.isStoppable = item["isStoppable"].as<decltype(dst.isStoppable)::value_type>();
            } else {
                //dst.isStoppable = std::nullopt;
            }
            if (item["notInterruptibleAtHighPower"]) {
                dst.notInterruptibleAtHighPower =
                    item["notInterruptibleAtHighPower"].as<decltype(dst.notInterruptibleAtHighPower)::value_type>();
            } else {
                //dst.notInterruptibleAtHighPower = std::nullopt;
            }
            if (item["maxCyclesPerDay"]) {
                dst.maxCyclesPerDay = item["maxCyclesPerDay"].as<decltype(dst.maxCyclesPerDay)::value_type>();
            } else {
                //dst.maxCyclesPerDay = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["isPausable"]) {
            dst.isPausable = src["isPausable"].as<decltype(dst.isPausable)::value_type>();
        } else {
            //dst.isPausable = std::nullopt;
        }
        if (src["isStoppable"]) {
            dst.isStoppable = src["isStoppable"].as<decltype(dst.isStoppable)::value_type>();
        } else {
            //dst.isStoppable = std::nullopt;
        }
        if (src["notInterruptibleAtHighPower"]) {
            dst.notInterruptibleAtHighPower =
                src["notInterruptibleAtHighPower"].as<decltype(dst.notInterruptibleAtHighPower)::value_type>();
        } else {
            //dst.notInterruptibleAtHighPower = std::nullopt;
        }
        if (src["maxCyclesPerDay"]) {
            dst.maxCyclesPerDay = src["maxCyclesPerDay"].as<decltype(dst.maxCyclesPerDay)::value_type>();
        } else {
            //dst.maxCyclesPerDay = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsInterruptListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsInterruptData) {
        dst["operatingConstraintsInterruptData"] = *src.operatingConstraintsInterruptData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsInterruptData"]) {
                dst.operatingConstraintsInterruptData =
                    item["operatingConstraintsInterruptData"].as<decltype(dst.operatingConstraintsInterruptData)::value_type>();
            } else {
                //dst.operatingConstraintsInterruptData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsInterruptData"]) {
            dst.operatingConstraintsInterruptData =
                src["operatingConstraintsInterruptData"].as<decltype(dst.operatingConstraintsInterruptData)::value_type>();
        } else {
            //dst.operatingConstraintsInterruptData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsInterruptListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsInterruptListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsDurationDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.activeDurationMin) {
        dst["activeDurationMin"] = *src.activeDurationMin;
    }
    if (src.activeDurationMax) {
        dst["activeDurationMax"] = *src.activeDurationMax;
    }
    if (src.pauseDurationMin) {
        dst["pauseDurationMin"] = *src.pauseDurationMin;
    }
    if (src.pauseDurationMax) {
        dst["pauseDurationMax"] = *src.pauseDurationMax;
    }
    if (src.activeDurationSumMin) {
        dst["activeDurationSumMin"] = *src.activeDurationSumMin;
    }
    if (src.activeDurationSumMax) {
        dst["activeDurationSumMax"] = *src.activeDurationSumMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["activeDurationMin"]) {
                dst.activeDurationMin = item["activeDurationMin"].as<decltype(dst.activeDurationMin)::value_type>();
            } else {
                //dst.activeDurationMin = std::nullopt;
            }
            if (item["activeDurationMax"]) {
                dst.activeDurationMax = item["activeDurationMax"].as<decltype(dst.activeDurationMax)::value_type>();
            } else {
                //dst.activeDurationMax = std::nullopt;
            }
            if (item["pauseDurationMin"]) {
                dst.pauseDurationMin = item["pauseDurationMin"].as<decltype(dst.pauseDurationMin)::value_type>();
            } else {
                //dst.pauseDurationMin = std::nullopt;
            }
            if (item["pauseDurationMax"]) {
                dst.pauseDurationMax = item["pauseDurationMax"].as<decltype(dst.pauseDurationMax)::value_type>();
            } else {
                //dst.pauseDurationMax = std::nullopt;
            }
            if (item["activeDurationSumMin"]) {
                dst.activeDurationSumMin = item["activeDurationSumMin"].as<decltype(dst.activeDurationSumMin)::value_type>();
            } else {
                //dst.activeDurationSumMin = std::nullopt;
            }
            if (item["activeDurationSumMax"]) {
                dst.activeDurationSumMax = item["activeDurationSumMax"].as<decltype(dst.activeDurationSumMax)::value_type>();
            } else {
                //dst.activeDurationSumMax = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["activeDurationMin"]) {
            dst.activeDurationMin = src["activeDurationMin"].as<decltype(dst.activeDurationMin)::value_type>();
        } else {
            //dst.activeDurationMin = std::nullopt;
        }
        if (src["activeDurationMax"]) {
            dst.activeDurationMax = src["activeDurationMax"].as<decltype(dst.activeDurationMax)::value_type>();
        } else {
            //dst.activeDurationMax = std::nullopt;
        }
        if (src["pauseDurationMin"]) {
            dst.pauseDurationMin = src["pauseDurationMin"].as<decltype(dst.pauseDurationMin)::value_type>();
        } else {
            //dst.pauseDurationMin = std::nullopt;
        }
        if (src["pauseDurationMax"]) {
            dst.pauseDurationMax = src["pauseDurationMax"].as<decltype(dst.pauseDurationMax)::value_type>();
        } else {
            //dst.pauseDurationMax = std::nullopt;
        }
        if (src["activeDurationSumMin"]) {
            dst.activeDurationSumMin = src["activeDurationSumMin"].as<decltype(dst.activeDurationSumMin)::value_type>();
        } else {
            //dst.activeDurationSumMin = std::nullopt;
        }
        if (src["activeDurationSumMax"]) {
            dst.activeDurationSumMax = src["activeDurationSumMax"].as<decltype(dst.activeDurationSumMax)::value_type>();
        } else {
            //dst.activeDurationSumMax = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsDurationDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.activeDurationMin) {
        dst["activeDurationMin"] = *src.activeDurationMin;
    }
    if (src.activeDurationMax) {
        dst["activeDurationMax"] = *src.activeDurationMax;
    }
    if (src.pauseDurationMin) {
        dst["pauseDurationMin"] = *src.pauseDurationMin;
    }
    if (src.pauseDurationMax) {
        dst["pauseDurationMax"] = *src.pauseDurationMax;
    }
    if (src.activeDurationSumMin) {
        dst["activeDurationSumMin"] = *src.activeDurationSumMin;
    }
    if (src.activeDurationSumMax) {
        dst["activeDurationSumMax"] = *src.activeDurationSumMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["activeDurationMin"]) {
                dst.activeDurationMin = item["activeDurationMin"].as<decltype(dst.activeDurationMin)::value_type>();
            } else {
                //dst.activeDurationMin = std::nullopt;
            }
            if (item["activeDurationMax"]) {
                dst.activeDurationMax = item["activeDurationMax"].as<decltype(dst.activeDurationMax)::value_type>();
            } else {
                //dst.activeDurationMax = std::nullopt;
            }
            if (item["pauseDurationMin"]) {
                dst.pauseDurationMin = item["pauseDurationMin"].as<decltype(dst.pauseDurationMin)::value_type>();
            } else {
                //dst.pauseDurationMin = std::nullopt;
            }
            if (item["pauseDurationMax"]) {
                dst.pauseDurationMax = item["pauseDurationMax"].as<decltype(dst.pauseDurationMax)::value_type>();
            } else {
                //dst.pauseDurationMax = std::nullopt;
            }
            if (item["activeDurationSumMin"]) {
                dst.activeDurationSumMin = item["activeDurationSumMin"].as<decltype(dst.activeDurationSumMin)::value_type>();
            } else {
                //dst.activeDurationSumMin = std::nullopt;
            }
            if (item["activeDurationSumMax"]) {
                dst.activeDurationSumMax = item["activeDurationSumMax"].as<decltype(dst.activeDurationSumMax)::value_type>();
            } else {
                //dst.activeDurationSumMax = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["activeDurationMin"]) {
            dst.activeDurationMin = src["activeDurationMin"].as<decltype(dst.activeDurationMin)::value_type>();
        } else {
            //dst.activeDurationMin = std::nullopt;
        }
        if (src["activeDurationMax"]) {
            dst.activeDurationMax = src["activeDurationMax"].as<decltype(dst.activeDurationMax)::value_type>();
        } else {
            //dst.activeDurationMax = std::nullopt;
        }
        if (src["pauseDurationMin"]) {
            dst.pauseDurationMin = src["pauseDurationMin"].as<decltype(dst.pauseDurationMin)::value_type>();
        } else {
            //dst.pauseDurationMin = std::nullopt;
        }
        if (src["pauseDurationMax"]) {
            dst.pauseDurationMax = src["pauseDurationMax"].as<decltype(dst.pauseDurationMax)::value_type>();
        } else {
            //dst.pauseDurationMax = std::nullopt;
        }
        if (src["activeDurationSumMin"]) {
            dst.activeDurationSumMin = src["activeDurationSumMin"].as<decltype(dst.activeDurationSumMin)::value_type>();
        } else {
            //dst.activeDurationSumMin = std::nullopt;
        }
        if (src["activeDurationSumMax"]) {
            dst.activeDurationSumMax = src["activeDurationSumMax"].as<decltype(dst.activeDurationSumMax)::value_type>();
        } else {
            //dst.activeDurationSumMax = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsDurationListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsDurationData) {
        dst["operatingConstraintsDurationData"] = *src.operatingConstraintsDurationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsDurationData"]) {
                dst.operatingConstraintsDurationData =
                    item["operatingConstraintsDurationData"].as<decltype(dst.operatingConstraintsDurationData)::value_type>();
            } else {
                //dst.operatingConstraintsDurationData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsDurationData"]) {
            dst.operatingConstraintsDurationData =
                src["operatingConstraintsDurationData"].as<decltype(dst.operatingConstraintsDurationData)::value_type>();
        } else {
            //dst.operatingConstraintsDurationData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsDurationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsDurationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerDescriptionDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.powerUnit) {
        dst["powerUnit"] = *src.powerUnit;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["powerUnit"]) {
                dst.powerUnit = item["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
            } else {
                //dst.powerUnit = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["powerUnit"]) {
            dst.powerUnit = src["powerUnit"].as<decltype(dst.powerUnit)::value_type>();
        } else {
            //dst.powerUnit = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsPowerDescriptionData) {
        dst["operatingConstraintsPowerDescriptionData"] = *src.operatingConstraintsPowerDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsPowerDescriptionData"]) {
                dst.operatingConstraintsPowerDescriptionData =
                    item["operatingConstraintsPowerDescriptionData"]
                        .as<decltype(dst.operatingConstraintsPowerDescriptionData)::value_type>();
            } else {
                //dst.operatingConstraintsPowerDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsPowerDescriptionData"]) {
            dst.operatingConstraintsPowerDescriptionData =
                src["operatingConstraintsPowerDescriptionData"].as<decltype(dst.operatingConstraintsPowerDescriptionData)::value_type>();
        } else {
            //dst.operatingConstraintsPowerDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerRangeDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.powerMin) {
        dst["powerMin"] = *src.powerMin;
    }
    if (src.powerMax) {
        dst["powerMax"] = *src.powerMax;
    }
    if (src.energyMin) {
        dst["energyMin"] = *src.energyMin;
    }
    if (src.energyMax) {
        dst["energyMax"] = *src.energyMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["powerMin"]) {
                dst.powerMin = item["powerMin"].as<decltype(dst.powerMin)::value_type>();
            } else {
                //dst.powerMin = std::nullopt;
            }
            if (item["powerMax"]) {
                dst.powerMax = item["powerMax"].as<decltype(dst.powerMax)::value_type>();
            } else {
                //dst.powerMax = std::nullopt;
            }
            if (item["energyMin"]) {
                dst.energyMin = item["energyMin"].as<decltype(dst.energyMin)::value_type>();
            } else {
                //dst.energyMin = std::nullopt;
            }
            if (item["energyMax"]) {
                dst.energyMax = item["energyMax"].as<decltype(dst.energyMax)::value_type>();
            } else {
                //dst.energyMax = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["powerMin"]) {
            dst.powerMin = src["powerMin"].as<decltype(dst.powerMin)::value_type>();
        } else {
            //dst.powerMin = std::nullopt;
        }
        if (src["powerMax"]) {
            dst.powerMax = src["powerMax"].as<decltype(dst.powerMax)::value_type>();
        } else {
            //dst.powerMax = std::nullopt;
        }
        if (src["energyMin"]) {
            dst.energyMin = src["energyMin"].as<decltype(dst.energyMin)::value_type>();
        } else {
            //dst.energyMin = std::nullopt;
        }
        if (src["energyMax"]) {
            dst.energyMax = src["energyMax"].as<decltype(dst.energyMax)::value_type>();
        } else {
            //dst.energyMax = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerRangeDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.powerMin) {
        dst["powerMin"] = *src.powerMin;
    }
    if (src.powerMax) {
        dst["powerMax"] = *src.powerMax;
    }
    if (src.energyMin) {
        dst["energyMin"] = *src.energyMin;
    }
    if (src.energyMax) {
        dst["energyMax"] = *src.energyMax;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["powerMin"]) {
                dst.powerMin = item["powerMin"].as<decltype(dst.powerMin)::value_type>();
            } else {
                //dst.powerMin = std::nullopt;
            }
            if (item["powerMax"]) {
                dst.powerMax = item["powerMax"].as<decltype(dst.powerMax)::value_type>();
            } else {
                //dst.powerMax = std::nullopt;
            }
            if (item["energyMin"]) {
                dst.energyMin = item["energyMin"].as<decltype(dst.energyMin)::value_type>();
            } else {
                //dst.energyMin = std::nullopt;
            }
            if (item["energyMax"]) {
                dst.energyMax = item["energyMax"].as<decltype(dst.energyMax)::value_type>();
            } else {
                //dst.energyMax = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["powerMin"]) {
            dst.powerMin = src["powerMin"].as<decltype(dst.powerMin)::value_type>();
        } else {
            //dst.powerMin = std::nullopt;
        }
        if (src["powerMax"]) {
            dst.powerMax = src["powerMax"].as<decltype(dst.powerMax)::value_type>();
        } else {
            //dst.powerMax = std::nullopt;
        }
        if (src["energyMin"]) {
            dst.energyMin = src["energyMin"].as<decltype(dst.energyMin)::value_type>();
        } else {
            //dst.energyMin = std::nullopt;
        }
        if (src["energyMax"]) {
            dst.energyMax = src["energyMax"].as<decltype(dst.energyMax)::value_type>();
        } else {
            //dst.energyMax = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerRangeListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsPowerRangeData) {
        dst["operatingConstraintsPowerRangeData"] = *src.operatingConstraintsPowerRangeData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsPowerRangeData"]) {
                dst.operatingConstraintsPowerRangeData =
                    item["operatingConstraintsPowerRangeData"].as<decltype(dst.operatingConstraintsPowerRangeData)::value_type>();
            } else {
                //dst.operatingConstraintsPowerRangeData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsPowerRangeData"]) {
            dst.operatingConstraintsPowerRangeData =
                src["operatingConstraintsPowerRangeData"].as<decltype(dst.operatingConstraintsPowerRangeData)::value_type>();
        } else {
            //dst.operatingConstraintsPowerRangeData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerRangeListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerRangeListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerLevelDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.power) {
        dst["power"] = *src.power;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["power"]) {
                dst.power = item["power"].as<decltype(dst.power)::value_type>();
            } else {
                //dst.power = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["power"]) {
            dst.power = src["power"].as<decltype(dst.power)::value_type>();
        } else {
            //dst.power = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerLevelDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.power) {
        dst["power"] = *src.power;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["power"]) {
                dst.power = item["power"].as<decltype(dst.power)::value_type>();
            } else {
                //dst.power = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["power"]) {
            dst.power = src["power"].as<decltype(dst.power)::value_type>();
        } else {
            //dst.power = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerLevelListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsPowerLevelData) {
        dst["operatingConstraintsPowerLevelData"] = *src.operatingConstraintsPowerLevelData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsPowerLevelData"]) {
                dst.operatingConstraintsPowerLevelData =
                    item["operatingConstraintsPowerLevelData"].as<decltype(dst.operatingConstraintsPowerLevelData)::value_type>();
            } else {
                //dst.operatingConstraintsPowerLevelData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsPowerLevelData"]) {
            dst.operatingConstraintsPowerLevelData =
                src["operatingConstraintsPowerLevelData"].as<decltype(dst.operatingConstraintsPowerLevelData)::value_type>();
        } else {
            //dst.operatingConstraintsPowerLevelData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsPowerLevelListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsPowerLevelListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsResumeImplicationDataType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.resumeEnergyEstimated) {
        dst["resumeEnergyEstimated"] = *src.resumeEnergyEstimated;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.resumeCostEstimated) {
        dst["resumeCostEstimated"] = *src.resumeCostEstimated;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["resumeEnergyEstimated"]) {
                dst.resumeEnergyEstimated = item["resumeEnergyEstimated"].as<decltype(dst.resumeEnergyEstimated)::value_type>();
            } else {
                //dst.resumeEnergyEstimated = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["resumeCostEstimated"]) {
                dst.resumeCostEstimated = item["resumeCostEstimated"].as<decltype(dst.resumeCostEstimated)::value_type>();
            } else {
                //dst.resumeCostEstimated = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["resumeEnergyEstimated"]) {
            dst.resumeEnergyEstimated = src["resumeEnergyEstimated"].as<decltype(dst.resumeEnergyEstimated)::value_type>();
        } else {
            //dst.resumeEnergyEstimated = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["resumeCostEstimated"]) {
            dst.resumeCostEstimated = src["resumeCostEstimated"].as<decltype(dst.resumeCostEstimated)::value_type>();
        } else {
            //dst.resumeCostEstimated = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsResumeImplicationDataElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }
    if (src.resumeEnergyEstimated) {
        dst["resumeEnergyEstimated"] = *src.resumeEnergyEstimated;
    }
    if (src.energyUnit) {
        dst["energyUnit"] = *src.energyUnit;
    }
    if (src.resumeCostEstimated) {
        dst["resumeCostEstimated"] = *src.resumeCostEstimated;
    }
    if (src.currency) {
        dst["currency"] = *src.currency;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
            if (item["resumeEnergyEstimated"]) {
                dst.resumeEnergyEstimated = item["resumeEnergyEstimated"].as<decltype(dst.resumeEnergyEstimated)::value_type>();
            } else {
                //dst.resumeEnergyEstimated = std::nullopt;
            }
            if (item["energyUnit"]) {
                dst.energyUnit = item["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
            } else {
                //dst.energyUnit = std::nullopt;
            }
            if (item["resumeCostEstimated"]) {
                dst.resumeCostEstimated = item["resumeCostEstimated"].as<decltype(dst.resumeCostEstimated)::value_type>();
            } else {
                //dst.resumeCostEstimated = std::nullopt;
            }
            if (item["currency"]) {
                dst.currency = item["currency"].as<decltype(dst.currency)::value_type>();
            } else {
                //dst.currency = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
        if (src["resumeEnergyEstimated"]) {
            dst.resumeEnergyEstimated = src["resumeEnergyEstimated"].as<decltype(dst.resumeEnergyEstimated)::value_type>();
        } else {
            //dst.resumeEnergyEstimated = std::nullopt;
        }
        if (src["energyUnit"]) {
            dst.energyUnit = src["energyUnit"].as<decltype(dst.energyUnit)::value_type>();
        } else {
            //dst.energyUnit = std::nullopt;
        }
        if (src["resumeCostEstimated"]) {
            dst.resumeCostEstimated = src["resumeCostEstimated"].as<decltype(dst.resumeCostEstimated)::value_type>();
        } else {
            //dst.resumeCostEstimated = std::nullopt;
        }
        if (src["currency"]) {
            dst.currency = src["currency"].as<decltype(dst.currency)::value_type>();
        } else {
            //dst.currency = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsResumeImplicationListDataType &src, JsonVariant &dst)
{
    if (src.operatingConstraintsResumeImplicationData) {
        dst["operatingConstraintsResumeImplicationData"] = *src.operatingConstraintsResumeImplicationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["operatingConstraintsResumeImplicationData"]) {
                dst.operatingConstraintsResumeImplicationData =
                    item["operatingConstraintsResumeImplicationData"]
                        .as<decltype(dst.operatingConstraintsResumeImplicationData)::value_type>();
            } else {
                //dst.operatingConstraintsResumeImplicationData = std::nullopt;
            }
        }
    } else {
        if (src["operatingConstraintsResumeImplicationData"]) {
            dst.operatingConstraintsResumeImplicationData =
                src["operatingConstraintsResumeImplicationData"].as<decltype(dst.operatingConstraintsResumeImplicationData)::value_type>();
        } else {
            //dst.operatingConstraintsResumeImplicationData = std::nullopt;
        }
    }
}
bool convertToJson(const OperatingConstraintsResumeImplicationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, OperatingConstraintsResumeImplicationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const SensingDataType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const SensingDataElementsType &src, JsonVariant &dst)
{
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const SensingListDataType &src, JsonVariant &dst)
{
    if (src.sensingData) {
        dst["sensingData"] = *src.sensingData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sensingData"]) {
                dst.sensingData = item["sensingData"].as<decltype(dst.sensingData)::value_type>();
            } else {
                //dst.sensingData = std::nullopt;
            }
        }
    } else {
        if (src["sensingData"]) {
            dst.sensingData = src["sensingData"].as<decltype(dst.sensingData)::value_type>();
        } else {
            //dst.sensingData = std::nullopt;
        }
    }
}
bool convertToJson(const SensingListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
        }
    } else {
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
    }
}
bool convertToJson(const SensingDescriptionDataType &src, JsonVariant &dst)
{
    if (src.sensingType) {
        dst["sensingType"] = *src.sensingType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sensingType"]) {
                dst.sensingType = item["sensingType"].as<decltype(dst.sensingType)::value_type>();
            } else {
                //dst.sensingType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sensingType"]) {
            dst.sensingType = src["sensingType"].as<decltype(dst.sensingType)::value_type>();
        } else {
            //dst.sensingType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SensingDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.sensingType) {
        dst["sensingType"] = *src.sensingType;
    }
    if (src.unit) {
        dst["unit"] = *src.unit;
    }
    if (src.scopeType) {
        dst["scopeType"] = *src.scopeType;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SensingDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sensingType"]) {
                dst.sensingType = item["sensingType"].as<decltype(dst.sensingType)::value_type>();
            } else {
                //dst.sensingType = std::nullopt;
            }
            if (item["unit"]) {
                dst.unit = item["unit"].as<decltype(dst.unit)::value_type>();
            } else {
                //dst.unit = std::nullopt;
            }
            if (item["scopeType"]) {
                dst.scopeType = item["scopeType"].as<decltype(dst.scopeType)::value_type>();
            } else {
                //dst.scopeType = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["sensingType"]) {
            dst.sensingType = src["sensingType"].as<decltype(dst.sensingType)::value_type>();
        } else {
            //dst.sensingType = std::nullopt;
        }
        if (src["unit"]) {
            dst.unit = src["unit"].as<decltype(dst.unit)::value_type>();
        } else {
            //dst.unit = std::nullopt;
        }
        if (src["scopeType"]) {
            dst.scopeType = src["scopeType"].as<decltype(dst.scopeType)::value_type>();
        } else {
            //dst.scopeType = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationType &src, JsonVariant &dst)
{
    if (src.alternativesId) {
        dst["alternativesId"] = *src.alternativesId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesRelationType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesId"]) {
                dst.alternativesId = item["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
            } else {
                //dst.alternativesId = std::nullopt;
            }
        }
    } else {
        if (src["alternativesId"]) {
            dst.alternativesId = src["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
        } else {
            //dst.alternativesId = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListType &src, JsonVariant &dst)
{
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotValueListType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotType &src, JsonVariant &dst)
{
    if (src.schedule) {
        dst["schedule"] = *src.schedule;
    }
    if (src.valueList) {
        dst["valueList"] = *src.valueList;
    }
    if (src.scheduleConstraints) {
        dst["scheduleConstraints"] = *src.scheduleConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["schedule"]) {
                dst.schedule = item["schedule"].as<decltype(dst.schedule)::value_type>();
            } else {
                //dst.schedule = std::nullopt;
            }
            if (item["valueList"]) {
                dst.valueList = item["valueList"].as<decltype(dst.valueList)::value_type>();
            } else {
                //dst.valueList = std::nullopt;
            }
            if (item["scheduleConstraints"]) {
                dst.scheduleConstraints = item["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
            } else {
                //dst.scheduleConstraints = std::nullopt;
            }
        }
    } else {
        if (src["schedule"]) {
            dst.schedule = src["schedule"].as<decltype(dst.schedule)::value_type>();
        } else {
            //dst.schedule = std::nullopt;
        }
        if (src["valueList"]) {
            dst.valueList = src["valueList"].as<decltype(dst.valueList)::value_type>();
        } else {
            //dst.valueList = std::nullopt;
        }
        if (src["scheduleConstraints"]) {
            dst.scheduleConstraints = src["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
        } else {
            //dst.scheduleConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerSequenceType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.schedule) {
        dst["schedule"] = *src.schedule;
    }
    if (src.scheduleConstraints) {
        dst["scheduleConstraints"] = *src.scheduleConstraints;
    }
    if (src.schedulePreference) {
        dst["schedulePreference"] = *src.schedulePreference;
    }
    if (src.operatingConstraintsInterrupt) {
        dst["operatingConstraintsInterrupt"] = *src.operatingConstraintsInterrupt;
    }
    if (src.operatingConstraintsDuration) {
        dst["operatingConstraintsDuration"] = *src.operatingConstraintsDuration;
    }
    if (src.operatingConstraintsResumeImplication) {
        dst["operatingConstraintsResumeImplication"] = *src.operatingConstraintsResumeImplication;
    }
    if (src.powerTimeSlot) {
        dst["powerTimeSlot"] = *src.powerTimeSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerSequenceType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["schedule"]) {
                dst.schedule = item["schedule"].as<decltype(dst.schedule)::value_type>();
            } else {
                //dst.schedule = std::nullopt;
            }
            if (item["scheduleConstraints"]) {
                dst.scheduleConstraints = item["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
            } else {
                //dst.scheduleConstraints = std::nullopt;
            }
            if (item["schedulePreference"]) {
                dst.schedulePreference = item["schedulePreference"].as<decltype(dst.schedulePreference)::value_type>();
            } else {
                //dst.schedulePreference = std::nullopt;
            }
            if (item["operatingConstraintsInterrupt"]) {
                dst.operatingConstraintsInterrupt =
                    item["operatingConstraintsInterrupt"].as<decltype(dst.operatingConstraintsInterrupt)::value_type>();
            } else {
                //dst.operatingConstraintsInterrupt = std::nullopt;
            }
            if (item["operatingConstraintsDuration"]) {
                dst.operatingConstraintsDuration =
                    item["operatingConstraintsDuration"].as<decltype(dst.operatingConstraintsDuration)::value_type>();
            } else {
                //dst.operatingConstraintsDuration = std::nullopt;
            }
            if (item["operatingConstraintsResumeImplication"]) {
                dst.operatingConstraintsResumeImplication =
                    item["operatingConstraintsResumeImplication"].as<decltype(dst.operatingConstraintsResumeImplication)::value_type>();
            } else {
                //dst.operatingConstraintsResumeImplication = std::nullopt;
            }
            if (item["powerTimeSlot"]) {
                dst.powerTimeSlot = item["powerTimeSlot"].as<decltype(dst.powerTimeSlot)::value_type>();
            } else {
                //dst.powerTimeSlot = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["schedule"]) {
            dst.schedule = src["schedule"].as<decltype(dst.schedule)::value_type>();
        } else {
            //dst.schedule = std::nullopt;
        }
        if (src["scheduleConstraints"]) {
            dst.scheduleConstraints = src["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
        } else {
            //dst.scheduleConstraints = std::nullopt;
        }
        if (src["schedulePreference"]) {
            dst.schedulePreference = src["schedulePreference"].as<decltype(dst.schedulePreference)::value_type>();
        } else {
            //dst.schedulePreference = std::nullopt;
        }
        if (src["operatingConstraintsInterrupt"]) {
            dst.operatingConstraintsInterrupt =
                src["operatingConstraintsInterrupt"].as<decltype(dst.operatingConstraintsInterrupt)::value_type>();
        } else {
            //dst.operatingConstraintsInterrupt = std::nullopt;
        }
        if (src["operatingConstraintsDuration"]) {
            dst.operatingConstraintsDuration =
                src["operatingConstraintsDuration"].as<decltype(dst.operatingConstraintsDuration)::value_type>();
        } else {
            //dst.operatingConstraintsDuration = std::nullopt;
        }
        if (src["operatingConstraintsResumeImplication"]) {
            dst.operatingConstraintsResumeImplication =
                src["operatingConstraintsResumeImplication"].as<decltype(dst.operatingConstraintsResumeImplication)::value_type>();
        } else {
            //dst.operatingConstraintsResumeImplication = std::nullopt;
        }
        if (src["powerTimeSlot"]) {
            dst.powerTimeSlot = src["powerTimeSlot"].as<decltype(dst.powerTimeSlot)::value_type>();
        } else {
            //dst.powerTimeSlot = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsAlternativesType &src, JsonVariant &dst)
{
    if (src.relation) {
        dst["relation"] = *src.relation;
    }
    if (src.powerSequence) {
        dst["powerSequence"] = *src.powerSequence;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["relation"]) {
                dst.relation = item["relation"].as<decltype(dst.relation)::value_type>();
            } else {
                //dst.relation = std::nullopt;
            }
            if (item["powerSequence"]) {
                dst.powerSequence = item["powerSequence"].as<decltype(dst.powerSequence)::value_type>();
            } else {
                //dst.powerSequence = std::nullopt;
            }
        }
    } else {
        if (src["relation"]) {
            dst.relation = src["relation"].as<decltype(dst.relation)::value_type>();
        } else {
            //dst.relation = std::nullopt;
        }
        if (src["powerSequence"]) {
            dst.powerSequence = src["powerSequence"].as<decltype(dst.powerSequence)::value_type>();
        } else {
            //dst.powerSequence = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsDataType &src, JsonVariant &dst)
{
    if (src.nodeScheduleInformation) {
        dst["nodeScheduleInformation"] = *src.nodeScheduleInformation;
    }
    if (src.alternatives) {
        dst["alternatives"] = *src.alternatives;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeScheduleInformation"]) {
                dst.nodeScheduleInformation = item["nodeScheduleInformation"].as<decltype(dst.nodeScheduleInformation)::value_type>();
            } else {
                //dst.nodeScheduleInformation = std::nullopt;
            }
            if (item["alternatives"]) {
                dst.alternatives = item["alternatives"].as<decltype(dst.alternatives)::value_type>();
            } else {
                //dst.alternatives = std::nullopt;
            }
        }
    } else {
        if (src["nodeScheduleInformation"]) {
            dst.nodeScheduleInformation = src["nodeScheduleInformation"].as<decltype(dst.nodeScheduleInformation)::value_type>();
        } else {
            //dst.nodeScheduleInformation = std::nullopt;
        }
        if (src["alternatives"]) {
            dst.alternatives = src["alternatives"].as<decltype(dst.alternatives)::value_type>();
        } else {
            //dst.alternatives = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationElementsType &src, JsonVariant &dst)
{
    if (src.alternativesId) {
        dst["alternativesId"] = *src.alternativesId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesRelationElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesId"]) {
                dst.alternativesId = item["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
            } else {
                //dst.alternativesId = std::nullopt;
            }
        }
    } else {
        if (src["alternativesId"]) {
            dst.alternativesId = src["alternativesId"].as<decltype(dst.alternativesId)::value_type>();
        } else {
            //dst.alternativesId = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListElementsType &src, JsonVariant &dst)
{
    if (src.value) {
        dst["value"] = *src.value;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotValueListElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["value"]) {
                dst.value = item["value"].as<decltype(dst.value)::value_type>();
            } else {
                //dst.value = std::nullopt;
            }
        }
    } else {
        if (src["value"]) {
            dst.value = src["value"].as<decltype(dst.value)::value_type>();
        } else {
            //dst.value = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotElementsType &src, JsonVariant &dst)
{
    if (src.schedule) {
        dst["schedule"] = *src.schedule;
    }
    if (src.valueList) {
        dst["valueList"] = *src.valueList;
    }
    if (src.scheduleConstraints) {
        dst["scheduleConstraints"] = *src.scheduleConstraints;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerTimeSlotElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["schedule"]) {
                dst.schedule = item["schedule"].as<decltype(dst.schedule)::value_type>();
            } else {
                //dst.schedule = std::nullopt;
            }
            if (item["valueList"]) {
                dst.valueList = item["valueList"].as<decltype(dst.valueList)::value_type>();
            } else {
                //dst.valueList = std::nullopt;
            }
            if (item["scheduleConstraints"]) {
                dst.scheduleConstraints = item["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
            } else {
                //dst.scheduleConstraints = std::nullopt;
            }
        }
    } else {
        if (src["schedule"]) {
            dst.schedule = src["schedule"].as<decltype(dst.schedule)::value_type>();
        } else {
            //dst.schedule = std::nullopt;
        }
        if (src["valueList"]) {
            dst.valueList = src["valueList"].as<decltype(dst.valueList)::value_type>();
        } else {
            //dst.valueList = std::nullopt;
        }
        if (src["scheduleConstraints"]) {
            dst.scheduleConstraints = src["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
        } else {
            //dst.scheduleConstraints = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPowerSequenceElementsType &src, JsonVariant &dst)
{
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.state) {
        dst["state"] = *src.state;
    }
    if (src.schedule) {
        dst["schedule"] = *src.schedule;
    }
    if (src.scheduleConstraints) {
        dst["scheduleConstraints"] = *src.scheduleConstraints;
    }
    if (src.schedulePreference) {
        dst["schedulePreference"] = *src.schedulePreference;
    }
    if (src.operatingConstraintsInterrupt) {
        dst["operatingConstraintsInterrupt"] = *src.operatingConstraintsInterrupt;
    }
    if (src.operatingConstraintsDuration) {
        dst["operatingConstraintsDuration"] = *src.operatingConstraintsDuration;
    }
    if (src.operatingConstraintsResumeImplication) {
        dst["operatingConstraintsResumeImplication"] = *src.operatingConstraintsResumeImplication;
    }
    if (src.powerTimeSlot) {
        dst["powerTimeSlot"] = *src.powerTimeSlot;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPowerSequenceElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["state"]) {
                dst.state = item["state"].as<decltype(dst.state)::value_type>();
            } else {
                //dst.state = std::nullopt;
            }
            if (item["schedule"]) {
                dst.schedule = item["schedule"].as<decltype(dst.schedule)::value_type>();
            } else {
                //dst.schedule = std::nullopt;
            }
            if (item["scheduleConstraints"]) {
                dst.scheduleConstraints = item["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
            } else {
                //dst.scheduleConstraints = std::nullopt;
            }
            if (item["schedulePreference"]) {
                dst.schedulePreference = item["schedulePreference"].as<decltype(dst.schedulePreference)::value_type>();
            } else {
                //dst.schedulePreference = std::nullopt;
            }
            if (item["operatingConstraintsInterrupt"]) {
                dst.operatingConstraintsInterrupt =
                    item["operatingConstraintsInterrupt"].as<decltype(dst.operatingConstraintsInterrupt)::value_type>();
            } else {
                //dst.operatingConstraintsInterrupt = std::nullopt;
            }
            if (item["operatingConstraintsDuration"]) {
                dst.operatingConstraintsDuration =
                    item["operatingConstraintsDuration"].as<decltype(dst.operatingConstraintsDuration)::value_type>();
            } else {
                //dst.operatingConstraintsDuration = std::nullopt;
            }
            if (item["operatingConstraintsResumeImplication"]) {
                dst.operatingConstraintsResumeImplication =
                    item["operatingConstraintsResumeImplication"].as<decltype(dst.operatingConstraintsResumeImplication)::value_type>();
            } else {
                //dst.operatingConstraintsResumeImplication = std::nullopt;
            }
            if (item["powerTimeSlot"]) {
                dst.powerTimeSlot = item["powerTimeSlot"].as<decltype(dst.powerTimeSlot)::value_type>();
            } else {
                //dst.powerTimeSlot = std::nullopt;
            }
        }
    } else {
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["state"]) {
            dst.state = src["state"].as<decltype(dst.state)::value_type>();
        } else {
            //dst.state = std::nullopt;
        }
        if (src["schedule"]) {
            dst.schedule = src["schedule"].as<decltype(dst.schedule)::value_type>();
        } else {
            //dst.schedule = std::nullopt;
        }
        if (src["scheduleConstraints"]) {
            dst.scheduleConstraints = src["scheduleConstraints"].as<decltype(dst.scheduleConstraints)::value_type>();
        } else {
            //dst.scheduleConstraints = std::nullopt;
        }
        if (src["schedulePreference"]) {
            dst.schedulePreference = src["schedulePreference"].as<decltype(dst.schedulePreference)::value_type>();
        } else {
            //dst.schedulePreference = std::nullopt;
        }
        if (src["operatingConstraintsInterrupt"]) {
            dst.operatingConstraintsInterrupt =
                src["operatingConstraintsInterrupt"].as<decltype(dst.operatingConstraintsInterrupt)::value_type>();
        } else {
            //dst.operatingConstraintsInterrupt = std::nullopt;
        }
        if (src["operatingConstraintsDuration"]) {
            dst.operatingConstraintsDuration =
                src["operatingConstraintsDuration"].as<decltype(dst.operatingConstraintsDuration)::value_type>();
        } else {
            //dst.operatingConstraintsDuration = std::nullopt;
        }
        if (src["operatingConstraintsResumeImplication"]) {
            dst.operatingConstraintsResumeImplication =
                src["operatingConstraintsResumeImplication"].as<decltype(dst.operatingConstraintsResumeImplication)::value_type>();
        } else {
            //dst.operatingConstraintsResumeImplication = std::nullopt;
        }
        if (src["powerTimeSlot"]) {
            dst.powerTimeSlot = src["powerTimeSlot"].as<decltype(dst.powerTimeSlot)::value_type>();
        } else {
            //dst.powerTimeSlot = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsAlternativesElementsType &src, JsonVariant &dst)
{
    if (src.relation) {
        dst["relation"] = *src.relation;
    }
    if (src.powerSequence) {
        dst["powerSequence"] = *src.powerSequence;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsAlternativesElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["relation"]) {
                dst.relation = item["relation"].as<decltype(dst.relation)::value_type>();
            } else {
                //dst.relation = std::nullopt;
            }
            if (item["powerSequence"]) {
                dst.powerSequence = item["powerSequence"].as<decltype(dst.powerSequence)::value_type>();
            } else {
                //dst.powerSequence = std::nullopt;
            }
        }
    } else {
        if (src["relation"]) {
            dst.relation = src["relation"].as<decltype(dst.relation)::value_type>();
        } else {
            //dst.relation = std::nullopt;
        }
        if (src["powerSequence"]) {
            dst.powerSequence = src["powerSequence"].as<decltype(dst.powerSequence)::value_type>();
        } else {
            //dst.powerSequence = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsDataElementsType &src, JsonVariant &dst)
{
    if (src.nodeScheduleInformation) {
        dst["nodeScheduleInformation"] = *src.nodeScheduleInformation;
    }
    if (src.alternatives) {
        dst["alternatives"] = *src.alternatives;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["nodeScheduleInformation"]) {
                dst.nodeScheduleInformation = item["nodeScheduleInformation"].as<decltype(dst.nodeScheduleInformation)::value_type>();
            } else {
                //dst.nodeScheduleInformation = std::nullopt;
            }
            if (item["alternatives"]) {
                dst.alternatives = item["alternatives"].as<decltype(dst.alternatives)::value_type>();
            } else {
                //dst.alternatives = std::nullopt;
            }
        }
    } else {
        if (src["nodeScheduleInformation"]) {
            dst.nodeScheduleInformation = src["nodeScheduleInformation"].as<decltype(dst.nodeScheduleInformation)::value_type>();
        } else {
            //dst.nodeScheduleInformation = std::nullopt;
        }
        if (src["alternatives"]) {
            dst.alternatives = src["alternatives"].as<decltype(dst.alternatives)::value_type>();
        } else {
            //dst.alternatives = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsDataSelectorsType &src, JsonVariant &dst)
{
    if (src.alternativesRelation) {
        dst["alternativesRelation"] = *src.alternativesRelation;
    }
    if (src.powerSequenceDescription) {
        dst["powerSequenceDescription"] = *src.powerSequenceDescription;
    }
    if (src.powerTimeSlotSchedule) {
        dst["powerTimeSlotSchedule"] = *src.powerTimeSlotSchedule;
    }
    if (src.powerTimeSlotValue) {
        dst["powerTimeSlotValue"] = *src.powerTimeSlotValue;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["alternativesRelation"]) {
                dst.alternativesRelation = item["alternativesRelation"].as<decltype(dst.alternativesRelation)::value_type>();
            } else {
                //dst.alternativesRelation = std::nullopt;
            }
            if (item["powerSequenceDescription"]) {
                dst.powerSequenceDescription = item["powerSequenceDescription"].as<decltype(dst.powerSequenceDescription)::value_type>();
            } else {
                //dst.powerSequenceDescription = std::nullopt;
            }
            if (item["powerTimeSlotSchedule"]) {
                dst.powerTimeSlotSchedule = item["powerTimeSlotSchedule"].as<decltype(dst.powerTimeSlotSchedule)::value_type>();
            } else {
                //dst.powerTimeSlotSchedule = std::nullopt;
            }
            if (item["powerTimeSlotValue"]) {
                dst.powerTimeSlotValue = item["powerTimeSlotValue"].as<decltype(dst.powerTimeSlotValue)::value_type>();
            } else {
                //dst.powerTimeSlotValue = std::nullopt;
            }
        }
    } else {
        if (src["alternativesRelation"]) {
            dst.alternativesRelation = src["alternativesRelation"].as<decltype(dst.alternativesRelation)::value_type>();
        } else {
            //dst.alternativesRelation = std::nullopt;
        }
        if (src["powerSequenceDescription"]) {
            dst.powerSequenceDescription = src["powerSequenceDescription"].as<decltype(dst.powerSequenceDescription)::value_type>();
        } else {
            //dst.powerSequenceDescription = std::nullopt;
        }
        if (src["powerTimeSlotSchedule"]) {
            dst.powerTimeSlotSchedule = src["powerTimeSlotSchedule"].as<decltype(dst.powerTimeSlotSchedule)::value_type>();
        } else {
            //dst.powerTimeSlotSchedule = std::nullopt;
        }
        if (src["powerTimeSlotValue"]) {
            dst.powerTimeSlotValue = src["powerTimeSlotValue"].as<decltype(dst.powerTimeSlotValue)::value_type>();
        } else {
            //dst.powerTimeSlotValue = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPriceDataType &src, JsonVariant &dst)
{
    if (src.price) {
        dst["price"] = *src.price;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["price"]) {
                dst.price = item["price"].as<decltype(dst.price)::value_type>();
            } else {
                //dst.price = std::nullopt;
            }
        }
    } else {
        if (src["price"]) {
            dst.price = src["price"].as<decltype(dst.price)::value_type>();
        } else {
            //dst.price = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPriceDataElementsType &src, JsonVariant &dst)
{
    if (src.price) {
        dst["price"] = *src.price;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["price"]) {
                dst.price = item["price"].as<decltype(dst.price)::value_type>();
            } else {
                //dst.price = std::nullopt;
            }
        }
    } else {
        if (src["price"]) {
            dst.price = src["price"].as<decltype(dst.price)::value_type>();
        } else {
            //dst.price = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPriceDataSelectorsType &src, JsonVariant &dst)
{
    if (src.price) {
        dst["price"] = *src.price;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["price"]) {
                dst.price = item["price"].as<decltype(dst.price)::value_type>();
            } else {
                //dst.price = std::nullopt;
            }
        }
    } else {
        if (src["price"]) {
            dst.price = src["price"].as<decltype(dst.price)::value_type>();
        } else {
            //dst.price = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallType &src, JsonVariant &dst)
{
    if (src.scheduleConfigurationRequest) {
        dst["scheduleConfigurationRequest"] = *src.scheduleConfigurationRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsConfigurationRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["scheduleConfigurationRequest"]) {
                dst.scheduleConfigurationRequest =
                    item["scheduleConfigurationRequest"].as<decltype(dst.scheduleConfigurationRequest)::value_type>();
            } else {
                //dst.scheduleConfigurationRequest = std::nullopt;
            }
        }
    } else {
        if (src["scheduleConfigurationRequest"]) {
            dst.scheduleConfigurationRequest =
                src["scheduleConfigurationRequest"].as<decltype(dst.scheduleConfigurationRequest)::value_type>();
        } else {
            //dst.scheduleConfigurationRequest = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.scheduleConfigurationRequest) {
        dst["scheduleConfigurationRequest"] = *src.scheduleConfigurationRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsConfigurationRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["scheduleConfigurationRequest"]) {
                dst.scheduleConfigurationRequest =
                    item["scheduleConfigurationRequest"].as<decltype(dst.scheduleConfigurationRequest)::value_type>();
            } else {
                //dst.scheduleConfigurationRequest = std::nullopt;
            }
        }
    } else {
        if (src["scheduleConfigurationRequest"]) {
            dst.scheduleConfigurationRequest =
                src["scheduleConfigurationRequest"].as<decltype(dst.scheduleConfigurationRequest)::value_type>();
        } else {
            //dst.scheduleConfigurationRequest = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallType &src, JsonVariant &dst)
{
    if (src.priceCalculationRequest) {
        dst["priceCalculationRequest"] = *src.priceCalculationRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceCalculationRequestCallType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["priceCalculationRequest"]) {
                dst.priceCalculationRequest = item["priceCalculationRequest"].as<decltype(dst.priceCalculationRequest)::value_type>();
            } else {
                //dst.priceCalculationRequest = std::nullopt;
            }
        }
    } else {
        if (src["priceCalculationRequest"]) {
            dst.priceCalculationRequest = src["priceCalculationRequest"].as<decltype(dst.priceCalculationRequest)::value_type>();
        } else {
            //dst.priceCalculationRequest = std::nullopt;
        }
    }
}
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallElementsType &src, JsonVariant &dst)
{
    if (src.priceCalculationRequest) {
        dst["priceCalculationRequest"] = *src.priceCalculationRequest;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SmartEnergyManagementPsPriceCalculationRequestCallElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["priceCalculationRequest"]) {
                dst.priceCalculationRequest = item["priceCalculationRequest"].as<decltype(dst.priceCalculationRequest)::value_type>();
            } else {
                //dst.priceCalculationRequest = std::nullopt;
            }
        }
    } else {
        if (src["priceCalculationRequest"]) {
            dst.priceCalculationRequest = src["priceCalculationRequest"].as<decltype(dst.priceCalculationRequest)::value_type>();
        } else {
            //dst.priceCalculationRequest = std::nullopt;
        }
    }
}
bool convertToJson(const StateInformationDataType &src, JsonVariant &dst)
{
    if (src.stateInformationId) {
        dst["stateInformationId"] = *src.stateInformationId;
    }
    if (src.stateInformation) {
        dst["stateInformation"] = *src.stateInformation;
    }
    if (src.isActive) {
        dst["isActive"] = *src.isActive;
    }
    if (src.category) {
        dst["category"] = *src.category;
    }
    if (src.timeOfLastChange) {
        dst["timeOfLastChange"] = *src.timeOfLastChange;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, StateInformationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["stateInformationId"]) {
                dst.stateInformationId = item["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
            } else {
                //dst.stateInformationId = std::nullopt;
            }
            if (item["stateInformation"]) {
                dst.stateInformation = item["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
            } else {
                //dst.stateInformation = std::nullopt;
            }
            if (item["isActive"]) {
                dst.isActive = item["isActive"].as<decltype(dst.isActive)::value_type>();
            } else {
                //dst.isActive = std::nullopt;
            }
            if (item["category"]) {
                dst.category = item["category"].as<decltype(dst.category)::value_type>();
            } else {
                //dst.category = std::nullopt;
            }
            if (item["timeOfLastChange"]) {
                dst.timeOfLastChange = item["timeOfLastChange"].as<decltype(dst.timeOfLastChange)::value_type>();
            } else {
                //dst.timeOfLastChange = std::nullopt;
            }
        }
    } else {
        if (src["stateInformationId"]) {
            dst.stateInformationId = src["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
        } else {
            //dst.stateInformationId = std::nullopt;
        }
        if (src["stateInformation"]) {
            dst.stateInformation = src["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
        } else {
            //dst.stateInformation = std::nullopt;
        }
        if (src["isActive"]) {
            dst.isActive = src["isActive"].as<decltype(dst.isActive)::value_type>();
        } else {
            //dst.isActive = std::nullopt;
        }
        if (src["category"]) {
            dst.category = src["category"].as<decltype(dst.category)::value_type>();
        } else {
            //dst.category = std::nullopt;
        }
        if (src["timeOfLastChange"]) {
            dst.timeOfLastChange = src["timeOfLastChange"].as<decltype(dst.timeOfLastChange)::value_type>();
        } else {
            //dst.timeOfLastChange = std::nullopt;
        }
    }
}
bool convertToJson(const StateInformationDataElementsType &src, JsonVariant &dst)
{
    if (src.stateInformationId) {
        dst["stateInformationId"] = *src.stateInformationId;
    }
    if (src.stateInformation) {
        dst["stateInformation"] = *src.stateInformation;
    }
    if (src.isActive) {
        dst["isActive"] = *src.isActive;
    }
    if (src.category) {
        dst["category"] = *src.category;
    }
    if (src.timeOfLastChange) {
        dst["timeOfLastChange"] = *src.timeOfLastChange;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, StateInformationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["stateInformationId"]) {
                dst.stateInformationId = item["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
            } else {
                //dst.stateInformationId = std::nullopt;
            }
            if (item["stateInformation"]) {
                dst.stateInformation = item["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
            } else {
                //dst.stateInformation = std::nullopt;
            }
            if (item["isActive"]) {
                dst.isActive = item["isActive"].as<decltype(dst.isActive)::value_type>();
            } else {
                //dst.isActive = std::nullopt;
            }
            if (item["category"]) {
                dst.category = item["category"].as<decltype(dst.category)::value_type>();
            } else {
                //dst.category = std::nullopt;
            }
            if (item["timeOfLastChange"]) {
                dst.timeOfLastChange = item["timeOfLastChange"].as<decltype(dst.timeOfLastChange)::value_type>();
            } else {
                //dst.timeOfLastChange = std::nullopt;
            }
        }
    } else {
        if (src["stateInformationId"]) {
            dst.stateInformationId = src["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
        } else {
            //dst.stateInformationId = std::nullopt;
        }
        if (src["stateInformation"]) {
            dst.stateInformation = src["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
        } else {
            //dst.stateInformation = std::nullopt;
        }
        if (src["isActive"]) {
            dst.isActive = src["isActive"].as<decltype(dst.isActive)::value_type>();
        } else {
            //dst.isActive = std::nullopt;
        }
        if (src["category"]) {
            dst.category = src["category"].as<decltype(dst.category)::value_type>();
        } else {
            //dst.category = std::nullopt;
        }
        if (src["timeOfLastChange"]) {
            dst.timeOfLastChange = src["timeOfLastChange"].as<decltype(dst.timeOfLastChange)::value_type>();
        } else {
            //dst.timeOfLastChange = std::nullopt;
        }
    }
}
bool convertToJson(const StateInformationListDataType &src, JsonVariant &dst)
{
    if (src.stateInformationData) {
        dst["stateInformationData"] = *src.stateInformationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, StateInformationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["stateInformationData"]) {
                dst.stateInformationData = item["stateInformationData"].as<decltype(dst.stateInformationData)::value_type>();
            } else {
                //dst.stateInformationData = std::nullopt;
            }
        }
    } else {
        if (src["stateInformationData"]) {
            dst.stateInformationData = src["stateInformationData"].as<decltype(dst.stateInformationData)::value_type>();
        } else {
            //dst.stateInformationData = std::nullopt;
        }
    }
}
bool convertToJson(const StateInformationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.stateInformationId) {
        dst["stateInformationId"] = *src.stateInformationId;
    }
    if (src.stateInformation) {
        dst["stateInformation"] = *src.stateInformation;
    }
    if (src.isActive) {
        dst["isActive"] = *src.isActive;
    }
    if (src.category) {
        dst["category"] = *src.category;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, StateInformationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["stateInformationId"]) {
                dst.stateInformationId = item["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
            } else {
                //dst.stateInformationId = std::nullopt;
            }
            if (item["stateInformation"]) {
                dst.stateInformation = item["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
            } else {
                //dst.stateInformation = std::nullopt;
            }
            if (item["isActive"]) {
                dst.isActive = item["isActive"].as<decltype(dst.isActive)::value_type>();
            } else {
                //dst.isActive = std::nullopt;
            }
            if (item["category"]) {
                dst.category = item["category"].as<decltype(dst.category)::value_type>();
            } else {
                //dst.category = std::nullopt;
            }
        }
    } else {
        if (src["stateInformationId"]) {
            dst.stateInformationId = src["stateInformationId"].as<decltype(dst.stateInformationId)::value_type>();
        } else {
            //dst.stateInformationId = std::nullopt;
        }
        if (src["stateInformation"]) {
            dst.stateInformation = src["stateInformation"].as<decltype(dst.stateInformation)::value_type>();
        } else {
            //dst.stateInformation = std::nullopt;
        }
        if (src["isActive"]) {
            dst.isActive = src["isActive"].as<decltype(dst.isActive)::value_type>();
        } else {
            //dst.isActive = std::nullopt;
        }
        if (src["category"]) {
            dst.category = src["category"].as<decltype(dst.category)::value_type>();
        } else {
            //dst.category = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDataType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventType) {
        dst["eventType"] = *src.eventType;
    }
    if (src.originator) {
        dst["originator"] = *src.originator;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdPercentage) {
        dst["thresholdPercentage"] = *src.thresholdPercentage;
    }
    if (src.relevantPeriod) {
        dst["relevantPeriod"] = *src.relevantPeriod;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.gridCondition) {
        dst["gridCondition"] = *src.gridCondition;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventType"]) {
                dst.eventType = item["eventType"].as<decltype(dst.eventType)::value_type>();
            } else {
                //dst.eventType = std::nullopt;
            }
            if (item["originator"]) {
                dst.originator = item["originator"].as<decltype(dst.originator)::value_type>();
            } else {
                //dst.originator = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdPercentage"]) {
                dst.thresholdPercentage = item["thresholdPercentage"].as<decltype(dst.thresholdPercentage)::value_type>();
            } else {
                //dst.thresholdPercentage = std::nullopt;
            }
            if (item["relevantPeriod"]) {
                dst.relevantPeriod = item["relevantPeriod"].as<decltype(dst.relevantPeriod)::value_type>();
            } else {
                //dst.relevantPeriod = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["gridCondition"]) {
                dst.gridCondition = item["gridCondition"].as<decltype(dst.gridCondition)::value_type>();
            } else {
                //dst.gridCondition = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventType"]) {
            dst.eventType = src["eventType"].as<decltype(dst.eventType)::value_type>();
        } else {
            //dst.eventType = std::nullopt;
        }
        if (src["originator"]) {
            dst.originator = src["originator"].as<decltype(dst.originator)::value_type>();
        } else {
            //dst.originator = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdPercentage"]) {
            dst.thresholdPercentage = src["thresholdPercentage"].as<decltype(dst.thresholdPercentage)::value_type>();
        } else {
            //dst.thresholdPercentage = std::nullopt;
        }
        if (src["relevantPeriod"]) {
            dst.relevantPeriod = src["relevantPeriod"].as<decltype(dst.relevantPeriod)::value_type>();
        } else {
            //dst.relevantPeriod = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["gridCondition"]) {
            dst.gridCondition = src["gridCondition"].as<decltype(dst.gridCondition)::value_type>();
        } else {
            //dst.gridCondition = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDataElementsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.eventType) {
        dst["eventType"] = *src.eventType;
    }
    if (src.originator) {
        dst["originator"] = *src.originator;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }
    if (src.thresholdPercentage) {
        dst["thresholdPercentage"] = *src.thresholdPercentage;
    }
    if (src.relevantPeriod) {
        dst["relevantPeriod"] = *src.relevantPeriod;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }
    if (src.gridCondition) {
        dst["gridCondition"] = *src.gridCondition;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["eventType"]) {
                dst.eventType = item["eventType"].as<decltype(dst.eventType)::value_type>();
            } else {
                //dst.eventType = std::nullopt;
            }
            if (item["originator"]) {
                dst.originator = item["originator"].as<decltype(dst.originator)::value_type>();
            } else {
                //dst.originator = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
            if (item["thresholdPercentage"]) {
                dst.thresholdPercentage = item["thresholdPercentage"].as<decltype(dst.thresholdPercentage)::value_type>();
            } else {
                //dst.thresholdPercentage = std::nullopt;
            }
            if (item["relevantPeriod"]) {
                dst.relevantPeriod = item["relevantPeriod"].as<decltype(dst.relevantPeriod)::value_type>();
            } else {
                //dst.relevantPeriod = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
            if (item["gridCondition"]) {
                dst.gridCondition = item["gridCondition"].as<decltype(dst.gridCondition)::value_type>();
            } else {
                //dst.gridCondition = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["eventType"]) {
            dst.eventType = src["eventType"].as<decltype(dst.eventType)::value_type>();
        } else {
            //dst.eventType = std::nullopt;
        }
        if (src["originator"]) {
            dst.originator = src["originator"].as<decltype(dst.originator)::value_type>();
        } else {
            //dst.originator = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
        if (src["thresholdPercentage"]) {
            dst.thresholdPercentage = src["thresholdPercentage"].as<decltype(dst.thresholdPercentage)::value_type>();
        } else {
            //dst.thresholdPercentage = std::nullopt;
        }
        if (src["relevantPeriod"]) {
            dst.relevantPeriod = src["relevantPeriod"].as<decltype(dst.relevantPeriod)::value_type>();
        } else {
            //dst.relevantPeriod = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
        if (src["gridCondition"]) {
            dst.gridCondition = src["gridCondition"].as<decltype(dst.gridCondition)::value_type>();
        } else {
            //dst.gridCondition = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionListDataType &src, JsonVariant &dst)
{
    if (src.supplyConditionData) {
        dst["supplyConditionData"] = *src.supplyConditionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["supplyConditionData"]) {
                dst.supplyConditionData = item["supplyConditionData"].as<decltype(dst.supplyConditionData)::value_type>();
            } else {
                //dst.supplyConditionData = std::nullopt;
            }
        }
    } else {
        if (src["supplyConditionData"]) {
            dst.supplyConditionData = src["supplyConditionData"].as<decltype(dst.supplyConditionData)::value_type>();
        } else {
            //dst.supplyConditionData = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.timestampInterval) {
        dst["timestampInterval"] = *src.timestampInterval;
    }
    if (src.eventType) {
        dst["eventType"] = *src.eventType;
    }
    if (src.originator) {
        dst["originator"] = *src.originator;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["timestampInterval"]) {
                dst.timestampInterval = item["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
            } else {
                //dst.timestampInterval = std::nullopt;
            }
            if (item["eventType"]) {
                dst.eventType = item["eventType"].as<decltype(dst.eventType)::value_type>();
            } else {
                //dst.eventType = std::nullopt;
            }
            if (item["originator"]) {
                dst.originator = item["originator"].as<decltype(dst.originator)::value_type>();
            } else {
                //dst.originator = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["timestampInterval"]) {
            dst.timestampInterval = src["timestampInterval"].as<decltype(dst.timestampInterval)::value_type>();
        } else {
            //dst.timestampInterval = std::nullopt;
        }
        if (src["eventType"]) {
            dst.eventType = src["eventType"].as<decltype(dst.eventType)::value_type>();
        } else {
            //dst.eventType = std::nullopt;
        }
        if (src["originator"]) {
            dst.originator = src["originator"].as<decltype(dst.originator)::value_type>();
        } else {
            //dst.originator = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDescriptionDataType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.commodityType) {
        dst["commodityType"] = *src.commodityType;
    }
    if (src.positiveEnergyDirection) {
        dst["positiveEnergyDirection"] = *src.positiveEnergyDirection;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["commodityType"]) {
                dst.commodityType = item["commodityType"].as<decltype(dst.commodityType)::value_type>();
            } else {
                //dst.commodityType = std::nullopt;
            }
            if (item["positiveEnergyDirection"]) {
                dst.positiveEnergyDirection = item["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
            } else {
                //dst.positiveEnergyDirection = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["commodityType"]) {
            dst.commodityType = src["commodityType"].as<decltype(dst.commodityType)::value_type>();
        } else {
            //dst.commodityType = std::nullopt;
        }
        if (src["positiveEnergyDirection"]) {
            dst.positiveEnergyDirection = src["positiveEnergyDirection"].as<decltype(dst.positiveEnergyDirection)::value_type>();
        } else {
            //dst.positiveEnergyDirection = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.supplyConditionDescriptionData) {
        dst["supplyConditionDescriptionData"] = *src.supplyConditionDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["supplyConditionDescriptionData"]) {
                dst.supplyConditionDescriptionData =
                    item["supplyConditionDescriptionData"].as<decltype(dst.supplyConditionDescriptionData)::value_type>();
            } else {
                //dst.supplyConditionDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["supplyConditionDescriptionData"]) {
            dst.supplyConditionDescriptionData =
                src["supplyConditionDescriptionData"].as<decltype(dst.supplyConditionDescriptionData)::value_type>();
        } else {
            //dst.supplyConditionDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionThresholdRelationDataType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionThresholdRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionThresholdRelationListDataType &src, JsonVariant &dst)
{
    if (src.supplyConditionThresholdRelationData) {
        dst["supplyConditionThresholdRelationData"] = *src.supplyConditionThresholdRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["supplyConditionThresholdRelationData"]) {
                dst.supplyConditionThresholdRelationData =
                    item["supplyConditionThresholdRelationData"].as<decltype(dst.supplyConditionThresholdRelationData)::value_type>();
            } else {
                //dst.supplyConditionThresholdRelationData = std::nullopt;
            }
        }
    } else {
        if (src["supplyConditionThresholdRelationData"]) {
            dst.supplyConditionThresholdRelationData =
                src["supplyConditionThresholdRelationData"].as<decltype(dst.supplyConditionThresholdRelationData)::value_type>();
        } else {
            //dst.supplyConditionThresholdRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const SupplyConditionThresholdRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.conditionId) {
        dst["conditionId"] = *src.conditionId;
    }
    if (src.thresholdId) {
        dst["thresholdId"] = *src.thresholdId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, SupplyConditionThresholdRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["conditionId"]) {
                dst.conditionId = item["conditionId"].as<decltype(dst.conditionId)::value_type>();
            } else {
                //dst.conditionId = std::nullopt;
            }
            if (item["thresholdId"]) {
                dst.thresholdId = item["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
            } else {
                //dst.thresholdId = std::nullopt;
            }
        }
    } else {
        if (src["conditionId"]) {
            dst.conditionId = src["conditionId"].as<decltype(dst.conditionId)::value_type>();
        } else {
            //dst.conditionId = std::nullopt;
        }
        if (src["thresholdId"]) {
            dst.thresholdId = src["thresholdId"].as<decltype(dst.thresholdId)::value_type>();
        } else {
            //dst.thresholdId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementDirectControlRelatedType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementDirectControlRelatedType &dst)
{
}
bool convertToJson(const TaskManagementDirectControlRelatedElementsType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementDirectControlRelatedElementsType &dst)
{
}
bool convertToJson(const TaskManagementHvacRelatedType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementHvacRelatedType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementHvacRelatedElementsType &src, JsonVariant &dst)
{
    if (src.overrunId) {
        dst["overrunId"] = *src.overrunId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementHvacRelatedElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["overrunId"]) {
                dst.overrunId = item["overrunId"].as<decltype(dst.overrunId)::value_type>();
            } else {
                //dst.overrunId = std::nullopt;
            }
        }
    } else {
        if (src["overrunId"]) {
            dst.overrunId = src["overrunId"].as<decltype(dst.overrunId)::value_type>();
        } else {
            //dst.overrunId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementLoadControlReleatedType &src, JsonVariant &dst)
{
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementLoadControlReleatedType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
        }
    } else {
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementLoadControlReleatedElementsType &src, JsonVariant &dst)
{
    if (src.eventId) {
        dst["eventId"] = *src.eventId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementLoadControlReleatedElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["eventId"]) {
                dst.eventId = item["eventId"].as<decltype(dst.eventId)::value_type>();
            } else {
                //dst.eventId = std::nullopt;
            }
        }
    } else {
        if (src["eventId"]) {
            dst.eventId = src["eventId"].as<decltype(dst.eventId)::value_type>();
        } else {
            //dst.eventId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementPowerSequencesRelatedType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementPowerSequencesRelatedType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementPowerSequencesRelatedElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementPowerSequencesRelatedElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementSmartEnergyManagementPsRelatedType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedElementsType &src, JsonVariant &dst)
{
    if (src.sequenceId) {
        dst["sequenceId"] = *src.sequenceId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementSmartEnergyManagementPsRelatedElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["sequenceId"]) {
                dst.sequenceId = item["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
            } else {
                //dst.sequenceId = std::nullopt;
            }
        }
    } else {
        if (src["sequenceId"]) {
            dst.sequenceId = src["sequenceId"].as<decltype(dst.sequenceId)::value_type>();
        } else {
            //dst.sequenceId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDataType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.jobState) {
        dst["jobState"] = *src.jobState;
    }
    if (src.elapsedTime) {
        dst["elapsedTime"] = *src.elapsedTime;
    }
    if (src.remainingTime) {
        dst["remainingTime"] = *src.remainingTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["jobState"]) {
                dst.jobState = item["jobState"].as<decltype(dst.jobState)::value_type>();
            } else {
                //dst.jobState = std::nullopt;
            }
            if (item["elapsedTime"]) {
                dst.elapsedTime = item["elapsedTime"].as<decltype(dst.elapsedTime)::value_type>();
            } else {
                //dst.elapsedTime = std::nullopt;
            }
            if (item["remainingTime"]) {
                dst.remainingTime = item["remainingTime"].as<decltype(dst.remainingTime)::value_type>();
            } else {
                //dst.remainingTime = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["jobState"]) {
            dst.jobState = src["jobState"].as<decltype(dst.jobState)::value_type>();
        } else {
            //dst.jobState = std::nullopt;
        }
        if (src["elapsedTime"]) {
            dst.elapsedTime = src["elapsedTime"].as<decltype(dst.elapsedTime)::value_type>();
        } else {
            //dst.elapsedTime = std::nullopt;
        }
        if (src["remainingTime"]) {
            dst.remainingTime = src["remainingTime"].as<decltype(dst.remainingTime)::value_type>();
        } else {
            //dst.remainingTime = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDataElementsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }
    if (src.jobState) {
        dst["jobState"] = *src.jobState;
    }
    if (src.elapsedTime) {
        dst["elapsedTime"] = *src.elapsedTime;
    }
    if (src.remainingTime) {
        dst["remainingTime"] = *src.remainingTime;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
            if (item["jobState"]) {
                dst.jobState = item["jobState"].as<decltype(dst.jobState)::value_type>();
            } else {
                //dst.jobState = std::nullopt;
            }
            if (item["elapsedTime"]) {
                dst.elapsedTime = item["elapsedTime"].as<decltype(dst.elapsedTime)::value_type>();
            } else {
                //dst.elapsedTime = std::nullopt;
            }
            if (item["remainingTime"]) {
                dst.remainingTime = item["remainingTime"].as<decltype(dst.remainingTime)::value_type>();
            } else {
                //dst.remainingTime = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
        if (src["jobState"]) {
            dst.jobState = src["jobState"].as<decltype(dst.jobState)::value_type>();
        } else {
            //dst.jobState = std::nullopt;
        }
        if (src["elapsedTime"]) {
            dst.elapsedTime = src["elapsedTime"].as<decltype(dst.elapsedTime)::value_type>();
        } else {
            //dst.elapsedTime = std::nullopt;
        }
        if (src["remainingTime"]) {
            dst.remainingTime = src["remainingTime"].as<decltype(dst.remainingTime)::value_type>();
        } else {
            //dst.remainingTime = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobListDataType &src, JsonVariant &dst)
{
    if (src.taskManagementJobData) {
        dst["taskManagementJobData"] = *src.taskManagementJobData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["taskManagementJobData"]) {
                dst.taskManagementJobData = item["taskManagementJobData"].as<decltype(dst.taskManagementJobData)::value_type>();
            } else {
                //dst.taskManagementJobData = std::nullopt;
            }
        }
    } else {
        if (src["taskManagementJobData"]) {
            dst.taskManagementJobData = src["taskManagementJobData"].as<decltype(dst.taskManagementJobData)::value_type>();
        } else {
            //dst.taskManagementJobData = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.jobState) {
        dst["jobState"] = *src.jobState;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["jobState"]) {
                dst.jobState = item["jobState"].as<decltype(dst.jobState)::value_type>();
            } else {
                //dst.jobState = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["jobState"]) {
            dst.jobState = src["jobState"].as<decltype(dst.jobState)::value_type>();
        } else {
            //dst.jobState = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobRelationDataType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.directControlRelated) {
        dst["directControlRelated"] = *src.directControlRelated;
    }
    if (src.hvacRelated) {
        dst["hvacRelated"] = *src.hvacRelated;
    }
    if (src.loadControlReleated) {
        dst["loadControlReleated"] = *src.loadControlReleated;
    }
    if (src.powerSequencesRelated) {
        dst["powerSequencesRelated"] = *src.powerSequencesRelated;
    }
    if (src.smartEnergyManagementPsRelated) {
        dst["smartEnergyManagementPsRelated"] = *src.smartEnergyManagementPsRelated;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["directControlRelated"]) {
                dst.directControlRelated = item["directControlRelated"].as<decltype(dst.directControlRelated)::value_type>();
            } else {
                //dst.directControlRelated = std::nullopt;
            }
            if (item["hvacRelated"]) {
                dst.hvacRelated = item["hvacRelated"].as<decltype(dst.hvacRelated)::value_type>();
            } else {
                //dst.hvacRelated = std::nullopt;
            }
            if (item["loadControlReleated"]) {
                dst.loadControlReleated = item["loadControlReleated"].as<decltype(dst.loadControlReleated)::value_type>();
            } else {
                //dst.loadControlReleated = std::nullopt;
            }
            if (item["powerSequencesRelated"]) {
                dst.powerSequencesRelated = item["powerSequencesRelated"].as<decltype(dst.powerSequencesRelated)::value_type>();
            } else {
                //dst.powerSequencesRelated = std::nullopt;
            }
            if (item["smartEnergyManagementPsRelated"]) {
                dst.smartEnergyManagementPsRelated =
                    item["smartEnergyManagementPsRelated"].as<decltype(dst.smartEnergyManagementPsRelated)::value_type>();
            } else {
                //dst.smartEnergyManagementPsRelated = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["directControlRelated"]) {
            dst.directControlRelated = src["directControlRelated"].as<decltype(dst.directControlRelated)::value_type>();
        } else {
            //dst.directControlRelated = std::nullopt;
        }
        if (src["hvacRelated"]) {
            dst.hvacRelated = src["hvacRelated"].as<decltype(dst.hvacRelated)::value_type>();
        } else {
            //dst.hvacRelated = std::nullopt;
        }
        if (src["loadControlReleated"]) {
            dst.loadControlReleated = src["loadControlReleated"].as<decltype(dst.loadControlReleated)::value_type>();
        } else {
            //dst.loadControlReleated = std::nullopt;
        }
        if (src["powerSequencesRelated"]) {
            dst.powerSequencesRelated = src["powerSequencesRelated"].as<decltype(dst.powerSequencesRelated)::value_type>();
        } else {
            //dst.powerSequencesRelated = std::nullopt;
        }
        if (src["smartEnergyManagementPsRelated"]) {
            dst.smartEnergyManagementPsRelated =
                src["smartEnergyManagementPsRelated"].as<decltype(dst.smartEnergyManagementPsRelated)::value_type>();
        } else {
            //dst.smartEnergyManagementPsRelated = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobRelationDataElementsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.directControlRelated) {
        dst["directControlRelated"] = *src.directControlRelated;
    }
    if (src.hvacRelated) {
        dst["hvacRelated"] = *src.hvacRelated;
    }
    if (src.loadControlReleated) {
        dst["loadControlReleated"] = *src.loadControlReleated;
    }
    if (src.powerSequencesRelated) {
        dst["powerSequencesRelated"] = *src.powerSequencesRelated;
    }
    if (src.smartEnergyManagementPsRelated) {
        dst["smartEnergyManagementPsRelated"] = *src.smartEnergyManagementPsRelated;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["directControlRelated"]) {
                dst.directControlRelated = item["directControlRelated"].as<decltype(dst.directControlRelated)::value_type>();
            } else {
                //dst.directControlRelated = std::nullopt;
            }
            if (item["hvacRelated"]) {
                dst.hvacRelated = item["hvacRelated"].as<decltype(dst.hvacRelated)::value_type>();
            } else {
                //dst.hvacRelated = std::nullopt;
            }
            if (item["loadControlReleated"]) {
                dst.loadControlReleated = item["loadControlReleated"].as<decltype(dst.loadControlReleated)::value_type>();
            } else {
                //dst.loadControlReleated = std::nullopt;
            }
            if (item["powerSequencesRelated"]) {
                dst.powerSequencesRelated = item["powerSequencesRelated"].as<decltype(dst.powerSequencesRelated)::value_type>();
            } else {
                //dst.powerSequencesRelated = std::nullopt;
            }
            if (item["smartEnergyManagementPsRelated"]) {
                dst.smartEnergyManagementPsRelated =
                    item["smartEnergyManagementPsRelated"].as<decltype(dst.smartEnergyManagementPsRelated)::value_type>();
            } else {
                //dst.smartEnergyManagementPsRelated = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["directControlRelated"]) {
            dst.directControlRelated = src["directControlRelated"].as<decltype(dst.directControlRelated)::value_type>();
        } else {
            //dst.directControlRelated = std::nullopt;
        }
        if (src["hvacRelated"]) {
            dst.hvacRelated = src["hvacRelated"].as<decltype(dst.hvacRelated)::value_type>();
        } else {
            //dst.hvacRelated = std::nullopt;
        }
        if (src["loadControlReleated"]) {
            dst.loadControlReleated = src["loadControlReleated"].as<decltype(dst.loadControlReleated)::value_type>();
        } else {
            //dst.loadControlReleated = std::nullopt;
        }
        if (src["powerSequencesRelated"]) {
            dst.powerSequencesRelated = src["powerSequencesRelated"].as<decltype(dst.powerSequencesRelated)::value_type>();
        } else {
            //dst.powerSequencesRelated = std::nullopt;
        }
        if (src["smartEnergyManagementPsRelated"]) {
            dst.smartEnergyManagementPsRelated =
                src["smartEnergyManagementPsRelated"].as<decltype(dst.smartEnergyManagementPsRelated)::value_type>();
        } else {
            //dst.smartEnergyManagementPsRelated = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobRelationListDataType &src, JsonVariant &dst)
{
    if (src.taskManagementJobRelationData) {
        dst["taskManagementJobRelationData"] = *src.taskManagementJobRelationData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["taskManagementJobRelationData"]) {
                dst.taskManagementJobRelationData =
                    item["taskManagementJobRelationData"].as<decltype(dst.taskManagementJobRelationData)::value_type>();
            } else {
                //dst.taskManagementJobRelationData = std::nullopt;
            }
        }
    } else {
        if (src["taskManagementJobRelationData"]) {
            dst.taskManagementJobRelationData =
                src["taskManagementJobRelationData"].as<decltype(dst.taskManagementJobRelationData)::value_type>();
        } else {
            //dst.taskManagementJobRelationData = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobRelationListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobRelationListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDescriptionDataType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.jobSource) {
        dst["jobSource"] = *src.jobSource;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["jobSource"]) {
                dst.jobSource = item["jobSource"].as<decltype(dst.jobSource)::value_type>();
            } else {
                //dst.jobSource = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["jobSource"]) {
            dst.jobSource = src["jobSource"].as<decltype(dst.jobSource)::value_type>();
        } else {
            //dst.jobSource = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDescriptionDataElementsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.jobSource) {
        dst["jobSource"] = *src.jobSource;
    }
    if (src.label) {
        dst["label"] = *src.label;
    }
    if (src.description) {
        dst["description"] = *src.description;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["jobSource"]) {
                dst.jobSource = item["jobSource"].as<decltype(dst.jobSource)::value_type>();
            } else {
                //dst.jobSource = std::nullopt;
            }
            if (item["label"]) {
                dst.label = item["label"].as<decltype(dst.label)::value_type>();
            } else {
                //dst.label = std::nullopt;
            }
            if (item["description"]) {
                dst.description = item["description"].as<decltype(dst.description)::value_type>();
            } else {
                //dst.description = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["jobSource"]) {
            dst.jobSource = src["jobSource"].as<decltype(dst.jobSource)::value_type>();
        } else {
            //dst.jobSource = std::nullopt;
        }
        if (src["label"]) {
            dst.label = src["label"].as<decltype(dst.label)::value_type>();
        } else {
            //dst.label = std::nullopt;
        }
        if (src["description"]) {
            dst.description = src["description"].as<decltype(dst.description)::value_type>();
        } else {
            //dst.description = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDescriptionListDataType &src, JsonVariant &dst)
{
    if (src.taskManagementJobDescriptionData) {
        dst["taskManagementJobDescriptionData"] = *src.taskManagementJobDescriptionData;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionListDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["taskManagementJobDescriptionData"]) {
                dst.taskManagementJobDescriptionData =
                    item["taskManagementJobDescriptionData"].as<decltype(dst.taskManagementJobDescriptionData)::value_type>();
            } else {
                //dst.taskManagementJobDescriptionData = std::nullopt;
            }
        }
    } else {
        if (src["taskManagementJobDescriptionData"]) {
            dst.taskManagementJobDescriptionData =
                src["taskManagementJobDescriptionData"].as<decltype(dst.taskManagementJobDescriptionData)::value_type>();
        } else {
            //dst.taskManagementJobDescriptionData = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementJobDescriptionListDataSelectorsType &src, JsonVariant &dst)
{
    if (src.jobId) {
        dst["jobId"] = *src.jobId;
    }
    if (src.jobSource) {
        dst["jobSource"] = *src.jobSource;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementJobDescriptionListDataSelectorsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["jobId"]) {
                dst.jobId = item["jobId"].as<decltype(dst.jobId)::value_type>();
            } else {
                //dst.jobId = std::nullopt;
            }
            if (item["jobSource"]) {
                dst.jobSource = item["jobSource"].as<decltype(dst.jobSource)::value_type>();
            } else {
                //dst.jobSource = std::nullopt;
            }
        }
    } else {
        if (src["jobId"]) {
            dst.jobId = src["jobId"].as<decltype(dst.jobId)::value_type>();
        } else {
            //dst.jobId = std::nullopt;
        }
        if (src["jobSource"]) {
            dst.jobSource = src["jobSource"].as<decltype(dst.jobSource)::value_type>();
        } else {
            //dst.jobSource = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementOverviewDataType &src, JsonVariant &dst)
{
    if (src.remoteControllable) {
        dst["remoteControllable"] = *src.remoteControllable;
    }
    if (src.jobsActive) {
        dst["jobsActive"] = *src.jobsActive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementOverviewDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["remoteControllable"]) {
                dst.remoteControllable = item["remoteControllable"].as<decltype(dst.remoteControllable)::value_type>();
            } else {
                //dst.remoteControllable = std::nullopt;
            }
            if (item["jobsActive"]) {
                dst.jobsActive = item["jobsActive"].as<decltype(dst.jobsActive)::value_type>();
            } else {
                //dst.jobsActive = std::nullopt;
            }
        }
    } else {
        if (src["remoteControllable"]) {
            dst.remoteControllable = src["remoteControllable"].as<decltype(dst.remoteControllable)::value_type>();
        } else {
            //dst.remoteControllable = std::nullopt;
        }
        if (src["jobsActive"]) {
            dst.jobsActive = src["jobsActive"].as<decltype(dst.jobsActive)::value_type>();
        } else {
            //dst.jobsActive = std::nullopt;
        }
    }
}
bool convertToJson(const TaskManagementOverviewDataElementsType &src, JsonVariant &dst)
{
    if (src.remoteControllable) {
        dst["remoteControllable"] = *src.remoteControllable;
    }
    if (src.jobsActive) {
        dst["jobsActive"] = *src.jobsActive;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TaskManagementOverviewDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["remoteControllable"]) {
                dst.remoteControllable = item["remoteControllable"].as<decltype(dst.remoteControllable)::value_type>();
            } else {
                //dst.remoteControllable = std::nullopt;
            }
            if (item["jobsActive"]) {
                dst.jobsActive = item["jobsActive"].as<decltype(dst.jobsActive)::value_type>();
            } else {
                //dst.jobsActive = std::nullopt;
            }
        }
    } else {
        if (src["remoteControllable"]) {
            dst.remoteControllable = src["remoteControllable"].as<decltype(dst.remoteControllable)::value_type>();
        } else {
            //dst.remoteControllable = std::nullopt;
        }
        if (src["jobsActive"]) {
            dst.jobsActive = src["jobsActive"].as<decltype(dst.jobsActive)::value_type>();
        } else {
            //dst.jobsActive = std::nullopt;
        }
    }
}
bool convertToJson(const TimeInformationDataType &src, JsonVariant &dst)
{
    if (src.utc) {
        dst["utc"] = *src.utc;
    }
    if (src.utcOffset) {
        dst["utcOffset"] = *src.utcOffset;
    }
    if (src.dayOfWeek) {
        dst["dayOfWeek"] = *src.dayOfWeek;
    }
    if (src.calendarWeek) {
        dst["calendarWeek"] = *src.calendarWeek;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeInformationDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["utc"]) {
                dst.utc = item["utc"].as<decltype(dst.utc)::value_type>();
            } else {
                //dst.utc = std::nullopt;
            }
            if (item["utcOffset"]) {
                dst.utcOffset = item["utcOffset"].as<decltype(dst.utcOffset)::value_type>();
            } else {
                //dst.utcOffset = std::nullopt;
            }
            if (item["dayOfWeek"]) {
                dst.dayOfWeek = item["dayOfWeek"].as<decltype(dst.dayOfWeek)::value_type>();
            } else {
                //dst.dayOfWeek = std::nullopt;
            }
            if (item["calendarWeek"]) {
                dst.calendarWeek = item["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
            } else {
                //dst.calendarWeek = std::nullopt;
            }
        }
    } else {
        if (src["utc"]) {
            dst.utc = src["utc"].as<decltype(dst.utc)::value_type>();
        } else {
            //dst.utc = std::nullopt;
        }
        if (src["utcOffset"]) {
            dst.utcOffset = src["utcOffset"].as<decltype(dst.utcOffset)::value_type>();
        } else {
            //dst.utcOffset = std::nullopt;
        }
        if (src["dayOfWeek"]) {
            dst.dayOfWeek = src["dayOfWeek"].as<decltype(dst.dayOfWeek)::value_type>();
        } else {
            //dst.dayOfWeek = std::nullopt;
        }
        if (src["calendarWeek"]) {
            dst.calendarWeek = src["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
        } else {
            //dst.calendarWeek = std::nullopt;
        }
    }
}
bool convertToJson(const TimeInformationDataElementsType &src, JsonVariant &dst)
{
    if (src.utc) {
        dst["utc"] = *src.utc;
    }
    if (src.utcOffset) {
        dst["utcOffset"] = *src.utcOffset;
    }
    if (src.dayOfWeek) {
        dst["dayOfWeek"] = *src.dayOfWeek;
    }
    if (src.calendarWeek) {
        dst["calendarWeek"] = *src.calendarWeek;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeInformationDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["utc"]) {
                dst.utc = item["utc"].as<decltype(dst.utc)::value_type>();
            } else {
                //dst.utc = std::nullopt;
            }
            if (item["utcOffset"]) {
                dst.utcOffset = item["utcOffset"].as<decltype(dst.utcOffset)::value_type>();
            } else {
                //dst.utcOffset = std::nullopt;
            }
            if (item["dayOfWeek"]) {
                dst.dayOfWeek = item["dayOfWeek"].as<decltype(dst.dayOfWeek)::value_type>();
            } else {
                //dst.dayOfWeek = std::nullopt;
            }
            if (item["calendarWeek"]) {
                dst.calendarWeek = item["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
            } else {
                //dst.calendarWeek = std::nullopt;
            }
        }
    } else {
        if (src["utc"]) {
            dst.utc = src["utc"].as<decltype(dst.utc)::value_type>();
        } else {
            //dst.utc = std::nullopt;
        }
        if (src["utcOffset"]) {
            dst.utcOffset = src["utcOffset"].as<decltype(dst.utcOffset)::value_type>();
        } else {
            //dst.utcOffset = std::nullopt;
        }
        if (src["dayOfWeek"]) {
            dst.dayOfWeek = src["dayOfWeek"].as<decltype(dst.dayOfWeek)::value_type>();
        } else {
            //dst.dayOfWeek = std::nullopt;
        }
        if (src["calendarWeek"]) {
            dst.calendarWeek = src["calendarWeek"].as<decltype(dst.calendarWeek)::value_type>();
        } else {
            //dst.calendarWeek = std::nullopt;
        }
    }
}
bool convertToJson(const TimeDistributorDataType &src, JsonVariant &dst)
{
    if (src.isTimeDistributor) {
        dst["isTimeDistributor"] = *src.isTimeDistributor;
    }
    if (src.distributorPriority) {
        dst["distributorPriority"] = *src.distributorPriority;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeDistributorDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isTimeDistributor"]) {
                dst.isTimeDistributor = item["isTimeDistributor"].as<decltype(dst.isTimeDistributor)::value_type>();
            } else {
                //dst.isTimeDistributor = std::nullopt;
            }
            if (item["distributorPriority"]) {
                dst.distributorPriority = item["distributorPriority"].as<decltype(dst.distributorPriority)::value_type>();
            } else {
                //dst.distributorPriority = std::nullopt;
            }
        }
    } else {
        if (src["isTimeDistributor"]) {
            dst.isTimeDistributor = src["isTimeDistributor"].as<decltype(dst.isTimeDistributor)::value_type>();
        } else {
            //dst.isTimeDistributor = std::nullopt;
        }
        if (src["distributorPriority"]) {
            dst.distributorPriority = src["distributorPriority"].as<decltype(dst.distributorPriority)::value_type>();
        } else {
            //dst.distributorPriority = std::nullopt;
        }
    }
}
bool convertToJson(const TimeDistributorDataElementsType &src, JsonVariant &dst)
{
    if (src.isTimeDistributor) {
        dst["isTimeDistributor"] = *src.isTimeDistributor;
    }
    if (src.distributorPriority) {
        dst["distributorPriority"] = *src.distributorPriority;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeDistributorDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isTimeDistributor"]) {
                dst.isTimeDistributor = item["isTimeDistributor"].as<decltype(dst.isTimeDistributor)::value_type>();
            } else {
                //dst.isTimeDistributor = std::nullopt;
            }
            if (item["distributorPriority"]) {
                dst.distributorPriority = item["distributorPriority"].as<decltype(dst.distributorPriority)::value_type>();
            } else {
                //dst.distributorPriority = std::nullopt;
            }
        }
    } else {
        if (src["isTimeDistributor"]) {
            dst.isTimeDistributor = src["isTimeDistributor"].as<decltype(dst.isTimeDistributor)::value_type>();
        } else {
            //dst.isTimeDistributor = std::nullopt;
        }
        if (src["distributorPriority"]) {
            dst.distributorPriority = src["distributorPriority"].as<decltype(dst.distributorPriority)::value_type>();
        } else {
            //dst.distributorPriority = std::nullopt;
        }
    }
}
bool convertToJson(const TimePrecisionDataType &src, JsonVariant &dst)
{
    if (src.isSynchronised) {
        dst["isSynchronised"] = *src.isSynchronised;
    }
    if (src.lastSyncAt) {
        dst["lastSyncAt"] = *src.lastSyncAt;
    }
    if (src.clockDrift) {
        dst["clockDrift"] = *src.clockDrift;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimePrecisionDataType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isSynchronised"]) {
                dst.isSynchronised = item["isSynchronised"].as<decltype(dst.isSynchronised)::value_type>();
            } else {
                //dst.isSynchronised = std::nullopt;
            }
            if (item["lastSyncAt"]) {
                dst.lastSyncAt = item["lastSyncAt"].as<decltype(dst.lastSyncAt)::value_type>();
            } else {
                //dst.lastSyncAt = std::nullopt;
            }
            if (item["clockDrift"]) {
                dst.clockDrift = item["clockDrift"].as<decltype(dst.clockDrift)::value_type>();
            } else {
                //dst.clockDrift = std::nullopt;
            }
        }
    } else {
        if (src["isSynchronised"]) {
            dst.isSynchronised = src["isSynchronised"].as<decltype(dst.isSynchronised)::value_type>();
        } else {
            //dst.isSynchronised = std::nullopt;
        }
        if (src["lastSyncAt"]) {
            dst.lastSyncAt = src["lastSyncAt"].as<decltype(dst.lastSyncAt)::value_type>();
        } else {
            //dst.lastSyncAt = std::nullopt;
        }
        if (src["clockDrift"]) {
            dst.clockDrift = src["clockDrift"].as<decltype(dst.clockDrift)::value_type>();
        } else {
            //dst.clockDrift = std::nullopt;
        }
    }
}
bool convertToJson(const TimePrecisionDataElementsType &src, JsonVariant &dst)
{
    if (src.isSynchronised) {
        dst["isSynchronised"] = *src.isSynchronised;
    }
    if (src.lastSyncAt) {
        dst["lastSyncAt"] = *src.lastSyncAt;
    }
    if (src.clockDrift) {
        dst["clockDrift"] = *src.clockDrift;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimePrecisionDataElementsType &dst)
{
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["isSynchronised"]) {
                dst.isSynchronised = item["isSynchronised"].as<decltype(dst.isSynchronised)::value_type>();
            } else {
                //dst.isSynchronised = std::nullopt;
            }
            if (item["lastSyncAt"]) {
                dst.lastSyncAt = item["lastSyncAt"].as<decltype(dst.lastSyncAt)::value_type>();
            } else {
                //dst.lastSyncAt = std::nullopt;
            }
            if (item["clockDrift"]) {
                dst.clockDrift = item["clockDrift"].as<decltype(dst.clockDrift)::value_type>();
            } else {
                //dst.clockDrift = std::nullopt;
            }
        }
    } else {
        if (src["isSynchronised"]) {
            dst.isSynchronised = src["isSynchronised"].as<decltype(dst.isSynchronised)::value_type>();
        } else {
            //dst.isSynchronised = std::nullopt;
        }
        if (src["lastSyncAt"]) {
            dst.lastSyncAt = src["lastSyncAt"].as<decltype(dst.lastSyncAt)::value_type>();
        } else {
            //dst.lastSyncAt = std::nullopt;
        }
        if (src["clockDrift"]) {
            dst.clockDrift = src["clockDrift"].as<decltype(dst.clockDrift)::value_type>();
        } else {
            //dst.clockDrift = std::nullopt;
        }
    }
}
bool convertToJson(const TimeDistributorEnquiryCallType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeDistributorEnquiryCallType &dst)
{
}
bool convertToJson(const TimeDistributorEnquiryCallElementsType &src, JsonVariant &dst)
{

    return true;
}
void convertFromJson(const JsonVariantConst &src, TimeDistributorEnquiryCallElementsType &dst)
{
}
bool convertToJson(const HeaderType &src, JsonVariant &dst)
{
    if (src.specificationVersion) {
        dst["specificationVersion"] = *src.specificationVersion;
    }
    if (src.addressSource) {
        dst["addressSource"] = *src.addressSource;
    }
    if (src.addressDestination) {
        dst["addressDestination"] = *src.addressDestination;
    }
    if (src.addressOriginator) {
        dst["addressOriginator"] = *src.addressOriginator;
    }
    if (src.msgCounter) {
        dst["msgCounter"] = *src.msgCounter;
    }
    if (src.msgCounterReference) {
        dst["msgCounterReference"] = *src.msgCounterReference;
    }
    if (src.cmdClassifier) {
        dst["cmdClassifier"] = *src.cmdClassifier;
    }
    if (src.ackRequest) {
        dst["ackRequest"] = *src.ackRequest;
    }
    if (src.timestamp) {
        dst["timestamp"] = *src.timestamp;
    }

    return true;
}
void convertFromJson(const JsonVariantConst &src, HeaderType &dst)
{
    logger.printfln("Src: %s", src.as<String>().c_str());
    if (src.is<JsonArrayConst>()) {
        JsonArrayConst array = src.as<JsonArrayConst>();
        for (JsonVariantConst item : array) {
            if (item["specificationVersion"]) {
                dst.specificationVersion = item["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
            } else {
                //dst.specificationVersion = std::nullopt;
            }
            if (item["addressSource"]) {
                dst.addressSource = item["addressSource"].as<decltype(dst.addressSource)::value_type>();
            } else {
                //dst.addressSource = std::nullopt;
            }
            if (item["addressDestination"]) {
                dst.addressDestination = item["addressDestination"].as<decltype(dst.addressDestination)::value_type>();
            } else {
                //dst.addressDestination = std::nullopt;
            }
            if (item["addressOriginator"]) {
                dst.addressOriginator = item["addressOriginator"].as<decltype(dst.addressOriginator)::value_type>();
            } else {
                //dst.addressOriginator = std::nullopt;
            }
            if (item["msgCounter"]) {
                dst.msgCounter = item["msgCounter"].as<decltype(dst.msgCounter)::value_type>();
            } else {
                //dst.msgCounter = std::nullopt;
            }
            if (item["msgCounterReference"]) {
                dst.msgCounterReference = item["msgCounterReference"].as<decltype(dst.msgCounterReference)::value_type>();
            } else {
                //dst.msgCounterReference = std::nullopt;
            }
            if (item["cmdClassifier"]) {
                dst.cmdClassifier = item["cmdClassifier"].as<decltype(dst.cmdClassifier)::value_type>();
            } else {
                //dst.cmdClassifier = std::nullopt;
            }
            if (item["ackRequest"]) {
                dst.ackRequest = item["ackRequest"].as<decltype(dst.ackRequest)::value_type>();
            } else {
                //dst.ackRequest = std::nullopt;
            }
            if (item["timestamp"]) {
                dst.timestamp = item["timestamp"].as<decltype(dst.timestamp)::value_type>();
            } else {
                //dst.timestamp = std::nullopt;
            }
        }
    } else {
        if (src["specificationVersion"]) {
            dst.specificationVersion = src["specificationVersion"].as<decltype(dst.specificationVersion)::value_type>();
        } else {
            //dst.specificationVersion = std::nullopt;
        }
        if (src["addressSource"]) {
            dst.addressSource = src["addressSource"].as<decltype(dst.addressSource)::value_type>();
        } else {
            //dst.addressSource = std::nullopt;
        }
        if (src["addressDestination"]) {
            dst.addressDestination = src["addressDestination"].as<decltype(dst.addressDestination)::value_type>();
        } else {
            //dst.addressDestination = std::nullopt;
        }
        if (src["addressOriginator"]) {
            dst.addressOriginator = src["addressOriginator"].as<decltype(dst.addressOriginator)::value_type>();
        } else {
            //dst.addressOriginator = std::nullopt;
        }
        if (src["msgCounter"]) {
            dst.msgCounter = src["msgCounter"].as<decltype(dst.msgCounter)::value_type>();
        } else {
            //dst.msgCounter = std::nullopt;
        }
        if (src["msgCounterReference"]) {
            dst.msgCounterReference = src["msgCounterReference"].as<decltype(dst.msgCounterReference)::value_type>();
        } else {
            //dst.msgCounterReference = std::nullopt;
        }
        if (src["cmdClassifier"]) {
            dst.cmdClassifier = src["cmdClassifier"].as<decltype(dst.cmdClassifier)::value_type>();
        } else {
            //dst.cmdClassifier = std::nullopt;
        }
        if (src["ackRequest"]) {
            dst.ackRequest = src["ackRequest"].as<decltype(dst.ackRequest)::value_type>();
        } else {
            //dst.ackRequest = std::nullopt;
        }
        if (src["timestamp"]) {
            dst.timestamp = src["timestamp"].as<decltype(dst.timestamp)::value_type>();
        } else {
            //dst.timestamp = std::nullopt;
        }
    }
}

SpineDataTypeHandler::Type SpineDataTypeHandler::type_from_function(SpineDataTypeHandler::Function function)
{
    switch (function) {
        case SpineDataTypeHandler::Function::messagingData:
            return SpineDataTypeHandler::Type::MessagingDataType;
        case SpineDataTypeHandler::Function::messagingDataElements:
            return SpineDataTypeHandler::Type::MessagingDataElementsType;
        case SpineDataTypeHandler::Function::messagingListData:
            return SpineDataTypeHandler::Type::MessagingListDataType;
        case SpineDataTypeHandler::Function::messagingListDataSelectors:
            return SpineDataTypeHandler::Type::MessagingListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeSeriesData:
            return SpineDataTypeHandler::Type::TimeSeriesDataType;
        case SpineDataTypeHandler::Function::timeSeriesDataElements:
            return SpineDataTypeHandler::Type::TimeSeriesDataElementsType;
        case SpineDataTypeHandler::Function::timeSeriesListData:
            return SpineDataTypeHandler::Type::TimeSeriesListDataType;
        case SpineDataTypeHandler::Function::timeSeriesListDataSelectors:
            return SpineDataTypeHandler::Type::TimeSeriesListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeSeriesDescriptionData:
            return SpineDataTypeHandler::Type::TimeSeriesDescriptionDataType;
        case SpineDataTypeHandler::Function::timeSeriesDescriptionDataElements:
            return SpineDataTypeHandler::Type::TimeSeriesDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::timeSeriesDescriptionListData:
            return SpineDataTypeHandler::Type::TimeSeriesDescriptionListDataType;
        case SpineDataTypeHandler::Function::timeSeriesDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TimeSeriesDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeSeriesConstraintsData:
            return SpineDataTypeHandler::Type::TimeSeriesConstraintsDataType;
        case SpineDataTypeHandler::Function::timeSeriesConstraintsDataElements:
            return SpineDataTypeHandler::Type::TimeSeriesConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::timeSeriesConstraintsListData:
            return SpineDataTypeHandler::Type::TimeSeriesConstraintsListDataType;
        case SpineDataTypeHandler::Function::timeSeriesConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::TimeSeriesConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::measurementData:
            return SpineDataTypeHandler::Type::MeasurementDataType;
        case SpineDataTypeHandler::Function::measurementDataElements:
            return SpineDataTypeHandler::Type::MeasurementDataElementsType;
        case SpineDataTypeHandler::Function::measurementListData:
            return SpineDataTypeHandler::Type::MeasurementListDataType;
        case SpineDataTypeHandler::Function::measurementListDataSelectors:
            return SpineDataTypeHandler::Type::MeasurementListDataSelectorsType;
        case SpineDataTypeHandler::Function::measurementSeriesData:
            return SpineDataTypeHandler::Type::MeasurementSeriesDataType;
        case SpineDataTypeHandler::Function::measurementSeriesDataElements:
            return SpineDataTypeHandler::Type::MeasurementSeriesDataElementsType;
        case SpineDataTypeHandler::Function::measurementSeriesListData:
            return SpineDataTypeHandler::Type::MeasurementSeriesListDataType;
        case SpineDataTypeHandler::Function::measurementSeriesListDataSelectors:
            return SpineDataTypeHandler::Type::MeasurementSeriesListDataSelectorsType;
        case SpineDataTypeHandler::Function::measurementConstraintsData:
            return SpineDataTypeHandler::Type::MeasurementConstraintsDataType;
        case SpineDataTypeHandler::Function::measurementConstraintsDataElements:
            return SpineDataTypeHandler::Type::MeasurementConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::measurementConstraintsListData:
            return SpineDataTypeHandler::Type::MeasurementConstraintsListDataType;
        case SpineDataTypeHandler::Function::measurementConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::MeasurementConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::measurementDescriptionData:
            return SpineDataTypeHandler::Type::MeasurementDescriptionDataType;
        case SpineDataTypeHandler::Function::measurementDescriptionDataElements:
            return SpineDataTypeHandler::Type::MeasurementDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::measurementDescriptionListData:
            return SpineDataTypeHandler::Type::MeasurementDescriptionListDataType;
        case SpineDataTypeHandler::Function::measurementDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::MeasurementDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::measurementThresholdRelationData:
            return SpineDataTypeHandler::Type::MeasurementThresholdRelationDataType;
        case SpineDataTypeHandler::Function::measurementThresholdRelationDataElements:
            return SpineDataTypeHandler::Type::MeasurementThresholdRelationDataElementsType;
        case SpineDataTypeHandler::Function::measurementThresholdRelationListData:
            return SpineDataTypeHandler::Type::MeasurementThresholdRelationListDataType;
        case SpineDataTypeHandler::Function::measurementThresholdRelationListDataSelectors:
            return SpineDataTypeHandler::Type::MeasurementThresholdRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::thresholdData:
            return SpineDataTypeHandler::Type::ThresholdDataType;
        case SpineDataTypeHandler::Function::thresholdDataElements:
            return SpineDataTypeHandler::Type::ThresholdDataElementsType;
        case SpineDataTypeHandler::Function::thresholdListData:
            return SpineDataTypeHandler::Type::ThresholdListDataType;
        case SpineDataTypeHandler::Function::thresholdListDataSelectors:
            return SpineDataTypeHandler::Type::ThresholdListDataSelectorsType;
        case SpineDataTypeHandler::Function::thresholdConstraintsData:
            return SpineDataTypeHandler::Type::ThresholdConstraintsDataType;
        case SpineDataTypeHandler::Function::thresholdConstraintsDataElements:
            return SpineDataTypeHandler::Type::ThresholdConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::thresholdConstraintsListData:
            return SpineDataTypeHandler::Type::ThresholdConstraintsListDataType;
        case SpineDataTypeHandler::Function::thresholdConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::ThresholdConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::thresholdDescriptionData:
            return SpineDataTypeHandler::Type::ThresholdDescriptionDataType;
        case SpineDataTypeHandler::Function::thresholdDescriptionDataElements:
            return SpineDataTypeHandler::Type::ThresholdDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::thresholdDescriptionListData:
            return SpineDataTypeHandler::Type::ThresholdDescriptionListDataType;
        case SpineDataTypeHandler::Function::thresholdDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::ThresholdDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::directControlActivityData:
            return SpineDataTypeHandler::Type::DirectControlActivityDataType;
        case SpineDataTypeHandler::Function::directControlActivityDataElements:
            return SpineDataTypeHandler::Type::DirectControlActivityDataElementsType;
        case SpineDataTypeHandler::Function::directControlActivityListData:
            return SpineDataTypeHandler::Type::DirectControlActivityListDataType;
        case SpineDataTypeHandler::Function::directControlActivityListDataSelectors:
            return SpineDataTypeHandler::Type::DirectControlActivityListDataSelectorsType;
        case SpineDataTypeHandler::Function::directControlDescriptionData:
            return SpineDataTypeHandler::Type::DirectControlDescriptionDataType;
        case SpineDataTypeHandler::Function::directControlDescriptionDataElements:
            return SpineDataTypeHandler::Type::DirectControlDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleData:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleDataElements:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleDataElementsType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleListData:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleListDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleListDataSelectors:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerTimeSlotValueData:
            return SpineDataTypeHandler::Type::PowerTimeSlotValueDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotValueDataElements:
            return SpineDataTypeHandler::Type::PowerTimeSlotValueDataElementsType;
        case SpineDataTypeHandler::Function::powerTimeSlotValueListData:
            return SpineDataTypeHandler::Type::PowerTimeSlotValueListDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotValueListDataSelectors:
            return SpineDataTypeHandler::Type::PowerTimeSlotValueListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsData:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleConstraintsDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsDataElements:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListData:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleConstraintsListDataType;
        case SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::PowerTimeSlotScheduleConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceAlternativesRelationData:
            return SpineDataTypeHandler::Type::PowerSequenceAlternativesRelationDataType;
        case SpineDataTypeHandler::Function::powerSequenceAlternativesRelationDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceAlternativesRelationDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListData:
            return SpineDataTypeHandler::Type::PowerSequenceAlternativesRelationListDataType;
        case SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceAlternativesRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceDescriptionData:
            return SpineDataTypeHandler::Type::PowerSequenceDescriptionDataType;
        case SpineDataTypeHandler::Function::powerSequenceDescriptionDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceDescriptionListData:
            return SpineDataTypeHandler::Type::PowerSequenceDescriptionListDataType;
        case SpineDataTypeHandler::Function::powerSequenceDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceStateData:
            return SpineDataTypeHandler::Type::PowerSequenceStateDataType;
        case SpineDataTypeHandler::Function::powerSequenceStateDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceStateDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceStateListData:
            return SpineDataTypeHandler::Type::PowerSequenceStateListDataType;
        case SpineDataTypeHandler::Function::powerSequenceStateListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceStateListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleData:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleDataType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleListData:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleListDataType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsData:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConstraintsDataType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListData:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConstraintsListDataType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequencePriceData:
            return SpineDataTypeHandler::Type::PowerSequencePriceDataType;
        case SpineDataTypeHandler::Function::powerSequencePriceDataElements:
            return SpineDataTypeHandler::Type::PowerSequencePriceDataElementsType;
        case SpineDataTypeHandler::Function::powerSequencePriceListData:
            return SpineDataTypeHandler::Type::PowerSequencePriceListDataType;
        case SpineDataTypeHandler::Function::powerSequencePriceListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequencePriceListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceData:
            return SpineDataTypeHandler::Type::PowerSequenceSchedulePreferenceDataType;
        case SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceSchedulePreferenceDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListData:
            return SpineDataTypeHandler::Type::PowerSequenceSchedulePreferenceListDataType;
        case SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListDataSelectors:
            return SpineDataTypeHandler::Type::PowerSequenceSchedulePreferenceListDataSelectorsType;
        case SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationData:
            return SpineDataTypeHandler::Type::PowerSequenceNodeScheduleInformationDataType;
        case SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationDataElements:
            return SpineDataTypeHandler::Type::PowerSequenceNodeScheduleInformationDataElementsType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCall:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConfigurationRequestCallType;
        case SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCallElements:
            return SpineDataTypeHandler::Type::PowerSequenceScheduleConfigurationRequestCallElementsType;
        case SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCall:
            return SpineDataTypeHandler::Type::PowerSequencePriceCalculationRequestCallType;
        case SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCallElements:
            return SpineDataTypeHandler::Type::PowerSequencePriceCalculationRequestCallElementsType;
        case SpineDataTypeHandler::Function::resultData:
            return SpineDataTypeHandler::Type::ResultDataType;
        case SpineDataTypeHandler::Function::bindingManagementEntryData:
            return SpineDataTypeHandler::Type::BindingManagementEntryDataType;
        case SpineDataTypeHandler::Function::bindingManagementEntryDataElements:
            return SpineDataTypeHandler::Type::BindingManagementEntryDataElementsType;
        case SpineDataTypeHandler::Function::bindingManagementEntryListData:
            return SpineDataTypeHandler::Type::BindingManagementEntryListDataType;
        case SpineDataTypeHandler::Function::bindingManagementEntryListDataSelectors:
            return SpineDataTypeHandler::Type::BindingManagementEntryListDataSelectorsType;
        case SpineDataTypeHandler::Function::bindingManagementRequestCall:
            return SpineDataTypeHandler::Type::BindingManagementRequestCallType;
        case SpineDataTypeHandler::Function::bindingManagementRequestCallElements:
            return SpineDataTypeHandler::Type::BindingManagementRequestCallElementsType;
        case SpineDataTypeHandler::Function::bindingManagementDeleteCall:
            return SpineDataTypeHandler::Type::BindingManagementDeleteCallType;
        case SpineDataTypeHandler::Function::bindingManagementDeleteCallElements:
            return SpineDataTypeHandler::Type::BindingManagementDeleteCallElementsType;
        case SpineDataTypeHandler::Function::actuatorLevelData:
            return SpineDataTypeHandler::Type::ActuatorLevelDataType;
        case SpineDataTypeHandler::Function::actuatorLevelDataElements:
            return SpineDataTypeHandler::Type::ActuatorLevelDataElementsType;
        case SpineDataTypeHandler::Function::actuatorLevelDescriptionData:
            return SpineDataTypeHandler::Type::ActuatorLevelDescriptionDataType;
        case SpineDataTypeHandler::Function::actuatorLevelDescriptionDataElements:
            return SpineDataTypeHandler::Type::ActuatorLevelDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::cmdClassifier:
            return SpineDataTypeHandler::Type::CmdClassifierType;
        case SpineDataTypeHandler::Function::lastUpdateAt:
            return SpineDataTypeHandler::Type::AbsoluteOrRelativeTimeType;
        case SpineDataTypeHandler::Function::function:
            return SpineDataTypeHandler::Type::FunctionType;
        case SpineDataTypeHandler::Function::cmdControl:
            return SpineDataTypeHandler::Type::CmdControlType;
        case SpineDataTypeHandler::Function::actuatorSwitchData:
            return SpineDataTypeHandler::Type::ActuatorSwitchDataType;
        case SpineDataTypeHandler::Function::actuatorSwitchDataElements:
            return SpineDataTypeHandler::Type::ActuatorSwitchDataElementsType;
        case SpineDataTypeHandler::Function::actuatorSwitchDescriptionData:
            return SpineDataTypeHandler::Type::ActuatorSwitchDescriptionDataType;
        case SpineDataTypeHandler::Function::actuatorSwitchDescriptionDataElements:
            return SpineDataTypeHandler::Type::ActuatorSwitchDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::alarmData:
            return SpineDataTypeHandler::Type::AlarmDataType;
        case SpineDataTypeHandler::Function::alarmDataElements:
            return SpineDataTypeHandler::Type::AlarmDataElementsType;
        case SpineDataTypeHandler::Function::alarmListData:
            return SpineDataTypeHandler::Type::AlarmListDataType;
        case SpineDataTypeHandler::Function::alarmListDataSelectors:
            return SpineDataTypeHandler::Type::AlarmListDataSelectorsType;
        case SpineDataTypeHandler::Function::billData:
            return SpineDataTypeHandler::Type::BillDataType;
        case SpineDataTypeHandler::Function::billDataElements:
            return SpineDataTypeHandler::Type::BillDataElementsType;
        case SpineDataTypeHandler::Function::billListData:
            return SpineDataTypeHandler::Type::BillListDataType;
        case SpineDataTypeHandler::Function::billListDataSelectors:
            return SpineDataTypeHandler::Type::BillListDataSelectorsType;
        case SpineDataTypeHandler::Function::billConstraintsData:
            return SpineDataTypeHandler::Type::BillConstraintsDataType;
        case SpineDataTypeHandler::Function::billConstraintsDataElements:
            return SpineDataTypeHandler::Type::BillConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::billConstraintsListData:
            return SpineDataTypeHandler::Type::BillConstraintsListDataType;
        case SpineDataTypeHandler::Function::billConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::BillConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::billDescriptionData:
            return SpineDataTypeHandler::Type::BillDescriptionDataType;
        case SpineDataTypeHandler::Function::billDescriptionDataElements:
            return SpineDataTypeHandler::Type::BillDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::billDescriptionListData:
            return SpineDataTypeHandler::Type::BillDescriptionListDataType;
        case SpineDataTypeHandler::Function::billDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::BillDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::identificationData:
            return SpineDataTypeHandler::Type::IdentificationDataType;
        case SpineDataTypeHandler::Function::identificationDataElements:
            return SpineDataTypeHandler::Type::IdentificationDataElementsType;
        case SpineDataTypeHandler::Function::identificationListData:
            return SpineDataTypeHandler::Type::IdentificationListDataType;
        case SpineDataTypeHandler::Function::identificationListDataSelectors:
            return SpineDataTypeHandler::Type::IdentificationListDataSelectorsType;
        case SpineDataTypeHandler::Function::sessionIdentificationData:
            return SpineDataTypeHandler::Type::SessionIdentificationDataType;
        case SpineDataTypeHandler::Function::sessionIdentificationDataElements:
            return SpineDataTypeHandler::Type::SessionIdentificationDataElementsType;
        case SpineDataTypeHandler::Function::sessionIdentificationListData:
            return SpineDataTypeHandler::Type::SessionIdentificationListDataType;
        case SpineDataTypeHandler::Function::sessionIdentificationListDataSelectors:
            return SpineDataTypeHandler::Type::SessionIdentificationListDataSelectorsType;
        case SpineDataTypeHandler::Function::sessionMeasurementRelationData:
            return SpineDataTypeHandler::Type::SessionMeasurementRelationDataType;
        case SpineDataTypeHandler::Function::sessionMeasurementRelationDataElements:
            return SpineDataTypeHandler::Type::SessionMeasurementRelationDataElementsType;
        case SpineDataTypeHandler::Function::sessionMeasurementRelationListData:
            return SpineDataTypeHandler::Type::SessionMeasurementRelationListDataType;
        case SpineDataTypeHandler::Function::sessionMeasurementRelationListDataSelectors:
            return SpineDataTypeHandler::Type::SessionMeasurementRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::dataTunnelingCall:
            return SpineDataTypeHandler::Type::DataTunnelingCallType;
        case SpineDataTypeHandler::Function::dataTunnelingCallElements:
            return SpineDataTypeHandler::Type::DataTunnelingCallElementsType;
        case SpineDataTypeHandler::Function::deviceClassificationManufacturerData:
            return SpineDataTypeHandler::Type::DeviceClassificationManufacturerDataType;
        case SpineDataTypeHandler::Function::deviceClassificationManufacturerDataElements:
            return SpineDataTypeHandler::Type::DeviceClassificationManufacturerDataElementsType;
        case SpineDataTypeHandler::Function::deviceClassificationUserData:
            return SpineDataTypeHandler::Type::DeviceClassificationUserDataType;
        case SpineDataTypeHandler::Function::deviceClassificationUserDataElements:
            return SpineDataTypeHandler::Type::DeviceClassificationUserDataElementsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueDataElements:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDataElementsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueListData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueListDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueListDataSelectors:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueListDataSelectorsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDescriptionDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionDataElements:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDescriptionListDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueConstraintsDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsDataElements:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListData:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueConstraintsListDataType;
        case SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::DeviceConfigurationKeyValueConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::deviceDiagnosisStateData:
            return SpineDataTypeHandler::Type::DeviceDiagnosisStateDataType;
        case SpineDataTypeHandler::Function::deviceDiagnosisStateDataElements:
            return SpineDataTypeHandler::Type::DeviceDiagnosisStateDataElementsType;
        case SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatData:
            return SpineDataTypeHandler::Type::DeviceDiagnosisHeartbeatDataType;
        case SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatDataElements:
            return SpineDataTypeHandler::Type::DeviceDiagnosisHeartbeatDataElementsType;
        case SpineDataTypeHandler::Function::deviceDiagnosisServiceData:
            return SpineDataTypeHandler::Type::DeviceDiagnosisServiceDataType;
        case SpineDataTypeHandler::Function::deviceDiagnosisServiceDataElements:
            return SpineDataTypeHandler::Type::DeviceDiagnosisServiceDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionData:
            return SpineDataTypeHandler::Type::ElectricalConnectionParameterDescriptionDataType;
        case SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionDataElements:
            return SpineDataTypeHandler::Type::ElectricalConnectionParameterDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListData:
            return SpineDataTypeHandler::Type::ElectricalConnectionParameterDescriptionListDataType;
        case SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::ElectricalConnectionParameterDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetData:
            return SpineDataTypeHandler::Type::ElectricalConnectionPermittedValueSetDataType;
        case SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetDataElements:
            return SpineDataTypeHandler::Type::ElectricalConnectionPermittedValueSetDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListData:
            return SpineDataTypeHandler::Type::ElectricalConnectionPermittedValueSetListDataType;
        case SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListDataSelectors:
            return SpineDataTypeHandler::Type::ElectricalConnectionPermittedValueSetListDataSelectorsType;
        case SpineDataTypeHandler::Function::electricalConnectionCharacteristicData:
            return SpineDataTypeHandler::Type::ElectricalConnectionCharacteristicDataType;
        case SpineDataTypeHandler::Function::electricalConnectionCharacteristicDataElements:
            return SpineDataTypeHandler::Type::ElectricalConnectionCharacteristicDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionCharacteristicListData:
            return SpineDataTypeHandler::Type::ElectricalConnectionCharacteristicListDataType;
        case SpineDataTypeHandler::Function::electricalConnectionCharacteristicListDataSelectors:
            return SpineDataTypeHandler::Type::ElectricalConnectionCharacteristicListDataSelectorsType;
        case SpineDataTypeHandler::Function::electricalConnectionStateData:
            return SpineDataTypeHandler::Type::ElectricalConnectionStateDataType;
        case SpineDataTypeHandler::Function::electricalConnectionStateDataElements:
            return SpineDataTypeHandler::Type::ElectricalConnectionStateDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionStateListData:
            return SpineDataTypeHandler::Type::ElectricalConnectionStateListDataType;
        case SpineDataTypeHandler::Function::electricalConnectionStateListDataSelectors:
            return SpineDataTypeHandler::Type::ElectricalConnectionStateListDataSelectorsType;
        case SpineDataTypeHandler::Function::electricalConnectionDescriptionData:
            return SpineDataTypeHandler::Type::ElectricalConnectionDescriptionDataType;
        case SpineDataTypeHandler::Function::electricalConnectionDescriptionDataElements:
            return SpineDataTypeHandler::Type::ElectricalConnectionDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::electricalConnectionDescriptionListData:
            return SpineDataTypeHandler::Type::ElectricalConnectionDescriptionListDataType;
        case SpineDataTypeHandler::Function::electricalConnectionDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::ElectricalConnectionDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionDataElements:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDataElementsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionListData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionListDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionListDataSelectors:
            return SpineDataTypeHandler::Type::HvacSystemFunctionListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionOperationModeRelationDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationDataElements:
            return SpineDataTypeHandler::Type::HvacSystemFunctionOperationModeRelationDataElementsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionOperationModeRelationListDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListDataSelectors:
            return SpineDataTypeHandler::Type::HvacSystemFunctionOperationModeRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionSetpointRelationDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationDataElements:
            return SpineDataTypeHandler::Type::HvacSystemFunctionSetpointRelationDataElementsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionSetpointRelationListDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListDataSelectors:
            return SpineDataTypeHandler::Type::HvacSystemFunctionSetpointRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionPowerSequenceRelationDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationDataElements:
            return SpineDataTypeHandler::Type::HvacSystemFunctionPowerSequenceRelationDataElementsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionPowerSequenceRelationListDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListDataSelectors:
            return SpineDataTypeHandler::Type::HvacSystemFunctionPowerSequenceRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDescriptionDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionDataElements:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListData:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDescriptionListDataType;
        case SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::HvacSystemFunctionDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacOperationModeDescriptionData:
            return SpineDataTypeHandler::Type::HvacOperationModeDescriptionDataType;
        case SpineDataTypeHandler::Function::hvacOperationModeDescriptionDataElements:
            return SpineDataTypeHandler::Type::HvacOperationModeDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::hvacOperationModeDescriptionListData:
            return SpineDataTypeHandler::Type::HvacOperationModeDescriptionListDataType;
        case SpineDataTypeHandler::Function::hvacOperationModeDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::HvacOperationModeDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacOverrunData:
            return SpineDataTypeHandler::Type::HvacOverrunDataType;
        case SpineDataTypeHandler::Function::hvacOverrunDataElements:
            return SpineDataTypeHandler::Type::HvacOverrunDataElementsType;
        case SpineDataTypeHandler::Function::hvacOverrunListData:
            return SpineDataTypeHandler::Type::HvacOverrunListDataType;
        case SpineDataTypeHandler::Function::hvacOverrunListDataSelectors:
            return SpineDataTypeHandler::Type::HvacOverrunListDataSelectorsType;
        case SpineDataTypeHandler::Function::hvacOverrunDescriptionData:
            return SpineDataTypeHandler::Type::HvacOverrunDescriptionDataType;
        case SpineDataTypeHandler::Function::hvacOverrunDescriptionDataElements:
            return SpineDataTypeHandler::Type::HvacOverrunDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::hvacOverrunDescriptionListData:
            return SpineDataTypeHandler::Type::HvacOverrunDescriptionListDataType;
        case SpineDataTypeHandler::Function::hvacOverrunDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::HvacOverrunDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::setpointData:
            return SpineDataTypeHandler::Type::SetpointDataType;
        case SpineDataTypeHandler::Function::setpointDataElements:
            return SpineDataTypeHandler::Type::SetpointDataElementsType;
        case SpineDataTypeHandler::Function::setpointListData:
            return SpineDataTypeHandler::Type::SetpointListDataType;
        case SpineDataTypeHandler::Function::setpointListDataSelectors:
            return SpineDataTypeHandler::Type::SetpointListDataSelectorsType;
        case SpineDataTypeHandler::Function::setpointConstraintsData:
            return SpineDataTypeHandler::Type::SetpointConstraintsDataType;
        case SpineDataTypeHandler::Function::setpointConstraintsDataElements:
            return SpineDataTypeHandler::Type::SetpointConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::setpointConstraintsListData:
            return SpineDataTypeHandler::Type::SetpointConstraintsListDataType;
        case SpineDataTypeHandler::Function::setpointConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::SetpointConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::setpointDescriptionData:
            return SpineDataTypeHandler::Type::SetpointDescriptionDataType;
        case SpineDataTypeHandler::Function::setpointDescriptionDataElements:
            return SpineDataTypeHandler::Type::SetpointDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::setpointDescriptionListData:
            return SpineDataTypeHandler::Type::SetpointDescriptionListDataType;
        case SpineDataTypeHandler::Function::setpointDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::SetpointDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeTableData:
            return SpineDataTypeHandler::Type::TimeTableDataType;
        case SpineDataTypeHandler::Function::timeTableDataElements:
            return SpineDataTypeHandler::Type::TimeTableDataElementsType;
        case SpineDataTypeHandler::Function::timeTableListData:
            return SpineDataTypeHandler::Type::TimeTableListDataType;
        case SpineDataTypeHandler::Function::timeTableListDataSelectors:
            return SpineDataTypeHandler::Type::TimeTableListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeTableConstraintsData:
            return SpineDataTypeHandler::Type::TimeTableConstraintsDataType;
        case SpineDataTypeHandler::Function::timeTableConstraintsDataElements:
            return SpineDataTypeHandler::Type::TimeTableConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::timeTableConstraintsListData:
            return SpineDataTypeHandler::Type::TimeTableConstraintsListDataType;
        case SpineDataTypeHandler::Function::timeTableConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::TimeTableConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::timeTableDescriptionData:
            return SpineDataTypeHandler::Type::TimeTableDescriptionDataType;
        case SpineDataTypeHandler::Function::timeTableDescriptionDataElements:
            return SpineDataTypeHandler::Type::TimeTableDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::timeTableDescriptionListData:
            return SpineDataTypeHandler::Type::TimeTableDescriptionListDataType;
        case SpineDataTypeHandler::Function::timeTableDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TimeTableDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::incentiveTableData:
            return SpineDataTypeHandler::Type::IncentiveTableDataType;
        case SpineDataTypeHandler::Function::incentiveTableDataElements:
            return SpineDataTypeHandler::Type::IncentiveTableDataElementsType;
        case SpineDataTypeHandler::Function::incentiveTableDataSelectors:
            return SpineDataTypeHandler::Type::IncentiveTableDataSelectorsType;
        case SpineDataTypeHandler::Function::incentiveTableDescriptionData:
            return SpineDataTypeHandler::Type::IncentiveTableDescriptionDataType;
        case SpineDataTypeHandler::Function::incentiveTableDescriptionDataElements:
            return SpineDataTypeHandler::Type::IncentiveTableDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::incentiveTableDescriptionDataSelectors:
            return SpineDataTypeHandler::Type::IncentiveTableDescriptionDataSelectorsType;
        case SpineDataTypeHandler::Function::incentiveTableConstraintsData:
            return SpineDataTypeHandler::Type::IncentiveTableConstraintsDataType;
        case SpineDataTypeHandler::Function::incentiveTableConstraintsDataElements:
            return SpineDataTypeHandler::Type::IncentiveTableConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::incentiveTableConstraintsDataSelectors:
            return SpineDataTypeHandler::Type::IncentiveTableConstraintsDataSelectorsType;
        case SpineDataTypeHandler::Function::tariffOverallConstraintsData:
            return SpineDataTypeHandler::Type::TariffOverallConstraintsDataType;
        case SpineDataTypeHandler::Function::tariffOverallConstraintsDataElements:
            return SpineDataTypeHandler::Type::TariffOverallConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::tariffData:
            return SpineDataTypeHandler::Type::TariffDataType;
        case SpineDataTypeHandler::Function::tariffDataElements:
            return SpineDataTypeHandler::Type::TariffDataElementsType;
        case SpineDataTypeHandler::Function::tariffListData:
            return SpineDataTypeHandler::Type::TariffListDataType;
        case SpineDataTypeHandler::Function::tariffListDataSelectors:
            return SpineDataTypeHandler::Type::TariffListDataSelectorsType;
        case SpineDataTypeHandler::Function::tariffTierRelationData:
            return SpineDataTypeHandler::Type::TariffTierRelationDataType;
        case SpineDataTypeHandler::Function::tariffTierRelationDataElements:
            return SpineDataTypeHandler::Type::TariffTierRelationDataElementsType;
        case SpineDataTypeHandler::Function::tariffTierRelationListData:
            return SpineDataTypeHandler::Type::TariffTierRelationListDataType;
        case SpineDataTypeHandler::Function::tariffTierRelationListDataSelectors:
            return SpineDataTypeHandler::Type::TariffTierRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::tariffBoundaryRelationData:
            return SpineDataTypeHandler::Type::TariffBoundaryRelationDataType;
        case SpineDataTypeHandler::Function::tariffBoundaryRelationDataElements:
            return SpineDataTypeHandler::Type::TariffBoundaryRelationDataElementsType;
        case SpineDataTypeHandler::Function::tariffBoundaryRelationListData:
            return SpineDataTypeHandler::Type::TariffBoundaryRelationListDataType;
        case SpineDataTypeHandler::Function::tariffBoundaryRelationListDataSelectors:
            return SpineDataTypeHandler::Type::TariffBoundaryRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::tariffDescriptionData:
            return SpineDataTypeHandler::Type::TariffDescriptionDataType;
        case SpineDataTypeHandler::Function::tariffDescriptionDataElements:
            return SpineDataTypeHandler::Type::TariffDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::tariffDescriptionListData:
            return SpineDataTypeHandler::Type::TariffDescriptionListDataType;
        case SpineDataTypeHandler::Function::tariffDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TariffDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::tierBoundaryData:
            return SpineDataTypeHandler::Type::TierBoundaryDataType;
        case SpineDataTypeHandler::Function::tierBoundaryDataElements:
            return SpineDataTypeHandler::Type::TierBoundaryDataElementsType;
        case SpineDataTypeHandler::Function::tierBoundaryListData:
            return SpineDataTypeHandler::Type::TierBoundaryListDataType;
        case SpineDataTypeHandler::Function::tierBoundaryListDataSelectors:
            return SpineDataTypeHandler::Type::TierBoundaryListDataSelectorsType;
        case SpineDataTypeHandler::Function::tierBoundaryDescriptionData:
            return SpineDataTypeHandler::Type::TierBoundaryDescriptionDataType;
        case SpineDataTypeHandler::Function::tierBoundaryDescriptionDataElements:
            return SpineDataTypeHandler::Type::TierBoundaryDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::tierBoundaryDescriptionListData:
            return SpineDataTypeHandler::Type::TierBoundaryDescriptionListDataType;
        case SpineDataTypeHandler::Function::tierBoundaryDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TierBoundaryDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::commodityData:
            return SpineDataTypeHandler::Type::CommodityDataType;
        case SpineDataTypeHandler::Function::commodityDataElements:
            return SpineDataTypeHandler::Type::CommodityDataElementsType;
        case SpineDataTypeHandler::Function::commodityListData:
            return SpineDataTypeHandler::Type::CommodityListDataType;
        case SpineDataTypeHandler::Function::commodityListDataSelectors:
            return SpineDataTypeHandler::Type::CommodityListDataSelectorsType;
        case SpineDataTypeHandler::Function::tierData:
            return SpineDataTypeHandler::Type::TierDataType;
        case SpineDataTypeHandler::Function::tierDataElements:
            return SpineDataTypeHandler::Type::TierDataElementsType;
        case SpineDataTypeHandler::Function::tierListData:
            return SpineDataTypeHandler::Type::TierListDataType;
        case SpineDataTypeHandler::Function::tierListDataSelectors:
            return SpineDataTypeHandler::Type::TierListDataSelectorsType;
        case SpineDataTypeHandler::Function::tierIncentiveRelationData:
            return SpineDataTypeHandler::Type::TierIncentiveRelationDataType;
        case SpineDataTypeHandler::Function::tierIncentiveRelationDataElements:
            return SpineDataTypeHandler::Type::TierIncentiveRelationDataElementsType;
        case SpineDataTypeHandler::Function::tierIncentiveRelationListData:
            return SpineDataTypeHandler::Type::TierIncentiveRelationListDataType;
        case SpineDataTypeHandler::Function::tierIncentiveRelationListDataSelectors:
            return SpineDataTypeHandler::Type::TierIncentiveRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::tierDescriptionData:
            return SpineDataTypeHandler::Type::TierDescriptionDataType;
        case SpineDataTypeHandler::Function::tierDescriptionDataElements:
            return SpineDataTypeHandler::Type::TierDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::tierDescriptionListData:
            return SpineDataTypeHandler::Type::TierDescriptionListDataType;
        case SpineDataTypeHandler::Function::tierDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TierDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::incentiveData:
            return SpineDataTypeHandler::Type::IncentiveDataType;
        case SpineDataTypeHandler::Function::incentiveDataElements:
            return SpineDataTypeHandler::Type::IncentiveDataElementsType;
        case SpineDataTypeHandler::Function::incentiveListData:
            return SpineDataTypeHandler::Type::IncentiveListDataType;
        case SpineDataTypeHandler::Function::incentiveListDataSelectors:
            return SpineDataTypeHandler::Type::IncentiveListDataSelectorsType;
        case SpineDataTypeHandler::Function::incentiveDescriptionData:
            return SpineDataTypeHandler::Type::IncentiveDescriptionDataType;
        case SpineDataTypeHandler::Function::incentiveDescriptionDataElements:
            return SpineDataTypeHandler::Type::IncentiveDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::incentiveDescriptionListData:
            return SpineDataTypeHandler::Type::IncentiveDescriptionListDataType;
        case SpineDataTypeHandler::Function::incentiveDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::IncentiveDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::loadControlNodeData:
            return SpineDataTypeHandler::Type::LoadControlNodeDataType;
        case SpineDataTypeHandler::Function::loadControlNodeDataElements:
            return SpineDataTypeHandler::Type::LoadControlNodeDataElementsType;
        case SpineDataTypeHandler::Function::loadControlEventData:
            return SpineDataTypeHandler::Type::LoadControlEventDataType;
        case SpineDataTypeHandler::Function::loadControlEventDataElements:
            return SpineDataTypeHandler::Type::LoadControlEventDataElementsType;
        case SpineDataTypeHandler::Function::loadControlEventListData:
            return SpineDataTypeHandler::Type::LoadControlEventListDataType;
        case SpineDataTypeHandler::Function::loadControlEventListDataSelectors:
            return SpineDataTypeHandler::Type::LoadControlEventListDataSelectorsType;
        case SpineDataTypeHandler::Function::loadControlStateData:
            return SpineDataTypeHandler::Type::LoadControlStateDataType;
        case SpineDataTypeHandler::Function::loadControlStateDataElements:
            return SpineDataTypeHandler::Type::LoadControlStateDataElementsType;
        case SpineDataTypeHandler::Function::loadControlStateListData:
            return SpineDataTypeHandler::Type::LoadControlStateListDataType;
        case SpineDataTypeHandler::Function::loadControlStateListDataSelectors:
            return SpineDataTypeHandler::Type::LoadControlStateListDataSelectorsType;
        case SpineDataTypeHandler::Function::loadControlLimitData:
            return SpineDataTypeHandler::Type::LoadControlLimitDataType;
        case SpineDataTypeHandler::Function::loadControlLimitDataElements:
            return SpineDataTypeHandler::Type::LoadControlLimitDataElementsType;
        case SpineDataTypeHandler::Function::loadControlLimitListData:
            return SpineDataTypeHandler::Type::LoadControlLimitListDataType;
        case SpineDataTypeHandler::Function::loadControlLimitListDataSelectors:
            return SpineDataTypeHandler::Type::LoadControlLimitListDataSelectorsType;
        case SpineDataTypeHandler::Function::loadControlLimitConstraintsData:
            return SpineDataTypeHandler::Type::LoadControlLimitConstraintsDataType;
        case SpineDataTypeHandler::Function::loadControlLimitConstraintsDataElements:
            return SpineDataTypeHandler::Type::LoadControlLimitConstraintsDataElementsType;
        case SpineDataTypeHandler::Function::loadControlLimitConstraintsListData:
            return SpineDataTypeHandler::Type::LoadControlLimitConstraintsListDataType;
        case SpineDataTypeHandler::Function::loadControlLimitConstraintsListDataSelectors:
            return SpineDataTypeHandler::Type::LoadControlLimitConstraintsListDataSelectorsType;
        case SpineDataTypeHandler::Function::loadControlLimitDescriptionData:
            return SpineDataTypeHandler::Type::LoadControlLimitDescriptionDataType;
        case SpineDataTypeHandler::Function::loadControlLimitDescriptionDataElements:
            return SpineDataTypeHandler::Type::LoadControlLimitDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::loadControlLimitDescriptionListData:
            return SpineDataTypeHandler::Type::LoadControlLimitDescriptionListDataType;
        case SpineDataTypeHandler::Function::loadControlLimitDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::LoadControlLimitDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::networkManagementAddNodeCall:
            return SpineDataTypeHandler::Type::NetworkManagementAddNodeCallType;
        case SpineDataTypeHandler::Function::networkManagementAddNodeCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementAddNodeCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementRemoveNodeCall:
            return SpineDataTypeHandler::Type::NetworkManagementRemoveNodeCallType;
        case SpineDataTypeHandler::Function::networkManagementRemoveNodeCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementRemoveNodeCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementModifyNodeCall:
            return SpineDataTypeHandler::Type::NetworkManagementModifyNodeCallType;
        case SpineDataTypeHandler::Function::networkManagementModifyNodeCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementModifyNodeCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementScanNetworkCall:
            return SpineDataTypeHandler::Type::NetworkManagementScanNetworkCallType;
        case SpineDataTypeHandler::Function::networkManagementScanNetworkCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementScanNetworkCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementDiscoverCall:
            return SpineDataTypeHandler::Type::NetworkManagementDiscoverCallType;
        case SpineDataTypeHandler::Function::networkManagementDiscoverCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementDiscoverCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementAbortCall:
            return SpineDataTypeHandler::Type::NetworkManagementAbortCallType;
        case SpineDataTypeHandler::Function::networkManagementAbortCallElements:
            return SpineDataTypeHandler::Type::NetworkManagementAbortCallElementsType;
        case SpineDataTypeHandler::Function::networkManagementProcessStateData:
            return SpineDataTypeHandler::Type::NetworkManagementProcessStateDataType;
        case SpineDataTypeHandler::Function::networkManagementProcessStateDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementProcessStateDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementJoiningModeData:
            return SpineDataTypeHandler::Type::NetworkManagementJoiningModeDataType;
        case SpineDataTypeHandler::Function::networkManagementJoiningModeDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementJoiningModeDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementReportCandidateData:
            return SpineDataTypeHandler::Type::NetworkManagementReportCandidateDataType;
        case SpineDataTypeHandler::Function::networkManagementReportCandidateDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementReportCandidateDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementDeviceDescriptionData:
            return SpineDataTypeHandler::Type::NetworkManagementDeviceDescriptionDataType;
        case SpineDataTypeHandler::Function::networkManagementDeviceDescriptionDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementDeviceDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListData:
            return SpineDataTypeHandler::Type::NetworkManagementDeviceDescriptionListDataType;
        case SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::NetworkManagementDeviceDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::networkManagementEntityDescriptionData:
            return SpineDataTypeHandler::Type::NetworkManagementEntityDescriptionDataType;
        case SpineDataTypeHandler::Function::networkManagementEntityDescriptionDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementEntityDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementEntityDescriptionListData:
            return SpineDataTypeHandler::Type::NetworkManagementEntityDescriptionListDataType;
        case SpineDataTypeHandler::Function::networkManagementEntityDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::NetworkManagementEntityDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::networkManagementFeatureDescriptionData:
            return SpineDataTypeHandler::Type::NetworkManagementFeatureDescriptionDataType;
        case SpineDataTypeHandler::Function::networkManagementFeatureDescriptionDataElements:
            return SpineDataTypeHandler::Type::NetworkManagementFeatureDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListData:
            return SpineDataTypeHandler::Type::NetworkManagementFeatureDescriptionListDataType;
        case SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::NetworkManagementFeatureDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryData:
            return SpineDataTypeHandler::Type::NodeManagementDetailedDiscoveryDataType;
        case SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataElements:
            return SpineDataTypeHandler::Type::NodeManagementDetailedDiscoveryDataElementsType;
        case SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataSelectors:
            return SpineDataTypeHandler::Type::NodeManagementDetailedDiscoveryDataSelectorsType;
        case SpineDataTypeHandler::Function::nodeManagementBindingData:
            return SpineDataTypeHandler::Type::NodeManagementBindingDataType;
        case SpineDataTypeHandler::Function::nodeManagementBindingDataElements:
            return SpineDataTypeHandler::Type::NodeManagementBindingDataElementsType;
        case SpineDataTypeHandler::Function::nodeManagementBindingDataSelectors:
            return SpineDataTypeHandler::Type::NodeManagementBindingDataSelectorsType;
        case SpineDataTypeHandler::Function::nodeManagementBindingRequestCall:
            return SpineDataTypeHandler::Type::NodeManagementBindingRequestCallType;
        case SpineDataTypeHandler::Function::nodeManagementBindingRequestCallElements:
            return SpineDataTypeHandler::Type::NodeManagementBindingRequestCallElementsType;
        case SpineDataTypeHandler::Function::nodeManagementBindingDeleteCall:
            return SpineDataTypeHandler::Type::NodeManagementBindingDeleteCallType;
        case SpineDataTypeHandler::Function::nodeManagementBindingDeleteCallElements:
            return SpineDataTypeHandler::Type::NodeManagementBindingDeleteCallElementsType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionData:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionDataType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionDataElements:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionDataElementsType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionDataSelectors:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionDataSelectorsType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCall:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionRequestCallType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCallElements:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionRequestCallElementsType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCall:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionDeleteCallType;
        case SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCallElements:
            return SpineDataTypeHandler::Type::NodeManagementSubscriptionDeleteCallElementsType;
        case SpineDataTypeHandler::Function::nodeManagementDestinationData:
            return SpineDataTypeHandler::Type::NodeManagementDestinationDataType;
        case SpineDataTypeHandler::Function::nodeManagementDestinationDataElements:
            return SpineDataTypeHandler::Type::NodeManagementDestinationDataElementsType;
        case SpineDataTypeHandler::Function::nodeManagementDestinationListData:
            return SpineDataTypeHandler::Type::NodeManagementDestinationListDataType;
        case SpineDataTypeHandler::Function::nodeManagementDestinationListDataSelectors:
            return SpineDataTypeHandler::Type::NodeManagementDestinationListDataSelectorsType;
        case SpineDataTypeHandler::Function::nodeManagementUseCaseData:
            return SpineDataTypeHandler::Type::NodeManagementUseCaseDataType;
        case SpineDataTypeHandler::Function::nodeManagementUseCaseDataElements:
            return SpineDataTypeHandler::Type::NodeManagementUseCaseDataElementsType;
        case SpineDataTypeHandler::Function::nodeManagementUseCaseDataSelectors:
            return SpineDataTypeHandler::Type::NodeManagementUseCaseDataSelectorsType;
        case SpineDataTypeHandler::Function::subscriptionManagementEntryData:
            return SpineDataTypeHandler::Type::SubscriptionManagementEntryDataType;
        case SpineDataTypeHandler::Function::subscriptionManagementEntryDataElements:
            return SpineDataTypeHandler::Type::SubscriptionManagementEntryDataElementsType;
        case SpineDataTypeHandler::Function::subscriptionManagementEntryListData:
            return SpineDataTypeHandler::Type::SubscriptionManagementEntryListDataType;
        case SpineDataTypeHandler::Function::subscriptionManagementEntryListDataSelectors:
            return SpineDataTypeHandler::Type::SubscriptionManagementEntryListDataSelectorsType;
        case SpineDataTypeHandler::Function::subscriptionManagementRequestCall:
            return SpineDataTypeHandler::Type::SubscriptionManagementRequestCallType;
        case SpineDataTypeHandler::Function::subscriptionManagementRequestCallElements:
            return SpineDataTypeHandler::Type::SubscriptionManagementRequestCallElementsType;
        case SpineDataTypeHandler::Function::subscriptionManagementDeleteCall:
            return SpineDataTypeHandler::Type::SubscriptionManagementDeleteCallType;
        case SpineDataTypeHandler::Function::subscriptionManagementDeleteCallElements:
            return SpineDataTypeHandler::Type::SubscriptionManagementDeleteCallElementsType;
        case SpineDataTypeHandler::Function::useCaseInformationData:
            return SpineDataTypeHandler::Type::UseCaseInformationDataType;
        case SpineDataTypeHandler::Function::useCaseInformationDataElements:
            return SpineDataTypeHandler::Type::UseCaseInformationDataElementsType;
        case SpineDataTypeHandler::Function::useCaseInformationListData:
            return SpineDataTypeHandler::Type::UseCaseInformationListDataType;
        case SpineDataTypeHandler::Function::useCaseInformationListDataSelectors:
            return SpineDataTypeHandler::Type::UseCaseInformationListDataSelectorsType;
        case SpineDataTypeHandler::Function::specificationVersionData:
            return SpineDataTypeHandler::Type::SpecificationVersionDataType;
        case SpineDataTypeHandler::Function::specificationVersionDataElements:
            return SpineDataTypeHandler::Type::SpecificationVersionDataElementsType;
        case SpineDataTypeHandler::Function::specificationVersionListData:
            return SpineDataTypeHandler::Type::SpecificationVersionListDataType;
        case SpineDataTypeHandler::Function::specificationVersionListDataSelectors:
            return SpineDataTypeHandler::Type::SpecificationVersionListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsInterruptData:
            return SpineDataTypeHandler::Type::OperatingConstraintsInterruptDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsInterruptDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsInterruptDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsInterruptListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsInterruptListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsInterruptListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsInterruptListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsDurationData:
            return SpineDataTypeHandler::Type::OperatingConstraintsDurationDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsDurationDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsDurationDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsDurationListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsDurationListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsDurationListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsDurationListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerDescriptionDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerDescriptionListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerRangeData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerRangeDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerRangeDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerRangeDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerRangeListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerRangeListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerLevelData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerLevelDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerLevelDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerLevelDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerLevelListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsPowerLevelListDataSelectorsType;
        case SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationData:
            return SpineDataTypeHandler::Type::OperatingConstraintsResumeImplicationDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationDataElements:
            return SpineDataTypeHandler::Type::OperatingConstraintsResumeImplicationDataElementsType;
        case SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListData:
            return SpineDataTypeHandler::Type::OperatingConstraintsResumeImplicationListDataType;
        case SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListDataSelectors:
            return SpineDataTypeHandler::Type::OperatingConstraintsResumeImplicationListDataSelectorsType;
        case SpineDataTypeHandler::Function::sensingData:
            return SpineDataTypeHandler::Type::SensingDataType;
        case SpineDataTypeHandler::Function::sensingDataElements:
            return SpineDataTypeHandler::Type::SensingDataElementsType;
        case SpineDataTypeHandler::Function::sensingListData:
            return SpineDataTypeHandler::Type::SensingListDataType;
        case SpineDataTypeHandler::Function::sensingListDataSelectors:
            return SpineDataTypeHandler::Type::SensingListDataSelectorsType;
        case SpineDataTypeHandler::Function::sensingDescriptionData:
            return SpineDataTypeHandler::Type::SensingDescriptionDataType;
        case SpineDataTypeHandler::Function::sensingDescriptionDataElements:
            return SpineDataTypeHandler::Type::SensingDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsData:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsDataType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsDataElements:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsDataElementsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsDataSelectors:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsDataSelectorsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsPriceData:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsPriceDataType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataElements:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsPriceDataElementsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataSelectors:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsPriceDataSelectorsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCall:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsConfigurationRequestCallType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCallElements:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsConfigurationRequestCallElementsType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCall:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsPriceCalculationRequestCallType;
        case SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCallElements:
            return SpineDataTypeHandler::Type::SmartEnergyManagementPsPriceCalculationRequestCallElementsType;
        case SpineDataTypeHandler::Function::stateInformationData:
            return SpineDataTypeHandler::Type::StateInformationDataType;
        case SpineDataTypeHandler::Function::stateInformationDataElements:
            return SpineDataTypeHandler::Type::StateInformationDataElementsType;
        case SpineDataTypeHandler::Function::stateInformationListData:
            return SpineDataTypeHandler::Type::StateInformationListDataType;
        case SpineDataTypeHandler::Function::stateInformationListDataSelectors:
            return SpineDataTypeHandler::Type::StateInformationListDataSelectorsType;
        case SpineDataTypeHandler::Function::supplyConditionData:
            return SpineDataTypeHandler::Type::SupplyConditionDataType;
        case SpineDataTypeHandler::Function::supplyConditionDataElements:
            return SpineDataTypeHandler::Type::SupplyConditionDataElementsType;
        case SpineDataTypeHandler::Function::supplyConditionListData:
            return SpineDataTypeHandler::Type::SupplyConditionListDataType;
        case SpineDataTypeHandler::Function::supplyConditionListDataSelectors:
            return SpineDataTypeHandler::Type::SupplyConditionListDataSelectorsType;
        case SpineDataTypeHandler::Function::supplyConditionDescriptionData:
            return SpineDataTypeHandler::Type::SupplyConditionDescriptionDataType;
        case SpineDataTypeHandler::Function::supplyConditionDescriptionDataElements:
            return SpineDataTypeHandler::Type::SupplyConditionDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::supplyConditionDescriptionListData:
            return SpineDataTypeHandler::Type::SupplyConditionDescriptionListDataType;
        case SpineDataTypeHandler::Function::supplyConditionDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::SupplyConditionDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::supplyConditionThresholdRelationData:
            return SpineDataTypeHandler::Type::SupplyConditionThresholdRelationDataType;
        case SpineDataTypeHandler::Function::supplyConditionThresholdRelationDataElements:
            return SpineDataTypeHandler::Type::SupplyConditionThresholdRelationDataElementsType;
        case SpineDataTypeHandler::Function::supplyConditionThresholdRelationListData:
            return SpineDataTypeHandler::Type::SupplyConditionThresholdRelationListDataType;
        case SpineDataTypeHandler::Function::supplyConditionThresholdRelationListDataSelectors:
            return SpineDataTypeHandler::Type::SupplyConditionThresholdRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::taskManagementJobData:
            return SpineDataTypeHandler::Type::TaskManagementJobDataType;
        case SpineDataTypeHandler::Function::taskManagementJobDataElements:
            return SpineDataTypeHandler::Type::TaskManagementJobDataElementsType;
        case SpineDataTypeHandler::Function::taskManagementJobListData:
            return SpineDataTypeHandler::Type::TaskManagementJobListDataType;
        case SpineDataTypeHandler::Function::taskManagementJobListDataSelectors:
            return SpineDataTypeHandler::Type::TaskManagementJobListDataSelectorsType;
        case SpineDataTypeHandler::Function::taskManagementJobRelationData:
            return SpineDataTypeHandler::Type::TaskManagementJobRelationDataType;
        case SpineDataTypeHandler::Function::taskManagementJobRelationDataElements:
            return SpineDataTypeHandler::Type::TaskManagementJobRelationDataElementsType;
        case SpineDataTypeHandler::Function::taskManagementJobRelationListData:
            return SpineDataTypeHandler::Type::TaskManagementJobRelationListDataType;
        case SpineDataTypeHandler::Function::taskManagementJobRelationListDataSelectors:
            return SpineDataTypeHandler::Type::TaskManagementJobRelationListDataSelectorsType;
        case SpineDataTypeHandler::Function::taskManagementJobDescriptionData:
            return SpineDataTypeHandler::Type::TaskManagementJobDescriptionDataType;
        case SpineDataTypeHandler::Function::taskManagementJobDescriptionDataElements:
            return SpineDataTypeHandler::Type::TaskManagementJobDescriptionDataElementsType;
        case SpineDataTypeHandler::Function::taskManagementJobDescriptionListData:
            return SpineDataTypeHandler::Type::TaskManagementJobDescriptionListDataType;
        case SpineDataTypeHandler::Function::taskManagementJobDescriptionListDataSelectors:
            return SpineDataTypeHandler::Type::TaskManagementJobDescriptionListDataSelectorsType;
        case SpineDataTypeHandler::Function::taskManagementOverviewData:
            return SpineDataTypeHandler::Type::TaskManagementOverviewDataType;
        case SpineDataTypeHandler::Function::taskManagementOverviewDataElements:
            return SpineDataTypeHandler::Type::TaskManagementOverviewDataElementsType;
        case SpineDataTypeHandler::Function::timeInformationData:
            return SpineDataTypeHandler::Type::TimeInformationDataType;
        case SpineDataTypeHandler::Function::timeInformationDataElements:
            return SpineDataTypeHandler::Type::TimeInformationDataElementsType;
        case SpineDataTypeHandler::Function::timeDistributorData:
            return SpineDataTypeHandler::Type::TimeDistributorDataType;
        case SpineDataTypeHandler::Function::timeDistributorDataElements:
            return SpineDataTypeHandler::Type::TimeDistributorDataElementsType;
        case SpineDataTypeHandler::Function::timePrecisionData:
            return SpineDataTypeHandler::Type::TimePrecisionDataType;
        case SpineDataTypeHandler::Function::timePrecisionDataElements:
            return SpineDataTypeHandler::Type::TimePrecisionDataElementsType;
        case SpineDataTypeHandler::Function::timeDistributorEnquiryCall:
            return SpineDataTypeHandler::Type::TimeDistributorEnquiryCallType;
        case SpineDataTypeHandler::Function::timeDistributorEnquiryCallElements:
            return SpineDataTypeHandler::Type::TimeDistributorEnquiryCallElementsType;
        case SpineDataTypeHandler::Function::header:
            return SpineDataTypeHandler::Type::HeaderType;
        default:
            return SpineDataTypeHandler::Type::None;
    }
    return SpineDataTypeHandler::Type::None;
}

SpineDataTypeHandler::Function SpineDataTypeHandler::function_from_string(const String function_name)
{

    if (function_name == "messagingData")
        return SpineDataTypeHandler::Function::messagingData;
    if (function_name == "messagingDataElements")
        return SpineDataTypeHandler::Function::messagingDataElements;
    if (function_name == "messagingListData")
        return SpineDataTypeHandler::Function::messagingListData;
    if (function_name == "messagingListDataSelectors")
        return SpineDataTypeHandler::Function::messagingListDataSelectors;
    if (function_name == "timeSeriesData")
        return SpineDataTypeHandler::Function::timeSeriesData;
    if (function_name == "timeSeriesDataElements")
        return SpineDataTypeHandler::Function::timeSeriesDataElements;
    if (function_name == "timeSeriesListData")
        return SpineDataTypeHandler::Function::timeSeriesListData;
    if (function_name == "timeSeriesListDataSelectors")
        return SpineDataTypeHandler::Function::timeSeriesListDataSelectors;
    if (function_name == "timeSeriesDescriptionData")
        return SpineDataTypeHandler::Function::timeSeriesDescriptionData;
    if (function_name == "timeSeriesDescriptionDataElements")
        return SpineDataTypeHandler::Function::timeSeriesDescriptionDataElements;
    if (function_name == "timeSeriesDescriptionListData")
        return SpineDataTypeHandler::Function::timeSeriesDescriptionListData;
    if (function_name == "timeSeriesDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::timeSeriesDescriptionListDataSelectors;
    if (function_name == "timeSeriesConstraintsData")
        return SpineDataTypeHandler::Function::timeSeriesConstraintsData;
    if (function_name == "timeSeriesConstraintsDataElements")
        return SpineDataTypeHandler::Function::timeSeriesConstraintsDataElements;
    if (function_name == "timeSeriesConstraintsListData")
        return SpineDataTypeHandler::Function::timeSeriesConstraintsListData;
    if (function_name == "timeSeriesConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::timeSeriesConstraintsListDataSelectors;
    if (function_name == "measurementData")
        return SpineDataTypeHandler::Function::measurementData;
    if (function_name == "measurementDataElements")
        return SpineDataTypeHandler::Function::measurementDataElements;
    if (function_name == "measurementListData")
        return SpineDataTypeHandler::Function::measurementListData;
    if (function_name == "measurementListDataSelectors")
        return SpineDataTypeHandler::Function::measurementListDataSelectors;
    if (function_name == "measurementSeriesData")
        return SpineDataTypeHandler::Function::measurementSeriesData;
    if (function_name == "measurementSeriesDataElements")
        return SpineDataTypeHandler::Function::measurementSeriesDataElements;
    if (function_name == "measurementSeriesListData")
        return SpineDataTypeHandler::Function::measurementSeriesListData;
    if (function_name == "measurementSeriesListDataSelectors")
        return SpineDataTypeHandler::Function::measurementSeriesListDataSelectors;
    if (function_name == "measurementConstraintsData")
        return SpineDataTypeHandler::Function::measurementConstraintsData;
    if (function_name == "measurementConstraintsDataElements")
        return SpineDataTypeHandler::Function::measurementConstraintsDataElements;
    if (function_name == "measurementConstraintsListData")
        return SpineDataTypeHandler::Function::measurementConstraintsListData;
    if (function_name == "measurementConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::measurementConstraintsListDataSelectors;
    if (function_name == "measurementDescriptionData")
        return SpineDataTypeHandler::Function::measurementDescriptionData;
    if (function_name == "measurementDescriptionDataElements")
        return SpineDataTypeHandler::Function::measurementDescriptionDataElements;
    if (function_name == "measurementDescriptionListData")
        return SpineDataTypeHandler::Function::measurementDescriptionListData;
    if (function_name == "measurementDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::measurementDescriptionListDataSelectors;
    if (function_name == "measurementThresholdRelationData")
        return SpineDataTypeHandler::Function::measurementThresholdRelationData;
    if (function_name == "measurementThresholdRelationDataElements")
        return SpineDataTypeHandler::Function::measurementThresholdRelationDataElements;
    if (function_name == "measurementThresholdRelationListData")
        return SpineDataTypeHandler::Function::measurementThresholdRelationListData;
    if (function_name == "measurementThresholdRelationListDataSelectors")
        return SpineDataTypeHandler::Function::measurementThresholdRelationListDataSelectors;
    if (function_name == "thresholdData")
        return SpineDataTypeHandler::Function::thresholdData;
    if (function_name == "thresholdDataElements")
        return SpineDataTypeHandler::Function::thresholdDataElements;
    if (function_name == "thresholdListData")
        return SpineDataTypeHandler::Function::thresholdListData;
    if (function_name == "thresholdListDataSelectors")
        return SpineDataTypeHandler::Function::thresholdListDataSelectors;
    if (function_name == "thresholdConstraintsData")
        return SpineDataTypeHandler::Function::thresholdConstraintsData;
    if (function_name == "thresholdConstraintsDataElements")
        return SpineDataTypeHandler::Function::thresholdConstraintsDataElements;
    if (function_name == "thresholdConstraintsListData")
        return SpineDataTypeHandler::Function::thresholdConstraintsListData;
    if (function_name == "thresholdConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::thresholdConstraintsListDataSelectors;
    if (function_name == "thresholdDescriptionData")
        return SpineDataTypeHandler::Function::thresholdDescriptionData;
    if (function_name == "thresholdDescriptionDataElements")
        return SpineDataTypeHandler::Function::thresholdDescriptionDataElements;
    if (function_name == "thresholdDescriptionListData")
        return SpineDataTypeHandler::Function::thresholdDescriptionListData;
    if (function_name == "thresholdDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::thresholdDescriptionListDataSelectors;
    if (function_name == "directControlActivityData")
        return SpineDataTypeHandler::Function::directControlActivityData;
    if (function_name == "directControlActivityDataElements")
        return SpineDataTypeHandler::Function::directControlActivityDataElements;
    if (function_name == "directControlActivityListData")
        return SpineDataTypeHandler::Function::directControlActivityListData;
    if (function_name == "directControlActivityListDataSelectors")
        return SpineDataTypeHandler::Function::directControlActivityListDataSelectors;
    if (function_name == "directControlDescriptionData")
        return SpineDataTypeHandler::Function::directControlDescriptionData;
    if (function_name == "directControlDescriptionDataElements")
        return SpineDataTypeHandler::Function::directControlDescriptionDataElements;
    if (function_name == "powerTimeSlotScheduleData")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleData;
    if (function_name == "powerTimeSlotScheduleDataElements")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleDataElements;
    if (function_name == "powerTimeSlotScheduleListData")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleListData;
    if (function_name == "powerTimeSlotScheduleListDataSelectors")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleListDataSelectors;
    if (function_name == "powerTimeSlotValueData")
        return SpineDataTypeHandler::Function::powerTimeSlotValueData;
    if (function_name == "powerTimeSlotValueDataElements")
        return SpineDataTypeHandler::Function::powerTimeSlotValueDataElements;
    if (function_name == "powerTimeSlotValueListData")
        return SpineDataTypeHandler::Function::powerTimeSlotValueListData;
    if (function_name == "powerTimeSlotValueListDataSelectors")
        return SpineDataTypeHandler::Function::powerTimeSlotValueListDataSelectors;
    if (function_name == "powerTimeSlotScheduleConstraintsData")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsData;
    if (function_name == "powerTimeSlotScheduleConstraintsDataElements")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsDataElements;
    if (function_name == "powerTimeSlotScheduleConstraintsListData")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListData;
    if (function_name == "powerTimeSlotScheduleConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListDataSelectors;
    if (function_name == "powerSequenceAlternativesRelationData")
        return SpineDataTypeHandler::Function::powerSequenceAlternativesRelationData;
    if (function_name == "powerSequenceAlternativesRelationDataElements")
        return SpineDataTypeHandler::Function::powerSequenceAlternativesRelationDataElements;
    if (function_name == "powerSequenceAlternativesRelationListData")
        return SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListData;
    if (function_name == "powerSequenceAlternativesRelationListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListDataSelectors;
    if (function_name == "powerSequenceDescriptionData")
        return SpineDataTypeHandler::Function::powerSequenceDescriptionData;
    if (function_name == "powerSequenceDescriptionDataElements")
        return SpineDataTypeHandler::Function::powerSequenceDescriptionDataElements;
    if (function_name == "powerSequenceDescriptionListData")
        return SpineDataTypeHandler::Function::powerSequenceDescriptionListData;
    if (function_name == "powerSequenceDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceDescriptionListDataSelectors;
    if (function_name == "powerSequenceStateData")
        return SpineDataTypeHandler::Function::powerSequenceStateData;
    if (function_name == "powerSequenceStateDataElements")
        return SpineDataTypeHandler::Function::powerSequenceStateDataElements;
    if (function_name == "powerSequenceStateListData")
        return SpineDataTypeHandler::Function::powerSequenceStateListData;
    if (function_name == "powerSequenceStateListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceStateListDataSelectors;
    if (function_name == "powerSequenceScheduleData")
        return SpineDataTypeHandler::Function::powerSequenceScheduleData;
    if (function_name == "powerSequenceScheduleDataElements")
        return SpineDataTypeHandler::Function::powerSequenceScheduleDataElements;
    if (function_name == "powerSequenceScheduleListData")
        return SpineDataTypeHandler::Function::powerSequenceScheduleListData;
    if (function_name == "powerSequenceScheduleListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceScheduleListDataSelectors;
    if (function_name == "powerSequenceScheduleConstraintsData")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsData;
    if (function_name == "powerSequenceScheduleConstraintsDataElements")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsDataElements;
    if (function_name == "powerSequenceScheduleConstraintsListData")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListData;
    if (function_name == "powerSequenceScheduleConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListDataSelectors;
    if (function_name == "powerSequencePriceData")
        return SpineDataTypeHandler::Function::powerSequencePriceData;
    if (function_name == "powerSequencePriceDataElements")
        return SpineDataTypeHandler::Function::powerSequencePriceDataElements;
    if (function_name == "powerSequencePriceListData")
        return SpineDataTypeHandler::Function::powerSequencePriceListData;
    if (function_name == "powerSequencePriceListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequencePriceListDataSelectors;
    if (function_name == "powerSequenceSchedulePreferenceData")
        return SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceData;
    if (function_name == "powerSequenceSchedulePreferenceDataElements")
        return SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceDataElements;
    if (function_name == "powerSequenceSchedulePreferenceListData")
        return SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListData;
    if (function_name == "powerSequenceSchedulePreferenceListDataSelectors")
        return SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListDataSelectors;
    if (function_name == "powerSequenceNodeScheduleInformationData")
        return SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationData;
    if (function_name == "powerSequenceNodeScheduleInformationDataElements")
        return SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationDataElements;
    if (function_name == "powerSequenceScheduleConfigurationRequestCall")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCall;
    if (function_name == "powerSequenceScheduleConfigurationRequestCallElements")
        return SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCallElements;
    if (function_name == "powerSequencePriceCalculationRequestCall")
        return SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCall;
    if (function_name == "powerSequencePriceCalculationRequestCallElements")
        return SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCallElements;
    if (function_name == "resultData")
        return SpineDataTypeHandler::Function::resultData;
    if (function_name == "bindingManagementEntryData")
        return SpineDataTypeHandler::Function::bindingManagementEntryData;
    if (function_name == "bindingManagementEntryDataElements")
        return SpineDataTypeHandler::Function::bindingManagementEntryDataElements;
    if (function_name == "bindingManagementEntryListData")
        return SpineDataTypeHandler::Function::bindingManagementEntryListData;
    if (function_name == "bindingManagementEntryListDataSelectors")
        return SpineDataTypeHandler::Function::bindingManagementEntryListDataSelectors;
    if (function_name == "bindingManagementRequestCall")
        return SpineDataTypeHandler::Function::bindingManagementRequestCall;
    if (function_name == "bindingManagementRequestCallElements")
        return SpineDataTypeHandler::Function::bindingManagementRequestCallElements;
    if (function_name == "bindingManagementDeleteCall")
        return SpineDataTypeHandler::Function::bindingManagementDeleteCall;
    if (function_name == "bindingManagementDeleteCallElements")
        return SpineDataTypeHandler::Function::bindingManagementDeleteCallElements;
    if (function_name == "actuatorLevelData")
        return SpineDataTypeHandler::Function::actuatorLevelData;
    if (function_name == "actuatorLevelDataElements")
        return SpineDataTypeHandler::Function::actuatorLevelDataElements;
    if (function_name == "actuatorLevelDescriptionData")
        return SpineDataTypeHandler::Function::actuatorLevelDescriptionData;
    if (function_name == "actuatorLevelDescriptionDataElements")
        return SpineDataTypeHandler::Function::actuatorLevelDescriptionDataElements;
    if (function_name == "cmdClassifier")
        return SpineDataTypeHandler::Function::cmdClassifier;
    if (function_name == "lastUpdateAt")
        return SpineDataTypeHandler::Function::lastUpdateAt;
    if (function_name == "function")
        return SpineDataTypeHandler::Function::function;
    if (function_name == "cmdControl")
        return SpineDataTypeHandler::Function::cmdControl;
    if (function_name == "actuatorSwitchData")
        return SpineDataTypeHandler::Function::actuatorSwitchData;
    if (function_name == "actuatorSwitchDataElements")
        return SpineDataTypeHandler::Function::actuatorSwitchDataElements;
    if (function_name == "actuatorSwitchDescriptionData")
        return SpineDataTypeHandler::Function::actuatorSwitchDescriptionData;
    if (function_name == "actuatorSwitchDescriptionDataElements")
        return SpineDataTypeHandler::Function::actuatorSwitchDescriptionDataElements;
    if (function_name == "alarmData")
        return SpineDataTypeHandler::Function::alarmData;
    if (function_name == "alarmDataElements")
        return SpineDataTypeHandler::Function::alarmDataElements;
    if (function_name == "alarmListData")
        return SpineDataTypeHandler::Function::alarmListData;
    if (function_name == "alarmListDataSelectors")
        return SpineDataTypeHandler::Function::alarmListDataSelectors;
    if (function_name == "billData")
        return SpineDataTypeHandler::Function::billData;
    if (function_name == "billDataElements")
        return SpineDataTypeHandler::Function::billDataElements;
    if (function_name == "billListData")
        return SpineDataTypeHandler::Function::billListData;
    if (function_name == "billListDataSelectors")
        return SpineDataTypeHandler::Function::billListDataSelectors;
    if (function_name == "billConstraintsData")
        return SpineDataTypeHandler::Function::billConstraintsData;
    if (function_name == "billConstraintsDataElements")
        return SpineDataTypeHandler::Function::billConstraintsDataElements;
    if (function_name == "billConstraintsListData")
        return SpineDataTypeHandler::Function::billConstraintsListData;
    if (function_name == "billConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::billConstraintsListDataSelectors;
    if (function_name == "billDescriptionData")
        return SpineDataTypeHandler::Function::billDescriptionData;
    if (function_name == "billDescriptionDataElements")
        return SpineDataTypeHandler::Function::billDescriptionDataElements;
    if (function_name == "billDescriptionListData")
        return SpineDataTypeHandler::Function::billDescriptionListData;
    if (function_name == "billDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::billDescriptionListDataSelectors;
    if (function_name == "identificationData")
        return SpineDataTypeHandler::Function::identificationData;
    if (function_name == "identificationDataElements")
        return SpineDataTypeHandler::Function::identificationDataElements;
    if (function_name == "identificationListData")
        return SpineDataTypeHandler::Function::identificationListData;
    if (function_name == "identificationListDataSelectors")
        return SpineDataTypeHandler::Function::identificationListDataSelectors;
    if (function_name == "sessionIdentificationData")
        return SpineDataTypeHandler::Function::sessionIdentificationData;
    if (function_name == "sessionIdentificationDataElements")
        return SpineDataTypeHandler::Function::sessionIdentificationDataElements;
    if (function_name == "sessionIdentificationListData")
        return SpineDataTypeHandler::Function::sessionIdentificationListData;
    if (function_name == "sessionIdentificationListDataSelectors")
        return SpineDataTypeHandler::Function::sessionIdentificationListDataSelectors;
    if (function_name == "sessionMeasurementRelationData")
        return SpineDataTypeHandler::Function::sessionMeasurementRelationData;
    if (function_name == "sessionMeasurementRelationDataElements")
        return SpineDataTypeHandler::Function::sessionMeasurementRelationDataElements;
    if (function_name == "sessionMeasurementRelationListData")
        return SpineDataTypeHandler::Function::sessionMeasurementRelationListData;
    if (function_name == "sessionMeasurementRelationListDataSelectors")
        return SpineDataTypeHandler::Function::sessionMeasurementRelationListDataSelectors;
    if (function_name == "dataTunnelingCall")
        return SpineDataTypeHandler::Function::dataTunnelingCall;
    if (function_name == "dataTunnelingCallElements")
        return SpineDataTypeHandler::Function::dataTunnelingCallElements;
    if (function_name == "deviceClassificationManufacturerData")
        return SpineDataTypeHandler::Function::deviceClassificationManufacturerData;
    if (function_name == "deviceClassificationManufacturerDataElements")
        return SpineDataTypeHandler::Function::deviceClassificationManufacturerDataElements;
    if (function_name == "deviceClassificationUserData")
        return SpineDataTypeHandler::Function::deviceClassificationUserData;
    if (function_name == "deviceClassificationUserDataElements")
        return SpineDataTypeHandler::Function::deviceClassificationUserDataElements;
    if (function_name == "deviceConfigurationKeyValueData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueData;
    if (function_name == "deviceConfigurationKeyValueDataElements")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueDataElements;
    if (function_name == "deviceConfigurationKeyValueListData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueListData;
    if (function_name == "deviceConfigurationKeyValueListDataSelectors")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueListDataSelectors;
    if (function_name == "deviceConfigurationKeyValueDescriptionData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionData;
    if (function_name == "deviceConfigurationKeyValueDescriptionDataElements")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionDataElements;
    if (function_name == "deviceConfigurationKeyValueDescriptionListData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListData;
    if (function_name == "deviceConfigurationKeyValueDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListDataSelectors;
    if (function_name == "deviceConfigurationKeyValueConstraintsData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsData;
    if (function_name == "deviceConfigurationKeyValueConstraintsDataElements")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsDataElements;
    if (function_name == "deviceConfigurationKeyValueConstraintsListData")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListData;
    if (function_name == "deviceConfigurationKeyValueConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListDataSelectors;
    if (function_name == "deviceDiagnosisStateData")
        return SpineDataTypeHandler::Function::deviceDiagnosisStateData;
    if (function_name == "deviceDiagnosisStateDataElements")
        return SpineDataTypeHandler::Function::deviceDiagnosisStateDataElements;
    if (function_name == "deviceDiagnosisHeartbeatData")
        return SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatData;
    if (function_name == "deviceDiagnosisHeartbeatDataElements")
        return SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatDataElements;
    if (function_name == "deviceDiagnosisServiceData")
        return SpineDataTypeHandler::Function::deviceDiagnosisServiceData;
    if (function_name == "deviceDiagnosisServiceDataElements")
        return SpineDataTypeHandler::Function::deviceDiagnosisServiceDataElements;
    if (function_name == "electricalConnectionParameterDescriptionData")
        return SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionData;
    if (function_name == "electricalConnectionParameterDescriptionDataElements")
        return SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionDataElements;
    if (function_name == "electricalConnectionParameterDescriptionListData")
        return SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListData;
    if (function_name == "electricalConnectionParameterDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListDataSelectors;
    if (function_name == "electricalConnectionPermittedValueSetData")
        return SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetData;
    if (function_name == "electricalConnectionPermittedValueSetDataElements")
        return SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetDataElements;
    if (function_name == "electricalConnectionPermittedValueSetListData")
        return SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListData;
    if (function_name == "electricalConnectionPermittedValueSetListDataSelectors")
        return SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListDataSelectors;
    if (function_name == "electricalConnectionCharacteristicData")
        return SpineDataTypeHandler::Function::electricalConnectionCharacteristicData;
    if (function_name == "electricalConnectionCharacteristicDataElements")
        return SpineDataTypeHandler::Function::electricalConnectionCharacteristicDataElements;
    if (function_name == "electricalConnectionCharacteristicListData")
        return SpineDataTypeHandler::Function::electricalConnectionCharacteristicListData;
    if (function_name == "electricalConnectionCharacteristicListDataSelectors")
        return SpineDataTypeHandler::Function::electricalConnectionCharacteristicListDataSelectors;
    if (function_name == "electricalConnectionStateData")
        return SpineDataTypeHandler::Function::electricalConnectionStateData;
    if (function_name == "electricalConnectionStateDataElements")
        return SpineDataTypeHandler::Function::electricalConnectionStateDataElements;
    if (function_name == "electricalConnectionStateListData")
        return SpineDataTypeHandler::Function::electricalConnectionStateListData;
    if (function_name == "electricalConnectionStateListDataSelectors")
        return SpineDataTypeHandler::Function::electricalConnectionStateListDataSelectors;
    if (function_name == "electricalConnectionDescriptionData")
        return SpineDataTypeHandler::Function::electricalConnectionDescriptionData;
    if (function_name == "electricalConnectionDescriptionDataElements")
        return SpineDataTypeHandler::Function::electricalConnectionDescriptionDataElements;
    if (function_name == "electricalConnectionDescriptionListData")
        return SpineDataTypeHandler::Function::electricalConnectionDescriptionListData;
    if (function_name == "electricalConnectionDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::electricalConnectionDescriptionListDataSelectors;
    if (function_name == "hvacSystemFunctionData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionData;
    if (function_name == "hvacSystemFunctionDataElements")
        return SpineDataTypeHandler::Function::hvacSystemFunctionDataElements;
    if (function_name == "hvacSystemFunctionListData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionListData;
    if (function_name == "hvacSystemFunctionListDataSelectors")
        return SpineDataTypeHandler::Function::hvacSystemFunctionListDataSelectors;
    if (function_name == "hvacSystemFunctionOperationModeRelationData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationData;
    if (function_name == "hvacSystemFunctionOperationModeRelationDataElements")
        return SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationDataElements;
    if (function_name == "hvacSystemFunctionOperationModeRelationListData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListData;
    if (function_name == "hvacSystemFunctionOperationModeRelationListDataSelectors")
        return SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListDataSelectors;
    if (function_name == "hvacSystemFunctionSetpointRelationData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationData;
    if (function_name == "hvacSystemFunctionSetpointRelationDataElements")
        return SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationDataElements;
    if (function_name == "hvacSystemFunctionSetpointRelationListData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListData;
    if (function_name == "hvacSystemFunctionSetpointRelationListDataSelectors")
        return SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListDataSelectors;
    if (function_name == "hvacSystemFunctionPowerSequenceRelationData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationData;
    if (function_name == "hvacSystemFunctionPowerSequenceRelationDataElements")
        return SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationDataElements;
    if (function_name == "hvacSystemFunctionPowerSequenceRelationListData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListData;
    if (function_name == "hvacSystemFunctionPowerSequenceRelationListDataSelectors")
        return SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListDataSelectors;
    if (function_name == "hvacSystemFunctionDescriptionData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionData;
    if (function_name == "hvacSystemFunctionDescriptionDataElements")
        return SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionDataElements;
    if (function_name == "hvacSystemFunctionDescriptionListData")
        return SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListData;
    if (function_name == "hvacSystemFunctionDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListDataSelectors;
    if (function_name == "hvacOperationModeDescriptionData")
        return SpineDataTypeHandler::Function::hvacOperationModeDescriptionData;
    if (function_name == "hvacOperationModeDescriptionDataElements")
        return SpineDataTypeHandler::Function::hvacOperationModeDescriptionDataElements;
    if (function_name == "hvacOperationModeDescriptionListData")
        return SpineDataTypeHandler::Function::hvacOperationModeDescriptionListData;
    if (function_name == "hvacOperationModeDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::hvacOperationModeDescriptionListDataSelectors;
    if (function_name == "hvacOverrunData")
        return SpineDataTypeHandler::Function::hvacOverrunData;
    if (function_name == "hvacOverrunDataElements")
        return SpineDataTypeHandler::Function::hvacOverrunDataElements;
    if (function_name == "hvacOverrunListData")
        return SpineDataTypeHandler::Function::hvacOverrunListData;
    if (function_name == "hvacOverrunListDataSelectors")
        return SpineDataTypeHandler::Function::hvacOverrunListDataSelectors;
    if (function_name == "hvacOverrunDescriptionData")
        return SpineDataTypeHandler::Function::hvacOverrunDescriptionData;
    if (function_name == "hvacOverrunDescriptionDataElements")
        return SpineDataTypeHandler::Function::hvacOverrunDescriptionDataElements;
    if (function_name == "hvacOverrunDescriptionListData")
        return SpineDataTypeHandler::Function::hvacOverrunDescriptionListData;
    if (function_name == "hvacOverrunDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::hvacOverrunDescriptionListDataSelectors;
    if (function_name == "setpointData")
        return SpineDataTypeHandler::Function::setpointData;
    if (function_name == "setpointDataElements")
        return SpineDataTypeHandler::Function::setpointDataElements;
    if (function_name == "setpointListData")
        return SpineDataTypeHandler::Function::setpointListData;
    if (function_name == "setpointListDataSelectors")
        return SpineDataTypeHandler::Function::setpointListDataSelectors;
    if (function_name == "setpointConstraintsData")
        return SpineDataTypeHandler::Function::setpointConstraintsData;
    if (function_name == "setpointConstraintsDataElements")
        return SpineDataTypeHandler::Function::setpointConstraintsDataElements;
    if (function_name == "setpointConstraintsListData")
        return SpineDataTypeHandler::Function::setpointConstraintsListData;
    if (function_name == "setpointConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::setpointConstraintsListDataSelectors;
    if (function_name == "setpointDescriptionData")
        return SpineDataTypeHandler::Function::setpointDescriptionData;
    if (function_name == "setpointDescriptionDataElements")
        return SpineDataTypeHandler::Function::setpointDescriptionDataElements;
    if (function_name == "setpointDescriptionListData")
        return SpineDataTypeHandler::Function::setpointDescriptionListData;
    if (function_name == "setpointDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::setpointDescriptionListDataSelectors;
    if (function_name == "timeTableData")
        return SpineDataTypeHandler::Function::timeTableData;
    if (function_name == "timeTableDataElements")
        return SpineDataTypeHandler::Function::timeTableDataElements;
    if (function_name == "timeTableListData")
        return SpineDataTypeHandler::Function::timeTableListData;
    if (function_name == "timeTableListDataSelectors")
        return SpineDataTypeHandler::Function::timeTableListDataSelectors;
    if (function_name == "timeTableConstraintsData")
        return SpineDataTypeHandler::Function::timeTableConstraintsData;
    if (function_name == "timeTableConstraintsDataElements")
        return SpineDataTypeHandler::Function::timeTableConstraintsDataElements;
    if (function_name == "timeTableConstraintsListData")
        return SpineDataTypeHandler::Function::timeTableConstraintsListData;
    if (function_name == "timeTableConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::timeTableConstraintsListDataSelectors;
    if (function_name == "timeTableDescriptionData")
        return SpineDataTypeHandler::Function::timeTableDescriptionData;
    if (function_name == "timeTableDescriptionDataElements")
        return SpineDataTypeHandler::Function::timeTableDescriptionDataElements;
    if (function_name == "timeTableDescriptionListData")
        return SpineDataTypeHandler::Function::timeTableDescriptionListData;
    if (function_name == "timeTableDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::timeTableDescriptionListDataSelectors;
    if (function_name == "incentiveTableData")
        return SpineDataTypeHandler::Function::incentiveTableData;
    if (function_name == "incentiveTableDataElements")
        return SpineDataTypeHandler::Function::incentiveTableDataElements;
    if (function_name == "incentiveTableDataSelectors")
        return SpineDataTypeHandler::Function::incentiveTableDataSelectors;
    if (function_name == "incentiveTableDescriptionData")
        return SpineDataTypeHandler::Function::incentiveTableDescriptionData;
    if (function_name == "incentiveTableDescriptionDataElements")
        return SpineDataTypeHandler::Function::incentiveTableDescriptionDataElements;
    if (function_name == "incentiveTableDescriptionDataSelectors")
        return SpineDataTypeHandler::Function::incentiveTableDescriptionDataSelectors;
    if (function_name == "incentiveTableConstraintsData")
        return SpineDataTypeHandler::Function::incentiveTableConstraintsData;
    if (function_name == "incentiveTableConstraintsDataElements")
        return SpineDataTypeHandler::Function::incentiveTableConstraintsDataElements;
    if (function_name == "incentiveTableConstraintsDataSelectors")
        return SpineDataTypeHandler::Function::incentiveTableConstraintsDataSelectors;
    if (function_name == "tariffOverallConstraintsData")
        return SpineDataTypeHandler::Function::tariffOverallConstraintsData;
    if (function_name == "tariffOverallConstraintsDataElements")
        return SpineDataTypeHandler::Function::tariffOverallConstraintsDataElements;
    if (function_name == "tariffData")
        return SpineDataTypeHandler::Function::tariffData;
    if (function_name == "tariffDataElements")
        return SpineDataTypeHandler::Function::tariffDataElements;
    if (function_name == "tariffListData")
        return SpineDataTypeHandler::Function::tariffListData;
    if (function_name == "tariffListDataSelectors")
        return SpineDataTypeHandler::Function::tariffListDataSelectors;
    if (function_name == "tariffTierRelationData")
        return SpineDataTypeHandler::Function::tariffTierRelationData;
    if (function_name == "tariffTierRelationDataElements")
        return SpineDataTypeHandler::Function::tariffTierRelationDataElements;
    if (function_name == "tariffTierRelationListData")
        return SpineDataTypeHandler::Function::tariffTierRelationListData;
    if (function_name == "tariffTierRelationListDataSelectors")
        return SpineDataTypeHandler::Function::tariffTierRelationListDataSelectors;
    if (function_name == "tariffBoundaryRelationData")
        return SpineDataTypeHandler::Function::tariffBoundaryRelationData;
    if (function_name == "tariffBoundaryRelationDataElements")
        return SpineDataTypeHandler::Function::tariffBoundaryRelationDataElements;
    if (function_name == "tariffBoundaryRelationListData")
        return SpineDataTypeHandler::Function::tariffBoundaryRelationListData;
    if (function_name == "tariffBoundaryRelationListDataSelectors")
        return SpineDataTypeHandler::Function::tariffBoundaryRelationListDataSelectors;
    if (function_name == "tariffDescriptionData")
        return SpineDataTypeHandler::Function::tariffDescriptionData;
    if (function_name == "tariffDescriptionDataElements")
        return SpineDataTypeHandler::Function::tariffDescriptionDataElements;
    if (function_name == "tariffDescriptionListData")
        return SpineDataTypeHandler::Function::tariffDescriptionListData;
    if (function_name == "tariffDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::tariffDescriptionListDataSelectors;
    if (function_name == "tierBoundaryData")
        return SpineDataTypeHandler::Function::tierBoundaryData;
    if (function_name == "tierBoundaryDataElements")
        return SpineDataTypeHandler::Function::tierBoundaryDataElements;
    if (function_name == "tierBoundaryListData")
        return SpineDataTypeHandler::Function::tierBoundaryListData;
    if (function_name == "tierBoundaryListDataSelectors")
        return SpineDataTypeHandler::Function::tierBoundaryListDataSelectors;
    if (function_name == "tierBoundaryDescriptionData")
        return SpineDataTypeHandler::Function::tierBoundaryDescriptionData;
    if (function_name == "tierBoundaryDescriptionDataElements")
        return SpineDataTypeHandler::Function::tierBoundaryDescriptionDataElements;
    if (function_name == "tierBoundaryDescriptionListData")
        return SpineDataTypeHandler::Function::tierBoundaryDescriptionListData;
    if (function_name == "tierBoundaryDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::tierBoundaryDescriptionListDataSelectors;
    if (function_name == "commodityData")
        return SpineDataTypeHandler::Function::commodityData;
    if (function_name == "commodityDataElements")
        return SpineDataTypeHandler::Function::commodityDataElements;
    if (function_name == "commodityListData")
        return SpineDataTypeHandler::Function::commodityListData;
    if (function_name == "commodityListDataSelectors")
        return SpineDataTypeHandler::Function::commodityListDataSelectors;
    if (function_name == "tierData")
        return SpineDataTypeHandler::Function::tierData;
    if (function_name == "tierDataElements")
        return SpineDataTypeHandler::Function::tierDataElements;
    if (function_name == "tierListData")
        return SpineDataTypeHandler::Function::tierListData;
    if (function_name == "tierListDataSelectors")
        return SpineDataTypeHandler::Function::tierListDataSelectors;
    if (function_name == "tierIncentiveRelationData")
        return SpineDataTypeHandler::Function::tierIncentiveRelationData;
    if (function_name == "tierIncentiveRelationDataElements")
        return SpineDataTypeHandler::Function::tierIncentiveRelationDataElements;
    if (function_name == "tierIncentiveRelationListData")
        return SpineDataTypeHandler::Function::tierIncentiveRelationListData;
    if (function_name == "tierIncentiveRelationListDataSelectors")
        return SpineDataTypeHandler::Function::tierIncentiveRelationListDataSelectors;
    if (function_name == "tierDescriptionData")
        return SpineDataTypeHandler::Function::tierDescriptionData;
    if (function_name == "tierDescriptionDataElements")
        return SpineDataTypeHandler::Function::tierDescriptionDataElements;
    if (function_name == "tierDescriptionListData")
        return SpineDataTypeHandler::Function::tierDescriptionListData;
    if (function_name == "tierDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::tierDescriptionListDataSelectors;
    if (function_name == "incentiveData")
        return SpineDataTypeHandler::Function::incentiveData;
    if (function_name == "incentiveDataElements")
        return SpineDataTypeHandler::Function::incentiveDataElements;
    if (function_name == "incentiveListData")
        return SpineDataTypeHandler::Function::incentiveListData;
    if (function_name == "incentiveListDataSelectors")
        return SpineDataTypeHandler::Function::incentiveListDataSelectors;
    if (function_name == "incentiveDescriptionData")
        return SpineDataTypeHandler::Function::incentiveDescriptionData;
    if (function_name == "incentiveDescriptionDataElements")
        return SpineDataTypeHandler::Function::incentiveDescriptionDataElements;
    if (function_name == "incentiveDescriptionListData")
        return SpineDataTypeHandler::Function::incentiveDescriptionListData;
    if (function_name == "incentiveDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::incentiveDescriptionListDataSelectors;
    if (function_name == "loadControlNodeData")
        return SpineDataTypeHandler::Function::loadControlNodeData;
    if (function_name == "loadControlNodeDataElements")
        return SpineDataTypeHandler::Function::loadControlNodeDataElements;
    if (function_name == "loadControlEventData")
        return SpineDataTypeHandler::Function::loadControlEventData;
    if (function_name == "loadControlEventDataElements")
        return SpineDataTypeHandler::Function::loadControlEventDataElements;
    if (function_name == "loadControlEventListData")
        return SpineDataTypeHandler::Function::loadControlEventListData;
    if (function_name == "loadControlEventListDataSelectors")
        return SpineDataTypeHandler::Function::loadControlEventListDataSelectors;
    if (function_name == "loadControlStateData")
        return SpineDataTypeHandler::Function::loadControlStateData;
    if (function_name == "loadControlStateDataElements")
        return SpineDataTypeHandler::Function::loadControlStateDataElements;
    if (function_name == "loadControlStateListData")
        return SpineDataTypeHandler::Function::loadControlStateListData;
    if (function_name == "loadControlStateListDataSelectors")
        return SpineDataTypeHandler::Function::loadControlStateListDataSelectors;
    if (function_name == "loadControlLimitData")
        return SpineDataTypeHandler::Function::loadControlLimitData;
    if (function_name == "loadControlLimitDataElements")
        return SpineDataTypeHandler::Function::loadControlLimitDataElements;
    if (function_name == "loadControlLimitListData")
        return SpineDataTypeHandler::Function::loadControlLimitListData;
    if (function_name == "loadControlLimitListDataSelectors")
        return SpineDataTypeHandler::Function::loadControlLimitListDataSelectors;
    if (function_name == "loadControlLimitConstraintsData")
        return SpineDataTypeHandler::Function::loadControlLimitConstraintsData;
    if (function_name == "loadControlLimitConstraintsDataElements")
        return SpineDataTypeHandler::Function::loadControlLimitConstraintsDataElements;
    if (function_name == "loadControlLimitConstraintsListData")
        return SpineDataTypeHandler::Function::loadControlLimitConstraintsListData;
    if (function_name == "loadControlLimitConstraintsListDataSelectors")
        return SpineDataTypeHandler::Function::loadControlLimitConstraintsListDataSelectors;
    if (function_name == "loadControlLimitDescriptionData")
        return SpineDataTypeHandler::Function::loadControlLimitDescriptionData;
    if (function_name == "loadControlLimitDescriptionDataElements")
        return SpineDataTypeHandler::Function::loadControlLimitDescriptionDataElements;
    if (function_name == "loadControlLimitDescriptionListData")
        return SpineDataTypeHandler::Function::loadControlLimitDescriptionListData;
    if (function_name == "loadControlLimitDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::loadControlLimitDescriptionListDataSelectors;
    if (function_name == "networkManagementAddNodeCall")
        return SpineDataTypeHandler::Function::networkManagementAddNodeCall;
    if (function_name == "networkManagementAddNodeCallElements")
        return SpineDataTypeHandler::Function::networkManagementAddNodeCallElements;
    if (function_name == "networkManagementRemoveNodeCall")
        return SpineDataTypeHandler::Function::networkManagementRemoveNodeCall;
    if (function_name == "networkManagementRemoveNodeCallElements")
        return SpineDataTypeHandler::Function::networkManagementRemoveNodeCallElements;
    if (function_name == "networkManagementModifyNodeCall")
        return SpineDataTypeHandler::Function::networkManagementModifyNodeCall;
    if (function_name == "networkManagementModifyNodeCallElements")
        return SpineDataTypeHandler::Function::networkManagementModifyNodeCallElements;
    if (function_name == "networkManagementScanNetworkCall")
        return SpineDataTypeHandler::Function::networkManagementScanNetworkCall;
    if (function_name == "networkManagementScanNetworkCallElements")
        return SpineDataTypeHandler::Function::networkManagementScanNetworkCallElements;
    if (function_name == "networkManagementDiscoverCall")
        return SpineDataTypeHandler::Function::networkManagementDiscoverCall;
    if (function_name == "networkManagementDiscoverCallElements")
        return SpineDataTypeHandler::Function::networkManagementDiscoverCallElements;
    if (function_name == "networkManagementAbortCall")
        return SpineDataTypeHandler::Function::networkManagementAbortCall;
    if (function_name == "networkManagementAbortCallElements")
        return SpineDataTypeHandler::Function::networkManagementAbortCallElements;
    if (function_name == "networkManagementProcessStateData")
        return SpineDataTypeHandler::Function::networkManagementProcessStateData;
    if (function_name == "networkManagementProcessStateDataElements")
        return SpineDataTypeHandler::Function::networkManagementProcessStateDataElements;
    if (function_name == "networkManagementJoiningModeData")
        return SpineDataTypeHandler::Function::networkManagementJoiningModeData;
    if (function_name == "networkManagementJoiningModeDataElements")
        return SpineDataTypeHandler::Function::networkManagementJoiningModeDataElements;
    if (function_name == "networkManagementReportCandidateData")
        return SpineDataTypeHandler::Function::networkManagementReportCandidateData;
    if (function_name == "networkManagementReportCandidateDataElements")
        return SpineDataTypeHandler::Function::networkManagementReportCandidateDataElements;
    if (function_name == "networkManagementDeviceDescriptionData")
        return SpineDataTypeHandler::Function::networkManagementDeviceDescriptionData;
    if (function_name == "networkManagementDeviceDescriptionDataElements")
        return SpineDataTypeHandler::Function::networkManagementDeviceDescriptionDataElements;
    if (function_name == "networkManagementDeviceDescriptionListData")
        return SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListData;
    if (function_name == "networkManagementDeviceDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListDataSelectors;
    if (function_name == "networkManagementEntityDescriptionData")
        return SpineDataTypeHandler::Function::networkManagementEntityDescriptionData;
    if (function_name == "networkManagementEntityDescriptionDataElements")
        return SpineDataTypeHandler::Function::networkManagementEntityDescriptionDataElements;
    if (function_name == "networkManagementEntityDescriptionListData")
        return SpineDataTypeHandler::Function::networkManagementEntityDescriptionListData;
    if (function_name == "networkManagementEntityDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::networkManagementEntityDescriptionListDataSelectors;
    if (function_name == "networkManagementFeatureDescriptionData")
        return SpineDataTypeHandler::Function::networkManagementFeatureDescriptionData;
    if (function_name == "networkManagementFeatureDescriptionDataElements")
        return SpineDataTypeHandler::Function::networkManagementFeatureDescriptionDataElements;
    if (function_name == "networkManagementFeatureDescriptionListData")
        return SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListData;
    if (function_name == "networkManagementFeatureDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListDataSelectors;
    if (function_name == "nodeManagementDetailedDiscoveryData")
        return SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryData;
    if (function_name == "nodeManagementDetailedDiscoveryDataElements")
        return SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataElements;
    if (function_name == "nodeManagementDetailedDiscoveryDataSelectors")
        return SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataSelectors;
    if (function_name == "nodeManagementBindingData")
        return SpineDataTypeHandler::Function::nodeManagementBindingData;
    if (function_name == "nodeManagementBindingDataElements")
        return SpineDataTypeHandler::Function::nodeManagementBindingDataElements;
    if (function_name == "nodeManagementBindingDataSelectors")
        return SpineDataTypeHandler::Function::nodeManagementBindingDataSelectors;
    if (function_name == "nodeManagementBindingRequestCall")
        return SpineDataTypeHandler::Function::nodeManagementBindingRequestCall;
    if (function_name == "nodeManagementBindingRequestCallElements")
        return SpineDataTypeHandler::Function::nodeManagementBindingRequestCallElements;
    if (function_name == "nodeManagementBindingDeleteCall")
        return SpineDataTypeHandler::Function::nodeManagementBindingDeleteCall;
    if (function_name == "nodeManagementBindingDeleteCallElements")
        return SpineDataTypeHandler::Function::nodeManagementBindingDeleteCallElements;
    if (function_name == "nodeManagementSubscriptionData")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionData;
    if (function_name == "nodeManagementSubscriptionDataElements")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionDataElements;
    if (function_name == "nodeManagementSubscriptionDataSelectors")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionDataSelectors;
    if (function_name == "nodeManagementSubscriptionRequestCall")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCall;
    if (function_name == "nodeManagementSubscriptionRequestCallElements")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCallElements;
    if (function_name == "nodeManagementSubscriptionDeleteCall")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCall;
    if (function_name == "nodeManagementSubscriptionDeleteCallElements")
        return SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCallElements;
    if (function_name == "nodeManagementDestinationData")
        return SpineDataTypeHandler::Function::nodeManagementDestinationData;
    if (function_name == "nodeManagementDestinationDataElements")
        return SpineDataTypeHandler::Function::nodeManagementDestinationDataElements;
    if (function_name == "nodeManagementDestinationListData")
        return SpineDataTypeHandler::Function::nodeManagementDestinationListData;
    if (function_name == "nodeManagementDestinationListDataSelectors")
        return SpineDataTypeHandler::Function::nodeManagementDestinationListDataSelectors;
    if (function_name == "nodeManagementUseCaseData")
        return SpineDataTypeHandler::Function::nodeManagementUseCaseData;
    if (function_name == "nodeManagementUseCaseDataElements")
        return SpineDataTypeHandler::Function::nodeManagementUseCaseDataElements;
    if (function_name == "nodeManagementUseCaseDataSelectors")
        return SpineDataTypeHandler::Function::nodeManagementUseCaseDataSelectors;
    if (function_name == "subscriptionManagementEntryData")
        return SpineDataTypeHandler::Function::subscriptionManagementEntryData;
    if (function_name == "subscriptionManagementEntryDataElements")
        return SpineDataTypeHandler::Function::subscriptionManagementEntryDataElements;
    if (function_name == "subscriptionManagementEntryListData")
        return SpineDataTypeHandler::Function::subscriptionManagementEntryListData;
    if (function_name == "subscriptionManagementEntryListDataSelectors")
        return SpineDataTypeHandler::Function::subscriptionManagementEntryListDataSelectors;
    if (function_name == "subscriptionManagementRequestCall")
        return SpineDataTypeHandler::Function::subscriptionManagementRequestCall;
    if (function_name == "subscriptionManagementRequestCallElements")
        return SpineDataTypeHandler::Function::subscriptionManagementRequestCallElements;
    if (function_name == "subscriptionManagementDeleteCall")
        return SpineDataTypeHandler::Function::subscriptionManagementDeleteCall;
    if (function_name == "subscriptionManagementDeleteCallElements")
        return SpineDataTypeHandler::Function::subscriptionManagementDeleteCallElements;
    if (function_name == "useCaseInformationData")
        return SpineDataTypeHandler::Function::useCaseInformationData;
    if (function_name == "useCaseInformationDataElements")
        return SpineDataTypeHandler::Function::useCaseInformationDataElements;
    if (function_name == "useCaseInformationListData")
        return SpineDataTypeHandler::Function::useCaseInformationListData;
    if (function_name == "useCaseInformationListDataSelectors")
        return SpineDataTypeHandler::Function::useCaseInformationListDataSelectors;
    if (function_name == "specificationVersionData")
        return SpineDataTypeHandler::Function::specificationVersionData;
    if (function_name == "specificationVersionDataElements")
        return SpineDataTypeHandler::Function::specificationVersionDataElements;
    if (function_name == "specificationVersionListData")
        return SpineDataTypeHandler::Function::specificationVersionListData;
    if (function_name == "specificationVersionListDataSelectors")
        return SpineDataTypeHandler::Function::specificationVersionListDataSelectors;
    if (function_name == "operatingConstraintsInterruptData")
        return SpineDataTypeHandler::Function::operatingConstraintsInterruptData;
    if (function_name == "operatingConstraintsInterruptDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsInterruptDataElements;
    if (function_name == "operatingConstraintsInterruptListData")
        return SpineDataTypeHandler::Function::operatingConstraintsInterruptListData;
    if (function_name == "operatingConstraintsInterruptListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsInterruptListDataSelectors;
    if (function_name == "operatingConstraintsDurationData")
        return SpineDataTypeHandler::Function::operatingConstraintsDurationData;
    if (function_name == "operatingConstraintsDurationDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsDurationDataElements;
    if (function_name == "operatingConstraintsDurationListData")
        return SpineDataTypeHandler::Function::operatingConstraintsDurationListData;
    if (function_name == "operatingConstraintsDurationListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsDurationListDataSelectors;
    if (function_name == "operatingConstraintsPowerDescriptionData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionData;
    if (function_name == "operatingConstraintsPowerDescriptionDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionDataElements;
    if (function_name == "operatingConstraintsPowerDescriptionListData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListData;
    if (function_name == "operatingConstraintsPowerDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListDataSelectors;
    if (function_name == "operatingConstraintsPowerRangeData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerRangeData;
    if (function_name == "operatingConstraintsPowerRangeDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerRangeDataElements;
    if (function_name == "operatingConstraintsPowerRangeListData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListData;
    if (function_name == "operatingConstraintsPowerRangeListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListDataSelectors;
    if (function_name == "operatingConstraintsPowerLevelData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerLevelData;
    if (function_name == "operatingConstraintsPowerLevelDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerLevelDataElements;
    if (function_name == "operatingConstraintsPowerLevelListData")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListData;
    if (function_name == "operatingConstraintsPowerLevelListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListDataSelectors;
    if (function_name == "operatingConstraintsResumeImplicationData")
        return SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationData;
    if (function_name == "operatingConstraintsResumeImplicationDataElements")
        return SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationDataElements;
    if (function_name == "operatingConstraintsResumeImplicationListData")
        return SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListData;
    if (function_name == "operatingConstraintsResumeImplicationListDataSelectors")
        return SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListDataSelectors;
    if (function_name == "sensingData")
        return SpineDataTypeHandler::Function::sensingData;
    if (function_name == "sensingDataElements")
        return SpineDataTypeHandler::Function::sensingDataElements;
    if (function_name == "sensingListData")
        return SpineDataTypeHandler::Function::sensingListData;
    if (function_name == "sensingListDataSelectors")
        return SpineDataTypeHandler::Function::sensingListDataSelectors;
    if (function_name == "sensingDescriptionData")
        return SpineDataTypeHandler::Function::sensingDescriptionData;
    if (function_name == "sensingDescriptionDataElements")
        return SpineDataTypeHandler::Function::sensingDescriptionDataElements;
    if (function_name == "smartEnergyManagementPsData")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsData;
    if (function_name == "smartEnergyManagementPsDataElements")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsDataElements;
    if (function_name == "smartEnergyManagementPsDataSelectors")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsDataSelectors;
    if (function_name == "smartEnergyManagementPsPriceData")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsPriceData;
    if (function_name == "smartEnergyManagementPsPriceDataElements")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataElements;
    if (function_name == "smartEnergyManagementPsPriceDataSelectors")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataSelectors;
    if (function_name == "smartEnergyManagementPsConfigurationRequestCall")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCall;
    if (function_name == "smartEnergyManagementPsConfigurationRequestCallElements")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCallElements;
    if (function_name == "smartEnergyManagementPsPriceCalculationRequestCall")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCall;
    if (function_name == "smartEnergyManagementPsPriceCalculationRequestCallElements")
        return SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCallElements;
    if (function_name == "stateInformationData")
        return SpineDataTypeHandler::Function::stateInformationData;
    if (function_name == "stateInformationDataElements")
        return SpineDataTypeHandler::Function::stateInformationDataElements;
    if (function_name == "stateInformationListData")
        return SpineDataTypeHandler::Function::stateInformationListData;
    if (function_name == "stateInformationListDataSelectors")
        return SpineDataTypeHandler::Function::stateInformationListDataSelectors;
    if (function_name == "supplyConditionData")
        return SpineDataTypeHandler::Function::supplyConditionData;
    if (function_name == "supplyConditionDataElements")
        return SpineDataTypeHandler::Function::supplyConditionDataElements;
    if (function_name == "supplyConditionListData")
        return SpineDataTypeHandler::Function::supplyConditionListData;
    if (function_name == "supplyConditionListDataSelectors")
        return SpineDataTypeHandler::Function::supplyConditionListDataSelectors;
    if (function_name == "supplyConditionDescriptionData")
        return SpineDataTypeHandler::Function::supplyConditionDescriptionData;
    if (function_name == "supplyConditionDescriptionDataElements")
        return SpineDataTypeHandler::Function::supplyConditionDescriptionDataElements;
    if (function_name == "supplyConditionDescriptionListData")
        return SpineDataTypeHandler::Function::supplyConditionDescriptionListData;
    if (function_name == "supplyConditionDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::supplyConditionDescriptionListDataSelectors;
    if (function_name == "supplyConditionThresholdRelationData")
        return SpineDataTypeHandler::Function::supplyConditionThresholdRelationData;
    if (function_name == "supplyConditionThresholdRelationDataElements")
        return SpineDataTypeHandler::Function::supplyConditionThresholdRelationDataElements;
    if (function_name == "supplyConditionThresholdRelationListData")
        return SpineDataTypeHandler::Function::supplyConditionThresholdRelationListData;
    if (function_name == "supplyConditionThresholdRelationListDataSelectors")
        return SpineDataTypeHandler::Function::supplyConditionThresholdRelationListDataSelectors;
    if (function_name == "taskManagementJobData")
        return SpineDataTypeHandler::Function::taskManagementJobData;
    if (function_name == "taskManagementJobDataElements")
        return SpineDataTypeHandler::Function::taskManagementJobDataElements;
    if (function_name == "taskManagementJobListData")
        return SpineDataTypeHandler::Function::taskManagementJobListData;
    if (function_name == "taskManagementJobListDataSelectors")
        return SpineDataTypeHandler::Function::taskManagementJobListDataSelectors;
    if (function_name == "taskManagementJobRelationData")
        return SpineDataTypeHandler::Function::taskManagementJobRelationData;
    if (function_name == "taskManagementJobRelationDataElements")
        return SpineDataTypeHandler::Function::taskManagementJobRelationDataElements;
    if (function_name == "taskManagementJobRelationListData")
        return SpineDataTypeHandler::Function::taskManagementJobRelationListData;
    if (function_name == "taskManagementJobRelationListDataSelectors")
        return SpineDataTypeHandler::Function::taskManagementJobRelationListDataSelectors;
    if (function_name == "taskManagementJobDescriptionData")
        return SpineDataTypeHandler::Function::taskManagementJobDescriptionData;
    if (function_name == "taskManagementJobDescriptionDataElements")
        return SpineDataTypeHandler::Function::taskManagementJobDescriptionDataElements;
    if (function_name == "taskManagementJobDescriptionListData")
        return SpineDataTypeHandler::Function::taskManagementJobDescriptionListData;
    if (function_name == "taskManagementJobDescriptionListDataSelectors")
        return SpineDataTypeHandler::Function::taskManagementJobDescriptionListDataSelectors;
    if (function_name == "taskManagementOverviewData")
        return SpineDataTypeHandler::Function::taskManagementOverviewData;
    if (function_name == "taskManagementOverviewDataElements")
        return SpineDataTypeHandler::Function::taskManagementOverviewDataElements;
    if (function_name == "timeInformationData")
        return SpineDataTypeHandler::Function::timeInformationData;
    if (function_name == "timeInformationDataElements")
        return SpineDataTypeHandler::Function::timeInformationDataElements;
    if (function_name == "timeDistributorData")
        return SpineDataTypeHandler::Function::timeDistributorData;
    if (function_name == "timeDistributorDataElements")
        return SpineDataTypeHandler::Function::timeDistributorDataElements;
    if (function_name == "timePrecisionData")
        return SpineDataTypeHandler::Function::timePrecisionData;
    if (function_name == "timePrecisionDataElements")
        return SpineDataTypeHandler::Function::timePrecisionDataElements;
    if (function_name == "timeDistributorEnquiryCall")
        return SpineDataTypeHandler::Function::timeDistributorEnquiryCall;
    if (function_name == "timeDistributorEnquiryCallElements")
        return SpineDataTypeHandler::Function::timeDistributorEnquiryCallElements;
    if (function_name == "header")
        return SpineDataTypeHandler::Function::header;
    return SpineDataTypeHandler::Function::None;
}

SpineDataTypeHandler::Function SpineDataTypeHandler::handle_cmd(JsonObjectConst obj)
{

    if (obj["messagingData"]) {
        last_cmd = function_from_string("messagingData");
        messagingdatatype = obj["messagingData"].as<decltype(messagingdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["messagingDataElements"]) {
        last_cmd = function_from_string("messagingDataElements");
        messagingdataelementstype = obj["messagingDataElements"].as<decltype(messagingdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["messagingListData"]) {
        last_cmd = function_from_string("messagingListData");
        messaginglistdatatype = obj["messagingListData"].as<decltype(messaginglistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["messagingListDataSelectors"]) {
        last_cmd = function_from_string("messagingListDataSelectors");
        messaginglistdataselectorstype = obj["messagingListDataSelectors"].as<decltype(messaginglistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesData"]) {
        last_cmd = function_from_string("timeSeriesData");
        timeseriesdatatype = obj["timeSeriesData"].as<decltype(timeseriesdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesDataElements"]) {
        last_cmd = function_from_string("timeSeriesDataElements");
        timeseriesdataelementstype = obj["timeSeriesDataElements"].as<decltype(timeseriesdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesListData"]) {
        last_cmd = function_from_string("timeSeriesListData");
        timeserieslistdatatype = obj["timeSeriesListData"].as<decltype(timeserieslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesListDataSelectors"]) {
        last_cmd = function_from_string("timeSeriesListDataSelectors");
        timeserieslistdataselectorstype = obj["timeSeriesListDataSelectors"].as<decltype(timeserieslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesDescriptionData"]) {
        last_cmd = function_from_string("timeSeriesDescriptionData");
        timeseriesdescriptiondatatype = obj["timeSeriesDescriptionData"].as<decltype(timeseriesdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesDescriptionDataElements"]) {
        last_cmd = function_from_string("timeSeriesDescriptionDataElements");
        timeseriesdescriptiondataelementstype =
            obj["timeSeriesDescriptionDataElements"].as<decltype(timeseriesdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesDescriptionListData"]) {
        last_cmd = function_from_string("timeSeriesDescriptionListData");
        timeseriesdescriptionlistdatatype =
            obj["timeSeriesDescriptionListData"].as<decltype(timeseriesdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("timeSeriesDescriptionListDataSelectors");
        timeseriesdescriptionlistdataselectorstype =
            obj["timeSeriesDescriptionListDataSelectors"].as<decltype(timeseriesdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesConstraintsData"]) {
        last_cmd = function_from_string("timeSeriesConstraintsData");
        timeseriesconstraintsdatatype = obj["timeSeriesConstraintsData"].as<decltype(timeseriesconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesConstraintsDataElements"]) {
        last_cmd = function_from_string("timeSeriesConstraintsDataElements");
        timeseriesconstraintsdataelementstype =
            obj["timeSeriesConstraintsDataElements"].as<decltype(timeseriesconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesConstraintsListData"]) {
        last_cmd = function_from_string("timeSeriesConstraintsListData");
        timeseriesconstraintslistdatatype =
            obj["timeSeriesConstraintsListData"].as<decltype(timeseriesconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeSeriesConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("timeSeriesConstraintsListDataSelectors");
        timeseriesconstraintslistdataselectorstype =
            obj["timeSeriesConstraintsListDataSelectors"].as<decltype(timeseriesconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementData"]) {
        last_cmd = function_from_string("measurementData");
        measurementdatatype = obj["measurementData"].as<decltype(measurementdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementDataElements"]) {
        last_cmd = function_from_string("measurementDataElements");
        measurementdataelementstype = obj["measurementDataElements"].as<decltype(measurementdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementListData"]) {
        last_cmd = function_from_string("measurementListData");
        measurementlistdatatype = obj["measurementListData"].as<decltype(measurementlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementListDataSelectors"]) {
        last_cmd = function_from_string("measurementListDataSelectors");
        measurementlistdataselectorstype = obj["measurementListDataSelectors"].as<decltype(measurementlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementSeriesData"]) {
        last_cmd = function_from_string("measurementSeriesData");
        measurementseriesdatatype = obj["measurementSeriesData"].as<decltype(measurementseriesdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementSeriesDataElements"]) {
        last_cmd = function_from_string("measurementSeriesDataElements");
        measurementseriesdataelementstype =
            obj["measurementSeriesDataElements"].as<decltype(measurementseriesdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementSeriesListData"]) {
        last_cmd = function_from_string("measurementSeriesListData");
        measurementserieslistdatatype = obj["measurementSeriesListData"].as<decltype(measurementserieslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementSeriesListDataSelectors"]) {
        last_cmd = function_from_string("measurementSeriesListDataSelectors");
        measurementserieslistdataselectorstype =
            obj["measurementSeriesListDataSelectors"].as<decltype(measurementserieslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementConstraintsData"]) {
        last_cmd = function_from_string("measurementConstraintsData");
        measurementconstraintsdatatype = obj["measurementConstraintsData"].as<decltype(measurementconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementConstraintsDataElements"]) {
        last_cmd = function_from_string("measurementConstraintsDataElements");
        measurementconstraintsdataelementstype =
            obj["measurementConstraintsDataElements"].as<decltype(measurementconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementConstraintsListData"]) {
        last_cmd = function_from_string("measurementConstraintsListData");
        measurementconstraintslistdatatype =
            obj["measurementConstraintsListData"].as<decltype(measurementconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("measurementConstraintsListDataSelectors");
        measurementconstraintslistdataselectorstype =
            obj["measurementConstraintsListDataSelectors"].as<decltype(measurementconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementDescriptionData"]) {
        last_cmd = function_from_string("measurementDescriptionData");
        measurementdescriptiondatatype = obj["measurementDescriptionData"].as<decltype(measurementdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementDescriptionDataElements"]) {
        last_cmd = function_from_string("measurementDescriptionDataElements");
        measurementdescriptiondataelementstype =
            obj["measurementDescriptionDataElements"].as<decltype(measurementdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementDescriptionListData"]) {
        last_cmd = function_from_string("measurementDescriptionListData");
        measurementdescriptionlistdatatype =
            obj["measurementDescriptionListData"].as<decltype(measurementdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("measurementDescriptionListDataSelectors");
        measurementdescriptionlistdataselectorstype =
            obj["measurementDescriptionListDataSelectors"].as<decltype(measurementdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementThresholdRelationData"]) {
        last_cmd = function_from_string("measurementThresholdRelationData");
        measurementthresholdrelationdatatype =
            obj["measurementThresholdRelationData"].as<decltype(measurementthresholdrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementThresholdRelationDataElements"]) {
        last_cmd = function_from_string("measurementThresholdRelationDataElements");
        measurementthresholdrelationdataelementstype =
            obj["measurementThresholdRelationDataElements"].as<decltype(measurementthresholdrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementThresholdRelationListData"]) {
        last_cmd = function_from_string("measurementThresholdRelationListData");
        measurementthresholdrelationlistdatatype =
            obj["measurementThresholdRelationListData"].as<decltype(measurementthresholdrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["measurementThresholdRelationListDataSelectors"]) {
        last_cmd = function_from_string("measurementThresholdRelationListDataSelectors");
        measurementthresholdrelationlistdataselectorstype =
            obj["measurementThresholdRelationListDataSelectors"]
                .as<decltype(measurementthresholdrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdData"]) {
        last_cmd = function_from_string("thresholdData");
        thresholddatatype = obj["thresholdData"].as<decltype(thresholddatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdDataElements"]) {
        last_cmd = function_from_string("thresholdDataElements");
        thresholddataelementstype = obj["thresholdDataElements"].as<decltype(thresholddataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdListData"]) {
        last_cmd = function_from_string("thresholdListData");
        thresholdlistdatatype = obj["thresholdListData"].as<decltype(thresholdlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdListDataSelectors"]) {
        last_cmd = function_from_string("thresholdListDataSelectors");
        thresholdlistdataselectorstype = obj["thresholdListDataSelectors"].as<decltype(thresholdlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdConstraintsData"]) {
        last_cmd = function_from_string("thresholdConstraintsData");
        thresholdconstraintsdatatype = obj["thresholdConstraintsData"].as<decltype(thresholdconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdConstraintsDataElements"]) {
        last_cmd = function_from_string("thresholdConstraintsDataElements");
        thresholdconstraintsdataelementstype =
            obj["thresholdConstraintsDataElements"].as<decltype(thresholdconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdConstraintsListData"]) {
        last_cmd = function_from_string("thresholdConstraintsListData");
        thresholdconstraintslistdatatype = obj["thresholdConstraintsListData"].as<decltype(thresholdconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("thresholdConstraintsListDataSelectors");
        thresholdconstraintslistdataselectorstype =
            obj["thresholdConstraintsListDataSelectors"].as<decltype(thresholdconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdDescriptionData"]) {
        last_cmd = function_from_string("thresholdDescriptionData");
        thresholddescriptiondatatype = obj["thresholdDescriptionData"].as<decltype(thresholddescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdDescriptionDataElements"]) {
        last_cmd = function_from_string("thresholdDescriptionDataElements");
        thresholddescriptiondataelementstype =
            obj["thresholdDescriptionDataElements"].as<decltype(thresholddescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdDescriptionListData"]) {
        last_cmd = function_from_string("thresholdDescriptionListData");
        thresholddescriptionlistdatatype = obj["thresholdDescriptionListData"].as<decltype(thresholddescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["thresholdDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("thresholdDescriptionListDataSelectors");
        thresholddescriptionlistdataselectorstype =
            obj["thresholdDescriptionListDataSelectors"].as<decltype(thresholddescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlActivityData"]) {
        last_cmd = function_from_string("directControlActivityData");
        directcontrolactivitydatatype = obj["directControlActivityData"].as<decltype(directcontrolactivitydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlActivityDataElements"]) {
        last_cmd = function_from_string("directControlActivityDataElements");
        directcontrolactivitydataelementstype =
            obj["directControlActivityDataElements"].as<decltype(directcontrolactivitydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlActivityListData"]) {
        last_cmd = function_from_string("directControlActivityListData");
        directcontrolactivitylistdatatype =
            obj["directControlActivityListData"].as<decltype(directcontrolactivitylistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlActivityListDataSelectors"]) {
        last_cmd = function_from_string("directControlActivityListDataSelectors");
        directcontrolactivitylistdataselectorstype =
            obj["directControlActivityListDataSelectors"].as<decltype(directcontrolactivitylistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlDescriptionData"]) {
        last_cmd = function_from_string("directControlDescriptionData");
        directcontroldescriptiondatatype = obj["directControlDescriptionData"].as<decltype(directcontroldescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["directControlDescriptionDataElements"]) {
        last_cmd = function_from_string("directControlDescriptionDataElements");
        directcontroldescriptiondataelementstype =
            obj["directControlDescriptionDataElements"].as<decltype(directcontroldescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleData"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleData");
        powertimeslotscheduledatatype = obj["powerTimeSlotScheduleData"].as<decltype(powertimeslotscheduledatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleDataElements"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleDataElements");
        powertimeslotscheduledataelementstype =
            obj["powerTimeSlotScheduleDataElements"].as<decltype(powertimeslotscheduledataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleListData"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleListData");
        powertimeslotschedulelistdatatype =
            obj["powerTimeSlotScheduleListData"].as<decltype(powertimeslotschedulelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleListDataSelectors"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleListDataSelectors");
        powertimeslotschedulelistdataselectorstype =
            obj["powerTimeSlotScheduleListDataSelectors"].as<decltype(powertimeslotschedulelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotValueData"]) {
        last_cmd = function_from_string("powerTimeSlotValueData");
        powertimeslotvaluedatatype = obj["powerTimeSlotValueData"].as<decltype(powertimeslotvaluedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotValueDataElements"]) {
        last_cmd = function_from_string("powerTimeSlotValueDataElements");
        powertimeslotvaluedataelementstype =
            obj["powerTimeSlotValueDataElements"].as<decltype(powertimeslotvaluedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotValueListData"]) {
        last_cmd = function_from_string("powerTimeSlotValueListData");
        powertimeslotvaluelistdatatype = obj["powerTimeSlotValueListData"].as<decltype(powertimeslotvaluelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotValueListDataSelectors"]) {
        last_cmd = function_from_string("powerTimeSlotValueListDataSelectors");
        powertimeslotvaluelistdataselectorstype =
            obj["powerTimeSlotValueListDataSelectors"].as<decltype(powertimeslotvaluelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleConstraintsData"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleConstraintsData");
        powertimeslotscheduleconstraintsdatatype =
            obj["powerTimeSlotScheduleConstraintsData"].as<decltype(powertimeslotscheduleconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleConstraintsDataElements"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleConstraintsDataElements");
        powertimeslotscheduleconstraintsdataelementstype =
            obj["powerTimeSlotScheduleConstraintsDataElements"]
                .as<decltype(powertimeslotscheduleconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleConstraintsListData"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleConstraintsListData");
        powertimeslotscheduleconstraintslistdatatype =
            obj["powerTimeSlotScheduleConstraintsListData"].as<decltype(powertimeslotscheduleconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerTimeSlotScheduleConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("powerTimeSlotScheduleConstraintsListDataSelectors");
        powertimeslotscheduleconstraintslistdataselectorstype =
            obj["powerTimeSlotScheduleConstraintsListDataSelectors"]
                .as<decltype(powertimeslotscheduleconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceAlternativesRelationData"]) {
        last_cmd = function_from_string("powerSequenceAlternativesRelationData");
        powersequencealternativesrelationdatatype =
            obj["powerSequenceAlternativesRelationData"].as<decltype(powersequencealternativesrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceAlternativesRelationDataElements"]) {
        last_cmd = function_from_string("powerSequenceAlternativesRelationDataElements");
        powersequencealternativesrelationdataelementstype =
            obj["powerSequenceAlternativesRelationDataElements"]
                .as<decltype(powersequencealternativesrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceAlternativesRelationListData"]) {
        last_cmd = function_from_string("powerSequenceAlternativesRelationListData");
        powersequencealternativesrelationlistdatatype =
            obj["powerSequenceAlternativesRelationListData"].as<decltype(powersequencealternativesrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceAlternativesRelationListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceAlternativesRelationListDataSelectors");
        powersequencealternativesrelationlistdataselectorstype =
            obj["powerSequenceAlternativesRelationListDataSelectors"]
                .as<decltype(powersequencealternativesrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceDescriptionData"]) {
        last_cmd = function_from_string("powerSequenceDescriptionData");
        powersequencedescriptiondatatype = obj["powerSequenceDescriptionData"].as<decltype(powersequencedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceDescriptionDataElements"]) {
        last_cmd = function_from_string("powerSequenceDescriptionDataElements");
        powersequencedescriptiondataelementstype =
            obj["powerSequenceDescriptionDataElements"].as<decltype(powersequencedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceDescriptionListData"]) {
        last_cmd = function_from_string("powerSequenceDescriptionListData");
        powersequencedescriptionlistdatatype =
            obj["powerSequenceDescriptionListData"].as<decltype(powersequencedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceDescriptionListDataSelectors");
        powersequencedescriptionlistdataselectorstype =
            obj["powerSequenceDescriptionListDataSelectors"].as<decltype(powersequencedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceStateData"]) {
        last_cmd = function_from_string("powerSequenceStateData");
        powersequencestatedatatype = obj["powerSequenceStateData"].as<decltype(powersequencestatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceStateDataElements"]) {
        last_cmd = function_from_string("powerSequenceStateDataElements");
        powersequencestatedataelementstype =
            obj["powerSequenceStateDataElements"].as<decltype(powersequencestatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceStateListData"]) {
        last_cmd = function_from_string("powerSequenceStateListData");
        powersequencestatelistdatatype = obj["powerSequenceStateListData"].as<decltype(powersequencestatelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceStateListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceStateListDataSelectors");
        powersequencestatelistdataselectorstype =
            obj["powerSequenceStateListDataSelectors"].as<decltype(powersequencestatelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleData"]) {
        last_cmd = function_from_string("powerSequenceScheduleData");
        powersequencescheduledatatype = obj["powerSequenceScheduleData"].as<decltype(powersequencescheduledatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleDataElements"]) {
        last_cmd = function_from_string("powerSequenceScheduleDataElements");
        powersequencescheduledataelementstype =
            obj["powerSequenceScheduleDataElements"].as<decltype(powersequencescheduledataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleListData"]) {
        last_cmd = function_from_string("powerSequenceScheduleListData");
        powersequenceschedulelistdatatype =
            obj["powerSequenceScheduleListData"].as<decltype(powersequenceschedulelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceScheduleListDataSelectors");
        powersequenceschedulelistdataselectorstype =
            obj["powerSequenceScheduleListDataSelectors"].as<decltype(powersequenceschedulelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConstraintsData"]) {
        last_cmd = function_from_string("powerSequenceScheduleConstraintsData");
        powersequencescheduleconstraintsdatatype =
            obj["powerSequenceScheduleConstraintsData"].as<decltype(powersequencescheduleconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConstraintsDataElements"]) {
        last_cmd = function_from_string("powerSequenceScheduleConstraintsDataElements");
        powersequencescheduleconstraintsdataelementstype =
            obj["powerSequenceScheduleConstraintsDataElements"]
                .as<decltype(powersequencescheduleconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConstraintsListData"]) {
        last_cmd = function_from_string("powerSequenceScheduleConstraintsListData");
        powersequencescheduleconstraintslistdatatype =
            obj["powerSequenceScheduleConstraintsListData"].as<decltype(powersequencescheduleconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceScheduleConstraintsListDataSelectors");
        powersequencescheduleconstraintslistdataselectorstype =
            obj["powerSequenceScheduleConstraintsListDataSelectors"]
                .as<decltype(powersequencescheduleconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceData"]) {
        last_cmd = function_from_string("powerSequencePriceData");
        powersequencepricedatatype = obj["powerSequencePriceData"].as<decltype(powersequencepricedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceDataElements"]) {
        last_cmd = function_from_string("powerSequencePriceDataElements");
        powersequencepricedataelementstype =
            obj["powerSequencePriceDataElements"].as<decltype(powersequencepricedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceListData"]) {
        last_cmd = function_from_string("powerSequencePriceListData");
        powersequencepricelistdatatype = obj["powerSequencePriceListData"].as<decltype(powersequencepricelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceListDataSelectors"]) {
        last_cmd = function_from_string("powerSequencePriceListDataSelectors");
        powersequencepricelistdataselectorstype =
            obj["powerSequencePriceListDataSelectors"].as<decltype(powersequencepricelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceSchedulePreferenceData"]) {
        last_cmd = function_from_string("powerSequenceSchedulePreferenceData");
        powersequenceschedulepreferencedatatype =
            obj["powerSequenceSchedulePreferenceData"].as<decltype(powersequenceschedulepreferencedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceSchedulePreferenceDataElements"]) {
        last_cmd = function_from_string("powerSequenceSchedulePreferenceDataElements");
        powersequenceschedulepreferencedataelementstype =
            obj["powerSequenceSchedulePreferenceDataElements"].as<decltype(powersequenceschedulepreferencedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceSchedulePreferenceListData"]) {
        last_cmd = function_from_string("powerSequenceSchedulePreferenceListData");
        powersequenceschedulepreferencelistdatatype =
            obj["powerSequenceSchedulePreferenceListData"].as<decltype(powersequenceschedulepreferencelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceSchedulePreferenceListDataSelectors"]) {
        last_cmd = function_from_string("powerSequenceSchedulePreferenceListDataSelectors");
        powersequenceschedulepreferencelistdataselectorstype =
            obj["powerSequenceSchedulePreferenceListDataSelectors"]
                .as<decltype(powersequenceschedulepreferencelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceNodeScheduleInformationData"]) {
        last_cmd = function_from_string("powerSequenceNodeScheduleInformationData");
        powersequencenodescheduleinformationdatatype =
            obj["powerSequenceNodeScheduleInformationData"].as<decltype(powersequencenodescheduleinformationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceNodeScheduleInformationDataElements"]) {
        last_cmd = function_from_string("powerSequenceNodeScheduleInformationDataElements");
        powersequencenodescheduleinformationdataelementstype =
            obj["powerSequenceNodeScheduleInformationDataElements"]
                .as<decltype(powersequencenodescheduleinformationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConfigurationRequestCall"]) {
        last_cmd = function_from_string("powerSequenceScheduleConfigurationRequestCall");
        powersequencescheduleconfigurationrequestcalltype =
            obj["powerSequenceScheduleConfigurationRequestCall"]
                .as<decltype(powersequencescheduleconfigurationrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequenceScheduleConfigurationRequestCallElements"]) {
        last_cmd = function_from_string("powerSequenceScheduleConfigurationRequestCallElements");
        powersequencescheduleconfigurationrequestcallelementstype =
            obj["powerSequenceScheduleConfigurationRequestCallElements"]
                .as<decltype(powersequencescheduleconfigurationrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceCalculationRequestCall"]) {
        last_cmd = function_from_string("powerSequencePriceCalculationRequestCall");
        powersequencepricecalculationrequestcalltype =
            obj["powerSequencePriceCalculationRequestCall"].as<decltype(powersequencepricecalculationrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["powerSequencePriceCalculationRequestCallElements"]) {
        last_cmd = function_from_string("powerSequencePriceCalculationRequestCallElements");
        powersequencepricecalculationrequestcallelementstype =
            obj["powerSequencePriceCalculationRequestCallElements"]
                .as<decltype(powersequencepricecalculationrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["resultData"]) {
        last_cmd = function_from_string("resultData");
        resultdatatype = obj["resultData"].as<decltype(resultdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementEntryData"]) {
        last_cmd = function_from_string("bindingManagementEntryData");
        bindingmanagemententrydatatype = obj["bindingManagementEntryData"].as<decltype(bindingmanagemententrydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementEntryDataElements"]) {
        last_cmd = function_from_string("bindingManagementEntryDataElements");
        bindingmanagemententrydataelementstype =
            obj["bindingManagementEntryDataElements"].as<decltype(bindingmanagemententrydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementEntryListData"]) {
        last_cmd = function_from_string("bindingManagementEntryListData");
        bindingmanagemententrylistdatatype =
            obj["bindingManagementEntryListData"].as<decltype(bindingmanagemententrylistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementEntryListDataSelectors"]) {
        last_cmd = function_from_string("bindingManagementEntryListDataSelectors");
        bindingmanagemententrylistdataselectorstype =
            obj["bindingManagementEntryListDataSelectors"].as<decltype(bindingmanagemententrylistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementRequestCall"]) {
        last_cmd = function_from_string("bindingManagementRequestCall");
        bindingmanagementrequestcalltype = obj["bindingManagementRequestCall"].as<decltype(bindingmanagementrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementRequestCallElements"]) {
        last_cmd = function_from_string("bindingManagementRequestCallElements");
        bindingmanagementrequestcallelementstype =
            obj["bindingManagementRequestCallElements"].as<decltype(bindingmanagementrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementDeleteCall"]) {
        last_cmd = function_from_string("bindingManagementDeleteCall");
        bindingmanagementdeletecalltype = obj["bindingManagementDeleteCall"].as<decltype(bindingmanagementdeletecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["bindingManagementDeleteCallElements"]) {
        last_cmd = function_from_string("bindingManagementDeleteCallElements");
        bindingmanagementdeletecallelementstype =
            obj["bindingManagementDeleteCallElements"].as<decltype(bindingmanagementdeletecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorLevelData"]) {
        last_cmd = function_from_string("actuatorLevelData");
        actuatorleveldatatype = obj["actuatorLevelData"].as<decltype(actuatorleveldatatype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorLevelDataElements"]) {
        last_cmd = function_from_string("actuatorLevelDataElements");
        actuatorleveldataelementstype = obj["actuatorLevelDataElements"].as<decltype(actuatorleveldataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorLevelDescriptionData"]) {
        last_cmd = function_from_string("actuatorLevelDescriptionData");
        actuatorleveldescriptiondatatype = obj["actuatorLevelDescriptionData"].as<decltype(actuatorleveldescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorLevelDescriptionDataElements"]) {
        last_cmd = function_from_string("actuatorLevelDescriptionDataElements");
        actuatorleveldescriptiondataelementstype =
            obj["actuatorLevelDescriptionDataElements"].as<decltype(actuatorleveldescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["cmdClassifier"]) {
        last_cmd = function_from_string("cmdClassifier");
        cmdclassifiertype = obj["cmdClassifier"].as<decltype(cmdclassifiertype)::value_type>();
        return last_cmd;
    }
    if (obj["lastUpdateAt"]) {
        last_cmd = function_from_string("lastUpdateAt");
        absoluteorrelativetimetype = obj["lastUpdateAt"].as<decltype(absoluteorrelativetimetype)::value_type>();
        return last_cmd;
    }
    if (obj["function"]) {
        last_cmd = function_from_string("function");
        functiontype = obj["function"].as<decltype(functiontype)::value_type>();
        return last_cmd;
    }
    if (obj["cmdControl"]) {
        last_cmd = function_from_string("cmdControl");
        cmdcontroltype = obj["cmdControl"].as<decltype(cmdcontroltype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorSwitchData"]) {
        last_cmd = function_from_string("actuatorSwitchData");
        actuatorswitchdatatype = obj["actuatorSwitchData"].as<decltype(actuatorswitchdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorSwitchDataElements"]) {
        last_cmd = function_from_string("actuatorSwitchDataElements");
        actuatorswitchdataelementstype = obj["actuatorSwitchDataElements"].as<decltype(actuatorswitchdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorSwitchDescriptionData"]) {
        last_cmd = function_from_string("actuatorSwitchDescriptionData");
        actuatorswitchdescriptiondatatype =
            obj["actuatorSwitchDescriptionData"].as<decltype(actuatorswitchdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["actuatorSwitchDescriptionDataElements"]) {
        last_cmd = function_from_string("actuatorSwitchDescriptionDataElements");
        actuatorswitchdescriptiondataelementstype =
            obj["actuatorSwitchDescriptionDataElements"].as<decltype(actuatorswitchdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["alarmData"]) {
        last_cmd = function_from_string("alarmData");
        alarmdatatype = obj["alarmData"].as<decltype(alarmdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["alarmDataElements"]) {
        last_cmd = function_from_string("alarmDataElements");
        alarmdataelementstype = obj["alarmDataElements"].as<decltype(alarmdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["alarmListData"]) {
        last_cmd = function_from_string("alarmListData");
        alarmlistdatatype = obj["alarmListData"].as<decltype(alarmlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["alarmListDataSelectors"]) {
        last_cmd = function_from_string("alarmListDataSelectors");
        alarmlistdataselectorstype = obj["alarmListDataSelectors"].as<decltype(alarmlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["billData"]) {
        last_cmd = function_from_string("billData");
        billdatatype = obj["billData"].as<decltype(billdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billDataElements"]) {
        last_cmd = function_from_string("billDataElements");
        billdataelementstype = obj["billDataElements"].as<decltype(billdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["billListData"]) {
        last_cmd = function_from_string("billListData");
        billlistdatatype = obj["billListData"].as<decltype(billlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billListDataSelectors"]) {
        last_cmd = function_from_string("billListDataSelectors");
        billlistdataselectorstype = obj["billListDataSelectors"].as<decltype(billlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["billConstraintsData"]) {
        last_cmd = function_from_string("billConstraintsData");
        billconstraintsdatatype = obj["billConstraintsData"].as<decltype(billconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billConstraintsDataElements"]) {
        last_cmd = function_from_string("billConstraintsDataElements");
        billconstraintsdataelementstype = obj["billConstraintsDataElements"].as<decltype(billconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["billConstraintsListData"]) {
        last_cmd = function_from_string("billConstraintsListData");
        billconstraintslistdatatype = obj["billConstraintsListData"].as<decltype(billconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("billConstraintsListDataSelectors");
        billconstraintslistdataselectorstype =
            obj["billConstraintsListDataSelectors"].as<decltype(billconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["billDescriptionData"]) {
        last_cmd = function_from_string("billDescriptionData");
        billdescriptiondatatype = obj["billDescriptionData"].as<decltype(billdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billDescriptionDataElements"]) {
        last_cmd = function_from_string("billDescriptionDataElements");
        billdescriptiondataelementstype = obj["billDescriptionDataElements"].as<decltype(billdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["billDescriptionListData"]) {
        last_cmd = function_from_string("billDescriptionListData");
        billdescriptionlistdatatype = obj["billDescriptionListData"].as<decltype(billdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["billDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("billDescriptionListDataSelectors");
        billdescriptionlistdataselectorstype =
            obj["billDescriptionListDataSelectors"].as<decltype(billdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["identificationData"]) {
        last_cmd = function_from_string("identificationData");
        identificationdatatype = obj["identificationData"].as<decltype(identificationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["identificationDataElements"]) {
        last_cmd = function_from_string("identificationDataElements");
        identificationdataelementstype = obj["identificationDataElements"].as<decltype(identificationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["identificationListData"]) {
        last_cmd = function_from_string("identificationListData");
        identificationlistdatatype = obj["identificationListData"].as<decltype(identificationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["identificationListDataSelectors"]) {
        last_cmd = function_from_string("identificationListDataSelectors");
        identificationlistdataselectorstype =
            obj["identificationListDataSelectors"].as<decltype(identificationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionIdentificationData"]) {
        last_cmd = function_from_string("sessionIdentificationData");
        sessionidentificationdatatype = obj["sessionIdentificationData"].as<decltype(sessionidentificationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionIdentificationDataElements"]) {
        last_cmd = function_from_string("sessionIdentificationDataElements");
        sessionidentificationdataelementstype =
            obj["sessionIdentificationDataElements"].as<decltype(sessionidentificationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionIdentificationListData"]) {
        last_cmd = function_from_string("sessionIdentificationListData");
        sessionidentificationlistdatatype =
            obj["sessionIdentificationListData"].as<decltype(sessionidentificationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionIdentificationListDataSelectors"]) {
        last_cmd = function_from_string("sessionIdentificationListDataSelectors");
        sessionidentificationlistdataselectorstype =
            obj["sessionIdentificationListDataSelectors"].as<decltype(sessionidentificationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionMeasurementRelationData"]) {
        last_cmd = function_from_string("sessionMeasurementRelationData");
        sessionmeasurementrelationdatatype =
            obj["sessionMeasurementRelationData"].as<decltype(sessionmeasurementrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionMeasurementRelationDataElements"]) {
        last_cmd = function_from_string("sessionMeasurementRelationDataElements");
        sessionmeasurementrelationdataelementstype =
            obj["sessionMeasurementRelationDataElements"].as<decltype(sessionmeasurementrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionMeasurementRelationListData"]) {
        last_cmd = function_from_string("sessionMeasurementRelationListData");
        sessionmeasurementrelationlistdatatype =
            obj["sessionMeasurementRelationListData"].as<decltype(sessionmeasurementrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sessionMeasurementRelationListDataSelectors"]) {
        last_cmd = function_from_string("sessionMeasurementRelationListDataSelectors");
        sessionmeasurementrelationlistdataselectorstype =
            obj["sessionMeasurementRelationListDataSelectors"].as<decltype(sessionmeasurementrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["dataTunnelingCall"]) {
        last_cmd = function_from_string("dataTunnelingCall");
        datatunnelingcalltype = obj["dataTunnelingCall"].as<decltype(datatunnelingcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["dataTunnelingCallElements"]) {
        last_cmd = function_from_string("dataTunnelingCallElements");
        datatunnelingcallelementstype = obj["dataTunnelingCallElements"].as<decltype(datatunnelingcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceClassificationManufacturerData"]) {
        last_cmd = function_from_string("deviceClassificationManufacturerData");
        deviceclassificationmanufacturerdatatype =
            obj["deviceClassificationManufacturerData"].as<decltype(deviceclassificationmanufacturerdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceClassificationManufacturerDataElements"]) {
        last_cmd = function_from_string("deviceClassificationManufacturerDataElements");
        deviceclassificationmanufacturerdataelementstype =
            obj["deviceClassificationManufacturerDataElements"]
                .as<decltype(deviceclassificationmanufacturerdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceClassificationUserData"]) {
        last_cmd = function_from_string("deviceClassificationUserData");
        deviceclassificationuserdatatype = obj["deviceClassificationUserData"].as<decltype(deviceclassificationuserdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceClassificationUserDataElements"]) {
        last_cmd = function_from_string("deviceClassificationUserDataElements");
        deviceclassificationuserdataelementstype =
            obj["deviceClassificationUserDataElements"].as<decltype(deviceclassificationuserdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueData");
        deviceconfigurationkeyvaluedatatype =
            obj["deviceConfigurationKeyValueData"].as<decltype(deviceconfigurationkeyvaluedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueDataElements"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueDataElements");
        deviceconfigurationkeyvaluedataelementstype =
            obj["deviceConfigurationKeyValueDataElements"].as<decltype(deviceconfigurationkeyvaluedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueListData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueListData");
        deviceconfigurationkeyvaluelistdatatype =
            obj["deviceConfigurationKeyValueListData"].as<decltype(deviceconfigurationkeyvaluelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueListDataSelectors"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueListDataSelectors");
        deviceconfigurationkeyvaluelistdataselectorstype =
            obj["deviceConfigurationKeyValueListDataSelectors"]
                .as<decltype(deviceconfigurationkeyvaluelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueDescriptionData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueDescriptionData");
        deviceconfigurationkeyvaluedescriptiondatatype =
            obj["deviceConfigurationKeyValueDescriptionData"].as<decltype(deviceconfigurationkeyvaluedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueDescriptionDataElements"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueDescriptionDataElements");
        deviceconfigurationkeyvaluedescriptiondataelementstype =
            obj["deviceConfigurationKeyValueDescriptionDataElements"]
                .as<decltype(deviceconfigurationkeyvaluedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueDescriptionListData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueDescriptionListData");
        deviceconfigurationkeyvaluedescriptionlistdatatype =
            obj["deviceConfigurationKeyValueDescriptionListData"]
                .as<decltype(deviceconfigurationkeyvaluedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueDescriptionListDataSelectors");
        deviceconfigurationkeyvaluedescriptionlistdataselectorstype =
            obj["deviceConfigurationKeyValueDescriptionListDataSelectors"]
                .as<decltype(deviceconfigurationkeyvaluedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueConstraintsData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueConstraintsData");
        deviceconfigurationkeyvalueconstraintsdatatype =
            obj["deviceConfigurationKeyValueConstraintsData"].as<decltype(deviceconfigurationkeyvalueconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueConstraintsDataElements"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueConstraintsDataElements");
        deviceconfigurationkeyvalueconstraintsdataelementstype =
            obj["deviceConfigurationKeyValueConstraintsDataElements"]
                .as<decltype(deviceconfigurationkeyvalueconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueConstraintsListData"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueConstraintsListData");
        deviceconfigurationkeyvalueconstraintslistdatatype =
            obj["deviceConfigurationKeyValueConstraintsListData"]
                .as<decltype(deviceconfigurationkeyvalueconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceConfigurationKeyValueConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("deviceConfigurationKeyValueConstraintsListDataSelectors");
        deviceconfigurationkeyvalueconstraintslistdataselectorstype =
            obj["deviceConfigurationKeyValueConstraintsListDataSelectors"]
                .as<decltype(deviceconfigurationkeyvalueconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisStateData"]) {
        last_cmd = function_from_string("deviceDiagnosisStateData");
        devicediagnosisstatedatatype = obj["deviceDiagnosisStateData"].as<decltype(devicediagnosisstatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisStateDataElements"]) {
        last_cmd = function_from_string("deviceDiagnosisStateDataElements");
        devicediagnosisstatedataelementstype =
            obj["deviceDiagnosisStateDataElements"].as<decltype(devicediagnosisstatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisHeartbeatData"]) {
        last_cmd = function_from_string("deviceDiagnosisHeartbeatData");
        devicediagnosisheartbeatdatatype = obj["deviceDiagnosisHeartbeatData"].as<decltype(devicediagnosisheartbeatdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisHeartbeatDataElements"]) {
        last_cmd = function_from_string("deviceDiagnosisHeartbeatDataElements");
        devicediagnosisheartbeatdataelementstype =
            obj["deviceDiagnosisHeartbeatDataElements"].as<decltype(devicediagnosisheartbeatdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisServiceData"]) {
        last_cmd = function_from_string("deviceDiagnosisServiceData");
        devicediagnosisservicedatatype = obj["deviceDiagnosisServiceData"].as<decltype(devicediagnosisservicedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["deviceDiagnosisServiceDataElements"]) {
        last_cmd = function_from_string("deviceDiagnosisServiceDataElements");
        devicediagnosisservicedataelementstype =
            obj["deviceDiagnosisServiceDataElements"].as<decltype(devicediagnosisservicedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionParameterDescriptionData"]) {
        last_cmd = function_from_string("electricalConnectionParameterDescriptionData");
        electricalconnectionparameterdescriptiondatatype =
            obj["electricalConnectionParameterDescriptionData"]
                .as<decltype(electricalconnectionparameterdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionParameterDescriptionDataElements"]) {
        last_cmd = function_from_string("electricalConnectionParameterDescriptionDataElements");
        electricalconnectionparameterdescriptiondataelementstype =
            obj["electricalConnectionParameterDescriptionDataElements"]
                .as<decltype(electricalconnectionparameterdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionParameterDescriptionListData"]) {
        last_cmd = function_from_string("electricalConnectionParameterDescriptionListData");
        electricalconnectionparameterdescriptionlistdatatype =
            obj["electricalConnectionParameterDescriptionListData"]
                .as<decltype(electricalconnectionparameterdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionParameterDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("electricalConnectionParameterDescriptionListDataSelectors");
        electricalconnectionparameterdescriptionlistdataselectorstype =
            obj["electricalConnectionParameterDescriptionListDataSelectors"]
                .as<decltype(electricalconnectionparameterdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionPermittedValueSetData"]) {
        last_cmd = function_from_string("electricalConnectionPermittedValueSetData");
        electricalconnectionpermittedvaluesetdatatype =
            obj["electricalConnectionPermittedValueSetData"].as<decltype(electricalconnectionpermittedvaluesetdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionPermittedValueSetDataElements"]) {
        last_cmd = function_from_string("electricalConnectionPermittedValueSetDataElements");
        electricalconnectionpermittedvaluesetdataelementstype =
            obj["electricalConnectionPermittedValueSetDataElements"]
                .as<decltype(electricalconnectionpermittedvaluesetdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionPermittedValueSetListData"]) {
        last_cmd = function_from_string("electricalConnectionPermittedValueSetListData");
        electricalconnectionpermittedvaluesetlistdatatype =
            obj["electricalConnectionPermittedValueSetListData"]
                .as<decltype(electricalconnectionpermittedvaluesetlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionPermittedValueSetListDataSelectors"]) {
        last_cmd = function_from_string("electricalConnectionPermittedValueSetListDataSelectors");
        electricalconnectionpermittedvaluesetlistdataselectorstype =
            obj["electricalConnectionPermittedValueSetListDataSelectors"]
                .as<decltype(electricalconnectionpermittedvaluesetlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionCharacteristicData"]) {
        last_cmd = function_from_string("electricalConnectionCharacteristicData");
        electricalconnectioncharacteristicdatatype =
            obj["electricalConnectionCharacteristicData"].as<decltype(electricalconnectioncharacteristicdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionCharacteristicDataElements"]) {
        last_cmd = function_from_string("electricalConnectionCharacteristicDataElements");
        electricalconnectioncharacteristicdataelementstype =
            obj["electricalConnectionCharacteristicDataElements"]
                .as<decltype(electricalconnectioncharacteristicdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionCharacteristicListData"]) {
        last_cmd = function_from_string("electricalConnectionCharacteristicListData");
        electricalconnectioncharacteristiclistdatatype =
            obj["electricalConnectionCharacteristicListData"].as<decltype(electricalconnectioncharacteristiclistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionCharacteristicListDataSelectors"]) {
        last_cmd = function_from_string("electricalConnectionCharacteristicListDataSelectors");
        electricalconnectioncharacteristiclistdataselectorstype =
            obj["electricalConnectionCharacteristicListDataSelectors"]
                .as<decltype(electricalconnectioncharacteristiclistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionStateData"]) {
        last_cmd = function_from_string("electricalConnectionStateData");
        electricalconnectionstatedatatype =
            obj["electricalConnectionStateData"].as<decltype(electricalconnectionstatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionStateDataElements"]) {
        last_cmd = function_from_string("electricalConnectionStateDataElements");
        electricalconnectionstatedataelementstype =
            obj["electricalConnectionStateDataElements"].as<decltype(electricalconnectionstatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionStateListData"]) {
        last_cmd = function_from_string("electricalConnectionStateListData");
        electricalconnectionstatelistdatatype =
            obj["electricalConnectionStateListData"].as<decltype(electricalconnectionstatelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionStateListDataSelectors"]) {
        last_cmd = function_from_string("electricalConnectionStateListDataSelectors");
        electricalconnectionstatelistdataselectorstype =
            obj["electricalConnectionStateListDataSelectors"].as<decltype(electricalconnectionstatelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionDescriptionData"]) {
        last_cmd = function_from_string("electricalConnectionDescriptionData");
        electricalconnectiondescriptiondatatype =
            obj["electricalConnectionDescriptionData"].as<decltype(electricalconnectiondescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionDescriptionDataElements"]) {
        last_cmd = function_from_string("electricalConnectionDescriptionDataElements");
        electricalconnectiondescriptiondataelementstype =
            obj["electricalConnectionDescriptionDataElements"].as<decltype(electricalconnectiondescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionDescriptionListData"]) {
        last_cmd = function_from_string("electricalConnectionDescriptionListData");
        electricalconnectiondescriptionlistdatatype =
            obj["electricalConnectionDescriptionListData"].as<decltype(electricalconnectiondescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["electricalConnectionDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("electricalConnectionDescriptionListDataSelectors");
        electricalconnectiondescriptionlistdataselectorstype =
            obj["electricalConnectionDescriptionListDataSelectors"]
                .as<decltype(electricalconnectiondescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionData"]) {
        last_cmd = function_from_string("hvacSystemFunctionData");
        hvacsystemfunctiondatatype = obj["hvacSystemFunctionData"].as<decltype(hvacsystemfunctiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionDataElements"]) {
        last_cmd = function_from_string("hvacSystemFunctionDataElements");
        hvacsystemfunctiondataelementstype =
            obj["hvacSystemFunctionDataElements"].as<decltype(hvacsystemfunctiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionListData"]) {
        last_cmd = function_from_string("hvacSystemFunctionListData");
        hvacsystemfunctionlistdatatype = obj["hvacSystemFunctionListData"].as<decltype(hvacsystemfunctionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionListDataSelectors"]) {
        last_cmd = function_from_string("hvacSystemFunctionListDataSelectors");
        hvacsystemfunctionlistdataselectorstype =
            obj["hvacSystemFunctionListDataSelectors"].as<decltype(hvacsystemfunctionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionOperationModeRelationData"]) {
        last_cmd = function_from_string("hvacSystemFunctionOperationModeRelationData");
        hvacsystemfunctionoperationmoderelationdatatype =
            obj["hvacSystemFunctionOperationModeRelationData"].as<decltype(hvacsystemfunctionoperationmoderelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionOperationModeRelationDataElements"]) {
        last_cmd = function_from_string("hvacSystemFunctionOperationModeRelationDataElements");
        hvacsystemfunctionoperationmoderelationdataelementstype =
            obj["hvacSystemFunctionOperationModeRelationDataElements"]
                .as<decltype(hvacsystemfunctionoperationmoderelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionOperationModeRelationListData"]) {
        last_cmd = function_from_string("hvacSystemFunctionOperationModeRelationListData");
        hvacsystemfunctionoperationmoderelationlistdatatype =
            obj["hvacSystemFunctionOperationModeRelationListData"]
                .as<decltype(hvacsystemfunctionoperationmoderelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionOperationModeRelationListDataSelectors"]) {
        last_cmd = function_from_string("hvacSystemFunctionOperationModeRelationListDataSelectors");
        hvacsystemfunctionoperationmoderelationlistdataselectorstype =
            obj["hvacSystemFunctionOperationModeRelationListDataSelectors"]
                .as<decltype(hvacsystemfunctionoperationmoderelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionSetpointRelationData"]) {
        last_cmd = function_from_string("hvacSystemFunctionSetpointRelationData");
        hvacsystemfunctionsetpointrelationdatatype =
            obj["hvacSystemFunctionSetpointRelationData"].as<decltype(hvacsystemfunctionsetpointrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionSetpointRelationDataElements"]) {
        last_cmd = function_from_string("hvacSystemFunctionSetpointRelationDataElements");
        hvacsystemfunctionsetpointrelationdataelementstype =
            obj["hvacSystemFunctionSetpointRelationDataElements"]
                .as<decltype(hvacsystemfunctionsetpointrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionSetpointRelationListData"]) {
        last_cmd = function_from_string("hvacSystemFunctionSetpointRelationListData");
        hvacsystemfunctionsetpointrelationlistdatatype =
            obj["hvacSystemFunctionSetpointRelationListData"].as<decltype(hvacsystemfunctionsetpointrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionSetpointRelationListDataSelectors"]) {
        last_cmd = function_from_string("hvacSystemFunctionSetpointRelationListDataSelectors");
        hvacsystemfunctionsetpointrelationlistdataselectorstype =
            obj["hvacSystemFunctionSetpointRelationListDataSelectors"]
                .as<decltype(hvacsystemfunctionsetpointrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionPowerSequenceRelationData"]) {
        last_cmd = function_from_string("hvacSystemFunctionPowerSequenceRelationData");
        hvacsystemfunctionpowersequencerelationdatatype =
            obj["hvacSystemFunctionPowerSequenceRelationData"].as<decltype(hvacsystemfunctionpowersequencerelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionPowerSequenceRelationDataElements"]) {
        last_cmd = function_from_string("hvacSystemFunctionPowerSequenceRelationDataElements");
        hvacsystemfunctionpowersequencerelationdataelementstype =
            obj["hvacSystemFunctionPowerSequenceRelationDataElements"]
                .as<decltype(hvacsystemfunctionpowersequencerelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionPowerSequenceRelationListData"]) {
        last_cmd = function_from_string("hvacSystemFunctionPowerSequenceRelationListData");
        hvacsystemfunctionpowersequencerelationlistdatatype =
            obj["hvacSystemFunctionPowerSequenceRelationListData"]
                .as<decltype(hvacsystemfunctionpowersequencerelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionPowerSequenceRelationListDataSelectors"]) {
        last_cmd = function_from_string("hvacSystemFunctionPowerSequenceRelationListDataSelectors");
        hvacsystemfunctionpowersequencerelationlistdataselectorstype =
            obj["hvacSystemFunctionPowerSequenceRelationListDataSelectors"]
                .as<decltype(hvacsystemfunctionpowersequencerelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionDescriptionData"]) {
        last_cmd = function_from_string("hvacSystemFunctionDescriptionData");
        hvacsystemfunctiondescriptiondatatype =
            obj["hvacSystemFunctionDescriptionData"].as<decltype(hvacsystemfunctiondescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionDescriptionDataElements"]) {
        last_cmd = function_from_string("hvacSystemFunctionDescriptionDataElements");
        hvacsystemfunctiondescriptiondataelementstype =
            obj["hvacSystemFunctionDescriptionDataElements"].as<decltype(hvacsystemfunctiondescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionDescriptionListData"]) {
        last_cmd = function_from_string("hvacSystemFunctionDescriptionListData");
        hvacsystemfunctiondescriptionlistdatatype =
            obj["hvacSystemFunctionDescriptionListData"].as<decltype(hvacsystemfunctiondescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacSystemFunctionDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("hvacSystemFunctionDescriptionListDataSelectors");
        hvacsystemfunctiondescriptionlistdataselectorstype =
            obj["hvacSystemFunctionDescriptionListDataSelectors"]
                .as<decltype(hvacsystemfunctiondescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOperationModeDescriptionData"]) {
        last_cmd = function_from_string("hvacOperationModeDescriptionData");
        hvacoperationmodedescriptiondatatype =
            obj["hvacOperationModeDescriptionData"].as<decltype(hvacoperationmodedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOperationModeDescriptionDataElements"]) {
        last_cmd = function_from_string("hvacOperationModeDescriptionDataElements");
        hvacoperationmodedescriptiondataelementstype =
            obj["hvacOperationModeDescriptionDataElements"].as<decltype(hvacoperationmodedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOperationModeDescriptionListData"]) {
        last_cmd = function_from_string("hvacOperationModeDescriptionListData");
        hvacoperationmodedescriptionlistdatatype =
            obj["hvacOperationModeDescriptionListData"].as<decltype(hvacoperationmodedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOperationModeDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("hvacOperationModeDescriptionListDataSelectors");
        hvacoperationmodedescriptionlistdataselectorstype =
            obj["hvacOperationModeDescriptionListDataSelectors"]
                .as<decltype(hvacoperationmodedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunData"]) {
        last_cmd = function_from_string("hvacOverrunData");
        hvacoverrundatatype = obj["hvacOverrunData"].as<decltype(hvacoverrundatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunDataElements"]) {
        last_cmd = function_from_string("hvacOverrunDataElements");
        hvacoverrundataelementstype = obj["hvacOverrunDataElements"].as<decltype(hvacoverrundataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunListData"]) {
        last_cmd = function_from_string("hvacOverrunListData");
        hvacoverrunlistdatatype = obj["hvacOverrunListData"].as<decltype(hvacoverrunlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunListDataSelectors"]) {
        last_cmd = function_from_string("hvacOverrunListDataSelectors");
        hvacoverrunlistdataselectorstype = obj["hvacOverrunListDataSelectors"].as<decltype(hvacoverrunlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunDescriptionData"]) {
        last_cmd = function_from_string("hvacOverrunDescriptionData");
        hvacoverrundescriptiondatatype = obj["hvacOverrunDescriptionData"].as<decltype(hvacoverrundescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunDescriptionDataElements"]) {
        last_cmd = function_from_string("hvacOverrunDescriptionDataElements");
        hvacoverrundescriptiondataelementstype =
            obj["hvacOverrunDescriptionDataElements"].as<decltype(hvacoverrundescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunDescriptionListData"]) {
        last_cmd = function_from_string("hvacOverrunDescriptionListData");
        hvacoverrundescriptionlistdatatype =
            obj["hvacOverrunDescriptionListData"].as<decltype(hvacoverrundescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["hvacOverrunDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("hvacOverrunDescriptionListDataSelectors");
        hvacoverrundescriptionlistdataselectorstype =
            obj["hvacOverrunDescriptionListDataSelectors"].as<decltype(hvacoverrundescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointData"]) {
        last_cmd = function_from_string("setpointData");
        setpointdatatype = obj["setpointData"].as<decltype(setpointdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointDataElements"]) {
        last_cmd = function_from_string("setpointDataElements");
        setpointdataelementstype = obj["setpointDataElements"].as<decltype(setpointdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointListData"]) {
        last_cmd = function_from_string("setpointListData");
        setpointlistdatatype = obj["setpointListData"].as<decltype(setpointlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointListDataSelectors"]) {
        last_cmd = function_from_string("setpointListDataSelectors");
        setpointlistdataselectorstype = obj["setpointListDataSelectors"].as<decltype(setpointlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointConstraintsData"]) {
        last_cmd = function_from_string("setpointConstraintsData");
        setpointconstraintsdatatype = obj["setpointConstraintsData"].as<decltype(setpointconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointConstraintsDataElements"]) {
        last_cmd = function_from_string("setpointConstraintsDataElements");
        setpointconstraintsdataelementstype =
            obj["setpointConstraintsDataElements"].as<decltype(setpointconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointConstraintsListData"]) {
        last_cmd = function_from_string("setpointConstraintsListData");
        setpointconstraintslistdatatype = obj["setpointConstraintsListData"].as<decltype(setpointconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("setpointConstraintsListDataSelectors");
        setpointconstraintslistdataselectorstype =
            obj["setpointConstraintsListDataSelectors"].as<decltype(setpointconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointDescriptionData"]) {
        last_cmd = function_from_string("setpointDescriptionData");
        setpointdescriptiondatatype = obj["setpointDescriptionData"].as<decltype(setpointdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointDescriptionDataElements"]) {
        last_cmd = function_from_string("setpointDescriptionDataElements");
        setpointdescriptiondataelementstype =
            obj["setpointDescriptionDataElements"].as<decltype(setpointdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointDescriptionListData"]) {
        last_cmd = function_from_string("setpointDescriptionListData");
        setpointdescriptionlistdatatype = obj["setpointDescriptionListData"].as<decltype(setpointdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["setpointDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("setpointDescriptionListDataSelectors");
        setpointdescriptionlistdataselectorstype =
            obj["setpointDescriptionListDataSelectors"].as<decltype(setpointdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableData"]) {
        last_cmd = function_from_string("timeTableData");
        timetabledatatype = obj["timeTableData"].as<decltype(timetabledatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableDataElements"]) {
        last_cmd = function_from_string("timeTableDataElements");
        timetabledataelementstype = obj["timeTableDataElements"].as<decltype(timetabledataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableListData"]) {
        last_cmd = function_from_string("timeTableListData");
        timetablelistdatatype = obj["timeTableListData"].as<decltype(timetablelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableListDataSelectors"]) {
        last_cmd = function_from_string("timeTableListDataSelectors");
        timetablelistdataselectorstype = obj["timeTableListDataSelectors"].as<decltype(timetablelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableConstraintsData"]) {
        last_cmd = function_from_string("timeTableConstraintsData");
        timetableconstraintsdatatype = obj["timeTableConstraintsData"].as<decltype(timetableconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableConstraintsDataElements"]) {
        last_cmd = function_from_string("timeTableConstraintsDataElements");
        timetableconstraintsdataelementstype =
            obj["timeTableConstraintsDataElements"].as<decltype(timetableconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableConstraintsListData"]) {
        last_cmd = function_from_string("timeTableConstraintsListData");
        timetableconstraintslistdatatype = obj["timeTableConstraintsListData"].as<decltype(timetableconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("timeTableConstraintsListDataSelectors");
        timetableconstraintslistdataselectorstype =
            obj["timeTableConstraintsListDataSelectors"].as<decltype(timetableconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableDescriptionData"]) {
        last_cmd = function_from_string("timeTableDescriptionData");
        timetabledescriptiondatatype = obj["timeTableDescriptionData"].as<decltype(timetabledescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableDescriptionDataElements"]) {
        last_cmd = function_from_string("timeTableDescriptionDataElements");
        timetabledescriptiondataelementstype =
            obj["timeTableDescriptionDataElements"].as<decltype(timetabledescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableDescriptionListData"]) {
        last_cmd = function_from_string("timeTableDescriptionListData");
        timetabledescriptionlistdatatype = obj["timeTableDescriptionListData"].as<decltype(timetabledescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeTableDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("timeTableDescriptionListDataSelectors");
        timetabledescriptionlistdataselectorstype =
            obj["timeTableDescriptionListDataSelectors"].as<decltype(timetabledescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableData"]) {
        last_cmd = function_from_string("incentiveTableData");
        incentivetabledatatype = obj["incentiveTableData"].as<decltype(incentivetabledatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableDataElements"]) {
        last_cmd = function_from_string("incentiveTableDataElements");
        incentivetabledataelementstype = obj["incentiveTableDataElements"].as<decltype(incentivetabledataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableDataSelectors"]) {
        last_cmd = function_from_string("incentiveTableDataSelectors");
        incentivetabledataselectorstype = obj["incentiveTableDataSelectors"].as<decltype(incentivetabledataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableDescriptionData"]) {
        last_cmd = function_from_string("incentiveTableDescriptionData");
        incentivetabledescriptiondatatype =
            obj["incentiveTableDescriptionData"].as<decltype(incentivetabledescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableDescriptionDataElements"]) {
        last_cmd = function_from_string("incentiveTableDescriptionDataElements");
        incentivetabledescriptiondataelementstype =
            obj["incentiveTableDescriptionDataElements"].as<decltype(incentivetabledescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableDescriptionDataSelectors"]) {
        last_cmd = function_from_string("incentiveTableDescriptionDataSelectors");
        incentivetabledescriptiondataselectorstype =
            obj["incentiveTableDescriptionDataSelectors"].as<decltype(incentivetabledescriptiondataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableConstraintsData"]) {
        last_cmd = function_from_string("incentiveTableConstraintsData");
        incentivetableconstraintsdatatype =
            obj["incentiveTableConstraintsData"].as<decltype(incentivetableconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableConstraintsDataElements"]) {
        last_cmd = function_from_string("incentiveTableConstraintsDataElements");
        incentivetableconstraintsdataelementstype =
            obj["incentiveTableConstraintsDataElements"].as<decltype(incentivetableconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveTableConstraintsDataSelectors"]) {
        last_cmd = function_from_string("incentiveTableConstraintsDataSelectors");
        incentivetableconstraintsdataselectorstype =
            obj["incentiveTableConstraintsDataSelectors"].as<decltype(incentivetableconstraintsdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffOverallConstraintsData"]) {
        last_cmd = function_from_string("tariffOverallConstraintsData");
        tariffoverallconstraintsdatatype = obj["tariffOverallConstraintsData"].as<decltype(tariffoverallconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffOverallConstraintsDataElements"]) {
        last_cmd = function_from_string("tariffOverallConstraintsDataElements");
        tariffoverallconstraintsdataelementstype =
            obj["tariffOverallConstraintsDataElements"].as<decltype(tariffoverallconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffData"]) {
        last_cmd = function_from_string("tariffData");
        tariffdatatype = obj["tariffData"].as<decltype(tariffdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffDataElements"]) {
        last_cmd = function_from_string("tariffDataElements");
        tariffdataelementstype = obj["tariffDataElements"].as<decltype(tariffdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffListData"]) {
        last_cmd = function_from_string("tariffListData");
        tarifflistdatatype = obj["tariffListData"].as<decltype(tarifflistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffListDataSelectors"]) {
        last_cmd = function_from_string("tariffListDataSelectors");
        tarifflistdataselectorstype = obj["tariffListDataSelectors"].as<decltype(tarifflistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffTierRelationData"]) {
        last_cmd = function_from_string("tariffTierRelationData");
        tarifftierrelationdatatype = obj["tariffTierRelationData"].as<decltype(tarifftierrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffTierRelationDataElements"]) {
        last_cmd = function_from_string("tariffTierRelationDataElements");
        tarifftierrelationdataelementstype =
            obj["tariffTierRelationDataElements"].as<decltype(tarifftierrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffTierRelationListData"]) {
        last_cmd = function_from_string("tariffTierRelationListData");
        tarifftierrelationlistdatatype = obj["tariffTierRelationListData"].as<decltype(tarifftierrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffTierRelationListDataSelectors"]) {
        last_cmd = function_from_string("tariffTierRelationListDataSelectors");
        tarifftierrelationlistdataselectorstype =
            obj["tariffTierRelationListDataSelectors"].as<decltype(tarifftierrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffBoundaryRelationData"]) {
        last_cmd = function_from_string("tariffBoundaryRelationData");
        tariffboundaryrelationdatatype = obj["tariffBoundaryRelationData"].as<decltype(tariffboundaryrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffBoundaryRelationDataElements"]) {
        last_cmd = function_from_string("tariffBoundaryRelationDataElements");
        tariffboundaryrelationdataelementstype =
            obj["tariffBoundaryRelationDataElements"].as<decltype(tariffboundaryrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffBoundaryRelationListData"]) {
        last_cmd = function_from_string("tariffBoundaryRelationListData");
        tariffboundaryrelationlistdatatype =
            obj["tariffBoundaryRelationListData"].as<decltype(tariffboundaryrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffBoundaryRelationListDataSelectors"]) {
        last_cmd = function_from_string("tariffBoundaryRelationListDataSelectors");
        tariffboundaryrelationlistdataselectorstype =
            obj["tariffBoundaryRelationListDataSelectors"].as<decltype(tariffboundaryrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffDescriptionData"]) {
        last_cmd = function_from_string("tariffDescriptionData");
        tariffdescriptiondatatype = obj["tariffDescriptionData"].as<decltype(tariffdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffDescriptionDataElements"]) {
        last_cmd = function_from_string("tariffDescriptionDataElements");
        tariffdescriptiondataelementstype =
            obj["tariffDescriptionDataElements"].as<decltype(tariffdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffDescriptionListData"]) {
        last_cmd = function_from_string("tariffDescriptionListData");
        tariffdescriptionlistdatatype = obj["tariffDescriptionListData"].as<decltype(tariffdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tariffDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("tariffDescriptionListDataSelectors");
        tariffdescriptionlistdataselectorstype =
            obj["tariffDescriptionListDataSelectors"].as<decltype(tariffdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryData"]) {
        last_cmd = function_from_string("tierBoundaryData");
        tierboundarydatatype = obj["tierBoundaryData"].as<decltype(tierboundarydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryDataElements"]) {
        last_cmd = function_from_string("tierBoundaryDataElements");
        tierboundarydataelementstype = obj["tierBoundaryDataElements"].as<decltype(tierboundarydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryListData"]) {
        last_cmd = function_from_string("tierBoundaryListData");
        tierboundarylistdatatype = obj["tierBoundaryListData"].as<decltype(tierboundarylistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryListDataSelectors"]) {
        last_cmd = function_from_string("tierBoundaryListDataSelectors");
        tierboundarylistdataselectorstype =
            obj["tierBoundaryListDataSelectors"].as<decltype(tierboundarylistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryDescriptionData"]) {
        last_cmd = function_from_string("tierBoundaryDescriptionData");
        tierboundarydescriptiondatatype = obj["tierBoundaryDescriptionData"].as<decltype(tierboundarydescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryDescriptionDataElements"]) {
        last_cmd = function_from_string("tierBoundaryDescriptionDataElements");
        tierboundarydescriptiondataelementstype =
            obj["tierBoundaryDescriptionDataElements"].as<decltype(tierboundarydescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryDescriptionListData"]) {
        last_cmd = function_from_string("tierBoundaryDescriptionListData");
        tierboundarydescriptionlistdatatype =
            obj["tierBoundaryDescriptionListData"].as<decltype(tierboundarydescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierBoundaryDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("tierBoundaryDescriptionListDataSelectors");
        tierboundarydescriptionlistdataselectorstype =
            obj["tierBoundaryDescriptionListDataSelectors"].as<decltype(tierboundarydescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["commodityData"]) {
        last_cmd = function_from_string("commodityData");
        commoditydatatype = obj["commodityData"].as<decltype(commoditydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["commodityDataElements"]) {
        last_cmd = function_from_string("commodityDataElements");
        commoditydataelementstype = obj["commodityDataElements"].as<decltype(commoditydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["commodityListData"]) {
        last_cmd = function_from_string("commodityListData");
        commoditylistdatatype = obj["commodityListData"].as<decltype(commoditylistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["commodityListDataSelectors"]) {
        last_cmd = function_from_string("commodityListDataSelectors");
        commoditylistdataselectorstype = obj["commodityListDataSelectors"].as<decltype(commoditylistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierData"]) {
        last_cmd = function_from_string("tierData");
        tierdatatype = obj["tierData"].as<decltype(tierdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierDataElements"]) {
        last_cmd = function_from_string("tierDataElements");
        tierdataelementstype = obj["tierDataElements"].as<decltype(tierdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierListData"]) {
        last_cmd = function_from_string("tierListData");
        tierlistdatatype = obj["tierListData"].as<decltype(tierlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierListDataSelectors"]) {
        last_cmd = function_from_string("tierListDataSelectors");
        tierlistdataselectorstype = obj["tierListDataSelectors"].as<decltype(tierlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierIncentiveRelationData"]) {
        last_cmd = function_from_string("tierIncentiveRelationData");
        tierincentiverelationdatatype = obj["tierIncentiveRelationData"].as<decltype(tierincentiverelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierIncentiveRelationDataElements"]) {
        last_cmd = function_from_string("tierIncentiveRelationDataElements");
        tierincentiverelationdataelementstype =
            obj["tierIncentiveRelationDataElements"].as<decltype(tierincentiverelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierIncentiveRelationListData"]) {
        last_cmd = function_from_string("tierIncentiveRelationListData");
        tierincentiverelationlistdatatype =
            obj["tierIncentiveRelationListData"].as<decltype(tierincentiverelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierIncentiveRelationListDataSelectors"]) {
        last_cmd = function_from_string("tierIncentiveRelationListDataSelectors");
        tierincentiverelationlistdataselectorstype =
            obj["tierIncentiveRelationListDataSelectors"].as<decltype(tierincentiverelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierDescriptionData"]) {
        last_cmd = function_from_string("tierDescriptionData");
        tierdescriptiondatatype = obj["tierDescriptionData"].as<decltype(tierdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierDescriptionDataElements"]) {
        last_cmd = function_from_string("tierDescriptionDataElements");
        tierdescriptiondataelementstype = obj["tierDescriptionDataElements"].as<decltype(tierdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["tierDescriptionListData"]) {
        last_cmd = function_from_string("tierDescriptionListData");
        tierdescriptionlistdatatype = obj["tierDescriptionListData"].as<decltype(tierdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["tierDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("tierDescriptionListDataSelectors");
        tierdescriptionlistdataselectorstype =
            obj["tierDescriptionListDataSelectors"].as<decltype(tierdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveData"]) {
        last_cmd = function_from_string("incentiveData");
        incentivedatatype = obj["incentiveData"].as<decltype(incentivedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveDataElements"]) {
        last_cmd = function_from_string("incentiveDataElements");
        incentivedataelementstype = obj["incentiveDataElements"].as<decltype(incentivedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveListData"]) {
        last_cmd = function_from_string("incentiveListData");
        incentivelistdatatype = obj["incentiveListData"].as<decltype(incentivelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveListDataSelectors"]) {
        last_cmd = function_from_string("incentiveListDataSelectors");
        incentivelistdataselectorstype = obj["incentiveListDataSelectors"].as<decltype(incentivelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveDescriptionData"]) {
        last_cmd = function_from_string("incentiveDescriptionData");
        incentivedescriptiondatatype = obj["incentiveDescriptionData"].as<decltype(incentivedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveDescriptionDataElements"]) {
        last_cmd = function_from_string("incentiveDescriptionDataElements");
        incentivedescriptiondataelementstype =
            obj["incentiveDescriptionDataElements"].as<decltype(incentivedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveDescriptionListData"]) {
        last_cmd = function_from_string("incentiveDescriptionListData");
        incentivedescriptionlistdatatype = obj["incentiveDescriptionListData"].as<decltype(incentivedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["incentiveDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("incentiveDescriptionListDataSelectors");
        incentivedescriptionlistdataselectorstype =
            obj["incentiveDescriptionListDataSelectors"].as<decltype(incentivedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlNodeData"]) {
        last_cmd = function_from_string("loadControlNodeData");
        loadcontrolnodedatatype = obj["loadControlNodeData"].as<decltype(loadcontrolnodedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlNodeDataElements"]) {
        last_cmd = function_from_string("loadControlNodeDataElements");
        loadcontrolnodedataelementstype = obj["loadControlNodeDataElements"].as<decltype(loadcontrolnodedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlEventData"]) {
        last_cmd = function_from_string("loadControlEventData");
        loadcontroleventdatatype = obj["loadControlEventData"].as<decltype(loadcontroleventdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlEventDataElements"]) {
        last_cmd = function_from_string("loadControlEventDataElements");
        loadcontroleventdataelementstype = obj["loadControlEventDataElements"].as<decltype(loadcontroleventdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlEventListData"]) {
        last_cmd = function_from_string("loadControlEventListData");
        loadcontroleventlistdatatype = obj["loadControlEventListData"].as<decltype(loadcontroleventlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlEventListDataSelectors"]) {
        last_cmd = function_from_string("loadControlEventListDataSelectors");
        loadcontroleventlistdataselectorstype =
            obj["loadControlEventListDataSelectors"].as<decltype(loadcontroleventlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlStateData"]) {
        last_cmd = function_from_string("loadControlStateData");
        loadcontrolstatedatatype = obj["loadControlStateData"].as<decltype(loadcontrolstatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlStateDataElements"]) {
        last_cmd = function_from_string("loadControlStateDataElements");
        loadcontrolstatedataelementstype = obj["loadControlStateDataElements"].as<decltype(loadcontrolstatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlStateListData"]) {
        last_cmd = function_from_string("loadControlStateListData");
        loadcontrolstatelistdatatype = obj["loadControlStateListData"].as<decltype(loadcontrolstatelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlStateListDataSelectors"]) {
        last_cmd = function_from_string("loadControlStateListDataSelectors");
        loadcontrolstatelistdataselectorstype =
            obj["loadControlStateListDataSelectors"].as<decltype(loadcontrolstatelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitData"]) {
        last_cmd = function_from_string("loadControlLimitData");
        loadcontrollimitdatatype = obj["loadControlLimitData"].as<decltype(loadcontrollimitdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitDataElements"]) {
        last_cmd = function_from_string("loadControlLimitDataElements");
        loadcontrollimitdataelementstype = obj["loadControlLimitDataElements"].as<decltype(loadcontrollimitdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitListData"]) {
        last_cmd = function_from_string("loadControlLimitListData");
        loadcontrollimitlistdatatype = obj["loadControlLimitListData"].as<decltype(loadcontrollimitlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitListDataSelectors"]) {
        last_cmd = function_from_string("loadControlLimitListDataSelectors");
        loadcontrollimitlistdataselectorstype =
            obj["loadControlLimitListDataSelectors"].as<decltype(loadcontrollimitlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitConstraintsData"]) {
        last_cmd = function_from_string("loadControlLimitConstraintsData");
        loadcontrollimitconstraintsdatatype =
            obj["loadControlLimitConstraintsData"].as<decltype(loadcontrollimitconstraintsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitConstraintsDataElements"]) {
        last_cmd = function_from_string("loadControlLimitConstraintsDataElements");
        loadcontrollimitconstraintsdataelementstype =
            obj["loadControlLimitConstraintsDataElements"].as<decltype(loadcontrollimitconstraintsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitConstraintsListData"]) {
        last_cmd = function_from_string("loadControlLimitConstraintsListData");
        loadcontrollimitconstraintslistdatatype =
            obj["loadControlLimitConstraintsListData"].as<decltype(loadcontrollimitconstraintslistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitConstraintsListDataSelectors"]) {
        last_cmd = function_from_string("loadControlLimitConstraintsListDataSelectors");
        loadcontrollimitconstraintslistdataselectorstype =
            obj["loadControlLimitConstraintsListDataSelectors"]
                .as<decltype(loadcontrollimitconstraintslistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitDescriptionData"]) {
        last_cmd = function_from_string("loadControlLimitDescriptionData");
        loadcontrollimitdescriptiondatatype =
            obj["loadControlLimitDescriptionData"].as<decltype(loadcontrollimitdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitDescriptionDataElements"]) {
        last_cmd = function_from_string("loadControlLimitDescriptionDataElements");
        loadcontrollimitdescriptiondataelementstype =
            obj["loadControlLimitDescriptionDataElements"].as<decltype(loadcontrollimitdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitDescriptionListData"]) {
        last_cmd = function_from_string("loadControlLimitDescriptionListData");
        loadcontrollimitdescriptionlistdatatype =
            obj["loadControlLimitDescriptionListData"].as<decltype(loadcontrollimitdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["loadControlLimitDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("loadControlLimitDescriptionListDataSelectors");
        loadcontrollimitdescriptionlistdataselectorstype =
            obj["loadControlLimitDescriptionListDataSelectors"]
                .as<decltype(loadcontrollimitdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementAddNodeCall"]) {
        last_cmd = function_from_string("networkManagementAddNodeCall");
        networkmanagementaddnodecalltype = obj["networkManagementAddNodeCall"].as<decltype(networkmanagementaddnodecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementAddNodeCallElements"]) {
        last_cmd = function_from_string("networkManagementAddNodeCallElements");
        networkmanagementaddnodecallelementstype =
            obj["networkManagementAddNodeCallElements"].as<decltype(networkmanagementaddnodecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementRemoveNodeCall"]) {
        last_cmd = function_from_string("networkManagementRemoveNodeCall");
        networkmanagementremovenodecalltype =
            obj["networkManagementRemoveNodeCall"].as<decltype(networkmanagementremovenodecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementRemoveNodeCallElements"]) {
        last_cmd = function_from_string("networkManagementRemoveNodeCallElements");
        networkmanagementremovenodecallelementstype =
            obj["networkManagementRemoveNodeCallElements"].as<decltype(networkmanagementremovenodecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementModifyNodeCall"]) {
        last_cmd = function_from_string("networkManagementModifyNodeCall");
        networkmanagementmodifynodecalltype =
            obj["networkManagementModifyNodeCall"].as<decltype(networkmanagementmodifynodecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementModifyNodeCallElements"]) {
        last_cmd = function_from_string("networkManagementModifyNodeCallElements");
        networkmanagementmodifynodecallelementstype =
            obj["networkManagementModifyNodeCallElements"].as<decltype(networkmanagementmodifynodecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementScanNetworkCall"]) {
        last_cmd = function_from_string("networkManagementScanNetworkCall");
        networkmanagementscannetworkcalltype =
            obj["networkManagementScanNetworkCall"].as<decltype(networkmanagementscannetworkcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementScanNetworkCallElements"]) {
        last_cmd = function_from_string("networkManagementScanNetworkCallElements");
        networkmanagementscannetworkcallelementstype =
            obj["networkManagementScanNetworkCallElements"].as<decltype(networkmanagementscannetworkcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDiscoverCall"]) {
        last_cmd = function_from_string("networkManagementDiscoverCall");
        networkmanagementdiscovercalltype =
            obj["networkManagementDiscoverCall"].as<decltype(networkmanagementdiscovercalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDiscoverCallElements"]) {
        last_cmd = function_from_string("networkManagementDiscoverCallElements");
        networkmanagementdiscovercallelementstype =
            obj["networkManagementDiscoverCallElements"].as<decltype(networkmanagementdiscovercallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementAbortCall"]) {
        last_cmd = function_from_string("networkManagementAbortCall");
        networkmanagementabortcalltype = obj["networkManagementAbortCall"].as<decltype(networkmanagementabortcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementAbortCallElements"]) {
        last_cmd = function_from_string("networkManagementAbortCallElements");
        networkmanagementabortcallelementstype =
            obj["networkManagementAbortCallElements"].as<decltype(networkmanagementabortcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementProcessStateData"]) {
        last_cmd = function_from_string("networkManagementProcessStateData");
        networkmanagementprocessstatedatatype =
            obj["networkManagementProcessStateData"].as<decltype(networkmanagementprocessstatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementProcessStateDataElements"]) {
        last_cmd = function_from_string("networkManagementProcessStateDataElements");
        networkmanagementprocessstatedataelementstype =
            obj["networkManagementProcessStateDataElements"].as<decltype(networkmanagementprocessstatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementJoiningModeData"]) {
        last_cmd = function_from_string("networkManagementJoiningModeData");
        networkmanagementjoiningmodedatatype =
            obj["networkManagementJoiningModeData"].as<decltype(networkmanagementjoiningmodedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementJoiningModeDataElements"]) {
        last_cmd = function_from_string("networkManagementJoiningModeDataElements");
        networkmanagementjoiningmodedataelementstype =
            obj["networkManagementJoiningModeDataElements"].as<decltype(networkmanagementjoiningmodedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementReportCandidateData"]) {
        last_cmd = function_from_string("networkManagementReportCandidateData");
        networkmanagementreportcandidatedatatype =
            obj["networkManagementReportCandidateData"].as<decltype(networkmanagementreportcandidatedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementReportCandidateDataElements"]) {
        last_cmd = function_from_string("networkManagementReportCandidateDataElements");
        networkmanagementreportcandidatedataelementstype =
            obj["networkManagementReportCandidateDataElements"]
                .as<decltype(networkmanagementreportcandidatedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDeviceDescriptionData"]) {
        last_cmd = function_from_string("networkManagementDeviceDescriptionData");
        networkmanagementdevicedescriptiondatatype =
            obj["networkManagementDeviceDescriptionData"].as<decltype(networkmanagementdevicedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDeviceDescriptionDataElements"]) {
        last_cmd = function_from_string("networkManagementDeviceDescriptionDataElements");
        networkmanagementdevicedescriptiondataelementstype =
            obj["networkManagementDeviceDescriptionDataElements"]
                .as<decltype(networkmanagementdevicedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDeviceDescriptionListData"]) {
        last_cmd = function_from_string("networkManagementDeviceDescriptionListData");
        networkmanagementdevicedescriptionlistdatatype =
            obj["networkManagementDeviceDescriptionListData"].as<decltype(networkmanagementdevicedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementDeviceDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("networkManagementDeviceDescriptionListDataSelectors");
        networkmanagementdevicedescriptionlistdataselectorstype =
            obj["networkManagementDeviceDescriptionListDataSelectors"]
                .as<decltype(networkmanagementdevicedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementEntityDescriptionData"]) {
        last_cmd = function_from_string("networkManagementEntityDescriptionData");
        networkmanagemententitydescriptiondatatype =
            obj["networkManagementEntityDescriptionData"].as<decltype(networkmanagemententitydescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementEntityDescriptionDataElements"]) {
        last_cmd = function_from_string("networkManagementEntityDescriptionDataElements");
        networkmanagemententitydescriptiondataelementstype =
            obj["networkManagementEntityDescriptionDataElements"]
                .as<decltype(networkmanagemententitydescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementEntityDescriptionListData"]) {
        last_cmd = function_from_string("networkManagementEntityDescriptionListData");
        networkmanagemententitydescriptionlistdatatype =
            obj["networkManagementEntityDescriptionListData"].as<decltype(networkmanagemententitydescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementEntityDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("networkManagementEntityDescriptionListDataSelectors");
        networkmanagemententitydescriptionlistdataselectorstype =
            obj["networkManagementEntityDescriptionListDataSelectors"]
                .as<decltype(networkmanagemententitydescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementFeatureDescriptionData"]) {
        last_cmd = function_from_string("networkManagementFeatureDescriptionData");
        networkmanagementfeaturedescriptiondatatype =
            obj["networkManagementFeatureDescriptionData"].as<decltype(networkmanagementfeaturedescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementFeatureDescriptionDataElements"]) {
        last_cmd = function_from_string("networkManagementFeatureDescriptionDataElements");
        networkmanagementfeaturedescriptiondataelementstype =
            obj["networkManagementFeatureDescriptionDataElements"]
                .as<decltype(networkmanagementfeaturedescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementFeatureDescriptionListData"]) {
        last_cmd = function_from_string("networkManagementFeatureDescriptionListData");
        networkmanagementfeaturedescriptionlistdatatype =
            obj["networkManagementFeatureDescriptionListData"].as<decltype(networkmanagementfeaturedescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["networkManagementFeatureDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("networkManagementFeatureDescriptionListDataSelectors");
        networkmanagementfeaturedescriptionlistdataselectorstype =
            obj["networkManagementFeatureDescriptionListDataSelectors"]
                .as<decltype(networkmanagementfeaturedescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDetailedDiscoveryData"]) {
        last_cmd = function_from_string("nodeManagementDetailedDiscoveryData");
        nodemanagementdetaileddiscoverydatatype =
            obj["nodeManagementDetailedDiscoveryData"].as<decltype(nodemanagementdetaileddiscoverydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDetailedDiscoveryDataElements"]) {
        last_cmd = function_from_string("nodeManagementDetailedDiscoveryDataElements");
        nodemanagementdetaileddiscoverydataelementstype =
            obj["nodeManagementDetailedDiscoveryDataElements"].as<decltype(nodemanagementdetaileddiscoverydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDetailedDiscoveryDataSelectors"]) {
        last_cmd = function_from_string("nodeManagementDetailedDiscoveryDataSelectors");
        nodemanagementdetaileddiscoverydataselectorstype =
            obj["nodeManagementDetailedDiscoveryDataSelectors"]
                .as<decltype(nodemanagementdetaileddiscoverydataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingData"]) {
        last_cmd = function_from_string("nodeManagementBindingData");
        nodemanagementbindingdatatype = obj["nodeManagementBindingData"].as<decltype(nodemanagementbindingdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingDataElements"]) {
        last_cmd = function_from_string("nodeManagementBindingDataElements");
        nodemanagementbindingdataelementstype =
            obj["nodeManagementBindingDataElements"].as<decltype(nodemanagementbindingdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingDataSelectors"]) {
        last_cmd = function_from_string("nodeManagementBindingDataSelectors");
        nodemanagementbindingdataselectorstype =
            obj["nodeManagementBindingDataSelectors"].as<decltype(nodemanagementbindingdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingRequestCall"]) {
        last_cmd = function_from_string("nodeManagementBindingRequestCall");
        nodemanagementbindingrequestcalltype =
            obj["nodeManagementBindingRequestCall"].as<decltype(nodemanagementbindingrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingRequestCallElements"]) {
        last_cmd = function_from_string("nodeManagementBindingRequestCallElements");
        nodemanagementbindingrequestcallelementstype =
            obj["nodeManagementBindingRequestCallElements"].as<decltype(nodemanagementbindingrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingDeleteCall"]) {
        last_cmd = function_from_string("nodeManagementBindingDeleteCall");
        nodemanagementbindingdeletecalltype =
            obj["nodeManagementBindingDeleteCall"].as<decltype(nodemanagementbindingdeletecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementBindingDeleteCallElements"]) {
        last_cmd = function_from_string("nodeManagementBindingDeleteCallElements");
        nodemanagementbindingdeletecallelementstype =
            obj["nodeManagementBindingDeleteCallElements"].as<decltype(nodemanagementbindingdeletecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionData"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionData");
        nodemanagementsubscriptiondatatype =
            obj["nodeManagementSubscriptionData"].as<decltype(nodemanagementsubscriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionDataElements"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionDataElements");
        nodemanagementsubscriptiondataelementstype =
            obj["nodeManagementSubscriptionDataElements"].as<decltype(nodemanagementsubscriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionDataSelectors"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionDataSelectors");
        nodemanagementsubscriptiondataselectorstype =
            obj["nodeManagementSubscriptionDataSelectors"].as<decltype(nodemanagementsubscriptiondataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionRequestCall"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionRequestCall");
        nodemanagementsubscriptionrequestcalltype =
            obj["nodeManagementSubscriptionRequestCall"].as<decltype(nodemanagementsubscriptionrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionRequestCallElements"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionRequestCallElements");
        nodemanagementsubscriptionrequestcallelementstype =
            obj["nodeManagementSubscriptionRequestCallElements"]
                .as<decltype(nodemanagementsubscriptionrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionDeleteCall"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionDeleteCall");
        nodemanagementsubscriptiondeletecalltype =
            obj["nodeManagementSubscriptionDeleteCall"].as<decltype(nodemanagementsubscriptiondeletecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementSubscriptionDeleteCallElements"]) {
        last_cmd = function_from_string("nodeManagementSubscriptionDeleteCallElements");
        nodemanagementsubscriptiondeletecallelementstype =
            obj["nodeManagementSubscriptionDeleteCallElements"]
                .as<decltype(nodemanagementsubscriptiondeletecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDestinationData"]) {
        last_cmd = function_from_string("nodeManagementDestinationData");
        nodemanagementdestinationdatatype =
            obj["nodeManagementDestinationData"].as<decltype(nodemanagementdestinationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDestinationDataElements"]) {
        last_cmd = function_from_string("nodeManagementDestinationDataElements");
        nodemanagementdestinationdataelementstype =
            obj["nodeManagementDestinationDataElements"].as<decltype(nodemanagementdestinationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDestinationListData"]) {
        last_cmd = function_from_string("nodeManagementDestinationListData");
        nodemanagementdestinationlistdatatype =
            obj["nodeManagementDestinationListData"].as<decltype(nodemanagementdestinationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementDestinationListDataSelectors"]) {
        last_cmd = function_from_string("nodeManagementDestinationListDataSelectors");
        nodemanagementdestinationlistdataselectorstype =
            obj["nodeManagementDestinationListDataSelectors"].as<decltype(nodemanagementdestinationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementUseCaseData"]) {
        last_cmd = function_from_string("nodeManagementUseCaseData");
        nodemanagementusecasedatatype = obj["nodeManagementUseCaseData"].as<decltype(nodemanagementusecasedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementUseCaseDataElements"]) {
        last_cmd = function_from_string("nodeManagementUseCaseDataElements");
        nodemanagementusecasedataelementstype =
            obj["nodeManagementUseCaseDataElements"].as<decltype(nodemanagementusecasedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["nodeManagementUseCaseDataSelectors"]) {
        last_cmd = function_from_string("nodeManagementUseCaseDataSelectors");
        nodemanagementusecasedataselectorstype =
            obj["nodeManagementUseCaseDataSelectors"].as<decltype(nodemanagementusecasedataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementEntryData"]) {
        last_cmd = function_from_string("subscriptionManagementEntryData");
        subscriptionmanagemententrydatatype =
            obj["subscriptionManagementEntryData"].as<decltype(subscriptionmanagemententrydatatype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementEntryDataElements"]) {
        last_cmd = function_from_string("subscriptionManagementEntryDataElements");
        subscriptionmanagemententrydataelementstype =
            obj["subscriptionManagementEntryDataElements"].as<decltype(subscriptionmanagemententrydataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementEntryListData"]) {
        last_cmd = function_from_string("subscriptionManagementEntryListData");
        subscriptionmanagemententrylistdatatype =
            obj["subscriptionManagementEntryListData"].as<decltype(subscriptionmanagemententrylistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementEntryListDataSelectors"]) {
        last_cmd = function_from_string("subscriptionManagementEntryListDataSelectors");
        subscriptionmanagemententrylistdataselectorstype =
            obj["subscriptionManagementEntryListDataSelectors"]
                .as<decltype(subscriptionmanagemententrylistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementRequestCall"]) {
        last_cmd = function_from_string("subscriptionManagementRequestCall");
        subscriptionmanagementrequestcalltype =
            obj["subscriptionManagementRequestCall"].as<decltype(subscriptionmanagementrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementRequestCallElements"]) {
        last_cmd = function_from_string("subscriptionManagementRequestCallElements");
        subscriptionmanagementrequestcallelementstype =
            obj["subscriptionManagementRequestCallElements"].as<decltype(subscriptionmanagementrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementDeleteCall"]) {
        last_cmd = function_from_string("subscriptionManagementDeleteCall");
        subscriptionmanagementdeletecalltype =
            obj["subscriptionManagementDeleteCall"].as<decltype(subscriptionmanagementdeletecalltype)::value_type>();
        return last_cmd;
    }
    if (obj["subscriptionManagementDeleteCallElements"]) {
        last_cmd = function_from_string("subscriptionManagementDeleteCallElements");
        subscriptionmanagementdeletecallelementstype =
            obj["subscriptionManagementDeleteCallElements"].as<decltype(subscriptionmanagementdeletecallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["useCaseInformationData"]) {
        last_cmd = function_from_string("useCaseInformationData");
        usecaseinformationdatatype = obj["useCaseInformationData"].as<decltype(usecaseinformationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["useCaseInformationDataElements"]) {
        last_cmd = function_from_string("useCaseInformationDataElements");
        usecaseinformationdataelementstype =
            obj["useCaseInformationDataElements"].as<decltype(usecaseinformationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["useCaseInformationListData"]) {
        last_cmd = function_from_string("useCaseInformationListData");
        usecaseinformationlistdatatype = obj["useCaseInformationListData"].as<decltype(usecaseinformationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["useCaseInformationListDataSelectors"]) {
        last_cmd = function_from_string("useCaseInformationListDataSelectors");
        usecaseinformationlistdataselectorstype =
            obj["useCaseInformationListDataSelectors"].as<decltype(usecaseinformationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["specificationVersionData"]) {
        last_cmd = function_from_string("specificationVersionData");
        specificationversiondatatype = obj["specificationVersionData"].as<decltype(specificationversiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["specificationVersionDataElements"]) {
        last_cmd = function_from_string("specificationVersionDataElements");
        specificationversiondataelementstype =
            obj["specificationVersionDataElements"].as<decltype(specificationversiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["specificationVersionListData"]) {
        last_cmd = function_from_string("specificationVersionListData");
        specificationversionlistdatatype = obj["specificationVersionListData"].as<decltype(specificationversionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["specificationVersionListDataSelectors"]) {
        last_cmd = function_from_string("specificationVersionListDataSelectors");
        specificationversionlistdataselectorstype =
            obj["specificationVersionListDataSelectors"].as<decltype(specificationversionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsInterruptData"]) {
        last_cmd = function_from_string("operatingConstraintsInterruptData");
        operatingconstraintsinterruptdatatype =
            obj["operatingConstraintsInterruptData"].as<decltype(operatingconstraintsinterruptdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsInterruptDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsInterruptDataElements");
        operatingconstraintsinterruptdataelementstype =
            obj["operatingConstraintsInterruptDataElements"].as<decltype(operatingconstraintsinterruptdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsInterruptListData"]) {
        last_cmd = function_from_string("operatingConstraintsInterruptListData");
        operatingconstraintsinterruptlistdatatype =
            obj["operatingConstraintsInterruptListData"].as<decltype(operatingconstraintsinterruptlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsInterruptListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsInterruptListDataSelectors");
        operatingconstraintsinterruptlistdataselectorstype =
            obj["operatingConstraintsInterruptListDataSelectors"]
                .as<decltype(operatingconstraintsinterruptlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsDurationData"]) {
        last_cmd = function_from_string("operatingConstraintsDurationData");
        operatingconstraintsdurationdatatype =
            obj["operatingConstraintsDurationData"].as<decltype(operatingconstraintsdurationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsDurationDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsDurationDataElements");
        operatingconstraintsdurationdataelementstype =
            obj["operatingConstraintsDurationDataElements"].as<decltype(operatingconstraintsdurationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsDurationListData"]) {
        last_cmd = function_from_string("operatingConstraintsDurationListData");
        operatingconstraintsdurationlistdatatype =
            obj["operatingConstraintsDurationListData"].as<decltype(operatingconstraintsdurationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsDurationListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsDurationListDataSelectors");
        operatingconstraintsdurationlistdataselectorstype =
            obj["operatingConstraintsDurationListDataSelectors"]
                .as<decltype(operatingconstraintsdurationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerDescriptionData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerDescriptionData");
        operatingconstraintspowerdescriptiondatatype =
            obj["operatingConstraintsPowerDescriptionData"].as<decltype(operatingconstraintspowerdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerDescriptionDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsPowerDescriptionDataElements");
        operatingconstraintspowerdescriptiondataelementstype =
            obj["operatingConstraintsPowerDescriptionDataElements"]
                .as<decltype(operatingconstraintspowerdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerDescriptionListData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerDescriptionListData");
        operatingconstraintspowerdescriptionlistdatatype =
            obj["operatingConstraintsPowerDescriptionListData"]
                .as<decltype(operatingconstraintspowerdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsPowerDescriptionListDataSelectors");
        operatingconstraintspowerdescriptionlistdataselectorstype =
            obj["operatingConstraintsPowerDescriptionListDataSelectors"]
                .as<decltype(operatingconstraintspowerdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerRangeData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerRangeData");
        operatingconstraintspowerrangedatatype =
            obj["operatingConstraintsPowerRangeData"].as<decltype(operatingconstraintspowerrangedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerRangeDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsPowerRangeDataElements");
        operatingconstraintspowerrangedataelementstype =
            obj["operatingConstraintsPowerRangeDataElements"].as<decltype(operatingconstraintspowerrangedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerRangeListData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerRangeListData");
        operatingconstraintspowerrangelistdatatype =
            obj["operatingConstraintsPowerRangeListData"].as<decltype(operatingconstraintspowerrangelistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerRangeListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsPowerRangeListDataSelectors");
        operatingconstraintspowerrangelistdataselectorstype =
            obj["operatingConstraintsPowerRangeListDataSelectors"]
                .as<decltype(operatingconstraintspowerrangelistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerLevelData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerLevelData");
        operatingconstraintspowerleveldatatype =
            obj["operatingConstraintsPowerLevelData"].as<decltype(operatingconstraintspowerleveldatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerLevelDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsPowerLevelDataElements");
        operatingconstraintspowerleveldataelementstype =
            obj["operatingConstraintsPowerLevelDataElements"].as<decltype(operatingconstraintspowerleveldataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerLevelListData"]) {
        last_cmd = function_from_string("operatingConstraintsPowerLevelListData");
        operatingconstraintspowerlevellistdatatype =
            obj["operatingConstraintsPowerLevelListData"].as<decltype(operatingconstraintspowerlevellistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsPowerLevelListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsPowerLevelListDataSelectors");
        operatingconstraintspowerlevellistdataselectorstype =
            obj["operatingConstraintsPowerLevelListDataSelectors"]
                .as<decltype(operatingconstraintspowerlevellistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsResumeImplicationData"]) {
        last_cmd = function_from_string("operatingConstraintsResumeImplicationData");
        operatingconstraintsresumeimplicationdatatype =
            obj["operatingConstraintsResumeImplicationData"].as<decltype(operatingconstraintsresumeimplicationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsResumeImplicationDataElements"]) {
        last_cmd = function_from_string("operatingConstraintsResumeImplicationDataElements");
        operatingconstraintsresumeimplicationdataelementstype =
            obj["operatingConstraintsResumeImplicationDataElements"]
                .as<decltype(operatingconstraintsresumeimplicationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsResumeImplicationListData"]) {
        last_cmd = function_from_string("operatingConstraintsResumeImplicationListData");
        operatingconstraintsresumeimplicationlistdatatype =
            obj["operatingConstraintsResumeImplicationListData"]
                .as<decltype(operatingconstraintsresumeimplicationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["operatingConstraintsResumeImplicationListDataSelectors"]) {
        last_cmd = function_from_string("operatingConstraintsResumeImplicationListDataSelectors");
        operatingconstraintsresumeimplicationlistdataselectorstype =
            obj["operatingConstraintsResumeImplicationListDataSelectors"]
                .as<decltype(operatingconstraintsresumeimplicationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingData"]) {
        last_cmd = function_from_string("sensingData");
        sensingdatatype = obj["sensingData"].as<decltype(sensingdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingDataElements"]) {
        last_cmd = function_from_string("sensingDataElements");
        sensingdataelementstype = obj["sensingDataElements"].as<decltype(sensingdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingListData"]) {
        last_cmd = function_from_string("sensingListData");
        sensinglistdatatype = obj["sensingListData"].as<decltype(sensinglistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingListDataSelectors"]) {
        last_cmd = function_from_string("sensingListDataSelectors");
        sensinglistdataselectorstype = obj["sensingListDataSelectors"].as<decltype(sensinglistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingDescriptionData"]) {
        last_cmd = function_from_string("sensingDescriptionData");
        sensingdescriptiondatatype = obj["sensingDescriptionData"].as<decltype(sensingdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["sensingDescriptionDataElements"]) {
        last_cmd = function_from_string("sensingDescriptionDataElements");
        sensingdescriptiondataelementstype =
            obj["sensingDescriptionDataElements"].as<decltype(sensingdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsData"]) {
        last_cmd = function_from_string("smartEnergyManagementPsData");
        smartenergymanagementpsdatatype = obj["smartEnergyManagementPsData"].as<decltype(smartenergymanagementpsdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsDataElements"]) {
        last_cmd = function_from_string("smartEnergyManagementPsDataElements");
        smartenergymanagementpsdataelementstype =
            obj["smartEnergyManagementPsDataElements"].as<decltype(smartenergymanagementpsdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsDataSelectors"]) {
        last_cmd = function_from_string("smartEnergyManagementPsDataSelectors");
        smartenergymanagementpsdataselectorstype =
            obj["smartEnergyManagementPsDataSelectors"].as<decltype(smartenergymanagementpsdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsPriceData"]) {
        last_cmd = function_from_string("smartEnergyManagementPsPriceData");
        smartenergymanagementpspricedatatype =
            obj["smartEnergyManagementPsPriceData"].as<decltype(smartenergymanagementpspricedatatype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsPriceDataElements"]) {
        last_cmd = function_from_string("smartEnergyManagementPsPriceDataElements");
        smartenergymanagementpspricedataelementstype =
            obj["smartEnergyManagementPsPriceDataElements"].as<decltype(smartenergymanagementpspricedataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsPriceDataSelectors"]) {
        last_cmd = function_from_string("smartEnergyManagementPsPriceDataSelectors");
        smartenergymanagementpspricedataselectorstype =
            obj["smartEnergyManagementPsPriceDataSelectors"].as<decltype(smartenergymanagementpspricedataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsConfigurationRequestCall"]) {
        last_cmd = function_from_string("smartEnergyManagementPsConfigurationRequestCall");
        smartenergymanagementpsconfigurationrequestcalltype =
            obj["smartEnergyManagementPsConfigurationRequestCall"]
                .as<decltype(smartenergymanagementpsconfigurationrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsConfigurationRequestCallElements"]) {
        last_cmd = function_from_string("smartEnergyManagementPsConfigurationRequestCallElements");
        smartenergymanagementpsconfigurationrequestcallelementstype =
            obj["smartEnergyManagementPsConfigurationRequestCallElements"]
                .as<decltype(smartenergymanagementpsconfigurationrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsPriceCalculationRequestCall"]) {
        last_cmd = function_from_string("smartEnergyManagementPsPriceCalculationRequestCall");
        smartenergymanagementpspricecalculationrequestcalltype =
            obj["smartEnergyManagementPsPriceCalculationRequestCall"]
                .as<decltype(smartenergymanagementpspricecalculationrequestcalltype)::value_type>();
        return last_cmd;
    }
    if (obj["smartEnergyManagementPsPriceCalculationRequestCallElements"]) {
        last_cmd = function_from_string("smartEnergyManagementPsPriceCalculationRequestCallElements");
        smartenergymanagementpspricecalculationrequestcallelementstype =
            obj["smartEnergyManagementPsPriceCalculationRequestCallElements"]
                .as<decltype(smartenergymanagementpspricecalculationrequestcallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["stateInformationData"]) {
        last_cmd = function_from_string("stateInformationData");
        stateinformationdatatype = obj["stateInformationData"].as<decltype(stateinformationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["stateInformationDataElements"]) {
        last_cmd = function_from_string("stateInformationDataElements");
        stateinformationdataelementstype = obj["stateInformationDataElements"].as<decltype(stateinformationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["stateInformationListData"]) {
        last_cmd = function_from_string("stateInformationListData");
        stateinformationlistdatatype = obj["stateInformationListData"].as<decltype(stateinformationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["stateInformationListDataSelectors"]) {
        last_cmd = function_from_string("stateInformationListDataSelectors");
        stateinformationlistdataselectorstype =
            obj["stateInformationListDataSelectors"].as<decltype(stateinformationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionData"]) {
        last_cmd = function_from_string("supplyConditionData");
        supplyconditiondatatype = obj["supplyConditionData"].as<decltype(supplyconditiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionDataElements"]) {
        last_cmd = function_from_string("supplyConditionDataElements");
        supplyconditiondataelementstype = obj["supplyConditionDataElements"].as<decltype(supplyconditiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionListData"]) {
        last_cmd = function_from_string("supplyConditionListData");
        supplyconditionlistdatatype = obj["supplyConditionListData"].as<decltype(supplyconditionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionListDataSelectors"]) {
        last_cmd = function_from_string("supplyConditionListDataSelectors");
        supplyconditionlistdataselectorstype =
            obj["supplyConditionListDataSelectors"].as<decltype(supplyconditionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionDescriptionData"]) {
        last_cmd = function_from_string("supplyConditionDescriptionData");
        supplyconditiondescriptiondatatype =
            obj["supplyConditionDescriptionData"].as<decltype(supplyconditiondescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionDescriptionDataElements"]) {
        last_cmd = function_from_string("supplyConditionDescriptionDataElements");
        supplyconditiondescriptiondataelementstype =
            obj["supplyConditionDescriptionDataElements"].as<decltype(supplyconditiondescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionDescriptionListData"]) {
        last_cmd = function_from_string("supplyConditionDescriptionListData");
        supplyconditiondescriptionlistdatatype =
            obj["supplyConditionDescriptionListData"].as<decltype(supplyconditiondescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("supplyConditionDescriptionListDataSelectors");
        supplyconditiondescriptionlistdataselectorstype =
            obj["supplyConditionDescriptionListDataSelectors"].as<decltype(supplyconditiondescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionThresholdRelationData"]) {
        last_cmd = function_from_string("supplyConditionThresholdRelationData");
        supplyconditionthresholdrelationdatatype =
            obj["supplyConditionThresholdRelationData"].as<decltype(supplyconditionthresholdrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionThresholdRelationDataElements"]) {
        last_cmd = function_from_string("supplyConditionThresholdRelationDataElements");
        supplyconditionthresholdrelationdataelementstype =
            obj["supplyConditionThresholdRelationDataElements"]
                .as<decltype(supplyconditionthresholdrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionThresholdRelationListData"]) {
        last_cmd = function_from_string("supplyConditionThresholdRelationListData");
        supplyconditionthresholdrelationlistdatatype =
            obj["supplyConditionThresholdRelationListData"].as<decltype(supplyconditionthresholdrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["supplyConditionThresholdRelationListDataSelectors"]) {
        last_cmd = function_from_string("supplyConditionThresholdRelationListDataSelectors");
        supplyconditionthresholdrelationlistdataselectorstype =
            obj["supplyConditionThresholdRelationListDataSelectors"]
                .as<decltype(supplyconditionthresholdrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobData"]) {
        last_cmd = function_from_string("taskManagementJobData");
        taskmanagementjobdatatype = obj["taskManagementJobData"].as<decltype(taskmanagementjobdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobDataElements"]) {
        last_cmd = function_from_string("taskManagementJobDataElements");
        taskmanagementjobdataelementstype =
            obj["taskManagementJobDataElements"].as<decltype(taskmanagementjobdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobListData"]) {
        last_cmd = function_from_string("taskManagementJobListData");
        taskmanagementjoblistdatatype = obj["taskManagementJobListData"].as<decltype(taskmanagementjoblistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobListDataSelectors"]) {
        last_cmd = function_from_string("taskManagementJobListDataSelectors");
        taskmanagementjoblistdataselectorstype =
            obj["taskManagementJobListDataSelectors"].as<decltype(taskmanagementjoblistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobRelationData"]) {
        last_cmd = function_from_string("taskManagementJobRelationData");
        taskmanagementjobrelationdatatype =
            obj["taskManagementJobRelationData"].as<decltype(taskmanagementjobrelationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobRelationDataElements"]) {
        last_cmd = function_from_string("taskManagementJobRelationDataElements");
        taskmanagementjobrelationdataelementstype =
            obj["taskManagementJobRelationDataElements"].as<decltype(taskmanagementjobrelationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobRelationListData"]) {
        last_cmd = function_from_string("taskManagementJobRelationListData");
        taskmanagementjobrelationlistdatatype =
            obj["taskManagementJobRelationListData"].as<decltype(taskmanagementjobrelationlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobRelationListDataSelectors"]) {
        last_cmd = function_from_string("taskManagementJobRelationListDataSelectors");
        taskmanagementjobrelationlistdataselectorstype =
            obj["taskManagementJobRelationListDataSelectors"].as<decltype(taskmanagementjobrelationlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobDescriptionData"]) {
        last_cmd = function_from_string("taskManagementJobDescriptionData");
        taskmanagementjobdescriptiondatatype =
            obj["taskManagementJobDescriptionData"].as<decltype(taskmanagementjobdescriptiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobDescriptionDataElements"]) {
        last_cmd = function_from_string("taskManagementJobDescriptionDataElements");
        taskmanagementjobdescriptiondataelementstype =
            obj["taskManagementJobDescriptionDataElements"].as<decltype(taskmanagementjobdescriptiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobDescriptionListData"]) {
        last_cmd = function_from_string("taskManagementJobDescriptionListData");
        taskmanagementjobdescriptionlistdatatype =
            obj["taskManagementJobDescriptionListData"].as<decltype(taskmanagementjobdescriptionlistdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementJobDescriptionListDataSelectors"]) {
        last_cmd = function_from_string("taskManagementJobDescriptionListDataSelectors");
        taskmanagementjobdescriptionlistdataselectorstype =
            obj["taskManagementJobDescriptionListDataSelectors"]
                .as<decltype(taskmanagementjobdescriptionlistdataselectorstype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementOverviewData"]) {
        last_cmd = function_from_string("taskManagementOverviewData");
        taskmanagementoverviewdatatype = obj["taskManagementOverviewData"].as<decltype(taskmanagementoverviewdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["taskManagementOverviewDataElements"]) {
        last_cmd = function_from_string("taskManagementOverviewDataElements");
        taskmanagementoverviewdataelementstype =
            obj["taskManagementOverviewDataElements"].as<decltype(taskmanagementoverviewdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeInformationData"]) {
        last_cmd = function_from_string("timeInformationData");
        timeinformationdatatype = obj["timeInformationData"].as<decltype(timeinformationdatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeInformationDataElements"]) {
        last_cmd = function_from_string("timeInformationDataElements");
        timeinformationdataelementstype = obj["timeInformationDataElements"].as<decltype(timeinformationdataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeDistributorData"]) {
        last_cmd = function_from_string("timeDistributorData");
        timedistributordatatype = obj["timeDistributorData"].as<decltype(timedistributordatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timeDistributorDataElements"]) {
        last_cmd = function_from_string("timeDistributorDataElements");
        timedistributordataelementstype = obj["timeDistributorDataElements"].as<decltype(timedistributordataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timePrecisionData"]) {
        last_cmd = function_from_string("timePrecisionData");
        timeprecisiondatatype = obj["timePrecisionData"].as<decltype(timeprecisiondatatype)::value_type>();
        return last_cmd;
    }
    if (obj["timePrecisionDataElements"]) {
        last_cmd = function_from_string("timePrecisionDataElements");
        timeprecisiondataelementstype = obj["timePrecisionDataElements"].as<decltype(timeprecisiondataelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["timeDistributorEnquiryCall"]) {
        last_cmd = function_from_string("timeDistributorEnquiryCall");
        timedistributorenquirycalltype = obj["timeDistributorEnquiryCall"].as<decltype(timedistributorenquirycalltype)::value_type>();
        return last_cmd;
    }
    if (obj["timeDistributorEnquiryCallElements"]) {
        last_cmd = function_from_string("timeDistributorEnquiryCallElements");
        timedistributorenquirycallelementstype =
            obj["timeDistributorEnquiryCallElements"].as<decltype(timedistributorenquirycallelementstype)::value_type>();
        return last_cmd;
    }
    if (obj["header"]) {
        last_cmd = function_from_string("header");
        headertype = obj["header"].as<decltype(headertype)::value_type>();
        return last_cmd;
    }
    return SpineDataTypeHandler::Function::None;
}
String SpineDataTypeHandler::function_to_string(Function function)
{

    if (function == SpineDataTypeHandler::Function::messagingData)
        return "messagingData";
    if (function == SpineDataTypeHandler::Function::messagingDataElements)
        return "messagingDataElements";
    if (function == SpineDataTypeHandler::Function::messagingListData)
        return "messagingListData";
    if (function == SpineDataTypeHandler::Function::messagingListDataSelectors)
        return "messagingListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeSeriesData)
        return "timeSeriesData";
    if (function == SpineDataTypeHandler::Function::timeSeriesDataElements)
        return "timeSeriesDataElements";
    if (function == SpineDataTypeHandler::Function::timeSeriesListData)
        return "timeSeriesListData";
    if (function == SpineDataTypeHandler::Function::timeSeriesListDataSelectors)
        return "timeSeriesListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeSeriesDescriptionData)
        return "timeSeriesDescriptionData";
    if (function == SpineDataTypeHandler::Function::timeSeriesDescriptionDataElements)
        return "timeSeriesDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::timeSeriesDescriptionListData)
        return "timeSeriesDescriptionListData";
    if (function == SpineDataTypeHandler::Function::timeSeriesDescriptionListDataSelectors)
        return "timeSeriesDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeSeriesConstraintsData)
        return "timeSeriesConstraintsData";
    if (function == SpineDataTypeHandler::Function::timeSeriesConstraintsDataElements)
        return "timeSeriesConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::timeSeriesConstraintsListData)
        return "timeSeriesConstraintsListData";
    if (function == SpineDataTypeHandler::Function::timeSeriesConstraintsListDataSelectors)
        return "timeSeriesConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::measurementData)
        return "measurementData";
    if (function == SpineDataTypeHandler::Function::measurementDataElements)
        return "measurementDataElements";
    if (function == SpineDataTypeHandler::Function::measurementListData)
        return "measurementListData";
    if (function == SpineDataTypeHandler::Function::measurementListDataSelectors)
        return "measurementListDataSelectors";
    if (function == SpineDataTypeHandler::Function::measurementSeriesData)
        return "measurementSeriesData";
    if (function == SpineDataTypeHandler::Function::measurementSeriesDataElements)
        return "measurementSeriesDataElements";
    if (function == SpineDataTypeHandler::Function::measurementSeriesListData)
        return "measurementSeriesListData";
    if (function == SpineDataTypeHandler::Function::measurementSeriesListDataSelectors)
        return "measurementSeriesListDataSelectors";
    if (function == SpineDataTypeHandler::Function::measurementConstraintsData)
        return "measurementConstraintsData";
    if (function == SpineDataTypeHandler::Function::measurementConstraintsDataElements)
        return "measurementConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::measurementConstraintsListData)
        return "measurementConstraintsListData";
    if (function == SpineDataTypeHandler::Function::measurementConstraintsListDataSelectors)
        return "measurementConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::measurementDescriptionData)
        return "measurementDescriptionData";
    if (function == SpineDataTypeHandler::Function::measurementDescriptionDataElements)
        return "measurementDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::measurementDescriptionListData)
        return "measurementDescriptionListData";
    if (function == SpineDataTypeHandler::Function::measurementDescriptionListDataSelectors)
        return "measurementDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::measurementThresholdRelationData)
        return "measurementThresholdRelationData";
    if (function == SpineDataTypeHandler::Function::measurementThresholdRelationDataElements)
        return "measurementThresholdRelationDataElements";
    if (function == SpineDataTypeHandler::Function::measurementThresholdRelationListData)
        return "measurementThresholdRelationListData";
    if (function == SpineDataTypeHandler::Function::measurementThresholdRelationListDataSelectors)
        return "measurementThresholdRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::thresholdData)
        return "thresholdData";
    if (function == SpineDataTypeHandler::Function::thresholdDataElements)
        return "thresholdDataElements";
    if (function == SpineDataTypeHandler::Function::thresholdListData)
        return "thresholdListData";
    if (function == SpineDataTypeHandler::Function::thresholdListDataSelectors)
        return "thresholdListDataSelectors";
    if (function == SpineDataTypeHandler::Function::thresholdConstraintsData)
        return "thresholdConstraintsData";
    if (function == SpineDataTypeHandler::Function::thresholdConstraintsDataElements)
        return "thresholdConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::thresholdConstraintsListData)
        return "thresholdConstraintsListData";
    if (function == SpineDataTypeHandler::Function::thresholdConstraintsListDataSelectors)
        return "thresholdConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::thresholdDescriptionData)
        return "thresholdDescriptionData";
    if (function == SpineDataTypeHandler::Function::thresholdDescriptionDataElements)
        return "thresholdDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::thresholdDescriptionListData)
        return "thresholdDescriptionListData";
    if (function == SpineDataTypeHandler::Function::thresholdDescriptionListDataSelectors)
        return "thresholdDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::directControlActivityData)
        return "directControlActivityData";
    if (function == SpineDataTypeHandler::Function::directControlActivityDataElements)
        return "directControlActivityDataElements";
    if (function == SpineDataTypeHandler::Function::directControlActivityListData)
        return "directControlActivityListData";
    if (function == SpineDataTypeHandler::Function::directControlActivityListDataSelectors)
        return "directControlActivityListDataSelectors";
    if (function == SpineDataTypeHandler::Function::directControlDescriptionData)
        return "directControlDescriptionData";
    if (function == SpineDataTypeHandler::Function::directControlDescriptionDataElements)
        return "directControlDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleData)
        return "powerTimeSlotScheduleData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleDataElements)
        return "powerTimeSlotScheduleDataElements";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleListData)
        return "powerTimeSlotScheduleListData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleListDataSelectors)
        return "powerTimeSlotScheduleListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotValueData)
        return "powerTimeSlotValueData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotValueDataElements)
        return "powerTimeSlotValueDataElements";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotValueListData)
        return "powerTimeSlotValueListData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotValueListDataSelectors)
        return "powerTimeSlotValueListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsData)
        return "powerTimeSlotScheduleConstraintsData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsDataElements)
        return "powerTimeSlotScheduleConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListData)
        return "powerTimeSlotScheduleConstraintsListData";
    if (function == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListDataSelectors)
        return "powerTimeSlotScheduleConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationData)
        return "powerSequenceAlternativesRelationData";
    if (function == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationDataElements)
        return "powerSequenceAlternativesRelationDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListData)
        return "powerSequenceAlternativesRelationListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListDataSelectors)
        return "powerSequenceAlternativesRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceDescriptionData)
        return "powerSequenceDescriptionData";
    if (function == SpineDataTypeHandler::Function::powerSequenceDescriptionDataElements)
        return "powerSequenceDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceDescriptionListData)
        return "powerSequenceDescriptionListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceDescriptionListDataSelectors)
        return "powerSequenceDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceStateData)
        return "powerSequenceStateData";
    if (function == SpineDataTypeHandler::Function::powerSequenceStateDataElements)
        return "powerSequenceStateDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceStateListData)
        return "powerSequenceStateListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceStateListDataSelectors)
        return "powerSequenceStateListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleData)
        return "powerSequenceScheduleData";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleDataElements)
        return "powerSequenceScheduleDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleListData)
        return "powerSequenceScheduleListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleListDataSelectors)
        return "powerSequenceScheduleListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsData)
        return "powerSequenceScheduleConstraintsData";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsDataElements)
        return "powerSequenceScheduleConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListData)
        return "powerSequenceScheduleConstraintsListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListDataSelectors)
        return "powerSequenceScheduleConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceData)
        return "powerSequencePriceData";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceDataElements)
        return "powerSequencePriceDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceListData)
        return "powerSequencePriceListData";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceListDataSelectors)
        return "powerSequencePriceListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceData)
        return "powerSequenceSchedulePreferenceData";
    if (function == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceDataElements)
        return "powerSequenceSchedulePreferenceDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListData)
        return "powerSequenceSchedulePreferenceListData";
    if (function == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListDataSelectors)
        return "powerSequenceSchedulePreferenceListDataSelectors";
    if (function == SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationData)
        return "powerSequenceNodeScheduleInformationData";
    if (function == SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationDataElements)
        return "powerSequenceNodeScheduleInformationDataElements";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCall)
        return "powerSequenceScheduleConfigurationRequestCall";
    if (function == SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCallElements)
        return "powerSequenceScheduleConfigurationRequestCallElements";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCall)
        return "powerSequencePriceCalculationRequestCall";
    if (function == SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCallElements)
        return "powerSequencePriceCalculationRequestCallElements";
    if (function == SpineDataTypeHandler::Function::resultData)
        return "resultData";
    if (function == SpineDataTypeHandler::Function::bindingManagementEntryData)
        return "bindingManagementEntryData";
    if (function == SpineDataTypeHandler::Function::bindingManagementEntryDataElements)
        return "bindingManagementEntryDataElements";
    if (function == SpineDataTypeHandler::Function::bindingManagementEntryListData)
        return "bindingManagementEntryListData";
    if (function == SpineDataTypeHandler::Function::bindingManagementEntryListDataSelectors)
        return "bindingManagementEntryListDataSelectors";
    if (function == SpineDataTypeHandler::Function::bindingManagementRequestCall)
        return "bindingManagementRequestCall";
    if (function == SpineDataTypeHandler::Function::bindingManagementRequestCallElements)
        return "bindingManagementRequestCallElements";
    if (function == SpineDataTypeHandler::Function::bindingManagementDeleteCall)
        return "bindingManagementDeleteCall";
    if (function == SpineDataTypeHandler::Function::bindingManagementDeleteCallElements)
        return "bindingManagementDeleteCallElements";
    if (function == SpineDataTypeHandler::Function::actuatorLevelData)
        return "actuatorLevelData";
    if (function == SpineDataTypeHandler::Function::actuatorLevelDataElements)
        return "actuatorLevelDataElements";
    if (function == SpineDataTypeHandler::Function::actuatorLevelDescriptionData)
        return "actuatorLevelDescriptionData";
    if (function == SpineDataTypeHandler::Function::actuatorLevelDescriptionDataElements)
        return "actuatorLevelDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::cmdClassifier)
        return "cmdClassifier";
    if (function == SpineDataTypeHandler::Function::lastUpdateAt)
        return "lastUpdateAt";
    if (function == SpineDataTypeHandler::Function::function)
        return "function";
    if (function == SpineDataTypeHandler::Function::cmdControl)
        return "cmdControl";
    if (function == SpineDataTypeHandler::Function::actuatorSwitchData)
        return "actuatorSwitchData";
    if (function == SpineDataTypeHandler::Function::actuatorSwitchDataElements)
        return "actuatorSwitchDataElements";
    if (function == SpineDataTypeHandler::Function::actuatorSwitchDescriptionData)
        return "actuatorSwitchDescriptionData";
    if (function == SpineDataTypeHandler::Function::actuatorSwitchDescriptionDataElements)
        return "actuatorSwitchDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::alarmData)
        return "alarmData";
    if (function == SpineDataTypeHandler::Function::alarmDataElements)
        return "alarmDataElements";
    if (function == SpineDataTypeHandler::Function::alarmListData)
        return "alarmListData";
    if (function == SpineDataTypeHandler::Function::alarmListDataSelectors)
        return "alarmListDataSelectors";
    if (function == SpineDataTypeHandler::Function::billData)
        return "billData";
    if (function == SpineDataTypeHandler::Function::billDataElements)
        return "billDataElements";
    if (function == SpineDataTypeHandler::Function::billListData)
        return "billListData";
    if (function == SpineDataTypeHandler::Function::billListDataSelectors)
        return "billListDataSelectors";
    if (function == SpineDataTypeHandler::Function::billConstraintsData)
        return "billConstraintsData";
    if (function == SpineDataTypeHandler::Function::billConstraintsDataElements)
        return "billConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::billConstraintsListData)
        return "billConstraintsListData";
    if (function == SpineDataTypeHandler::Function::billConstraintsListDataSelectors)
        return "billConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::billDescriptionData)
        return "billDescriptionData";
    if (function == SpineDataTypeHandler::Function::billDescriptionDataElements)
        return "billDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::billDescriptionListData)
        return "billDescriptionListData";
    if (function == SpineDataTypeHandler::Function::billDescriptionListDataSelectors)
        return "billDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::identificationData)
        return "identificationData";
    if (function == SpineDataTypeHandler::Function::identificationDataElements)
        return "identificationDataElements";
    if (function == SpineDataTypeHandler::Function::identificationListData)
        return "identificationListData";
    if (function == SpineDataTypeHandler::Function::identificationListDataSelectors)
        return "identificationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::sessionIdentificationData)
        return "sessionIdentificationData";
    if (function == SpineDataTypeHandler::Function::sessionIdentificationDataElements)
        return "sessionIdentificationDataElements";
    if (function == SpineDataTypeHandler::Function::sessionIdentificationListData)
        return "sessionIdentificationListData";
    if (function == SpineDataTypeHandler::Function::sessionIdentificationListDataSelectors)
        return "sessionIdentificationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::sessionMeasurementRelationData)
        return "sessionMeasurementRelationData";
    if (function == SpineDataTypeHandler::Function::sessionMeasurementRelationDataElements)
        return "sessionMeasurementRelationDataElements";
    if (function == SpineDataTypeHandler::Function::sessionMeasurementRelationListData)
        return "sessionMeasurementRelationListData";
    if (function == SpineDataTypeHandler::Function::sessionMeasurementRelationListDataSelectors)
        return "sessionMeasurementRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::dataTunnelingCall)
        return "dataTunnelingCall";
    if (function == SpineDataTypeHandler::Function::dataTunnelingCallElements)
        return "dataTunnelingCallElements";
    if (function == SpineDataTypeHandler::Function::deviceClassificationManufacturerData)
        return "deviceClassificationManufacturerData";
    if (function == SpineDataTypeHandler::Function::deviceClassificationManufacturerDataElements)
        return "deviceClassificationManufacturerDataElements";
    if (function == SpineDataTypeHandler::Function::deviceClassificationUserData)
        return "deviceClassificationUserData";
    if (function == SpineDataTypeHandler::Function::deviceClassificationUserDataElements)
        return "deviceClassificationUserDataElements";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueData)
        return "deviceConfigurationKeyValueData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDataElements)
        return "deviceConfigurationKeyValueDataElements";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueListData)
        return "deviceConfigurationKeyValueListData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueListDataSelectors)
        return "deviceConfigurationKeyValueListDataSelectors";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionData)
        return "deviceConfigurationKeyValueDescriptionData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionDataElements)
        return "deviceConfigurationKeyValueDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListData)
        return "deviceConfigurationKeyValueDescriptionListData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListDataSelectors)
        return "deviceConfigurationKeyValueDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsData)
        return "deviceConfigurationKeyValueConstraintsData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsDataElements)
        return "deviceConfigurationKeyValueConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListData)
        return "deviceConfigurationKeyValueConstraintsListData";
    if (function == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListDataSelectors)
        return "deviceConfigurationKeyValueConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisStateData)
        return "deviceDiagnosisStateData";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisStateDataElements)
        return "deviceDiagnosisStateDataElements";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatData)
        return "deviceDiagnosisHeartbeatData";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatDataElements)
        return "deviceDiagnosisHeartbeatDataElements";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisServiceData)
        return "deviceDiagnosisServiceData";
    if (function == SpineDataTypeHandler::Function::deviceDiagnosisServiceDataElements)
        return "deviceDiagnosisServiceDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionData)
        return "electricalConnectionParameterDescriptionData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionDataElements)
        return "electricalConnectionParameterDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListData)
        return "electricalConnectionParameterDescriptionListData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListDataSelectors)
        return "electricalConnectionParameterDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetData)
        return "electricalConnectionPermittedValueSetData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetDataElements)
        return "electricalConnectionPermittedValueSetDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListData)
        return "electricalConnectionPermittedValueSetListData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListDataSelectors)
        return "electricalConnectionPermittedValueSetListDataSelectors";
    if (function == SpineDataTypeHandler::Function::electricalConnectionCharacteristicData)
        return "electricalConnectionCharacteristicData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionCharacteristicDataElements)
        return "electricalConnectionCharacteristicDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionCharacteristicListData)
        return "electricalConnectionCharacteristicListData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionCharacteristicListDataSelectors)
        return "electricalConnectionCharacteristicListDataSelectors";
    if (function == SpineDataTypeHandler::Function::electricalConnectionStateData)
        return "electricalConnectionStateData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionStateDataElements)
        return "electricalConnectionStateDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionStateListData)
        return "electricalConnectionStateListData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionStateListDataSelectors)
        return "electricalConnectionStateListDataSelectors";
    if (function == SpineDataTypeHandler::Function::electricalConnectionDescriptionData)
        return "electricalConnectionDescriptionData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionDescriptionDataElements)
        return "electricalConnectionDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::electricalConnectionDescriptionListData)
        return "electricalConnectionDescriptionListData";
    if (function == SpineDataTypeHandler::Function::electricalConnectionDescriptionListDataSelectors)
        return "electricalConnectionDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionData)
        return "hvacSystemFunctionData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionDataElements)
        return "hvacSystemFunctionDataElements";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionListData)
        return "hvacSystemFunctionListData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionListDataSelectors)
        return "hvacSystemFunctionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationData)
        return "hvacSystemFunctionOperationModeRelationData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationDataElements)
        return "hvacSystemFunctionOperationModeRelationDataElements";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListData)
        return "hvacSystemFunctionOperationModeRelationListData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListDataSelectors)
        return "hvacSystemFunctionOperationModeRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationData)
        return "hvacSystemFunctionSetpointRelationData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationDataElements)
        return "hvacSystemFunctionSetpointRelationDataElements";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListData)
        return "hvacSystemFunctionSetpointRelationListData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListDataSelectors)
        return "hvacSystemFunctionSetpointRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationData)
        return "hvacSystemFunctionPowerSequenceRelationData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationDataElements)
        return "hvacSystemFunctionPowerSequenceRelationDataElements";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListData)
        return "hvacSystemFunctionPowerSequenceRelationListData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListDataSelectors)
        return "hvacSystemFunctionPowerSequenceRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionData)
        return "hvacSystemFunctionDescriptionData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionDataElements)
        return "hvacSystemFunctionDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListData)
        return "hvacSystemFunctionDescriptionListData";
    if (function == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListDataSelectors)
        return "hvacSystemFunctionDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacOperationModeDescriptionData)
        return "hvacOperationModeDescriptionData";
    if (function == SpineDataTypeHandler::Function::hvacOperationModeDescriptionDataElements)
        return "hvacOperationModeDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::hvacOperationModeDescriptionListData)
        return "hvacOperationModeDescriptionListData";
    if (function == SpineDataTypeHandler::Function::hvacOperationModeDescriptionListDataSelectors)
        return "hvacOperationModeDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacOverrunData)
        return "hvacOverrunData";
    if (function == SpineDataTypeHandler::Function::hvacOverrunDataElements)
        return "hvacOverrunDataElements";
    if (function == SpineDataTypeHandler::Function::hvacOverrunListData)
        return "hvacOverrunListData";
    if (function == SpineDataTypeHandler::Function::hvacOverrunListDataSelectors)
        return "hvacOverrunListDataSelectors";
    if (function == SpineDataTypeHandler::Function::hvacOverrunDescriptionData)
        return "hvacOverrunDescriptionData";
    if (function == SpineDataTypeHandler::Function::hvacOverrunDescriptionDataElements)
        return "hvacOverrunDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::hvacOverrunDescriptionListData)
        return "hvacOverrunDescriptionListData";
    if (function == SpineDataTypeHandler::Function::hvacOverrunDescriptionListDataSelectors)
        return "hvacOverrunDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::setpointData)
        return "setpointData";
    if (function == SpineDataTypeHandler::Function::setpointDataElements)
        return "setpointDataElements";
    if (function == SpineDataTypeHandler::Function::setpointListData)
        return "setpointListData";
    if (function == SpineDataTypeHandler::Function::setpointListDataSelectors)
        return "setpointListDataSelectors";
    if (function == SpineDataTypeHandler::Function::setpointConstraintsData)
        return "setpointConstraintsData";
    if (function == SpineDataTypeHandler::Function::setpointConstraintsDataElements)
        return "setpointConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::setpointConstraintsListData)
        return "setpointConstraintsListData";
    if (function == SpineDataTypeHandler::Function::setpointConstraintsListDataSelectors)
        return "setpointConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::setpointDescriptionData)
        return "setpointDescriptionData";
    if (function == SpineDataTypeHandler::Function::setpointDescriptionDataElements)
        return "setpointDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::setpointDescriptionListData)
        return "setpointDescriptionListData";
    if (function == SpineDataTypeHandler::Function::setpointDescriptionListDataSelectors)
        return "setpointDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeTableData)
        return "timeTableData";
    if (function == SpineDataTypeHandler::Function::timeTableDataElements)
        return "timeTableDataElements";
    if (function == SpineDataTypeHandler::Function::timeTableListData)
        return "timeTableListData";
    if (function == SpineDataTypeHandler::Function::timeTableListDataSelectors)
        return "timeTableListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeTableConstraintsData)
        return "timeTableConstraintsData";
    if (function == SpineDataTypeHandler::Function::timeTableConstraintsDataElements)
        return "timeTableConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::timeTableConstraintsListData)
        return "timeTableConstraintsListData";
    if (function == SpineDataTypeHandler::Function::timeTableConstraintsListDataSelectors)
        return "timeTableConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::timeTableDescriptionData)
        return "timeTableDescriptionData";
    if (function == SpineDataTypeHandler::Function::timeTableDescriptionDataElements)
        return "timeTableDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::timeTableDescriptionListData)
        return "timeTableDescriptionListData";
    if (function == SpineDataTypeHandler::Function::timeTableDescriptionListDataSelectors)
        return "timeTableDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::incentiveTableData)
        return "incentiveTableData";
    if (function == SpineDataTypeHandler::Function::incentiveTableDataElements)
        return "incentiveTableDataElements";
    if (function == SpineDataTypeHandler::Function::incentiveTableDataSelectors)
        return "incentiveTableDataSelectors";
    if (function == SpineDataTypeHandler::Function::incentiveTableDescriptionData)
        return "incentiveTableDescriptionData";
    if (function == SpineDataTypeHandler::Function::incentiveTableDescriptionDataElements)
        return "incentiveTableDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::incentiveTableDescriptionDataSelectors)
        return "incentiveTableDescriptionDataSelectors";
    if (function == SpineDataTypeHandler::Function::incentiveTableConstraintsData)
        return "incentiveTableConstraintsData";
    if (function == SpineDataTypeHandler::Function::incentiveTableConstraintsDataElements)
        return "incentiveTableConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::incentiveTableConstraintsDataSelectors)
        return "incentiveTableConstraintsDataSelectors";
    if (function == SpineDataTypeHandler::Function::tariffOverallConstraintsData)
        return "tariffOverallConstraintsData";
    if (function == SpineDataTypeHandler::Function::tariffOverallConstraintsDataElements)
        return "tariffOverallConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::tariffData)
        return "tariffData";
    if (function == SpineDataTypeHandler::Function::tariffDataElements)
        return "tariffDataElements";
    if (function == SpineDataTypeHandler::Function::tariffListData)
        return "tariffListData";
    if (function == SpineDataTypeHandler::Function::tariffListDataSelectors)
        return "tariffListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tariffTierRelationData)
        return "tariffTierRelationData";
    if (function == SpineDataTypeHandler::Function::tariffTierRelationDataElements)
        return "tariffTierRelationDataElements";
    if (function == SpineDataTypeHandler::Function::tariffTierRelationListData)
        return "tariffTierRelationListData";
    if (function == SpineDataTypeHandler::Function::tariffTierRelationListDataSelectors)
        return "tariffTierRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tariffBoundaryRelationData)
        return "tariffBoundaryRelationData";
    if (function == SpineDataTypeHandler::Function::tariffBoundaryRelationDataElements)
        return "tariffBoundaryRelationDataElements";
    if (function == SpineDataTypeHandler::Function::tariffBoundaryRelationListData)
        return "tariffBoundaryRelationListData";
    if (function == SpineDataTypeHandler::Function::tariffBoundaryRelationListDataSelectors)
        return "tariffBoundaryRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tariffDescriptionData)
        return "tariffDescriptionData";
    if (function == SpineDataTypeHandler::Function::tariffDescriptionDataElements)
        return "tariffDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::tariffDescriptionListData)
        return "tariffDescriptionListData";
    if (function == SpineDataTypeHandler::Function::tariffDescriptionListDataSelectors)
        return "tariffDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tierBoundaryData)
        return "tierBoundaryData";
    if (function == SpineDataTypeHandler::Function::tierBoundaryDataElements)
        return "tierBoundaryDataElements";
    if (function == SpineDataTypeHandler::Function::tierBoundaryListData)
        return "tierBoundaryListData";
    if (function == SpineDataTypeHandler::Function::tierBoundaryListDataSelectors)
        return "tierBoundaryListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tierBoundaryDescriptionData)
        return "tierBoundaryDescriptionData";
    if (function == SpineDataTypeHandler::Function::tierBoundaryDescriptionDataElements)
        return "tierBoundaryDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::tierBoundaryDescriptionListData)
        return "tierBoundaryDescriptionListData";
    if (function == SpineDataTypeHandler::Function::tierBoundaryDescriptionListDataSelectors)
        return "tierBoundaryDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::commodityData)
        return "commodityData";
    if (function == SpineDataTypeHandler::Function::commodityDataElements)
        return "commodityDataElements";
    if (function == SpineDataTypeHandler::Function::commodityListData)
        return "commodityListData";
    if (function == SpineDataTypeHandler::Function::commodityListDataSelectors)
        return "commodityListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tierData)
        return "tierData";
    if (function == SpineDataTypeHandler::Function::tierDataElements)
        return "tierDataElements";
    if (function == SpineDataTypeHandler::Function::tierListData)
        return "tierListData";
    if (function == SpineDataTypeHandler::Function::tierListDataSelectors)
        return "tierListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tierIncentiveRelationData)
        return "tierIncentiveRelationData";
    if (function == SpineDataTypeHandler::Function::tierIncentiveRelationDataElements)
        return "tierIncentiveRelationDataElements";
    if (function == SpineDataTypeHandler::Function::tierIncentiveRelationListData)
        return "tierIncentiveRelationListData";
    if (function == SpineDataTypeHandler::Function::tierIncentiveRelationListDataSelectors)
        return "tierIncentiveRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::tierDescriptionData)
        return "tierDescriptionData";
    if (function == SpineDataTypeHandler::Function::tierDescriptionDataElements)
        return "tierDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::tierDescriptionListData)
        return "tierDescriptionListData";
    if (function == SpineDataTypeHandler::Function::tierDescriptionListDataSelectors)
        return "tierDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::incentiveData)
        return "incentiveData";
    if (function == SpineDataTypeHandler::Function::incentiveDataElements)
        return "incentiveDataElements";
    if (function == SpineDataTypeHandler::Function::incentiveListData)
        return "incentiveListData";
    if (function == SpineDataTypeHandler::Function::incentiveListDataSelectors)
        return "incentiveListDataSelectors";
    if (function == SpineDataTypeHandler::Function::incentiveDescriptionData)
        return "incentiveDescriptionData";
    if (function == SpineDataTypeHandler::Function::incentiveDescriptionDataElements)
        return "incentiveDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::incentiveDescriptionListData)
        return "incentiveDescriptionListData";
    if (function == SpineDataTypeHandler::Function::incentiveDescriptionListDataSelectors)
        return "incentiveDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::loadControlNodeData)
        return "loadControlNodeData";
    if (function == SpineDataTypeHandler::Function::loadControlNodeDataElements)
        return "loadControlNodeDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlEventData)
        return "loadControlEventData";
    if (function == SpineDataTypeHandler::Function::loadControlEventDataElements)
        return "loadControlEventDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlEventListData)
        return "loadControlEventListData";
    if (function == SpineDataTypeHandler::Function::loadControlEventListDataSelectors)
        return "loadControlEventListDataSelectors";
    if (function == SpineDataTypeHandler::Function::loadControlStateData)
        return "loadControlStateData";
    if (function == SpineDataTypeHandler::Function::loadControlStateDataElements)
        return "loadControlStateDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlStateListData)
        return "loadControlStateListData";
    if (function == SpineDataTypeHandler::Function::loadControlStateListDataSelectors)
        return "loadControlStateListDataSelectors";
    if (function == SpineDataTypeHandler::Function::loadControlLimitData)
        return "loadControlLimitData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitDataElements)
        return "loadControlLimitDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlLimitListData)
        return "loadControlLimitListData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitListDataSelectors)
        return "loadControlLimitListDataSelectors";
    if (function == SpineDataTypeHandler::Function::loadControlLimitConstraintsData)
        return "loadControlLimitConstraintsData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitConstraintsDataElements)
        return "loadControlLimitConstraintsDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlLimitConstraintsListData)
        return "loadControlLimitConstraintsListData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitConstraintsListDataSelectors)
        return "loadControlLimitConstraintsListDataSelectors";
    if (function == SpineDataTypeHandler::Function::loadControlLimitDescriptionData)
        return "loadControlLimitDescriptionData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitDescriptionDataElements)
        return "loadControlLimitDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::loadControlLimitDescriptionListData)
        return "loadControlLimitDescriptionListData";
    if (function == SpineDataTypeHandler::Function::loadControlLimitDescriptionListDataSelectors)
        return "loadControlLimitDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::networkManagementAddNodeCall)
        return "networkManagementAddNodeCall";
    if (function == SpineDataTypeHandler::Function::networkManagementAddNodeCallElements)
        return "networkManagementAddNodeCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementRemoveNodeCall)
        return "networkManagementRemoveNodeCall";
    if (function == SpineDataTypeHandler::Function::networkManagementRemoveNodeCallElements)
        return "networkManagementRemoveNodeCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementModifyNodeCall)
        return "networkManagementModifyNodeCall";
    if (function == SpineDataTypeHandler::Function::networkManagementModifyNodeCallElements)
        return "networkManagementModifyNodeCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementScanNetworkCall)
        return "networkManagementScanNetworkCall";
    if (function == SpineDataTypeHandler::Function::networkManagementScanNetworkCallElements)
        return "networkManagementScanNetworkCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementDiscoverCall)
        return "networkManagementDiscoverCall";
    if (function == SpineDataTypeHandler::Function::networkManagementDiscoverCallElements)
        return "networkManagementDiscoverCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementAbortCall)
        return "networkManagementAbortCall";
    if (function == SpineDataTypeHandler::Function::networkManagementAbortCallElements)
        return "networkManagementAbortCallElements";
    if (function == SpineDataTypeHandler::Function::networkManagementProcessStateData)
        return "networkManagementProcessStateData";
    if (function == SpineDataTypeHandler::Function::networkManagementProcessStateDataElements)
        return "networkManagementProcessStateDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementJoiningModeData)
        return "networkManagementJoiningModeData";
    if (function == SpineDataTypeHandler::Function::networkManagementJoiningModeDataElements)
        return "networkManagementJoiningModeDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementReportCandidateData)
        return "networkManagementReportCandidateData";
    if (function == SpineDataTypeHandler::Function::networkManagementReportCandidateDataElements)
        return "networkManagementReportCandidateDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionData)
        return "networkManagementDeviceDescriptionData";
    if (function == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionDataElements)
        return "networkManagementDeviceDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListData)
        return "networkManagementDeviceDescriptionListData";
    if (function == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListDataSelectors)
        return "networkManagementDeviceDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::networkManagementEntityDescriptionData)
        return "networkManagementEntityDescriptionData";
    if (function == SpineDataTypeHandler::Function::networkManagementEntityDescriptionDataElements)
        return "networkManagementEntityDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementEntityDescriptionListData)
        return "networkManagementEntityDescriptionListData";
    if (function == SpineDataTypeHandler::Function::networkManagementEntityDescriptionListDataSelectors)
        return "networkManagementEntityDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionData)
        return "networkManagementFeatureDescriptionData";
    if (function == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionDataElements)
        return "networkManagementFeatureDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListData)
        return "networkManagementFeatureDescriptionListData";
    if (function == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListDataSelectors)
        return "networkManagementFeatureDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryData)
        return "nodeManagementDetailedDiscoveryData";
    if (function == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataElements)
        return "nodeManagementDetailedDiscoveryDataElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataSelectors)
        return "nodeManagementDetailedDiscoveryDataSelectors";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingData)
        return "nodeManagementBindingData";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingDataElements)
        return "nodeManagementBindingDataElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingDataSelectors)
        return "nodeManagementBindingDataSelectors";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingRequestCall)
        return "nodeManagementBindingRequestCall";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingRequestCallElements)
        return "nodeManagementBindingRequestCallElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingDeleteCall)
        return "nodeManagementBindingDeleteCall";
    if (function == SpineDataTypeHandler::Function::nodeManagementBindingDeleteCallElements)
        return "nodeManagementBindingDeleteCallElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionData)
        return "nodeManagementSubscriptionData";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionDataElements)
        return "nodeManagementSubscriptionDataElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionDataSelectors)
        return "nodeManagementSubscriptionDataSelectors";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCall)
        return "nodeManagementSubscriptionRequestCall";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCallElements)
        return "nodeManagementSubscriptionRequestCallElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCall)
        return "nodeManagementSubscriptionDeleteCall";
    if (function == SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCallElements)
        return "nodeManagementSubscriptionDeleteCallElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementDestinationData)
        return "nodeManagementDestinationData";
    if (function == SpineDataTypeHandler::Function::nodeManagementDestinationDataElements)
        return "nodeManagementDestinationDataElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementDestinationListData)
        return "nodeManagementDestinationListData";
    if (function == SpineDataTypeHandler::Function::nodeManagementDestinationListDataSelectors)
        return "nodeManagementDestinationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::nodeManagementUseCaseData)
        return "nodeManagementUseCaseData";
    if (function == SpineDataTypeHandler::Function::nodeManagementUseCaseDataElements)
        return "nodeManagementUseCaseDataElements";
    if (function == SpineDataTypeHandler::Function::nodeManagementUseCaseDataSelectors)
        return "nodeManagementUseCaseDataSelectors";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementEntryData)
        return "subscriptionManagementEntryData";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementEntryDataElements)
        return "subscriptionManagementEntryDataElements";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementEntryListData)
        return "subscriptionManagementEntryListData";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementEntryListDataSelectors)
        return "subscriptionManagementEntryListDataSelectors";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementRequestCall)
        return "subscriptionManagementRequestCall";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementRequestCallElements)
        return "subscriptionManagementRequestCallElements";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementDeleteCall)
        return "subscriptionManagementDeleteCall";
    if (function == SpineDataTypeHandler::Function::subscriptionManagementDeleteCallElements)
        return "subscriptionManagementDeleteCallElements";
    if (function == SpineDataTypeHandler::Function::useCaseInformationData)
        return "useCaseInformationData";
    if (function == SpineDataTypeHandler::Function::useCaseInformationDataElements)
        return "useCaseInformationDataElements";
    if (function == SpineDataTypeHandler::Function::useCaseInformationListData)
        return "useCaseInformationListData";
    if (function == SpineDataTypeHandler::Function::useCaseInformationListDataSelectors)
        return "useCaseInformationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::specificationVersionData)
        return "specificationVersionData";
    if (function == SpineDataTypeHandler::Function::specificationVersionDataElements)
        return "specificationVersionDataElements";
    if (function == SpineDataTypeHandler::Function::specificationVersionListData)
        return "specificationVersionListData";
    if (function == SpineDataTypeHandler::Function::specificationVersionListDataSelectors)
        return "specificationVersionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsInterruptData)
        return "operatingConstraintsInterruptData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsInterruptDataElements)
        return "operatingConstraintsInterruptDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsInterruptListData)
        return "operatingConstraintsInterruptListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsInterruptListDataSelectors)
        return "operatingConstraintsInterruptListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsDurationData)
        return "operatingConstraintsDurationData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsDurationDataElements)
        return "operatingConstraintsDurationDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsDurationListData)
        return "operatingConstraintsDurationListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsDurationListDataSelectors)
        return "operatingConstraintsDurationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionData)
        return "operatingConstraintsPowerDescriptionData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionDataElements)
        return "operatingConstraintsPowerDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListData)
        return "operatingConstraintsPowerDescriptionListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListDataSelectors)
        return "operatingConstraintsPowerDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeData)
        return "operatingConstraintsPowerRangeData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeDataElements)
        return "operatingConstraintsPowerRangeDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListData)
        return "operatingConstraintsPowerRangeListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListDataSelectors)
        return "operatingConstraintsPowerRangeListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelData)
        return "operatingConstraintsPowerLevelData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelDataElements)
        return "operatingConstraintsPowerLevelDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListData)
        return "operatingConstraintsPowerLevelListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListDataSelectors)
        return "operatingConstraintsPowerLevelListDataSelectors";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationData)
        return "operatingConstraintsResumeImplicationData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationDataElements)
        return "operatingConstraintsResumeImplicationDataElements";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListData)
        return "operatingConstraintsResumeImplicationListData";
    if (function == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListDataSelectors)
        return "operatingConstraintsResumeImplicationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::sensingData)
        return "sensingData";
    if (function == SpineDataTypeHandler::Function::sensingDataElements)
        return "sensingDataElements";
    if (function == SpineDataTypeHandler::Function::sensingListData)
        return "sensingListData";
    if (function == SpineDataTypeHandler::Function::sensingListDataSelectors)
        return "sensingListDataSelectors";
    if (function == SpineDataTypeHandler::Function::sensingDescriptionData)
        return "sensingDescriptionData";
    if (function == SpineDataTypeHandler::Function::sensingDescriptionDataElements)
        return "sensingDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsData)
        return "smartEnergyManagementPsData";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsDataElements)
        return "smartEnergyManagementPsDataElements";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsDataSelectors)
        return "smartEnergyManagementPsDataSelectors";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceData)
        return "smartEnergyManagementPsPriceData";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataElements)
        return "smartEnergyManagementPsPriceDataElements";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataSelectors)
        return "smartEnergyManagementPsPriceDataSelectors";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCall)
        return "smartEnergyManagementPsConfigurationRequestCall";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCallElements)
        return "smartEnergyManagementPsConfigurationRequestCallElements";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCall)
        return "smartEnergyManagementPsPriceCalculationRequestCall";
    if (function == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCallElements)
        return "smartEnergyManagementPsPriceCalculationRequestCallElements";
    if (function == SpineDataTypeHandler::Function::stateInformationData)
        return "stateInformationData";
    if (function == SpineDataTypeHandler::Function::stateInformationDataElements)
        return "stateInformationDataElements";
    if (function == SpineDataTypeHandler::Function::stateInformationListData)
        return "stateInformationListData";
    if (function == SpineDataTypeHandler::Function::stateInformationListDataSelectors)
        return "stateInformationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::supplyConditionData)
        return "supplyConditionData";
    if (function == SpineDataTypeHandler::Function::supplyConditionDataElements)
        return "supplyConditionDataElements";
    if (function == SpineDataTypeHandler::Function::supplyConditionListData)
        return "supplyConditionListData";
    if (function == SpineDataTypeHandler::Function::supplyConditionListDataSelectors)
        return "supplyConditionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::supplyConditionDescriptionData)
        return "supplyConditionDescriptionData";
    if (function == SpineDataTypeHandler::Function::supplyConditionDescriptionDataElements)
        return "supplyConditionDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::supplyConditionDescriptionListData)
        return "supplyConditionDescriptionListData";
    if (function == SpineDataTypeHandler::Function::supplyConditionDescriptionListDataSelectors)
        return "supplyConditionDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::supplyConditionThresholdRelationData)
        return "supplyConditionThresholdRelationData";
    if (function == SpineDataTypeHandler::Function::supplyConditionThresholdRelationDataElements)
        return "supplyConditionThresholdRelationDataElements";
    if (function == SpineDataTypeHandler::Function::supplyConditionThresholdRelationListData)
        return "supplyConditionThresholdRelationListData";
    if (function == SpineDataTypeHandler::Function::supplyConditionThresholdRelationListDataSelectors)
        return "supplyConditionThresholdRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::taskManagementJobData)
        return "taskManagementJobData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobDataElements)
        return "taskManagementJobDataElements";
    if (function == SpineDataTypeHandler::Function::taskManagementJobListData)
        return "taskManagementJobListData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobListDataSelectors)
        return "taskManagementJobListDataSelectors";
    if (function == SpineDataTypeHandler::Function::taskManagementJobRelationData)
        return "taskManagementJobRelationData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobRelationDataElements)
        return "taskManagementJobRelationDataElements";
    if (function == SpineDataTypeHandler::Function::taskManagementJobRelationListData)
        return "taskManagementJobRelationListData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobRelationListDataSelectors)
        return "taskManagementJobRelationListDataSelectors";
    if (function == SpineDataTypeHandler::Function::taskManagementJobDescriptionData)
        return "taskManagementJobDescriptionData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobDescriptionDataElements)
        return "taskManagementJobDescriptionDataElements";
    if (function == SpineDataTypeHandler::Function::taskManagementJobDescriptionListData)
        return "taskManagementJobDescriptionListData";
    if (function == SpineDataTypeHandler::Function::taskManagementJobDescriptionListDataSelectors)
        return "taskManagementJobDescriptionListDataSelectors";
    if (function == SpineDataTypeHandler::Function::taskManagementOverviewData)
        return "taskManagementOverviewData";
    if (function == SpineDataTypeHandler::Function::taskManagementOverviewDataElements)
        return "taskManagementOverviewDataElements";
    if (function == SpineDataTypeHandler::Function::timeInformationData)
        return "timeInformationData";
    if (function == SpineDataTypeHandler::Function::timeInformationDataElements)
        return "timeInformationDataElements";
    if (function == SpineDataTypeHandler::Function::timeDistributorData)
        return "timeDistributorData";
    if (function == SpineDataTypeHandler::Function::timeDistributorDataElements)
        return "timeDistributorDataElements";
    if (function == SpineDataTypeHandler::Function::timePrecisionData)
        return "timePrecisionData";
    if (function == SpineDataTypeHandler::Function::timePrecisionDataElements)
        return "timePrecisionDataElements";
    if (function == SpineDataTypeHandler::Function::timeDistributorEnquiryCall)
        return "timeDistributorEnquiryCall";
    if (function == SpineDataTypeHandler::Function::timeDistributorEnquiryCallElements)
        return "timeDistributorEnquiryCallElements";
    if (function == SpineDataTypeHandler::Function::header)
        return "header";
    return "Unknown function";
}

void SpineDataTypeHandler::last_cmd_to_json(JsonVariant &dst)
{

    if (last_cmd == SpineDataTypeHandler::Function::messagingData) {
        dst["messagingData"] = *messagingdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::messagingDataElements) {
        dst["messagingDataElements"] = *messagingdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::messagingListData) {
        dst["messagingListData"] = *messaginglistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::messagingListDataSelectors) {
        dst["messagingListDataSelectors"] = *messaginglistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesData) {
        dst["timeSeriesData"] = *timeseriesdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesDataElements) {
        dst["timeSeriesDataElements"] = *timeseriesdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesListData) {
        dst["timeSeriesListData"] = *timeserieslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesListDataSelectors) {
        dst["timeSeriesListDataSelectors"] = *timeserieslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesDescriptionData) {
        dst["timeSeriesDescriptionData"] = *timeseriesdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesDescriptionDataElements) {
        dst["timeSeriesDescriptionDataElements"] = *timeseriesdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesDescriptionListData) {
        dst["timeSeriesDescriptionListData"] = *timeseriesdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesDescriptionListDataSelectors) {
        dst["timeSeriesDescriptionListDataSelectors"] = *timeseriesdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesConstraintsData) {
        dst["timeSeriesConstraintsData"] = *timeseriesconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesConstraintsDataElements) {
        dst["timeSeriesConstraintsDataElements"] = *timeseriesconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesConstraintsListData) {
        dst["timeSeriesConstraintsListData"] = *timeseriesconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeSeriesConstraintsListDataSelectors) {
        dst["timeSeriesConstraintsListDataSelectors"] = *timeseriesconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementData) {
        dst["measurementData"] = *measurementdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementDataElements) {
        dst["measurementDataElements"] = *measurementdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementListData) {
        dst["measurementListData"] = *measurementlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementListDataSelectors) {
        dst["measurementListDataSelectors"] = *measurementlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementSeriesData) {
        dst["measurementSeriesData"] = *measurementseriesdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementSeriesDataElements) {
        dst["measurementSeriesDataElements"] = *measurementseriesdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementSeriesListData) {
        dst["measurementSeriesListData"] = *measurementserieslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementSeriesListDataSelectors) {
        dst["measurementSeriesListDataSelectors"] = *measurementserieslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementConstraintsData) {
        dst["measurementConstraintsData"] = *measurementconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementConstraintsDataElements) {
        dst["measurementConstraintsDataElements"] = *measurementconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementConstraintsListData) {
        dst["measurementConstraintsListData"] = *measurementconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementConstraintsListDataSelectors) {
        dst["measurementConstraintsListDataSelectors"] = *measurementconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementDescriptionData) {
        dst["measurementDescriptionData"] = *measurementdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementDescriptionDataElements) {
        dst["measurementDescriptionDataElements"] = *measurementdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementDescriptionListData) {
        dst["measurementDescriptionListData"] = *measurementdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementDescriptionListDataSelectors) {
        dst["measurementDescriptionListDataSelectors"] = *measurementdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementThresholdRelationData) {
        dst["measurementThresholdRelationData"] = *measurementthresholdrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementThresholdRelationDataElements) {
        dst["measurementThresholdRelationDataElements"] = *measurementthresholdrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementThresholdRelationListData) {
        dst["measurementThresholdRelationListData"] = *measurementthresholdrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::measurementThresholdRelationListDataSelectors) {
        dst["measurementThresholdRelationListDataSelectors"] = *measurementthresholdrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdData) {
        dst["thresholdData"] = *thresholddatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdDataElements) {
        dst["thresholdDataElements"] = *thresholddataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdListData) {
        dst["thresholdListData"] = *thresholdlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdListDataSelectors) {
        dst["thresholdListDataSelectors"] = *thresholdlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdConstraintsData) {
        dst["thresholdConstraintsData"] = *thresholdconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdConstraintsDataElements) {
        dst["thresholdConstraintsDataElements"] = *thresholdconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdConstraintsListData) {
        dst["thresholdConstraintsListData"] = *thresholdconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdConstraintsListDataSelectors) {
        dst["thresholdConstraintsListDataSelectors"] = *thresholdconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdDescriptionData) {
        dst["thresholdDescriptionData"] = *thresholddescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdDescriptionDataElements) {
        dst["thresholdDescriptionDataElements"] = *thresholddescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdDescriptionListData) {
        dst["thresholdDescriptionListData"] = *thresholddescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::thresholdDescriptionListDataSelectors) {
        dst["thresholdDescriptionListDataSelectors"] = *thresholddescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlActivityData) {
        dst["directControlActivityData"] = *directcontrolactivitydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlActivityDataElements) {
        dst["directControlActivityDataElements"] = *directcontrolactivitydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlActivityListData) {
        dst["directControlActivityListData"] = *directcontrolactivitylistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlActivityListDataSelectors) {
        dst["directControlActivityListDataSelectors"] = *directcontrolactivitylistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlDescriptionData) {
        dst["directControlDescriptionData"] = *directcontroldescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::directControlDescriptionDataElements) {
        dst["directControlDescriptionDataElements"] = *directcontroldescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleData) {
        dst["powerTimeSlotScheduleData"] = *powertimeslotscheduledatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleDataElements) {
        dst["powerTimeSlotScheduleDataElements"] = *powertimeslotscheduledataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleListData) {
        dst["powerTimeSlotScheduleListData"] = *powertimeslotschedulelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleListDataSelectors) {
        dst["powerTimeSlotScheduleListDataSelectors"] = *powertimeslotschedulelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotValueData) {
        dst["powerTimeSlotValueData"] = *powertimeslotvaluedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotValueDataElements) {
        dst["powerTimeSlotValueDataElements"] = *powertimeslotvaluedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotValueListData) {
        dst["powerTimeSlotValueListData"] = *powertimeslotvaluelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotValueListDataSelectors) {
        dst["powerTimeSlotValueListDataSelectors"] = *powertimeslotvaluelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsData) {
        dst["powerTimeSlotScheduleConstraintsData"] = *powertimeslotscheduleconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsDataElements) {
        dst["powerTimeSlotScheduleConstraintsDataElements"] = *powertimeslotscheduleconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListData) {
        dst["powerTimeSlotScheduleConstraintsListData"] = *powertimeslotscheduleconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerTimeSlotScheduleConstraintsListDataSelectors) {
        dst["powerTimeSlotScheduleConstraintsListDataSelectors"] = *powertimeslotscheduleconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationData) {
        dst["powerSequenceAlternativesRelationData"] = *powersequencealternativesrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationDataElements) {
        dst["powerSequenceAlternativesRelationDataElements"] = *powersequencealternativesrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListData) {
        dst["powerSequenceAlternativesRelationListData"] = *powersequencealternativesrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceAlternativesRelationListDataSelectors) {
        dst["powerSequenceAlternativesRelationListDataSelectors"] = *powersequencealternativesrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceDescriptionData) {
        dst["powerSequenceDescriptionData"] = *powersequencedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceDescriptionDataElements) {
        dst["powerSequenceDescriptionDataElements"] = *powersequencedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceDescriptionListData) {
        dst["powerSequenceDescriptionListData"] = *powersequencedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceDescriptionListDataSelectors) {
        dst["powerSequenceDescriptionListDataSelectors"] = *powersequencedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceStateData) {
        dst["powerSequenceStateData"] = *powersequencestatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceStateDataElements) {
        dst["powerSequenceStateDataElements"] = *powersequencestatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceStateListData) {
        dst["powerSequenceStateListData"] = *powersequencestatelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceStateListDataSelectors) {
        dst["powerSequenceStateListDataSelectors"] = *powersequencestatelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleData) {
        dst["powerSequenceScheduleData"] = *powersequencescheduledatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleDataElements) {
        dst["powerSequenceScheduleDataElements"] = *powersequencescheduledataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleListData) {
        dst["powerSequenceScheduleListData"] = *powersequenceschedulelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleListDataSelectors) {
        dst["powerSequenceScheduleListDataSelectors"] = *powersequenceschedulelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsData) {
        dst["powerSequenceScheduleConstraintsData"] = *powersequencescheduleconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsDataElements) {
        dst["powerSequenceScheduleConstraintsDataElements"] = *powersequencescheduleconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListData) {
        dst["powerSequenceScheduleConstraintsListData"] = *powersequencescheduleconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConstraintsListDataSelectors) {
        dst["powerSequenceScheduleConstraintsListDataSelectors"] = *powersequencescheduleconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceData) {
        dst["powerSequencePriceData"] = *powersequencepricedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceDataElements) {
        dst["powerSequencePriceDataElements"] = *powersequencepricedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceListData) {
        dst["powerSequencePriceListData"] = *powersequencepricelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceListDataSelectors) {
        dst["powerSequencePriceListDataSelectors"] = *powersequencepricelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceData) {
        dst["powerSequenceSchedulePreferenceData"] = *powersequenceschedulepreferencedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceDataElements) {
        dst["powerSequenceSchedulePreferenceDataElements"] = *powersequenceschedulepreferencedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListData) {
        dst["powerSequenceSchedulePreferenceListData"] = *powersequenceschedulepreferencelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceSchedulePreferenceListDataSelectors) {
        dst["powerSequenceSchedulePreferenceListDataSelectors"] = *powersequenceschedulepreferencelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationData) {
        dst["powerSequenceNodeScheduleInformationData"] = *powersequencenodescheduleinformationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceNodeScheduleInformationDataElements) {
        dst["powerSequenceNodeScheduleInformationDataElements"] = *powersequencenodescheduleinformationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCall) {
        dst["powerSequenceScheduleConfigurationRequestCall"] = *powersequencescheduleconfigurationrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequenceScheduleConfigurationRequestCallElements) {
        dst["powerSequenceScheduleConfigurationRequestCallElements"] = *powersequencescheduleconfigurationrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCall) {
        dst["powerSequencePriceCalculationRequestCall"] = *powersequencepricecalculationrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::powerSequencePriceCalculationRequestCallElements) {
        dst["powerSequencePriceCalculationRequestCallElements"] = *powersequencepricecalculationrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::resultData) {
        dst["resultData"] = *resultdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementEntryData) {
        dst["bindingManagementEntryData"] = *bindingmanagemententrydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementEntryDataElements) {
        dst["bindingManagementEntryDataElements"] = *bindingmanagemententrydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementEntryListData) {
        dst["bindingManagementEntryListData"] = *bindingmanagemententrylistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementEntryListDataSelectors) {
        dst["bindingManagementEntryListDataSelectors"] = *bindingmanagemententrylistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementRequestCall) {
        dst["bindingManagementRequestCall"] = *bindingmanagementrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementRequestCallElements) {
        dst["bindingManagementRequestCallElements"] = *bindingmanagementrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementDeleteCall) {
        dst["bindingManagementDeleteCall"] = *bindingmanagementdeletecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::bindingManagementDeleteCallElements) {
        dst["bindingManagementDeleteCallElements"] = *bindingmanagementdeletecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorLevelData) {
        dst["actuatorLevelData"] = *actuatorleveldatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorLevelDataElements) {
        dst["actuatorLevelDataElements"] = *actuatorleveldataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorLevelDescriptionData) {
        dst["actuatorLevelDescriptionData"] = *actuatorleveldescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorLevelDescriptionDataElements) {
        dst["actuatorLevelDescriptionDataElements"] = *actuatorleveldescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::cmdClassifier) {
        dst["cmdClassifier"] = *cmdclassifiertype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::lastUpdateAt) {
        dst["lastUpdateAt"] = *absoluteorrelativetimetype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::function) {
        dst["function"] = *functiontype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::cmdControl) {
        dst["cmdControl"] = *cmdcontroltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorSwitchData) {
        dst["actuatorSwitchData"] = *actuatorswitchdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorSwitchDataElements) {
        dst["actuatorSwitchDataElements"] = *actuatorswitchdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorSwitchDescriptionData) {
        dst["actuatorSwitchDescriptionData"] = *actuatorswitchdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::actuatorSwitchDescriptionDataElements) {
        dst["actuatorSwitchDescriptionDataElements"] = *actuatorswitchdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::alarmData) {
        dst["alarmData"] = *alarmdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::alarmDataElements) {
        dst["alarmDataElements"] = *alarmdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::alarmListData) {
        dst["alarmListData"] = *alarmlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::alarmListDataSelectors) {
        dst["alarmListDataSelectors"] = *alarmlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billData) {
        dst["billData"] = *billdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billDataElements) {
        dst["billDataElements"] = *billdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billListData) {
        dst["billListData"] = *billlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billListDataSelectors) {
        dst["billListDataSelectors"] = *billlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billConstraintsData) {
        dst["billConstraintsData"] = *billconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billConstraintsDataElements) {
        dst["billConstraintsDataElements"] = *billconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billConstraintsListData) {
        dst["billConstraintsListData"] = *billconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billConstraintsListDataSelectors) {
        dst["billConstraintsListDataSelectors"] = *billconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billDescriptionData) {
        dst["billDescriptionData"] = *billdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billDescriptionDataElements) {
        dst["billDescriptionDataElements"] = *billdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billDescriptionListData) {
        dst["billDescriptionListData"] = *billdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::billDescriptionListDataSelectors) {
        dst["billDescriptionListDataSelectors"] = *billdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::identificationData) {
        dst["identificationData"] = *identificationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::identificationDataElements) {
        dst["identificationDataElements"] = *identificationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::identificationListData) {
        dst["identificationListData"] = *identificationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::identificationListDataSelectors) {
        dst["identificationListDataSelectors"] = *identificationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionIdentificationData) {
        dst["sessionIdentificationData"] = *sessionidentificationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionIdentificationDataElements) {
        dst["sessionIdentificationDataElements"] = *sessionidentificationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionIdentificationListData) {
        dst["sessionIdentificationListData"] = *sessionidentificationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionIdentificationListDataSelectors) {
        dst["sessionIdentificationListDataSelectors"] = *sessionidentificationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionMeasurementRelationData) {
        dst["sessionMeasurementRelationData"] = *sessionmeasurementrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionMeasurementRelationDataElements) {
        dst["sessionMeasurementRelationDataElements"] = *sessionmeasurementrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionMeasurementRelationListData) {
        dst["sessionMeasurementRelationListData"] = *sessionmeasurementrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sessionMeasurementRelationListDataSelectors) {
        dst["sessionMeasurementRelationListDataSelectors"] = *sessionmeasurementrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::dataTunnelingCall) {
        dst["dataTunnelingCall"] = *datatunnelingcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::dataTunnelingCallElements) {
        dst["dataTunnelingCallElements"] = *datatunnelingcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceClassificationManufacturerData) {
        dst["deviceClassificationManufacturerData"] = *deviceclassificationmanufacturerdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceClassificationManufacturerDataElements) {
        dst["deviceClassificationManufacturerDataElements"] = *deviceclassificationmanufacturerdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceClassificationUserData) {
        dst["deviceClassificationUserData"] = *deviceclassificationuserdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceClassificationUserDataElements) {
        dst["deviceClassificationUserDataElements"] = *deviceclassificationuserdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueData) {
        dst["deviceConfigurationKeyValueData"] = *deviceconfigurationkeyvaluedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDataElements) {
        dst["deviceConfigurationKeyValueDataElements"] = *deviceconfigurationkeyvaluedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueListData) {
        dst["deviceConfigurationKeyValueListData"] = *deviceconfigurationkeyvaluelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueListDataSelectors) {
        dst["deviceConfigurationKeyValueListDataSelectors"] = *deviceconfigurationkeyvaluelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionData) {
        dst["deviceConfigurationKeyValueDescriptionData"] = *deviceconfigurationkeyvaluedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionDataElements) {
        dst["deviceConfigurationKeyValueDescriptionDataElements"] = *deviceconfigurationkeyvaluedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListData) {
        dst["deviceConfigurationKeyValueDescriptionListData"] = *deviceconfigurationkeyvaluedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueDescriptionListDataSelectors) {
        dst["deviceConfigurationKeyValueDescriptionListDataSelectors"] = *deviceconfigurationkeyvaluedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsData) {
        dst["deviceConfigurationKeyValueConstraintsData"] = *deviceconfigurationkeyvalueconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsDataElements) {
        dst["deviceConfigurationKeyValueConstraintsDataElements"] = *deviceconfigurationkeyvalueconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListData) {
        dst["deviceConfigurationKeyValueConstraintsListData"] = *deviceconfigurationkeyvalueconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceConfigurationKeyValueConstraintsListDataSelectors) {
        dst["deviceConfigurationKeyValueConstraintsListDataSelectors"] = *deviceconfigurationkeyvalueconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisStateData) {
        dst["deviceDiagnosisStateData"] = *devicediagnosisstatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisStateDataElements) {
        dst["deviceDiagnosisStateDataElements"] = *devicediagnosisstatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatData) {
        dst["deviceDiagnosisHeartbeatData"] = *devicediagnosisheartbeatdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisHeartbeatDataElements) {
        dst["deviceDiagnosisHeartbeatDataElements"] = *devicediagnosisheartbeatdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisServiceData) {
        dst["deviceDiagnosisServiceData"] = *devicediagnosisservicedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::deviceDiagnosisServiceDataElements) {
        dst["deviceDiagnosisServiceDataElements"] = *devicediagnosisservicedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionData) {
        dst["electricalConnectionParameterDescriptionData"] = *electricalconnectionparameterdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionDataElements) {
        dst["electricalConnectionParameterDescriptionDataElements"] = *electricalconnectionparameterdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListData) {
        dst["electricalConnectionParameterDescriptionListData"] = *electricalconnectionparameterdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionParameterDescriptionListDataSelectors) {
        dst["electricalConnectionParameterDescriptionListDataSelectors"] = *electricalconnectionparameterdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetData) {
        dst["electricalConnectionPermittedValueSetData"] = *electricalconnectionpermittedvaluesetdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetDataElements) {
        dst["electricalConnectionPermittedValueSetDataElements"] = *electricalconnectionpermittedvaluesetdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListData) {
        dst["electricalConnectionPermittedValueSetListData"] = *electricalconnectionpermittedvaluesetlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionPermittedValueSetListDataSelectors) {
        dst["electricalConnectionPermittedValueSetListDataSelectors"] = *electricalconnectionpermittedvaluesetlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionCharacteristicData) {
        dst["electricalConnectionCharacteristicData"] = *electricalconnectioncharacteristicdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionCharacteristicDataElements) {
        dst["electricalConnectionCharacteristicDataElements"] = *electricalconnectioncharacteristicdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionCharacteristicListData) {
        dst["electricalConnectionCharacteristicListData"] = *electricalconnectioncharacteristiclistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionCharacteristicListDataSelectors) {
        dst["electricalConnectionCharacteristicListDataSelectors"] = *electricalconnectioncharacteristiclistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionStateData) {
        dst["electricalConnectionStateData"] = *electricalconnectionstatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionStateDataElements) {
        dst["electricalConnectionStateDataElements"] = *electricalconnectionstatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionStateListData) {
        dst["electricalConnectionStateListData"] = *electricalconnectionstatelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionStateListDataSelectors) {
        dst["electricalConnectionStateListDataSelectors"] = *electricalconnectionstatelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionDescriptionData) {
        dst["electricalConnectionDescriptionData"] = *electricalconnectiondescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionDescriptionDataElements) {
        dst["electricalConnectionDescriptionDataElements"] = *electricalconnectiondescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionDescriptionListData) {
        dst["electricalConnectionDescriptionListData"] = *electricalconnectiondescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::electricalConnectionDescriptionListDataSelectors) {
        dst["electricalConnectionDescriptionListDataSelectors"] = *electricalconnectiondescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionData) {
        dst["hvacSystemFunctionData"] = *hvacsystemfunctiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionDataElements) {
        dst["hvacSystemFunctionDataElements"] = *hvacsystemfunctiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionListData) {
        dst["hvacSystemFunctionListData"] = *hvacsystemfunctionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionListDataSelectors) {
        dst["hvacSystemFunctionListDataSelectors"] = *hvacsystemfunctionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationData) {
        dst["hvacSystemFunctionOperationModeRelationData"] = *hvacsystemfunctionoperationmoderelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationDataElements) {
        dst["hvacSystemFunctionOperationModeRelationDataElements"] = *hvacsystemfunctionoperationmoderelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListData) {
        dst["hvacSystemFunctionOperationModeRelationListData"] = *hvacsystemfunctionoperationmoderelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionOperationModeRelationListDataSelectors) {
        dst["hvacSystemFunctionOperationModeRelationListDataSelectors"] = *hvacsystemfunctionoperationmoderelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationData) {
        dst["hvacSystemFunctionSetpointRelationData"] = *hvacsystemfunctionsetpointrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationDataElements) {
        dst["hvacSystemFunctionSetpointRelationDataElements"] = *hvacsystemfunctionsetpointrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListData) {
        dst["hvacSystemFunctionSetpointRelationListData"] = *hvacsystemfunctionsetpointrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionSetpointRelationListDataSelectors) {
        dst["hvacSystemFunctionSetpointRelationListDataSelectors"] = *hvacsystemfunctionsetpointrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationData) {
        dst["hvacSystemFunctionPowerSequenceRelationData"] = *hvacsystemfunctionpowersequencerelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationDataElements) {
        dst["hvacSystemFunctionPowerSequenceRelationDataElements"] = *hvacsystemfunctionpowersequencerelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListData) {
        dst["hvacSystemFunctionPowerSequenceRelationListData"] = *hvacsystemfunctionpowersequencerelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionPowerSequenceRelationListDataSelectors) {
        dst["hvacSystemFunctionPowerSequenceRelationListDataSelectors"] = *hvacsystemfunctionpowersequencerelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionData) {
        dst["hvacSystemFunctionDescriptionData"] = *hvacsystemfunctiondescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionDataElements) {
        dst["hvacSystemFunctionDescriptionDataElements"] = *hvacsystemfunctiondescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListData) {
        dst["hvacSystemFunctionDescriptionListData"] = *hvacsystemfunctiondescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacSystemFunctionDescriptionListDataSelectors) {
        dst["hvacSystemFunctionDescriptionListDataSelectors"] = *hvacsystemfunctiondescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOperationModeDescriptionData) {
        dst["hvacOperationModeDescriptionData"] = *hvacoperationmodedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOperationModeDescriptionDataElements) {
        dst["hvacOperationModeDescriptionDataElements"] = *hvacoperationmodedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOperationModeDescriptionListData) {
        dst["hvacOperationModeDescriptionListData"] = *hvacoperationmodedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOperationModeDescriptionListDataSelectors) {
        dst["hvacOperationModeDescriptionListDataSelectors"] = *hvacoperationmodedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunData) {
        dst["hvacOverrunData"] = *hvacoverrundatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunDataElements) {
        dst["hvacOverrunDataElements"] = *hvacoverrundataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunListData) {
        dst["hvacOverrunListData"] = *hvacoverrunlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunListDataSelectors) {
        dst["hvacOverrunListDataSelectors"] = *hvacoverrunlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunDescriptionData) {
        dst["hvacOverrunDescriptionData"] = *hvacoverrundescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunDescriptionDataElements) {
        dst["hvacOverrunDescriptionDataElements"] = *hvacoverrundescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunDescriptionListData) {
        dst["hvacOverrunDescriptionListData"] = *hvacoverrundescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::hvacOverrunDescriptionListDataSelectors) {
        dst["hvacOverrunDescriptionListDataSelectors"] = *hvacoverrundescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointData) {
        dst["setpointData"] = *setpointdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointDataElements) {
        dst["setpointDataElements"] = *setpointdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointListData) {
        dst["setpointListData"] = *setpointlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointListDataSelectors) {
        dst["setpointListDataSelectors"] = *setpointlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointConstraintsData) {
        dst["setpointConstraintsData"] = *setpointconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointConstraintsDataElements) {
        dst["setpointConstraintsDataElements"] = *setpointconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointConstraintsListData) {
        dst["setpointConstraintsListData"] = *setpointconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointConstraintsListDataSelectors) {
        dst["setpointConstraintsListDataSelectors"] = *setpointconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointDescriptionData) {
        dst["setpointDescriptionData"] = *setpointdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointDescriptionDataElements) {
        dst["setpointDescriptionDataElements"] = *setpointdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointDescriptionListData) {
        dst["setpointDescriptionListData"] = *setpointdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::setpointDescriptionListDataSelectors) {
        dst["setpointDescriptionListDataSelectors"] = *setpointdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableData) {
        dst["timeTableData"] = *timetabledatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableDataElements) {
        dst["timeTableDataElements"] = *timetabledataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableListData) {
        dst["timeTableListData"] = *timetablelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableListDataSelectors) {
        dst["timeTableListDataSelectors"] = *timetablelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableConstraintsData) {
        dst["timeTableConstraintsData"] = *timetableconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableConstraintsDataElements) {
        dst["timeTableConstraintsDataElements"] = *timetableconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableConstraintsListData) {
        dst["timeTableConstraintsListData"] = *timetableconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableConstraintsListDataSelectors) {
        dst["timeTableConstraintsListDataSelectors"] = *timetableconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableDescriptionData) {
        dst["timeTableDescriptionData"] = *timetabledescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableDescriptionDataElements) {
        dst["timeTableDescriptionDataElements"] = *timetabledescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableDescriptionListData) {
        dst["timeTableDescriptionListData"] = *timetabledescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeTableDescriptionListDataSelectors) {
        dst["timeTableDescriptionListDataSelectors"] = *timetabledescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableData) {
        dst["incentiveTableData"] = *incentivetabledatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableDataElements) {
        dst["incentiveTableDataElements"] = *incentivetabledataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableDataSelectors) {
        dst["incentiveTableDataSelectors"] = *incentivetabledataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableDescriptionData) {
        dst["incentiveTableDescriptionData"] = *incentivetabledescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableDescriptionDataElements) {
        dst["incentiveTableDescriptionDataElements"] = *incentivetabledescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableDescriptionDataSelectors) {
        dst["incentiveTableDescriptionDataSelectors"] = *incentivetabledescriptiondataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableConstraintsData) {
        dst["incentiveTableConstraintsData"] = *incentivetableconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableConstraintsDataElements) {
        dst["incentiveTableConstraintsDataElements"] = *incentivetableconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveTableConstraintsDataSelectors) {
        dst["incentiveTableConstraintsDataSelectors"] = *incentivetableconstraintsdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffOverallConstraintsData) {
        dst["tariffOverallConstraintsData"] = *tariffoverallconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffOverallConstraintsDataElements) {
        dst["tariffOverallConstraintsDataElements"] = *tariffoverallconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffData) {
        dst["tariffData"] = *tariffdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffDataElements) {
        dst["tariffDataElements"] = *tariffdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffListData) {
        dst["tariffListData"] = *tarifflistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffListDataSelectors) {
        dst["tariffListDataSelectors"] = *tarifflistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffTierRelationData) {
        dst["tariffTierRelationData"] = *tarifftierrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffTierRelationDataElements) {
        dst["tariffTierRelationDataElements"] = *tarifftierrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffTierRelationListData) {
        dst["tariffTierRelationListData"] = *tarifftierrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffTierRelationListDataSelectors) {
        dst["tariffTierRelationListDataSelectors"] = *tarifftierrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffBoundaryRelationData) {
        dst["tariffBoundaryRelationData"] = *tariffboundaryrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffBoundaryRelationDataElements) {
        dst["tariffBoundaryRelationDataElements"] = *tariffboundaryrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffBoundaryRelationListData) {
        dst["tariffBoundaryRelationListData"] = *tariffboundaryrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffBoundaryRelationListDataSelectors) {
        dst["tariffBoundaryRelationListDataSelectors"] = *tariffboundaryrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffDescriptionData) {
        dst["tariffDescriptionData"] = *tariffdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffDescriptionDataElements) {
        dst["tariffDescriptionDataElements"] = *tariffdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffDescriptionListData) {
        dst["tariffDescriptionListData"] = *tariffdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tariffDescriptionListDataSelectors) {
        dst["tariffDescriptionListDataSelectors"] = *tariffdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryData) {
        dst["tierBoundaryData"] = *tierboundarydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryDataElements) {
        dst["tierBoundaryDataElements"] = *tierboundarydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryListData) {
        dst["tierBoundaryListData"] = *tierboundarylistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryListDataSelectors) {
        dst["tierBoundaryListDataSelectors"] = *tierboundarylistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryDescriptionData) {
        dst["tierBoundaryDescriptionData"] = *tierboundarydescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryDescriptionDataElements) {
        dst["tierBoundaryDescriptionDataElements"] = *tierboundarydescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryDescriptionListData) {
        dst["tierBoundaryDescriptionListData"] = *tierboundarydescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierBoundaryDescriptionListDataSelectors) {
        dst["tierBoundaryDescriptionListDataSelectors"] = *tierboundarydescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::commodityData) {
        dst["commodityData"] = *commoditydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::commodityDataElements) {
        dst["commodityDataElements"] = *commoditydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::commodityListData) {
        dst["commodityListData"] = *commoditylistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::commodityListDataSelectors) {
        dst["commodityListDataSelectors"] = *commoditylistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierData) {
        dst["tierData"] = *tierdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierDataElements) {
        dst["tierDataElements"] = *tierdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierListData) {
        dst["tierListData"] = *tierlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierListDataSelectors) {
        dst["tierListDataSelectors"] = *tierlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierIncentiveRelationData) {
        dst["tierIncentiveRelationData"] = *tierincentiverelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierIncentiveRelationDataElements) {
        dst["tierIncentiveRelationDataElements"] = *tierincentiverelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierIncentiveRelationListData) {
        dst["tierIncentiveRelationListData"] = *tierincentiverelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierIncentiveRelationListDataSelectors) {
        dst["tierIncentiveRelationListDataSelectors"] = *tierincentiverelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierDescriptionData) {
        dst["tierDescriptionData"] = *tierdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierDescriptionDataElements) {
        dst["tierDescriptionDataElements"] = *tierdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierDescriptionListData) {
        dst["tierDescriptionListData"] = *tierdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::tierDescriptionListDataSelectors) {
        dst["tierDescriptionListDataSelectors"] = *tierdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveData) {
        dst["incentiveData"] = *incentivedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveDataElements) {
        dst["incentiveDataElements"] = *incentivedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveListData) {
        dst["incentiveListData"] = *incentivelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveListDataSelectors) {
        dst["incentiveListDataSelectors"] = *incentivelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveDescriptionData) {
        dst["incentiveDescriptionData"] = *incentivedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveDescriptionDataElements) {
        dst["incentiveDescriptionDataElements"] = *incentivedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveDescriptionListData) {
        dst["incentiveDescriptionListData"] = *incentivedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::incentiveDescriptionListDataSelectors) {
        dst["incentiveDescriptionListDataSelectors"] = *incentivedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlNodeData) {
        dst["loadControlNodeData"] = *loadcontrolnodedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlNodeDataElements) {
        dst["loadControlNodeDataElements"] = *loadcontrolnodedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlEventData) {
        dst["loadControlEventData"] = *loadcontroleventdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlEventDataElements) {
        dst["loadControlEventDataElements"] = *loadcontroleventdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlEventListData) {
        dst["loadControlEventListData"] = *loadcontroleventlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlEventListDataSelectors) {
        dst["loadControlEventListDataSelectors"] = *loadcontroleventlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlStateData) {
        dst["loadControlStateData"] = *loadcontrolstatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlStateDataElements) {
        dst["loadControlStateDataElements"] = *loadcontrolstatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlStateListData) {
        dst["loadControlStateListData"] = *loadcontrolstatelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlStateListDataSelectors) {
        dst["loadControlStateListDataSelectors"] = *loadcontrolstatelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitData) {
        dst["loadControlLimitData"] = *loadcontrollimitdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitDataElements) {
        dst["loadControlLimitDataElements"] = *loadcontrollimitdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitListData) {
        dst["loadControlLimitListData"] = *loadcontrollimitlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitListDataSelectors) {
        dst["loadControlLimitListDataSelectors"] = *loadcontrollimitlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitConstraintsData) {
        dst["loadControlLimitConstraintsData"] = *loadcontrollimitconstraintsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitConstraintsDataElements) {
        dst["loadControlLimitConstraintsDataElements"] = *loadcontrollimitconstraintsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitConstraintsListData) {
        dst["loadControlLimitConstraintsListData"] = *loadcontrollimitconstraintslistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitConstraintsListDataSelectors) {
        dst["loadControlLimitConstraintsListDataSelectors"] = *loadcontrollimitconstraintslistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitDescriptionData) {
        dst["loadControlLimitDescriptionData"] = *loadcontrollimitdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitDescriptionDataElements) {
        dst["loadControlLimitDescriptionDataElements"] = *loadcontrollimitdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitDescriptionListData) {
        dst["loadControlLimitDescriptionListData"] = *loadcontrollimitdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::loadControlLimitDescriptionListDataSelectors) {
        dst["loadControlLimitDescriptionListDataSelectors"] = *loadcontrollimitdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementAddNodeCall) {
        dst["networkManagementAddNodeCall"] = *networkmanagementaddnodecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementAddNodeCallElements) {
        dst["networkManagementAddNodeCallElements"] = *networkmanagementaddnodecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementRemoveNodeCall) {
        dst["networkManagementRemoveNodeCall"] = *networkmanagementremovenodecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementRemoveNodeCallElements) {
        dst["networkManagementRemoveNodeCallElements"] = *networkmanagementremovenodecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementModifyNodeCall) {
        dst["networkManagementModifyNodeCall"] = *networkmanagementmodifynodecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementModifyNodeCallElements) {
        dst["networkManagementModifyNodeCallElements"] = *networkmanagementmodifynodecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementScanNetworkCall) {
        dst["networkManagementScanNetworkCall"] = *networkmanagementscannetworkcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementScanNetworkCallElements) {
        dst["networkManagementScanNetworkCallElements"] = *networkmanagementscannetworkcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDiscoverCall) {
        dst["networkManagementDiscoverCall"] = *networkmanagementdiscovercalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDiscoverCallElements) {
        dst["networkManagementDiscoverCallElements"] = *networkmanagementdiscovercallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementAbortCall) {
        dst["networkManagementAbortCall"] = *networkmanagementabortcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementAbortCallElements) {
        dst["networkManagementAbortCallElements"] = *networkmanagementabortcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementProcessStateData) {
        dst["networkManagementProcessStateData"] = *networkmanagementprocessstatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementProcessStateDataElements) {
        dst["networkManagementProcessStateDataElements"] = *networkmanagementprocessstatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementJoiningModeData) {
        dst["networkManagementJoiningModeData"] = *networkmanagementjoiningmodedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementJoiningModeDataElements) {
        dst["networkManagementJoiningModeDataElements"] = *networkmanagementjoiningmodedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementReportCandidateData) {
        dst["networkManagementReportCandidateData"] = *networkmanagementreportcandidatedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementReportCandidateDataElements) {
        dst["networkManagementReportCandidateDataElements"] = *networkmanagementreportcandidatedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionData) {
        dst["networkManagementDeviceDescriptionData"] = *networkmanagementdevicedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionDataElements) {
        dst["networkManagementDeviceDescriptionDataElements"] = *networkmanagementdevicedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListData) {
        dst["networkManagementDeviceDescriptionListData"] = *networkmanagementdevicedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementDeviceDescriptionListDataSelectors) {
        dst["networkManagementDeviceDescriptionListDataSelectors"] = *networkmanagementdevicedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementEntityDescriptionData) {
        dst["networkManagementEntityDescriptionData"] = *networkmanagemententitydescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementEntityDescriptionDataElements) {
        dst["networkManagementEntityDescriptionDataElements"] = *networkmanagemententitydescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementEntityDescriptionListData) {
        dst["networkManagementEntityDescriptionListData"] = *networkmanagemententitydescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementEntityDescriptionListDataSelectors) {
        dst["networkManagementEntityDescriptionListDataSelectors"] = *networkmanagemententitydescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionData) {
        dst["networkManagementFeatureDescriptionData"] = *networkmanagementfeaturedescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionDataElements) {
        dst["networkManagementFeatureDescriptionDataElements"] = *networkmanagementfeaturedescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListData) {
        dst["networkManagementFeatureDescriptionListData"] = *networkmanagementfeaturedescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::networkManagementFeatureDescriptionListDataSelectors) {
        dst["networkManagementFeatureDescriptionListDataSelectors"] = *networkmanagementfeaturedescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryData) {
        dst["nodeManagementDetailedDiscoveryData"] = *nodemanagementdetaileddiscoverydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataElements) {
        dst["nodeManagementDetailedDiscoveryDataElements"] = *nodemanagementdetaileddiscoverydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDetailedDiscoveryDataSelectors) {
        dst["nodeManagementDetailedDiscoveryDataSelectors"] = *nodemanagementdetaileddiscoverydataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingData) {
        dst["nodeManagementBindingData"] = *nodemanagementbindingdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingDataElements) {
        dst["nodeManagementBindingDataElements"] = *nodemanagementbindingdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingDataSelectors) {
        dst["nodeManagementBindingDataSelectors"] = *nodemanagementbindingdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingRequestCall) {
        dst["nodeManagementBindingRequestCall"] = *nodemanagementbindingrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingRequestCallElements) {
        dst["nodeManagementBindingRequestCallElements"] = *nodemanagementbindingrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingDeleteCall) {
        dst["nodeManagementBindingDeleteCall"] = *nodemanagementbindingdeletecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementBindingDeleteCallElements) {
        dst["nodeManagementBindingDeleteCallElements"] = *nodemanagementbindingdeletecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionData) {
        dst["nodeManagementSubscriptionData"] = *nodemanagementsubscriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionDataElements) {
        dst["nodeManagementSubscriptionDataElements"] = *nodemanagementsubscriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionDataSelectors) {
        dst["nodeManagementSubscriptionDataSelectors"] = *nodemanagementsubscriptiondataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCall) {
        dst["nodeManagementSubscriptionRequestCall"] = *nodemanagementsubscriptionrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionRequestCallElements) {
        dst["nodeManagementSubscriptionRequestCallElements"] = *nodemanagementsubscriptionrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCall) {
        dst["nodeManagementSubscriptionDeleteCall"] = *nodemanagementsubscriptiondeletecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementSubscriptionDeleteCallElements) {
        dst["nodeManagementSubscriptionDeleteCallElements"] = *nodemanagementsubscriptiondeletecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDestinationData) {
        dst["nodeManagementDestinationData"] = *nodemanagementdestinationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDestinationDataElements) {
        dst["nodeManagementDestinationDataElements"] = *nodemanagementdestinationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDestinationListData) {
        dst["nodeManagementDestinationListData"] = *nodemanagementdestinationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementDestinationListDataSelectors) {
        dst["nodeManagementDestinationListDataSelectors"] = *nodemanagementdestinationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementUseCaseData) {
        dst["nodeManagementUseCaseData"] = *nodemanagementusecasedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementUseCaseDataElements) {
        dst["nodeManagementUseCaseDataElements"] = *nodemanagementusecasedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::nodeManagementUseCaseDataSelectors) {
        dst["nodeManagementUseCaseDataSelectors"] = *nodemanagementusecasedataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementEntryData) {
        dst["subscriptionManagementEntryData"] = *subscriptionmanagemententrydatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementEntryDataElements) {
        dst["subscriptionManagementEntryDataElements"] = *subscriptionmanagemententrydataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementEntryListData) {
        dst["subscriptionManagementEntryListData"] = *subscriptionmanagemententrylistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementEntryListDataSelectors) {
        dst["subscriptionManagementEntryListDataSelectors"] = *subscriptionmanagemententrylistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementRequestCall) {
        dst["subscriptionManagementRequestCall"] = *subscriptionmanagementrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementRequestCallElements) {
        dst["subscriptionManagementRequestCallElements"] = *subscriptionmanagementrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementDeleteCall) {
        dst["subscriptionManagementDeleteCall"] = *subscriptionmanagementdeletecalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::subscriptionManagementDeleteCallElements) {
        dst["subscriptionManagementDeleteCallElements"] = *subscriptionmanagementdeletecallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::useCaseInformationData) {
        dst["useCaseInformationData"] = *usecaseinformationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::useCaseInformationDataElements) {
        dst["useCaseInformationDataElements"] = *usecaseinformationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::useCaseInformationListData) {
        dst["useCaseInformationListData"] = *usecaseinformationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::useCaseInformationListDataSelectors) {
        dst["useCaseInformationListDataSelectors"] = *usecaseinformationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::specificationVersionData) {
        dst["specificationVersionData"] = *specificationversiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::specificationVersionDataElements) {
        dst["specificationVersionDataElements"] = *specificationversiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::specificationVersionListData) {
        dst["specificationVersionListData"] = *specificationversionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::specificationVersionListDataSelectors) {
        dst["specificationVersionListDataSelectors"] = *specificationversionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsInterruptData) {
        dst["operatingConstraintsInterruptData"] = *operatingconstraintsinterruptdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsInterruptDataElements) {
        dst["operatingConstraintsInterruptDataElements"] = *operatingconstraintsinterruptdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsInterruptListData) {
        dst["operatingConstraintsInterruptListData"] = *operatingconstraintsinterruptlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsInterruptListDataSelectors) {
        dst["operatingConstraintsInterruptListDataSelectors"] = *operatingconstraintsinterruptlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsDurationData) {
        dst["operatingConstraintsDurationData"] = *operatingconstraintsdurationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsDurationDataElements) {
        dst["operatingConstraintsDurationDataElements"] = *operatingconstraintsdurationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsDurationListData) {
        dst["operatingConstraintsDurationListData"] = *operatingconstraintsdurationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsDurationListDataSelectors) {
        dst["operatingConstraintsDurationListDataSelectors"] = *operatingconstraintsdurationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionData) {
        dst["operatingConstraintsPowerDescriptionData"] = *operatingconstraintspowerdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionDataElements) {
        dst["operatingConstraintsPowerDescriptionDataElements"] = *operatingconstraintspowerdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListData) {
        dst["operatingConstraintsPowerDescriptionListData"] = *operatingconstraintspowerdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerDescriptionListDataSelectors) {
        dst["operatingConstraintsPowerDescriptionListDataSelectors"] = *operatingconstraintspowerdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeData) {
        dst["operatingConstraintsPowerRangeData"] = *operatingconstraintspowerrangedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeDataElements) {
        dst["operatingConstraintsPowerRangeDataElements"] = *operatingconstraintspowerrangedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListData) {
        dst["operatingConstraintsPowerRangeListData"] = *operatingconstraintspowerrangelistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerRangeListDataSelectors) {
        dst["operatingConstraintsPowerRangeListDataSelectors"] = *operatingconstraintspowerrangelistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelData) {
        dst["operatingConstraintsPowerLevelData"] = *operatingconstraintspowerleveldatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelDataElements) {
        dst["operatingConstraintsPowerLevelDataElements"] = *operatingconstraintspowerleveldataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListData) {
        dst["operatingConstraintsPowerLevelListData"] = *operatingconstraintspowerlevellistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsPowerLevelListDataSelectors) {
        dst["operatingConstraintsPowerLevelListDataSelectors"] = *operatingconstraintspowerlevellistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationData) {
        dst["operatingConstraintsResumeImplicationData"] = *operatingconstraintsresumeimplicationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationDataElements) {
        dst["operatingConstraintsResumeImplicationDataElements"] = *operatingconstraintsresumeimplicationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListData) {
        dst["operatingConstraintsResumeImplicationListData"] = *operatingconstraintsresumeimplicationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::operatingConstraintsResumeImplicationListDataSelectors) {
        dst["operatingConstraintsResumeImplicationListDataSelectors"] = *operatingconstraintsresumeimplicationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingData) {
        dst["sensingData"] = *sensingdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingDataElements) {
        dst["sensingDataElements"] = *sensingdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingListData) {
        dst["sensingListData"] = *sensinglistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingListDataSelectors) {
        dst["sensingListDataSelectors"] = *sensinglistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingDescriptionData) {
        dst["sensingDescriptionData"] = *sensingdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::sensingDescriptionDataElements) {
        dst["sensingDescriptionDataElements"] = *sensingdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsData) {
        dst["smartEnergyManagementPsData"] = *smartenergymanagementpsdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsDataElements) {
        dst["smartEnergyManagementPsDataElements"] = *smartenergymanagementpsdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsDataSelectors) {
        dst["smartEnergyManagementPsDataSelectors"] = *smartenergymanagementpsdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceData) {
        dst["smartEnergyManagementPsPriceData"] = *smartenergymanagementpspricedatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataElements) {
        dst["smartEnergyManagementPsPriceDataElements"] = *smartenergymanagementpspricedataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceDataSelectors) {
        dst["smartEnergyManagementPsPriceDataSelectors"] = *smartenergymanagementpspricedataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCall) {
        dst["smartEnergyManagementPsConfigurationRequestCall"] = *smartenergymanagementpsconfigurationrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsConfigurationRequestCallElements) {
        dst["smartEnergyManagementPsConfigurationRequestCallElements"] = *smartenergymanagementpsconfigurationrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCall) {
        dst["smartEnergyManagementPsPriceCalculationRequestCall"] = *smartenergymanagementpspricecalculationrequestcalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::smartEnergyManagementPsPriceCalculationRequestCallElements) {
        dst["smartEnergyManagementPsPriceCalculationRequestCallElements"] = *smartenergymanagementpspricecalculationrequestcallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::stateInformationData) {
        dst["stateInformationData"] = *stateinformationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::stateInformationDataElements) {
        dst["stateInformationDataElements"] = *stateinformationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::stateInformationListData) {
        dst["stateInformationListData"] = *stateinformationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::stateInformationListDataSelectors) {
        dst["stateInformationListDataSelectors"] = *stateinformationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionData) {
        dst["supplyConditionData"] = *supplyconditiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionDataElements) {
        dst["supplyConditionDataElements"] = *supplyconditiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionListData) {
        dst["supplyConditionListData"] = *supplyconditionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionListDataSelectors) {
        dst["supplyConditionListDataSelectors"] = *supplyconditionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionDescriptionData) {
        dst["supplyConditionDescriptionData"] = *supplyconditiondescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionDescriptionDataElements) {
        dst["supplyConditionDescriptionDataElements"] = *supplyconditiondescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionDescriptionListData) {
        dst["supplyConditionDescriptionListData"] = *supplyconditiondescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionDescriptionListDataSelectors) {
        dst["supplyConditionDescriptionListDataSelectors"] = *supplyconditiondescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionThresholdRelationData) {
        dst["supplyConditionThresholdRelationData"] = *supplyconditionthresholdrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionThresholdRelationDataElements) {
        dst["supplyConditionThresholdRelationDataElements"] = *supplyconditionthresholdrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionThresholdRelationListData) {
        dst["supplyConditionThresholdRelationListData"] = *supplyconditionthresholdrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::supplyConditionThresholdRelationListDataSelectors) {
        dst["supplyConditionThresholdRelationListDataSelectors"] = *supplyconditionthresholdrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobData) {
        dst["taskManagementJobData"] = *taskmanagementjobdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobDataElements) {
        dst["taskManagementJobDataElements"] = *taskmanagementjobdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobListData) {
        dst["taskManagementJobListData"] = *taskmanagementjoblistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobListDataSelectors) {
        dst["taskManagementJobListDataSelectors"] = *taskmanagementjoblistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobRelationData) {
        dst["taskManagementJobRelationData"] = *taskmanagementjobrelationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobRelationDataElements) {
        dst["taskManagementJobRelationDataElements"] = *taskmanagementjobrelationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobRelationListData) {
        dst["taskManagementJobRelationListData"] = *taskmanagementjobrelationlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobRelationListDataSelectors) {
        dst["taskManagementJobRelationListDataSelectors"] = *taskmanagementjobrelationlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobDescriptionData) {
        dst["taskManagementJobDescriptionData"] = *taskmanagementjobdescriptiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobDescriptionDataElements) {
        dst["taskManagementJobDescriptionDataElements"] = *taskmanagementjobdescriptiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobDescriptionListData) {
        dst["taskManagementJobDescriptionListData"] = *taskmanagementjobdescriptionlistdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementJobDescriptionListDataSelectors) {
        dst["taskManagementJobDescriptionListDataSelectors"] = *taskmanagementjobdescriptionlistdataselectorstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementOverviewData) {
        dst["taskManagementOverviewData"] = *taskmanagementoverviewdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::taskManagementOverviewDataElements) {
        dst["taskManagementOverviewDataElements"] = *taskmanagementoverviewdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeInformationData) {
        dst["timeInformationData"] = *timeinformationdatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeInformationDataElements) {
        dst["timeInformationDataElements"] = *timeinformationdataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeDistributorData) {
        dst["timeDistributorData"] = *timedistributordatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeDistributorDataElements) {
        dst["timeDistributorDataElements"] = *timedistributordataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timePrecisionData) {
        dst["timePrecisionData"] = *timeprecisiondatatype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timePrecisionDataElements) {
        dst["timePrecisionDataElements"] = *timeprecisiondataelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeDistributorEnquiryCall) {
        dst["timeDistributorEnquiryCall"] = *timedistributorenquirycalltype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::timeDistributorEnquiryCallElements) {
        dst["timeDistributorEnquiryCallElements"] = *timedistributorenquirycallelementstype;
    }

    if (last_cmd == SpineDataTypeHandler::Function::header) {
        dst["header"] = *headertype;
    }
}
