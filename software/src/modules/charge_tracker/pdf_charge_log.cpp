/* esp32-firmware
 * Copyright (C) 2023 Erik Fleckstein <erik@tinkerforge.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include "pdf_charge_log.h"

#include <stdio.h>
#include <string.h>

#define CHARGE_TRACKER_PDF_LOGO_WARP 0
#define CHARGE_TRACKER_PDF_LOGO_ELTAKO 1

#include "pdfgen.h"

#if !defined(CHARGE_TRACKER_PDF_LOGO)
    #error "CHARGE_TRACKER_PDF_LOGO not defined!"
#elif CHARGE_TRACKER_PDF_LOGO == CHARGE_TRACKER_PDF_LOGO_WARP
    static constexpr uint32_t logo_background = 0xFF545454;
    static constexpr uint8_t  logo_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x23,
    0x01, 0x03, 0x00, 0x00, 0x00, 0xb4, 0x0d, 0xcd, 0xb9, 0x00, 0x00, 0x00,
    0x06, 0x50, 0x4c, 0x54, 0x45, 0xf0, 0x1f, 0x56, 0xff, 0xff, 0xff, 0xbc,
    0x9d, 0xd6, 0xe9, 0x00, 0x00, 0x00, 0x01, 0x74, 0x52, 0x4e, 0x53, 0x00,
    0x40, 0xe6, 0xd8, 0x66, 0x00, 0x00, 0x00, 0x4d, 0x49, 0x44, 0x41, 0x54,
    0x38, 0xcb, 0x63, 0x78, 0xc0, 0xc0, 0xc0, 0xce, 0xc0, 0xc0, 0x50, 0xc0,
    0xfe, 0x1f, 0x02, 0x0e, 0xc8, 0x43, 0x19, 0x0c, 0xf5, 0x10, 0xfa, 0x07,
    0x03, 0x75, 0x95, 0x30, 0x40, 0x00, 0xe3, 0x01, 0x28, 0x83, 0x1d, 0x4a,
    0x33, 0x58, 0x8c, 0x2a, 0x19, 0x42, 0x4a, 0xe8, 0x96, 0x5e, 0xd8, 0x61,
    0x6e, 0x91, 0x81, 0x39, 0x02, 0xe6, 0xbc, 0xe1, 0xa2, 0x84, 0x1d, 0x45,
    0x09, 0x72, 0x80, 0x0f, 0x03, 0x25, 0xd0, 0x78, 0xfd, 0x40, 0x6b, 0x25,
    0x00, 0xcd, 0xa5, 0xe8, 0x0e, 0xf6, 0x3c, 0x2d, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };
#elif CHARGE_TRACKER_PDF_LOGO == CHARGE_TRACKER_PDF_LOGO_ELTAKO
    static constexpr uint32_t logo_background = 0xFF0064AF;
    static constexpr uint8_t  logo_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x2e, 0x00, 0x00, 0x00, 0x4d,
    0x08, 0x03, 0x00, 0x00, 0x00, 0x2f, 0x89, 0x79, 0x31, 0x00, 0x00, 0x00,
    0x30, 0x50, 0x4c, 0x54, 0x45, 0x00, 0x64, 0xaf, 0x2b, 0x6b, 0xb1, 0x3a,
    0x71, 0xb4, 0x52, 0x7c, 0xb8, 0x69, 0x8a, 0xbd, 0x7b, 0x95, 0xc2, 0x89,
    0x9f, 0xc7, 0x98, 0xaa, 0xcd, 0xa6, 0xb4, 0xd2, 0xb3, 0xbf, 0xd8, 0xbf,
    0xc9, 0xdd, 0xcc, 0xd3, 0xe3, 0xd7, 0xdc, 0xe9, 0xe2, 0xe6, 0xef, 0xef,
    0xf1, 0xf6, 0xff, 0xff, 0xff, 0xcf, 0x55, 0x87, 0xa8, 0x00, 0x00, 0x07,
    0x98, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xed, 0x5b, 0xe9, 0xda, 0x22,
    0xad, 0x0e, 0x6c, 0xf6, 0x2d, 0xa4, 0xef, 0xff, 0x6e, 0xcf, 0x99, 0x7d,
    0xfa, 0x35, 0x45, 0xa1, 0x8f, 0xfa, 0xcd, 0x56, 0x7f, 0x15, 0x81, 0x4a,
    0x91, 0x84, 0x04, 0x8f, 0x7f, 0x78, 0x01, 0x5c, 0xaa, 0x43, 0x30, 0xc6,
    0xf1, 0x0f, 0xdf, 0xe1, 0xf2, 0xd0, 0x73, 0x89, 0x76, 0x7c, 0xc5, 0x3f,
    0xb8, 0xaa, 0x27, 0x81, 0x7a, 0x30, 0x36, 0x94, 0x36, 0xc6, 0xe8, 0x25,
    0x1c, 0x7f, 0x0b, 0x8a, 0x9e, 0x14, 0xdd, 0xe6, 0xaa, 0xce, 0xf3, 0x1b,
    0x66, 0x71, 0xc7, 0x12, 0xbe, 0xf5, 0x9f, 0x10, 0x9f, 0xbb, 0x85, 0xf1,
    0x33, 0xfa, 0xf1, 0x3a, 0x04, 0x39, 0x37, 0x10, 0xac, 0x91, 0xfd, 0xbc,
    0x60, 0xa6, 0x63, 0x85, 0xc6, 0xd5, 0xfa, 0x28, 0x9c, 0x02, 0xc7, 0xf1,
    0x6e, 0x69, 0x61, 0x71, 0xf9, 0x7e, 0xde, 0x60, 0xc5, 0x97, 0xd7, 0xd7,
    0xed, 0xa8, 0x9e, 0xaf, 0x33, 0x05, 0x36, 0x39, 0x46, 0xd8, 0xa3, 0x59,
    0xc3, 0x1f, 0x2d, 0x2e, 0x0f, 0x0f, 0x22, 0x11, 0x97, 0xeb, 0x38, 0x7e,
    0xbe, 0x5f, 0x5c, 0xe5, 0x3d, 0xe2, 0x0a, 0xf3, 0xdc, 0x43, 0xd8, 0x1d,
    0xa8, 0xd0, 0xdd, 0xf7, 0xb7, 0x89, 0xab, 0xbe, 0x97, 0x2d, 0x2e, 0xae,
    0x88, 0xfd, 0x5d, 0x46, 0x73, 0x9d, 0x6f, 0x13, 0x97, 0x7b, 0x39, 0x5b,
    0x04, 0x61, 0x9b, 0xad, 0xb3, 0xfd, 0x91, 0xe2, 0xc2, 0x6c, 0x71, 0x71,
    0x05, 0x3d, 0x31, 0xc0, 0x5d, 0x29, 0xfe, 0xee, 0xe2, 0x02, 0x5e, 0x7e,
    0x4a, 0xaf, 0x25, 0xc5, 0x18, 0xbc, 0xfb, 0x04, 0x1f, 0x42, 0x4c, 0xfe,
    0x3a, 0xf0, 0x42, 0xf3, 0xac, 0x31, 0xfe, 0x1c, 0x24, 0xe5, 0x30, 0x31,
    0xde, 0x26, 0xae, 0x72, 0xbc, 0x04, 0xc3, 0xa0, 0xaa, 0xa5, 0x8d, 0x8d,
    0x5c, 0x68, 0xae, 0xee, 0xa2, 0x1d, 0x44, 0x57, 0x3a, 0xdf, 0x95, 0x73,
    0xcd, 0xd7, 0x88, 0xab, 0xde, 0x92, 0x95, 0xee, 0x4e, 0xd4, 0x34, 0x5e,
    0x28, 0xc4, 0x74, 0xc9, 0x6f, 0x2e, 0xae, 0x74, 0xeb, 0xa0, 0xdc, 0xdd,
    0x03, 0x67, 0xb8, 0x3a, 0x72, 0xe8, 0xbb, 0xf2, 0x0b, 0x7d, 0x71, 0xbb,
    0xda, 0xfc, 0x35, 0x8e, 0x4b, 0x1f, 0xac, 0xcf, 0xf8, 0x69, 0xb1, 0x75,
    0xf4, 0xf5, 0xef, 0xcc, 0xd7, 0xf9, 0x62, 0xff, 0x0e, 0x71, 0x0d, 0xc0,
    0x16, 0x45, 0xb7, 0x2f, 0x3c, 0xb2, 0xcc, 0xbb, 0xca, 0x6f, 0x2e, 0xae,
    0xf2, 0x28, 0x5b, 0xf1, 0xea, 0xb7, 0xbe, 0xc1, 0x9f, 0xdf, 0x61, 0xf8,
    0x25, 0xf7, 0x9b, 0x8b, 0x2b, 0x28, 0x60, 0x8b, 0x42, 0xec, 0xf4, 0xbd,
    0x2e, 0x3d, 0x7d, 0x7d, 0xe1, 0x8e, 0xfa, 0x1b, 0xc4, 0x35, 0x40, 0x6a,
    0x49, 0x91, 0x6d, 0x86, 0xdd, 0x5c, 0x91, 0xe1, 0xf4, 0x75, 0xe2, 0x0a,
    0xfc, 0x06, 0xc6, 0x41, 0x37, 0x7d, 0x85, 0xe0, 0x1d, 0x40, 0x97, 0x2d,
    0xb6, 0x7c, 0xd4, 0xff, 0x71, 0xe2, 0xf2, 0x0a, 0x6a, 0x54, 0x14, 0xc5,
    0x1e, 0x13, 0x74, 0x59, 0x45, 0xd4, 0xd7, 0x65, 0x91, 0xf1, 0x0d, 0xe2,
    0x6a, 0xbc, 0x02, 0x4a, 0xc5, 0x55, 0x81, 0x43, 0x8b, 0x3f, 0x76, 0x22,
    0x5f, 0x31, 0xaf, 0x02, 0x18, 0x5f, 0xd1, 0x9e, 0xef, 0x55, 0xe4, 0x78,
    0x01, 0x22, 0x77, 0xf3, 0xf4, 0x10, 0x4f, 0x40, 0xbf, 0x2c, 0xef, 0x58,
    0x4f, 0x3f, 0x94, 0xc9, 0x12, 0x97, 0x73, 0x21, 0xf8, 0xe7, 0x69, 0x58,
    0xce, 0x47, 0x4d, 0x22, 0xa6, 0x20, 0x8b, 0x29, 0xd4, 0x44, 0xd8, 0x92,
    0xe7, 0x6f, 0x45, 0x5b, 0x97, 0xa9, 0x7a, 0x7e, 0x82, 0x4a, 0x0b, 0xaf,
    0xf0, 0xf3, 0x1a, 0x1e, 0x90, 0xe5, 0x00, 0xbf, 0x27, 0xc6, 0xb9, 0x05,
    0x48, 0xcf, 0xda, 0x0a, 0x46, 0xf7, 0xc7, 0x0e, 0x9c, 0x23, 0xfe, 0xe7,
    0xc1, 0xe2, 0x40, 0x37, 0x3c, 0xd4, 0x91, 0xf4, 0xb4, 0x3c, 0x57, 0x21,
    0x6c, 0x0d, 0xbc, 0x78, 0x07, 0xd6, 0x8f, 0xb2, 0x5f, 0x8c, 0x19, 0x49,
    0xcc, 0x2b, 0x5d, 0xa6, 0xaa, 0xaa, 0xb4, 0xb8, 0x99, 0xcf, 0x97, 0x07,
    0x02, 0x6a, 0x07, 0x6c, 0xf5, 0xc5, 0x95, 0x94, 0x6b, 0x3a, 0xd6, 0x31,
    0xf5, 0x3b, 0xe6, 0x27, 0x88, 0xc8, 0x9c, 0x53, 0x55, 0x25, 0x99, 0xd9,
    0x2f, 0x83, 0xc6, 0x15, 0x57, 0x72, 0x71, 0x0e, 0x79, 0xcb, 0x22, 0xda,
    0x00, 0x3c, 0x26, 0x3a, 0xda, 0x6c, 0xa9, 0x67, 0xdd, 0x38, 0xac, 0x69,
    0x5f, 0xd7, 0x52, 0x51, 0x60, 0x3e, 0x02, 0x98, 0xb6, 0x84, 0x76, 0x33,
    0x7a, 0x04, 0x28, 0x2e, 0x0e, 0xc1, 0x7e, 0x75, 0x00, 0xe7, 0x91, 0x51,
    0xae, 0x4d, 0x77, 0xe1, 0x1a, 0xdb, 0xba, 0x22, 0xdf, 0x00, 0x80, 0xaf,
    0xf3, 0x78, 0x3e, 0x4d, 0xa4, 0x94, 0x76, 0x8f, 0x2b, 0x0e, 0xb7, 0x1f,
    0x15, 0xa4, 0x98, 0x3a, 0xbf, 0xe1, 0xba, 0x9e, 0xf9, 0x15, 0x1f, 0x84,
    0x9f, 0xf9, 0xaa, 0x3a, 0x0e, 0x3c, 0x18, 0x28, 0xcf, 0x4f, 0x48, 0xc9,
    0xf9, 0x79, 0xe2, 0xaa, 0x37, 0x2b, 0xe8, 0xf8, 0x26, 0xc5, 0xe4, 0x87,
    0x1b, 0xbc, 0x00, 0x91, 0x97, 0xa0, 0xf8, 0x40, 0xee, 0x29, 0x12, 0x08,
    0x8b, 0x0c, 0x11, 0x9f, 0xc5, 0x66, 0x3e, 0x44, 0x99, 0x81, 0x56, 0x3e,
    0xe4, 0xf1, 0x07, 0x2d, 0x03, 0x18, 0x82, 0xa3, 0xde, 0xd5, 0xb7, 0x57,
    0xbf, 0x3b, 0x07, 0x59, 0x9e, 0xd3, 0xab, 0x05, 0xb2, 0xf2, 0x18, 0xe4,
    0x27, 0x4f, 0xb5, 0xe2, 0xdc, 0xb7, 0x1e, 0x4f, 0x22, 0x94, 0x9e, 0xe2,
    0x30, 0xf7, 0x0f, 0xbd, 0xec, 0xb7, 0x61, 0xb1, 0x35, 0xfd, 0xa7, 0x49,
    0xc7, 0x4e, 0xc4, 0x16, 0x9e, 0x6a, 0x45, 0xdd, 0xb4, 0x1e, 0x6f, 0xcc,
    0xf4, 0x12, 0xbd, 0x73, 0x69, 0x2e, 0xe9, 0xa2, 0xf3, 0x45, 0xec, 0x1d,
    0x21, 0xfa, 0x2a, 0x0e, 0x85, 0xc3, 0x37, 0xc5, 0x31, 0x05, 0x86, 0xae,
    0xc0, 0xd9, 0x42, 0x08, 0xac, 0xbe, 0xa9, 0x2d, 0x82, 0xfc, 0xa2, 0xdd,
    0x39, 0x5f, 0x67, 0xde, 0x11, 0x9f, 0x60, 0x50, 0xe9, 0x1a, 0x8a, 0xb3,
    0x41, 0x2c, 0x80, 0xf6, 0x38, 0x5b, 0x9d, 0xf9, 0x79, 0x71, 0xf0, 0xb3,
    0x82, 0x58, 0xa6, 0x4f, 0x62, 0xfc, 0xf9, 0x88, 0x7b, 0xe4, 0x63, 0x67,
    0xd8, 0xb8, 0x3e, 0xa8, 0xe7, 0x6c, 0x21, 0x04, 0xe6, 0xe7, 0x23, 0x0e,
    0x67, 0x01, 0xfa, 0x52, 0x80, 0x0c, 0xcc, 0xcd, 0x09, 0xde, 0x0b, 0x12,
    0xc3, 0x83, 0xda, 0x0a, 0xb4, 0x32, 0xb6, 0xf5, 0xc8, 0x21, 0xe2, 0x26,
    0x15, 0xf2, 0xf3, 0x0d, 0xa7, 0x09, 0x72, 0xb7, 0xeb, 0x6e, 0x3c, 0x8b,
    0xe0, 0xd7, 0xc8, 0xc6, 0xa4, 0x48, 0x84, 0x33, 0x77, 0x5e, 0xb4, 0x48,
    0xb4, 0x4e, 0x9a, 0x7a, 0xb2, 0x18, 0xf5, 0xf8, 0x01, 0x68, 0x5a, 0xef,
    0xa1, 0x27, 0x17, 0x3e, 0x8c, 0x18, 0xc0, 0xd1, 0x4f, 0x80, 0x41, 0xeb,
    0x18, 0xfc, 0xa1, 0x40, 0x54, 0x24, 0xf1, 0xc5, 0xc9, 0x68, 0xf6, 0x31,
    0x6e, 0xfb, 0xc2, 0xf5, 0x55, 0x71, 0x48, 0xcd, 0xe7, 0x96, 0x79, 0xc4,
    0x4e, 0xc2, 0xc3, 0xe3, 0x65, 0x4b, 0x54, 0x52, 0xc2, 0x6c, 0xc9, 0xc6,
    0xfb, 0x9f, 0xb2, 0xf9, 0x72, 0xd2, 0x4d, 0xf0, 0xdb, 0xb1, 0xeb, 0xa2,
    0xf0, 0x11, 0x60, 0xdf, 0xbe, 0x5a, 0x3f, 0xe7, 0xf4, 0xfe, 0xe6, 0x0f,
    0x39, 0xf5, 0x9a, 0x0f, 0xce, 0x16, 0x48, 0x33, 0x05, 0xdf, 0x6f, 0x3b,
    0x16, 0x17, 0x6e, 0x35, 0xc4, 0x36, 0xd7, 0x77, 0xc0, 0x01, 0xcd, 0x53,
    0x2d, 0x41, 0x66, 0x44, 0xfb, 0x06, 0x1a, 0x91, 0x16, 0x63, 0xab, 0xf3,
    0x1b, 0x5f, 0x02, 0x07, 0x5f, 0x3d, 0x11, 0xfa, 0x38, 0x5c, 0xac, 0x43,
    0x99, 0x5b, 0xcd, 0x98, 0xca, 0x61, 0xad, 0xb5, 0x03, 0x93, 0x71, 0xf8,
    0x41, 0x4a, 0x95, 0x34, 0x3d, 0x08, 0x94, 0xad, 0x8c, 0xf8, 0x68, 0xac,
    0xca, 0x35, 0x44, 0x71, 0x8c, 0xc3, 0xc3, 0x32, 0x79, 0xf0, 0x04, 0x0a,
    0x79, 0x08, 0xa4, 0xbc, 0xa2, 0x05, 0xba, 0x39, 0xe5, 0x69, 0x66, 0x5f,
    0xe9, 0x40, 0x00, 0xd3, 0x80, 0xe8, 0xbd, 0x90, 0xdd, 0x71, 0xf4, 0xcf,
    0x96, 0xdf, 0x48, 0x68, 0xfd, 0x04, 0x51, 0xf8, 0x39, 0x64, 0x09, 0x5a,
    0x60, 0x67, 0xbb, 0xc3, 0xc3, 0xd6, 0xc9, 0x5d, 0x11, 0x42, 0xf3, 0x6e,
    0xb3, 0x50, 0xac, 0x3a, 0x64, 0x7b, 0xa8, 0x0d, 0x13, 0x4c, 0x63, 0x0a,
    0x38, 0x87, 0x60, 0x3b, 0x9d, 0xb1, 0x35, 0x3d, 0x4d, 0xca, 0x49, 0x84,
    0xc6, 0x4b, 0xa4, 0xcd, 0xc2, 0x6c, 0x2e, 0x76, 0xde, 0x32, 0x48, 0x11,
    0x3a, 0x57, 0xf9, 0x46, 0x41, 0x38, 0xb0, 0xb8, 0x91, 0x20, 0xdf, 0x83,
    0xdc, 0x03, 0x00, 0xb4, 0x6e, 0x37, 0x0b, 0xdd, 0xb4, 0xd6, 0xe2, 0xd1,
    0x22, 0x30, 0xa2, 0x4d, 0x96, 0xa6, 0x3b, 0xdf, 0x52, 0x0f, 0xc6, 0x56,
    0xc7, 0xa7, 0x26, 0xd9, 0xf9, 0x0c, 0x41, 0x0f, 0xeb, 0x24, 0x3b, 0xe3,
    0xe5, 0x4c, 0x83, 0xdf, 0xb2, 0x43, 0xd6, 0xd8, 0xee, 0x45, 0x91, 0x4a,
    0x5f, 0x24, 0x6c, 0xa9, 0x87, 0xa9, 0xfe, 0x84, 0xda, 0xc5, 0xd0, 0xce,
    0x6e, 0xe4, 0x83, 0xde, 0x10, 0xae, 0x33, 0xf1, 0xb8, 0x98, 0x84, 0xc5,
    0x9b, 0xed, 0x26, 0x93, 0xb0, 0x1d, 0x37, 0x1c, 0xf7, 0xfa, 0xdd, 0x6e,
    0x5e, 0x8a, 0xa7, 0x49, 0xf6, 0x22, 0xd5, 0x57, 0x77, 0x2b, 0xc7, 0x49,
    0xb8, 0x72, 0x65, 0x92, 0x6a, 0x05, 0x48, 0xce, 0x4c, 0x14, 0xa6, 0x8f,
    0x80, 0x3f, 0xce, 0xc0, 0x1c, 0x00, 0x52, 0x83, 0x69, 0x7b, 0x68, 0x03,
    0x27, 0xb6, 0x18, 0x1c, 0xf8, 0x3e, 0x68, 0x58, 0x62, 0x0c, 0x92, 0x9c,
    0xad, 0x8f, 0x9a, 0x00, 0xf5, 0xa1, 0x83, 0xea, 0xb7, 0xfb, 0x0c, 0x2a,
    0x2d, 0x21, 0x4b, 0x62, 0x71, 0x75, 0xd0, 0xff, 0x8c, 0xbb, 0xae, 0x2b,
    0x8d, 0x47, 0xfe, 0x91, 0xed, 0x3b, 0xe3, 0x17, 0x77, 0x15, 0x2a, 0x66,
    0x4b, 0x37, 0xb5, 0xa5, 0xc9, 0x1f, 0x18, 0x11, 0x9b, 0x07, 0x85, 0xe8,
    0x82, 0xc3, 0x0d, 0xed, 0xbc, 0x73, 0xba, 0x8a, 0xee, 0x14, 0xcf, 0x92,
    0x2e, 0xbf, 0xe0, 0xc6, 0xaa, 0x75, 0xdd, 0xf6, 0x7b, 0xc8, 0xa4, 0x80,
    0x51, 0xb1, 0x67, 0xe8, 0xe6, 0x6c, 0x01, 0x09, 0x4b, 0x4f, 0x8a, 0xc1,
    0x7a, 0xc2, 0xe4, 0xde, 0x0f, 0xd4, 0x05, 0xc2, 0x6a, 0xe4, 0xbd, 0x48,
    0xec, 0x8d, 0x81, 0x7b, 0xca, 0xd0, 0x3c, 0xea, 0xcd, 0x88, 0xe3, 0x2c,
    0xc5, 0x36, 0x7d, 0xac, 0x89, 0x9e, 0x64, 0x4b, 0x8e, 0x51, 0x96, 0x95,
    0xfe, 0xd0, 0x16, 0x83, 0x5d, 0x55, 0x5e, 0x31, 0x06, 0x08, 0x73, 0xdf,
    0x3c, 0xd9, 0xf4, 0x76, 0x6a, 0x70, 0x35, 0x97, 0x89, 0x4c, 0x81, 0x59,
    0x54, 0x16, 0x8b, 0x80, 0x9b, 0x45, 0xc4, 0xbe, 0xfc, 0xfd, 0x86, 0xd3,
    0x16, 0xef, 0x91, 0x21, 0xa7, 0x6e, 0xbc, 0x27, 0xa8, 0x6a, 0x9b, 0xc7,
    0xb7, 0xa5, 0x9f, 0x11, 0x98, 0x37, 0xba, 0xdc, 0x97, 0x87, 0x49, 0x9b,
    0x3f, 0x12, 0x70, 0xdd, 0x36, 0xcb, 0x2d, 0x7d, 0x58, 0x9f, 0xe8, 0xf9,
    0x02, 0xe4, 0x06, 0xa4, 0xc1, 0x12, 0x22, 0xed, 0x6d, 0xe8, 0xfa, 0x55,
    0x90, 0x98, 0x8d, 0x2e, 0x97, 0x1a, 0xd9, 0xca, 0xac, 0x9f, 0x7e, 0x24,
    0xdd, 0x36, 0x7e, 0x1c, 0x52, 0xe4, 0x4c, 0x47, 0x3c, 0xdf, 0x80, 0xc9,
    0xfe, 0x52, 0x0c, 0x54, 0x89, 0xa0, 0x11, 0x66, 0xcb, 0xda, 0x72, 0xca,
    0x6d, 0x4c, 0xba, 0xa4, 0xe2, 0x8c, 0x50, 0xac, 0xa3, 0x8f, 0x89, 0x96,
    0xd2, 0x1d, 0x7f, 0xdd, 0x75, 0xca, 0x33, 0xc4, 0x75, 0x0d, 0xf7, 0xd7,
    0xf7, 0x7f, 0x2e, 0x01, 0x63, 0x62, 0x64, 0x74, 0x53, 0xc3, 0x00, 0xd3,
    0x83, 0xfd, 0xc3, 0xbe, 0x90, 0x63, 0x75, 0xbb, 0x27, 0xc8, 0x6f, 0x5a,
    0xed, 0x29, 0xed, 0x35, 0xe7, 0x52, 0xb1, 0x77, 0xc1, 0x28, 0xac, 0x4e,
    0x44, 0x30, 0xbe, 0xe5, 0x32, 0x78, 0xff, 0xf0, 0x0f, 0xa4, 0x93, 0x55,
    0x39, 0xf5, 0x19, 0xe2, 0xe2, 0xbb, 0xda, 0x47, 0x25, 0xaf, 0x06, 0x09,
    0xfa, 0x35, 0x00, 0xea, 0xbe, 0xb4, 0x68, 0xe5, 0xa0, 0x92, 0x2f, 0xcc,
    0xbc, 0x9f, 0xcf, 0xb4, 0xf3, 0x39, 0x68, 0xb4, 0x6e, 0x47, 0x82, 0xe1,
    0x15, 0x72, 0x5f, 0x45, 0x2e, 0x31, 0xd5, 0xa7, 0x95, 0x42, 0xe3, 0xbe,
    0xa7, 0x71, 0xf2, 0x02, 0x6d, 0x01, 0xf7, 0x03, 0x20, 0xc5, 0xf1, 0xc6,
    0x19, 0xa9, 0xc8, 0x4d, 0xb6, 0xcf, 0x89, 0x48, 0x2f, 0xf6, 0xeb, 0x95,
    0xae, 0xd7, 0x35, 0xe2, 0x2c, 0xf4, 0x01, 0x64, 0x5c, 0x44, 0x27, 0xd0,
    0x1e, 0xf1, 0x2d, 0x15, 0x43, 0xe2, 0xde, 0x64, 0x9a, 0x48, 0x6d, 0x2c,
    0x98, 0x47, 0x5f, 0x4b, 0x45, 0x1b, 0xdc, 0xe0, 0x4b, 0xe2, 0x78, 0xe0,
    0xbf, 0x0a, 0xe3, 0xc1, 0xda, 0x1a, 0x1f, 0x3c, 0x33, 0x7e, 0x99, 0x89,
    0x5e, 0x36, 0xad, 0x8a, 0x13, 0xe3, 0x96, 0xc4, 0x09, 0x8a, 0x0a, 0x9c,
    0x2f, 0x49, 0xeb, 0x33, 0x3b, 0xc0, 0x96, 0x1d, 0xe1, 0x6b, 0xd6, 0xb0,
    0xff, 0x6f, 0x64, 0xf6, 0x77, 0x87, 0x8c, 0x03, 0x27, 0x74, 0x6f, 0x12,
    0x4c, 0xe9, 0x69, 0xbd, 0x11, 0x63, 0xde, 0x7e, 0x38, 0x2d, 0x69, 0xbd,
    0x77, 0x2d, 0x07, 0x44, 0xa3, 0x75, 0x48, 0x8c, 0xa8, 0x30, 0xdf, 0x30,
    0x51, 0xd9, 0x83, 0x8a, 0x86, 0x25, 0xea, 0xf4, 0x23, 0x89, 0x58, 0x5c,
    0x9f, 0x90, 0x26, 0xaf, 0xda, 0xdb, 0xb7, 0xf4, 0xe6, 0xef, 0x6f, 0xb1,
    0xce, 0x5e, 0xfc, 0x41, 0x11, 0xe4, 0x3e, 0x41, 0x16, 0x85, 0xd1, 0xd6,
    0xe0, 0x6b, 0x96, 0xcb, 0xd8, 0x0f, 0x24, 0x26, 0x52, 0xdd, 0x72, 0x46,
    0xc1, 0x4d, 0x47, 0x76, 0x97, 0xf5, 0xdf, 0x3e, 0xcf, 0x69, 0x81, 0x37,
    0xc3, 0xe6, 0x87, 0x92, 0x6d, 0x26, 0x63, 0x50, 0xf5, 0x41, 0x07, 0xe2,
    0xca, 0x58, 0xdf, 0xac, 0x7e, 0x41, 0xa8, 0xf6, 0x64, 0x6b, 0x53, 0xb2,
    0x95, 0xc7, 0x88, 0xd9, 0x5e, 0x90, 0xab, 0x02, 0xb2, 0x33, 0x8a, 0x9f,
    0x02, 0xd9, 0xc4, 0x08, 0xa5, 0x0d, 0x91, 0xd1, 0x5b, 0xc1, 0x25, 0x5b,
    0x38, 0xb4, 0x8b, 0x7c, 0x1a, 0x5b, 0xb7, 0x48, 0xf6, 0xf9, 0xcb, 0x4c,
    0x05, 0x7c, 0xd9, 0xa5, 0x36, 0x46, 0xaf, 0x56, 0x8d, 0x3d, 0xf5, 0x31,
    0x6a, 0xfc, 0xee, 0x75, 0x2f, 0x48, 0x78, 0xb6, 0x21, 0x63, 0xb4, 0x9a,
    0x3c, 0x5e, 0x51, 0xed, 0xff, 0x47, 0x2b, 0xf1, 0xf8, 0x87, 0x67, 0xe1,
    0x7f, 0x7d, 0xc9, 0x78, 0x50, 0x86, 0x77, 0x4d, 0x99, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };
#else
    #error "unknown CHARGE_TRACKER_PDF_LOGO"
#endif

#define LEFT_MARGIN PDF_MM_TO_POINT(15)
#define LETTERHEAD_LEFT_MARGIN PDF_MM_TO_POINT(25)
#define LETTERHEAD_WIDTH PDF_MM_TO_POINT(80)

#define RIGHT_MARGIN PDF_MM_TO_POINT(10)
// TODO: This is the bottom margin of the logo background rectangle!
// That is not what one expects to be the top margin of the page
#define TOP_MARGIN PDF_MM_TO_POINT(35)
#define BOTTOM_MARGIN PDF_MM_TO_POINT(10)

#define LINE_WIDTH (PDF_A4_WIDTH - LEFT_MARGIN - RIGHT_MARGIN)
#define FONT_SIZE 9
#define LINE_SPACING 4
#define LINE_HEIGHT (FONT_SIZE + LINE_SPACING)

#define DISPLAY_NAME_COLUMN 1

#define TABLE_HEADER_COLS 6

static const float table_column_offsets[] {
    (0 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    (0.8 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    (3.4 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    (4.125 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    (4.75 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    (5.575 * (LINE_WIDTH / TABLE_HEADER_COLS)),
    LINE_WIDTH
};

#define TABLE_LINES_FIRST_PAGE 32
#define TABLE_LINES_PER_PAGE 40

#define TABLE_LINES_PER_OBJECT 8

static int get_streams_per_page(bool first_page, int *table_lines_to_place)
{
    int result = 0;
    if (first_page) {
        result += 1  // letter head
                + 1; // stats
    }
    result += 1 // table header
            + 1  // logo background
            + 1; // page number

    int to_place = std::min(*table_lines_to_place, first_page ? TABLE_LINES_FIRST_PAGE : TABLE_LINES_PER_PAGE);
    *table_lines_to_place -= to_place;

    result += ceil((float)to_place / TABLE_LINES_PER_OBJECT) // table content
            + 1;    // line borders

    return result;
}

int init_pdf_generator(WebServerRequest *request,
                       const char *title,
                       const char *stats,
                       int stats_lines,
                       const char *letterhead,
                       int letterhead_lines,
                       const char *table_header,
                       uint16_t tracked_charges,
                       const std::function<int(const char **)> &table_lines_cb)
{
    struct pdf_info info;
    memset(&info, 0, sizeof(info));
    strncpy(info.title, title, ARRAY_SIZE(info.title) - 1);

    struct pdf_doc *pdf = pdf_create(PDF_A4_WIDTH, PDF_A4_HEIGHT, &info);
    pdf_add_write_callback(pdf, [request](const void *buf, size_t len) -> int {
        int rc = request->sendChunk((const char *)buf, len);
        if (rc != ESP_OK)
            return -abs(rc);

        return len;
    });
    int pages_created = 0;
    int pages_to_be_created = 0;
    int table_lines_last_page = 0;

    int table_content_placed = 0;
    int table_lines_to_place = 0;

    table_lines_to_place = tracked_charges;

    while (table_lines_to_place > 0) {
        table_lines_last_page = table_lines_to_place;
        int streams = get_streams_per_page(pages_to_be_created == 0, &table_lines_to_place);
        pdf_notify_page(pdf, streams, 1);
        ++pages_to_be_created;
    }

    table_lines_to_place = tracked_charges;

    pdf_add_page_callback(pdf, [&table_lines_last_page, &pages_created, &table_lines_to_place](struct pdf_doc *pdf_doc, uint32_t page_num) -> int {
        table_lines_last_page = table_lines_to_place;
        int streams = get_streams_per_page(pages_created == 0, &table_lines_to_place);
        pdf_append_page(pdf_doc, streams, 1);
        ++pages_created;
        return 0;
    });

    pdf_add_image_callback(pdf, [](struct pdf_doc *pdf_doc, uint32_t page_num, uint32_t image_num) -> int {
        return pdf_add_png_image_data(pdf_doc, NULL, LEFT_MARGIN, PDF_A4_HEIGHT - 100 + 18, -1, 75 - 18 * 2, logo_background, logo_png, sizeof(logo_png));
    });

    pdf_add_stream_callback(pdf, [pages_to_be_created, table_lines_last_page, &table_content_placed, tracked_charges, table_lines_cb, stats, stats_lines, letterhead, letterhead_lines, table_header](struct pdf_doc *pdf_doc, uint32_t page_num, uint32_t stream_num) -> int {
        // Logo background
        if (stream_num == 0)
            return pdf_add_filled_rectangle(pdf_doc, NULL, 0, PDF_A4_HEIGHT - TOP_MARGIN, PDF_A4_WIDTH, 75, 0, logo_background, 0);
        --stream_num;

        // Page number
        if (stream_num == 0) {
            float width = 0.0f;
            char buf[32] = {};
            snprintf(buf, ARRAY_SIZE(buf), "Seite %ld von %d", page_num + 1, pages_to_be_created);
            pdf_get_font_text_width(pdf_doc, DEFAULT_FONT, buf, FONT_SIZE, &width);
            return pdf_add_text(pdf_doc, NULL, buf, FONT_SIZE, (PDF_A4_WIDTH - width) / 2, BOTTOM_MARGIN, PDF_BLACK);
        }
        --stream_num;

        // First page
        if (page_num == 0) {
            // Stats block (top right)
            if (stream_num == 0) {
                float offsets[2] = {0, LINE_WIDTH};
                return pdf_add_multiple_text_spacing(pdf_doc, NULL, stats, stats_lines, 1, FONT_SIZE, LEFT_MARGIN + table_column_offsets[2], PDF_A4_HEIGHT - TOP_MARGIN - 10 - (LINE_HEIGHT * 1), PDF_BLACK, 0, LINE_HEIGHT, offsets);
            }
            --stream_num;

            // Letter head (top left)
            if (stream_num == 0) {
                float offsets[2] = {0, LETTERHEAD_WIDTH};
                return pdf_add_multiple_text_spacing(pdf_doc, NULL, letterhead, letterhead_lines, 1, FONT_SIZE, LETTERHEAD_LEFT_MARGIN, PDF_A4_HEIGHT - TOP_MARGIN - 10 - (LINE_HEIGHT * (stream_num + 1)), PDF_BLACK, 0, LINE_HEIGHT, offsets);
            }
            --stream_num;
        }

        auto content_offset = PDF_A4_HEIGHT - TOP_MARGIN - 10 - (page_num == 0 ? (LINE_HEIGHT * (std::max(letterhead_lines, stats_lines) + 2)) : LINE_HEIGHT);

        // Table header
        if (stream_num == 0) {
            return pdf_add_multiple_text_spacing(pdf_doc, NULL, table_header, 1, 6, FONT_SIZE, LEFT_MARGIN, content_offset, PDF_BLACK, 0, LINE_HEIGHT, table_column_offsets, false);
        }
        --stream_num;

        { // Table lines
            auto table_line_offset = content_offset - (LINE_HEIGHT * 1.2 * (stream_num + 1)) - LINE_HEIGHT * 0.3;
            auto table_lines = (page_num + 1) == pages_to_be_created ? table_lines_last_page : (page_num == 0 ? TABLE_LINES_FIRST_PAGE : TABLE_LINES_PER_PAGE);

            if (stream_num == 0) {
                return pdf_add_horizontal_lines(pdf_doc, nullptr, LEFT_MARGIN, table_line_offset, PDF_A4_WIDTH - RIGHT_MARGIN, table_line_offset, 0.5, PDF_BLACK, LINE_HEIGHT * 1.2, table_lines, true);
            }

            --stream_num;
        }

        // Table content
        auto table_text_offset = content_offset - (LINE_HEIGHT * 1.2 * (1 + ((int)(stream_num * TABLE_LINES_PER_OBJECT))));

        auto lines = std::min(8, tracked_charges - table_content_placed);
        table_content_placed += lines;

        const char *lines_string;
        int lines_generated = table_lines_cb(&lines_string);
        // TODO: check if lines_generated != lines and if so handle this somehow.
        (void) lines_generated;

        return pdf_add_multiple_text_spacing(pdf_doc, NULL, lines_string, lines, 6, FONT_SIZE, LEFT_MARGIN, table_text_offset, PDF_BLACK, 0, LINE_HEIGHT * 1.2, table_column_offsets);
    });

    pdf_save_file(pdf);
    pdf_destroy(pdf);

    return 0;
}
