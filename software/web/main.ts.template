import $ from "jquery";

import "bootstrap";

import feather = require("feather-icons");

import Translator from '@andreasremdt/simple-translator';

import * as util from "./ts/util";

import * as API from "./ts/api";

{{{module_imports}}}

{{{translation_imports}}}

interface Module {
    init(): void;
    add_event_listeners(source: API.APIEventTarget): void;
    update_sidebar_state(m: API.Modules): void;
}

let modules: Module[] = [{{{modules}}}];

$('.navbar-collapse a').on("click", function () {
    $(".navbar-collapse").collapse('hide');
});

let first_module_init = true;

function update_modules() {
    let module_init = API.get('info/modules');
    for (let m of modules) {
        m.update_sidebar_state(module_init);
    }

    if (first_module_init) {
        let hash = window.location.hash;
        if (hash == "")
            hash = "#status";
        $(`a[href="${hash}"]`).click();
        $(`a[href="${hash}"]`).parents(".nav-nested.collapse").collapse('show');
        first_module_init = false;
    }
}

export function registerEvents(eventSource: API.APIEventTarget) {
    eventSource.addEventListener('info/modules', update_modules);

    for (let m of modules) {
        m.add_event_listeners(eventSource);
    }
}

let last_shown_tab = null;

// This is the part of the initialization to be done
// if we are authenticated (or authentication is deactivated)
function init() {
    for (let m of modules) {
        m.init();
    }

    util.setupEventSource(true, false, (ws: WebSocket, eventTarget: API.APIEventTarget) => registerEvents(eventTarget));
}

function login() {
    let username = (<HTMLInputElement>document.getElementById("main_login_username")).value;
    let password = (<HTMLInputElement>document.getElementById("main_login_password")).value;

    let xhr = new XMLHttpRequest();
    let result = false;
    xhr.onreadystatechange = function () {
        if(xhr.readyState === XMLHttpRequest.DONE) {
            let status = xhr.status;
            if (status == 200) {
                 window.location.href = "http://" + location.host;
                 result = true;
            } else if (status == 401) {
                console.log("credentials incorrect?");
            } else {
                console.log("error: got status ");
                console.log(status);
            }
        }
    }
    xhr.open("GET", "http://" + location.host + "/credential_check", false, username, password);
    xhr.send();
    return result;
}

function setup_normal() {
    window.setTimeout(() => $('#nav-list').removeAttr("style"), 200);
    window.setTimeout(() => $('#main').removeAttr("style"), 200);

    $('#sidebar-login').prop('hidden', true);
    $('#sidebar-status').addClass('active');
    $('#status').addClass(['show', 'active']);

    util.ifLoggedInElseReload(init);
}

function setup_login() {
    window.setTimeout(() => $('#nav-list').removeAttr("style"), 200);
    window.setTimeout(() => $('#main').removeAttr("style"), 200);

    $('#sidebar-status').prop('hidden', true);
    $('#sidebar-login').addClass('active');
    $('#login').addClass(['show', 'active']);

    let show_password = <HTMLInputElement>document.getElementById('main_login_show_password');
    let password = <HTMLInputElement>document.getElementById('main_login_password');
    show_password.addEventListener("change", () => {
        if (password.type == 'password')
            password.type = 'text';
        else
            password.type = 'password';
    });

    let form = <HTMLFormElement>document.getElementById('main_login_form');
    form.addEventListener('submit', function (event: Event) {
        event.preventDefault();
        event.stopPropagation();

        if(!login()) {
            password.classList.add("shake");
            window.setTimeout(() => {
                password.classList.remove("shake");
                password.focus();
            }, 500);
        }
    }, false);
}

$(window).on('pageshow', (ev) => {
    util.ifLoggedInElse(setup_normal, setup_login);

    feather.replace();

    $.ajaxSetup({
        timeout: 5000
    });

    var translator = new Translator();

{{{translation_adds}}}

    translator.config.defaultLanguage = 'en';
    for (let l of navigator.languages) {
        let lang = l.substr(0, 2);
        if (translator.languages.has(lang)) {
            translator.config.defaultLanguage = lang;
            break;
        }
        console.log("Sorry, got no translation for " + l);
    }

    translator.translatePageTo();

    $('a[data-toggle="tab"]').on('show.bs.tab', () => {
        $('a[data-toggle="tab"]').not(<Element>event.target).removeClass("active");
        $('a[data-toggle="tab"]').not(<Element>event.target).trigger("hidden.bs.tab");
    });

    window.addEventListener("hashchange", (event) => {
        if (event.oldURL != event.newURL) {
            let hash = window.location.hash;
            if (hash == "")
                hash = "#status";
            $(`a[href="${hash}"]`).click();
            $(`a[href="${hash}"]`).parents(".nav-nested.collapse").collapse('show');
        }
    });

    $('a[data-toggle="tab"]').on('shown.bs.tab', function() {
        let hash = $(this).attr("href");
        if (window.location.hash == "" && hash == "#status")
            return;
        window.location.hash = hash;
    });

    $('a[data-toggle="tab"]').on('shown.bs.tab', () => {
        setTimeout(() => window.scrollTo(0,0), 1);
    });

    $("#reboot_button").on("click", () => {
        $('#reboot').modal('hide');
        util.reboot();
    });
});
