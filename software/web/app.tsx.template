/* esp32-firmware
 * Copyright (C) 2023 Frederic Henrichs <frederic@tinkerforge.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

import * as util from "./ts/util";
import { h, Fragment, Component, createRef, RefObject } from "preact";
import { __ } from "./ts/translation";
import { NavbarItem } from "./ts/components/navbar_item";
import { NavbarGroup } from "./ts/components/navbar_group";
import { SubPage } from "./ts/components/sub_page";
import { Key, Home, Menu } from "react-feather";
import Container from "react-bootstrap/Container";
import Tab from "react-bootstrap/Tab";
import Row from "react-bootstrap/Row";
import Nav from "react-bootstrap/Nav";
import Collapse from "react-bootstrap/Collapse";
{{{navbar_imports}}}
{{{content_imports}}}
{{{status_imports}}}

interface AppProps {
    init: () => void;
}

interface AppState {
    visible: boolean;
    mode: "" | "normal" | "login";
    sub_page: string;
    sidebar_open: boolean;
}

function get_sub_page() {
    let sub_page = window.location.hash.substring(1);
    let element: HTMLElement = null;

    if (sub_page.length > 0) {
        element = document.querySelector(`a[href="#${sub_page}"]`) as HTMLElement;
    }

    if (element == null || element.hidden) {
        sub_page = "status";
        history.replaceState({}, "", "#" + sub_page);
    }

    return sub_page;
}

function login() {
    let username = (document.getElementById("main_login_username") as HTMLInputElement).value;
    let password = (document.getElementById("main_login_password") as HTMLInputElement).value;

    let xhr = new XMLHttpRequest();
    let result = false;
    xhr.onreadystatechange = function () {
        if(xhr.readyState === XMLHttpRequest.DONE) {
            let status = xhr.status;
            if (status == 200) {
                 window.location.reload();
                 result = true;
            } else if (status == 401) {
                console.log("credentials incorrect?");
            } else {
                console.log("error: got status ");
                console.log(status);
            }
        }
    }
    xhr.open("GET", location.protocol + "//" + location.host + "/credential_check", false, username, password);
    xhr.send();
    return result;
}

export class App extends Component<AppProps, AppState> {
    {{{status_refs}}}
    {{{navbar_refs}}}
    navbar_group_refs: {[id: string]: RefObject<NavbarGroup>} = {};

    constructor() {
        super();

        this.state = {
            visible: false,
            mode: "",
            sub_page: "",
            sidebar_open: false,
        } as any;

        this.navbar_group_refs = {
            {{{navbar_refs_mapping}}}
        };
    }

    componentDidMount() {
        util.ifLoggedInElse(() => this.setup_normal(), () => this.setup_login());
    }

    setup_normal() {
        this.setState({mode: "normal"});

        window.addEventListener("hashchange", (event) => {
            if (event.oldURL != event.newURL) {
                let sub_page = get_sub_page();

                if (this.state.sub_page != sub_page) {
                    this.setState({sub_page: sub_page}, this.on_sub_page_change);
                }
            }
        });

        util.addApiEventListener("info/modules", () => {
            // reacting synchronous to this event is too early. we need to wait
            // until the navbar has reacted to this event and has updated all
            // the hidden flags on the navitems
            window.setTimeout(() => {
                let sub_page = get_sub_page();
                let sub_page_changed = this.state.sub_page != sub_page;

                if (!this.state.visible || sub_page_changed) {
                    this.setState({visible: true, sub_page: sub_page}, () => {if (sub_page_changed) this.on_sub_page_change();});
                }
            }, 0);
        });

        util.ifLoggedInElseReload(this.props.init);
    }

    setup_login() {
        this.setState({visible: true, mode: "login", sub_page: "login"});

        let show_password = document.getElementById('main_login_show_password') as HTMLInputElement;
        let password = document.getElementById('main_login_password') as HTMLInputElement;
        show_password.addEventListener("change", () => {
            if (password.type == 'password')
                password.type = 'text';
            else
                password.type = 'password';
        });

        let form = document.getElementById('main_login_form') as HTMLFormElement;
        form.addEventListener('submit', function (event: Event) {
            event.preventDefault();
            event.stopPropagation();

            if(!login()) {
                password.classList.add("shake");
                window.setTimeout(() => {
                    password.classList.remove("shake");
                    password.focus();
                }, 500);
            }
        }, false);
    }

    on_sub_page_change() {
        let group_ref = this.navbar_group_refs[this.state.sub_page];

        if (group_ref && group_ref.current) {
            group_ref.current.open();
        }

        util.set_active_sub_page(this.state.sub_page);
    }

    render() {
        return <>
            <nav class="navbar navbar-expand-md navbar-dark sticky-top flex-md-nowrap p-0 pb-2 pt-2">
                <a href="/"><img class="pt-2 pb-2 pl-3" src="data:image/png;base64,{{{logo_base64}}}" style="max-width: calc(100vw - 72px);" alt="logo"/></a>
                <button class="navbar-toggler d-md-none collapsed pt-2 mr-3" type="button" onClick={() => {this.setState({sidebar_open: !this.state.sidebar_open})}}>
                    <Menu {...{class: "navbar-toggler-icon", style: "vertical-align: baseline;"} as any} />
                </button>
                {/* show inline status here? */}
            </nav>

            <Container fluid>
            <Tab.Container activeKey={this.state.sub_page} onSelect={(sub_page) => {
                    let sub_page_changed = this.state.sub_page != sub_page;

                    if (sub_page_changed || this.state.sidebar_open) {
                        setTimeout(() => window.scrollTo(0, 0), 1);
                        this.setState({sub_page: sub_page, sidebar_open: false}, () => {if (sub_page_changed) this.on_sub_page_change();});
                    }
                }}>
                <Row>
                    <Collapse in={this.state.sidebar_open}>
                    <nav id="sidebar-menu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar navbar-collapse">
                        <div class="sidebar-sticky pt-3 pb-3">
                            <Nav as="ul" className="flex-column" id="nav-list" style={this.state.visible ? undefined : "visibility: hidden;"}>
                                {this.state.mode == "login" ?
                                    <NavbarItem name="login" title={__("main.navbar_login")} symbol={<Key />} hidden={false} no_href={true} />
                                    : undefined}
                                {this.state.mode == "normal" ? <>
                                    <NavbarItem name="status" title={__("main.navbar_status")} symbol={<Home />} hidden={false} />
                                    {{{navbar}}}
                                    </> : undefined}
                            </Nav>
                        </div>
                    </nav>
                    </Collapse>
                    <main id="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4" style={this.state.visible ? undefined : "visibility: hidden;"}>
                        <Tab.Content>
                            <div id="alert_placeholder" class="alert_placeholder"></div>

                            <SubPage name="login">
                                <div class="row sticky-under-top mb-3 pt-3">
                                    <div class="col-xl-8 d-flex justify-content-between pb-2 border-bottom tab-header-shadow">
                                        <h1 class="page-header">{__("main.content_login")}</h1>
                                    </div>
                                </div>
                                <form id="main_login_form">
                                    <div class="form-group row">
                                        <label for="main_login_username"
                                            class="col-lg-3 col-xl-2 col-form-label form-label">{__("main.login_username")}</label>
                                        <div class="col-lg-9 col-xl-6">
                                            <input id="main_login_username" class="form-control" type="text" />
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="main_login_password" class="col-lg-3 col-xl-2 col-form-label form-label">{__("main.login_password")}</label>
                                        <div class="col-lg-9 col-xl-6">
                                            <div class="input-group">
                                                <input type="password" id="main_login_password" class="form-control" value=""/>
                                                <div class="input-group-append">
                                                    <div class="input-group-text custom-control custom-switch" style="padding-left: 2.75rem; padding-right: 0.5rem;">
                                                        <input id="main_login_show_password" type="checkbox" class="custom-control-input" aria-label="Show password" />
                                                        <label class="custom-control-label" for="main_login_show_password" style="line-height: 20px;"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg></label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <div class="col-lg-12 col-xl-8 text-right">
                                            <button id="main_login_button" type="submit" form="main_login_form" class="btn btn-primary">{__("main.login_button")}</button>
                                        </div>
                                    </div>
                                </form>
                            </SubPage>

                            <SubPage name="status">
                                {{{status}}}
                            </SubPage>

                            {{{content}}}
                        </Tab.Content>
                    </main>
                </Row>
            </Tab.Container>
            </Container>

            <div id="async_modal"></div>

            <div class="modal fade" id="reboot" tabindex={-1} role="dialog" aria-hidden="true">
                <div id="reboot_content" class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <label class="form-label modal-title">{__("main.reboot_title")}</label>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body"><span>{__("main.reboot_content_prefix")}</span><span id="reboot_content_changed"></span><span>{__("main.reboot_content_suffix")}</span></div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">{__("main.abort")}</button>
                            <button id="reboot_button" type="button" class="btn btn-danger">{__("main.reboot")}</button>
                        </div>
                    </div>
                </div>
            </div>
        </>;
    }
}
