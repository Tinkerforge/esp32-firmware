/** @jsxImportSource preact */
import { h } from "preact";
import { removeUnicodeHacks } from "../../ts/translation";
let x = {
    "meters_sun_spec": {
        "status": {
        },
        "navbar": {
        },
        "content": {
            "meter_class": "SunSpec",

            "config_display_name": "Display name",
            "config_host": "Hostname or IP address",
            "config_port": "Port",
            "config_port_muted": "typically 502 or 1502",
            "config_device_address": "Device address",
            "config_serial_number": "Serial number",
            "config_unique_id": "Unique ID",
            "config_unique_id_muted": "optional; manufacturer, model, serial number",
            "config_model_id": "Model",
            "config_model_instance": "Model instance",
            "config_dc_port_type": "DC port type",
            "config_location": "Location",
            "config_manual_override": "Manually configure device",

            "scan_title": "Device search",
            "scan_title_muted": "first device address, last device address",
            "scan": "Start search",
            "scan_abort": "Abort search",
            "scan_error": /*FFN*/() => {
                let result = [<>An error occurred during the device search.</>];

                if ("{{{support_email}}}".length > 0) {
                    result.push(<> Please download the log and send it to <a href={removeUnicodeHacks("mailto:{{{support_email}}}?subject=Error during SunSpec device search")}>{{{support_email}}}</a>.</>);
                }

                return <>{result}</>;
            }/*NF*/,
            "scan_results": "Discovered devices",
            "scan_log": "Log",
            "scan_log_file": "SunSpec-scan-log",

            "dc_port_type_photovoltaic": "PV",
            "dc_port_type_energy_storage_system": "Battery",
            "dc_port_type_electric_vehicle": "Electric vehicle",
            "dc_port_type_generic_injecting": "Generic (injecting)",
            "dc_port_type_generic_absorbing": "Generic (absorbing)",
            "dc_port_type_generic_bidirectional": "Generic (bidirectional)",
            "dc_port_type_dc_dc": "DC/DC",

            "location_matching": "Matching",
            "location_different": "Different",

            "model_no_supported": "Not supported",
            "model_other_preferred": /*SFN*/(slot: number|"?") => "Model " + slot + " preferred"/*NF*/,
            {{{models}}}
        },
        "script": {
        }
    }
}
