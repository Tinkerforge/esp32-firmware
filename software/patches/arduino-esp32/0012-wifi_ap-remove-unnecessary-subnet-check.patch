From f8c6172014c394b843e1066364248ddd3149b4a1 Mon Sep 17 00:00:00 2001
From: Frederic Henrichs <frederic@tinkerforge.com>
Date: Tue, 5 Dec 2023 14:15:54 +0100
Subject: [PATCH] wifi_ap: remove unnecessary subnet check.

---
 libraries/WiFi/src/WiFiGeneric.cpp | 24 ++++++++----------------
 1 file changed, 8 insertions(+), 16 deletions(-)

diff --git a/libraries/WiFi/src/WiFiGeneric.cpp b/libraries/WiFi/src/WiFiGeneric.cpp
index 78026313..d4e7d4ed 100644
--- a/libraries/WiFi/src/WiFiGeneric.cpp
+++ b/libraries/WiFi/src/WiFiGeneric.cpp
@@ -139,16 +139,8 @@ esp_err_t set_esp_interface_ip(esp_interface_t interface, IPAddress local_ip=IPA
 
         dhcps_lease_t lease;
         lease.enable = true;
-        uint8_t CIDR = WiFiGenericClass::calculateSubnetCIDR(subnet);
         log_v("SoftAP: %s | Gateway: %s | DHCP Start: %s | Netmask: %s", local_ip.toString().c_str(), gateway.toString().c_str(), dhcp_lease_start.toString().c_str(), subnet.toString().c_str());
-        // netmask must have room for at least 12 IP addresses (AP + GW + 10 DHCP Leasing addresses)
-        // netmask also must be limited to the last 8 bits of IPv4, otherwise this function won't work
-        // IDF NETIF checks netmask for the 3rd byte: https://github.com/espressif/esp-idf/blob/master/components/esp_netif/lwip/esp_netif_lwip.c#L1857-L1862
-        if (CIDR > 28 || CIDR < 24) {
-            log_e("Bad netmask. It must be from /24 to /28 (255.255.255. 0<->240)");
-            return ESP_FAIL; //  ESP_FAIL if initializing failed
-        }
-        // The code below is ready for any netmask, not limited to 255.255.255.0
+
         uint32_t netmask = _byte_swap32(info.netmask.addr);
         uint32_t ap_ipaddr = _byte_swap32(info.ip.addr);
         uint32_t dhcp_ipaddr = _byte_swap32(static_cast<uint32_t>(dhcp_lease_start));
@@ -159,7 +151,7 @@ esp_err_t set_esp_interface_ip(esp_interface_t interface, IPAddress local_ip=IPA
         lease.end_ip.addr = lease.start_ip.addr + 10;
         // Check if local_ip is in the same subnet as the dhcp leasing range initial address
         if ((ap_ipaddr & netmask) != (dhcp_ipaddr & netmask)) {
-            log_e("The AP IP address (%s) and the DHCP start address (%s) must be in the same subnet", 
+            log_e("The AP IP address (%s) and the DHCP start address (%s) must be in the same subnet",
                 local_ip.toString().c_str(), IPAddress(_byte_swap32(dhcp_ipaddr)).toString().c_str());
             return ESP_FAIL; //  ESP_FAIL if initializing failed
         }
@@ -172,7 +164,7 @@ esp_err_t set_esp_interface_ip(esp_interface_t interface, IPAddress local_ip=IPA
         }
         // Check if local_ip is within DHCP range
         if (ap_ipaddr >= lease.start_ip.addr && ap_ipaddr <= lease.end_ip.addr) {
-            log_e("The AP IP address (%s) can't be within the DHCP range (%s -- %s)", 
+            log_e("The AP IP address (%s) can't be within the DHCP range (%s -- %s)",
                 local_ip.toString().c_str(), IPAddress(_byte_swap32(lease.start_ip.addr)).toString().c_str(), IPAddress(_byte_swap32(lease.end_ip.addr)).toString().c_str());
             return ESP_FAIL; //  ESP_FAIL if initializing failed
         }
@@ -180,7 +172,7 @@ esp_err_t set_esp_interface_ip(esp_interface_t interface, IPAddress local_ip=IPA
         uint32_t gw_ipaddr = _byte_swap32(info.gw.addr);
         bool gw_in_same_subnet = (gw_ipaddr & netmask) == (ap_ipaddr & netmask);
         if (gw_in_same_subnet && gw_ipaddr >= lease.start_ip.addr && gw_ipaddr <= lease.end_ip.addr) {
-            log_e("The GatewayP address (%s) can't be within the DHCP range (%s -- %s)", 
+            log_e("The GatewayP address (%s) can't be within the DHCP range (%s -- %s)",
                 gateway.toString().c_str(), IPAddress(_byte_swap32(lease.start_ip.addr)).toString().c_str(), IPAddress(_byte_swap32(lease.end_ip.addr)).toString().c_str());
             return ESP_FAIL; //  ESP_FAIL if initializing failed
         }
@@ -548,7 +540,7 @@ static void _arduino_event_cb(void* arg, esp_event_base_t event_base, int32_t ev
 		log_v("Provisioning Success!");
     	arduino_event.event_id = ARDUINO_EVENT_PROV_CRED_SUCCESS;
     }
-    
+
 	if(arduino_event.event_id < ARDUINO_EVENT_MAX){
 		postArduinoEvent(&arduino_event);
 	}
@@ -649,7 +641,7 @@ bool WiFiGenericClass::useStaticBuffers(){
 void WiFiGenericClass::useStaticBuffers(bool bufferMode){
     if (lowLevelInitDone) {
         log_w("WiFi already started. Call WiFi.mode(WIFI_MODE_NULL) before setting Static Buffer Mode.");
-    } 
+    }
     _wifiUseStaticBuffers = bufferMode;
 }
 
@@ -772,7 +764,7 @@ wifi_ps_type_t WiFiGenericClass::_sleepEnabled = WIFI_PS_NONE;
 wifi_ps_type_t WiFiGenericClass::_sleepEnabled = WIFI_PS_MIN_MODEM;
 #endif
 
-WiFiGenericClass::WiFiGenericClass() 
+WiFiGenericClass::WiFiGenericClass()
 {
 }
 
@@ -1598,7 +1590,7 @@ IPAddress WiFiGenericClass::calculateNetworkID(IPAddress ip, IPAddress subnet) {
 
 IPAddress WiFiGenericClass::calculateBroadcast(IPAddress ip, IPAddress subnet) {
     IPAddress broadcastIp;
-    
+
     for (int i = 0; i < 4; i++)
         broadcastIp[i] = ~subnet[i] | ip[i];
 
-- 
2.34.1

