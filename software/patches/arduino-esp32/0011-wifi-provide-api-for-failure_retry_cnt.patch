From eb6513f8adc464cb4b4f66a108e865777922f24d Mon Sep 17 00:00:00 2001
From: Frederic Henrichs <frederic@tinkerforge.com>
Date: Fri, 1 Dec 2023 15:51:35 +0100
Subject: [PATCH] wifi: provide api for failure_retry_cnt.

see https://github.com/Tinkerforge/esp32-firmware/issues/234
---
 libraries/WiFi/src/WiFiSTA.cpp | 25 ++++++++++++++-----------
 libraries/WiFi/src/WiFiSTA.h   | 10 ++++++----
 2 files changed, 20 insertions(+), 15 deletions(-)

diff --git a/libraries/WiFi/src/WiFiSTA.cpp b/libraries/WiFi/src/WiFiSTA.cpp
index 2ba06079..a8e6c7b8 100644
--- a/libraries/WiFi/src/WiFiSTA.cpp
+++ b/libraries/WiFi/src/WiFiSTA.cpp
@@ -83,10 +83,17 @@ static bool sta_config_equal(const wifi_config_t& lhs, const wifi_config_t& rhs)
     return true;
 }
 
-static void wifi_sta_config(wifi_config_t * wifi_config, const char * ssid=NULL, const char * password=NULL, const uint8_t * bssid=NULL, uint8_t channel=0, wifi_auth_mode_t min_security=WIFI_AUTH_WPA2_PSK, wifi_scan_method_t scan_method=WIFI_ALL_CHANNEL_SCAN, wifi_sort_method_t sort_method=WIFI_CONNECT_AP_BY_SIGNAL, uint16_t listen_interval=0, bool pmf_required=false){
+static void wifi_sta_config(wifi_config_t * wifi_config, const char * ssid=NULL, const char * password=NULL, const uint8_t * bssid=NULL, uint8_t channel=0, wifi_auth_mode_t min_security=WIFI_AUTH_WPA2_PSK, wifi_scan_method_t scan_method=WIFI_ALL_CHANNEL_SCAN, wifi_sort_method_t sort_method=WIFI_CONNECT_AP_BY_SIGNAL, uint16_t listen_interval=0, bool pmf_required=false, uint8_t retries=0){
     wifi_config->sta.channel = channel;
     wifi_config->sta.listen_interval = listen_interval;
-    wifi_config->sta.scan_method = scan_method;//WIFI_ALL_CHANNEL_SCAN or WIFI_FAST_SCAN
+
+    // according to the espressif documentation failure_retry_cnt is only used when scan_method is set to WIFI_ALL_CHANNEL_SCAN
+    if (retries != 0) {
+        wifi_config->sta.scan_method = WIFI_ALL_CHANNEL_SCAN;
+        wifi_config->sta.failure_retry_cnt = retries;
+    } else {
+        wifi_config->sta.scan_method = scan_method;//WIFI_ALL_CHANNEL_SCAN or WIFI_FAST_SCAN
+    }
     wifi_config->sta.sort_method = sort_method;//WIFI_CONNECT_AP_BY_SIGNAL or WIFI_CONNECT_AP_BY_SECURITY
     wifi_config->sta.threshold.rssi = -127;
     wifi_config->sta.pmf_cfg.capable = true;
@@ -179,7 +186,8 @@ wl_status_t WiFiSTAClass::begin(const char* wpa2_ssid,
         const char *client_key_password,
         int32_t channel,
         const uint8_t* bssid,
-        bool connect)
+        bool connect,
+        uint8_t retries)
 {
     if(!WiFi.enableSTA(true)) {
         log_e("STA enable failed!");
@@ -219,7 +227,7 @@ wl_status_t WiFiSTAClass::begin(const char* wpa2_ssid,
         esp_wifi_sta_wpa2_ent_set_password((uint8_t *)wpa2_password, strlen(wpa2_password));
     }
     esp_wifi_sta_wpa2_ent_enable(); //set config settings to enable function
-    WiFi.begin(wpa2_ssid, nullptr, channel, bssid, connect); //connect to wifi
+    WiFi.begin(wpa2_ssid, nullptr, channel, bssid, connect, retries); //connect to wifi
 
     return status();
 }
@@ -234,7 +242,7 @@ wl_status_t WiFiSTAClass::begin(const char* wpa2_ssid,
  * @param connect                   Optional. call connect
  * @return
  */
-wl_status_t WiFiSTAClass::begin(const char* ssid, const char *passphrase, int32_t channel, const uint8_t* bssid, bool connect)
+wl_status_t WiFiSTAClass::begin(const char* ssid, const char *passphrase, int32_t channel, const uint8_t* bssid, bool connect, uint8_t retries)
 {
 
     if(!WiFi.enableSTA(true)) {
@@ -255,7 +263,7 @@ wl_status_t WiFiSTAClass::begin(const char* ssid, const char *passphrase, int32_
     wifi_config_t conf;
     memset(&conf, 0, sizeof(wifi_config_t));
 
-    wifi_sta_config(&conf, ssid, passphrase, bssid, channel, _minSecurity, _scanMethod, _sortMethod);
+    wifi_sta_config(&conf, ssid, passphrase, bssid, channel, _minSecurity, _scanMethod, _sortMethod, 0, false, retries);
 
     wifi_config_t current_conf;
     if(esp_wifi_get_config((wifi_interface_t)ESP_IF_WIFI_STA, &current_conf) != ESP_OK){
@@ -297,11 +305,6 @@ wl_status_t WiFiSTAClass::begin(const char* ssid, const char *passphrase, int32_
     return status();
 }
 
-wl_status_t WiFiSTAClass::begin(char* ssid, char *passphrase, int32_t channel, const uint8_t* bssid, bool connect)
-{
-    return begin((const char*) ssid, (const char*) passphrase, channel, bssid, connect);
-}
-
 /**
  * Use to connect to SDK config.
  * @return wl_status_t
diff --git a/libraries/WiFi/src/WiFiSTA.h b/libraries/WiFi/src/WiFiSTA.h
index 2face262..c1689b1e 100644
--- a/libraries/WiFi/src/WiFiSTA.h
+++ b/libraries/WiFi/src/WiFiSTA.h
@@ -44,15 +44,17 @@ class WiFiSTAClass
 
 public:
 
-    wl_status_t begin(const char* wpa2_ssid, wpa2_auth_method_t method, const char* wpa2_identity=NULL, const char* wpa2_username=NULL, const char *wpa2_password=NULL, const char* ca_pem=NULL, const size_t ca_size = 0, const char* client_crt=NULL, const size_t client_crt_size = 0, const char* client_key=NULL, const size_t client_key_size = 0, const char *client_key_password = NULL, int32_t channel=0, const uint8_t* bssid=0, bool connect=true);
+    wl_status_t begin(const char* wpa2_ssid, wpa2_auth_method_t method, const char* wpa2_identity=NULL, const char* wpa2_username=NULL, const char *wpa2_password=NULL, const char* ca_pem=NULL, const size_t ca_size = 0, const char* client_crt=NULL, const size_t client_crt_size = 0, const char* client_key=NULL, const size_t client_key_size = 0, const char *client_key_password = NULL, int32_t channel=0, const uint8_t* bssid=0, bool connect=true, uint8_t retries = 0);
     wl_status_t begin(const String& wpa2_ssid, wpa2_auth_method_t method, const String& wpa2_identity = (const char*)NULL, const String& wpa2_username = (const char*)NULL, const String& wpa2_password = (const char*)NULL, const String& ca_pem = (const char*)NULL, const String& client_crt = (const char*)NULL, const String& client_key = (const char*)NULL, int32_t channel=0, const uint8_t* bssid=0, bool connect=true) {
         return begin(wpa2_ssid.c_str(), method, wpa2_identity.c_str(), wpa2_username.c_str(), wpa2_password.c_str(), ca_pem.c_str(), client_crt.c_str(), client_key.c_str(), channel, bssid, connect);
     }
-    wl_status_t begin(const char* ssid, const char *passphrase = NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true);
-    wl_status_t begin(const String& ssid, const String& passphrase = (const char*)NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true) {
+    wl_status_t begin(const char* ssid, const char *passphrase = NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true, uint8_t retries = 0);
+    wl_status_t begin(const String& ssid, const String& passphrase = (const char*)NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true, uint8_t retries = 0) {
         return begin(ssid.c_str(), passphrase.c_str(), channel, bssid, connect);
     }
-    wl_status_t begin(char* ssid, char *passphrase = NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true);
+    wl_status_t begin(char* ssid, char *passphrase = NULL, int32_t channel = 0, const uint8_t* bssid = NULL, bool connect = true, uint8_t retries = 0) {
+        return begin((const char*)ssid, (const char*)passphrase, channel, bssid, connect, retries);
+    }
     wl_status_t begin();
 
     bool config(IPAddress local_ip, IPAddress gateway, IPAddress subnet, IPAddress dns1 = (uint32_t)0x00000000, IPAddress dns2 = (uint32_t)0x00000000);
-- 
2.34.1

