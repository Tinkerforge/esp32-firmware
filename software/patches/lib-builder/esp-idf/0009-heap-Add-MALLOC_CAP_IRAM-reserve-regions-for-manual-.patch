From 8b29a3432283b843d133cef681a5a209b2a4ef1a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mattias=20Sch=C3=A4ffersmann?= <mattias@tinkerforge.com>
Date: Wed, 2 Jul 2025 19:22:14 +0200
Subject: [PATCH] heap: Add MALLOC_CAP_IRAM, reserve regions for manual
 allocation

---
 components/heap/include/esp_heap_caps.h    |  6 ++++++
 components/heap/port/esp32/memory_layout.c | 24 +++++++++++++++-------
 2 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/components/heap/include/esp_heap_caps.h b/components/heap/include/esp_heap_caps.h
index c5aaed2fbc..526ad33c46 100644
--- a/components/heap/include/esp_heap_caps.h
+++ b/components/heap/include/esp_heap_caps.h
@@ -48,8 +48,14 @@ extern "C" {
 #define MALLOC_CAP_CACHE_ALIGNED    (1<<19) ///< Memory must be aligned to the cache line size of any intermediate caches
 #define MALLOC_CAP_SIMD             (1<<20) ///< Memory must be capable of being used for SIMD instructions (i.e. allow for SIMD-specific-bit data accesses)
 
+#define MALLOC_CAP_IRAM             (1<<29) ///< Memory must be in non-DRAM IRAM
+
 #define MALLOC_CAP_INVALID          (1<<31) ///< Memory can't be used / list end marker
 
+#define MANUALLY_RESERVED_6432B_AT_0x3FFAE6E0_DRAM
+#define MANUALLY_RESERVED_15072B_AT_0x3FFE0440_DRAM
+#define MANUALLY_RESERVED_8192B_AT_0x4009E000_IRAM
+
 /**
  * @brief callback called when an allocation operation fails, if registered
  * @param size in bytes of failed allocation
diff --git a/components/heap/port/esp32/memory_layout.c b/components/heap/port/esp32/memory_layout.c
index b35d8c1b3e..4b3cbb0216 100644
--- a/components/heap/port/esp32/memory_layout.c
+++ b/components/heap/port/esp32/memory_layout.c
@@ -51,7 +51,7 @@ const soc_memory_type_desc_t soc_memory_types[] = {
     //(This DRAM is also the region used by ROM during startup, and decrease the allocation priority to avoid MALLOC_CAP_EXEC memory running out too soon)
     [SOC_MEMORY_TYPE_DIRAM]  = { "D/IRAM", { 0, MALLOC_CAP_DMA|MALLOC_CAP_8BIT|MALLOC_CAP_INTERNAL|MALLOC_CAP_DEFAULT, MALLOC_CAP_32BIT|MALLOC_CAP_EXEC }},
     //Type 2: IRAM
-    [SOC_MEMORY_TYPE_IRAM]  = { "IRAM", { MALLOC_CAP_INTERNAL|MALLOC_IRAM_CAP, 0, 0 }},
+    [SOC_MEMORY_TYPE_IRAM]  = { "IRAM", { MALLOC_CAP_INTERNAL|MALLOC_IRAM_CAP|MALLOC_CAP_IRAM, 0, 0 }},
     //Type 3: SPI SRAM data
     [SOC_MEMORY_TYPE_SPIRAM]  = { "SPIRAM", { MALLOC_CAP_SPIRAM|MALLOC_CAP_DEFAULT, 0, MALLOC_CAP_8BIT|MALLOC_CAP_32BIT}},
     //Type 4: RTC Fast RAM
@@ -89,12 +89,12 @@ const soc_memory_region_t soc_memory_regions[] = {
     { 0x3FFDA000, 0x2000, SOC_MEMORY_TYPE_DRAM,     0,         false}, //pool 10-13, mmu page 13
     { 0x3FFDC000, 0x2000, SOC_MEMORY_TYPE_DRAM,     0,         false}, //pool 10-13, mmu page 14
     { 0x3FFDE000, 0x2000, SOC_MEMORY_TYPE_DRAM,     0,         false}, //pool 10-13, mmu page 15
-    { 0x3FFE0000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0x400BC000,true},  //pool 9 blk 1
-    { 0x3FFE4000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0x400B8000,true},  //pool 9 blk 0
-    { 0x3FFE8000, 0x8000, SOC_MEMORY_TYPE_DIRAM,    0x400B0000,true},  //pool 8 <- can be remapped to ROM, used for MAC dump
-    { 0x3FFF0000, 0x8000, SOC_MEMORY_TYPE_DIRAM,    0x400A8000,true},  //pool 7 <- can be used for MAC dump
-    { 0x3FFF8000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0x400A4000,true},  //pool 6 blk 1 <- can be used as trace memory
-    { 0x3FFFC000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0x400A0000,true},  //pool 6 blk 0 <- can be used as trace memory
+    { 0x3FFE0000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 9 blk 1
+    { 0x3FFE4000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 9 blk 0
+    { 0x3FFE8000, 0x8000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 8 <- can be remapped to ROM, used for MAC dump
+    { 0x3FFF0000, 0x8000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 7 <- can be used for MAC dump
+    { 0x3FFF8000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 6 blk 1 <- can be used as trace memory
+    { 0x3FFFC000, 0x4000, SOC_MEMORY_TYPE_DIRAM,    0,         true},  //pool 6 blk 0 <- can be used as trace memory
     { 0x40070000, 0x8000, SOC_MEMORY_TYPE_IRAM,     0,         false}, //pool 0
     { 0x40078000, 0x8000, SOC_MEMORY_TYPE_IRAM,     0,         false}, //pool 1
     { 0x40080000, 0x2000, SOC_MEMORY_TYPE_IRAM,     0,         false}, //pool 2-5, mmu page 0
@@ -194,3 +194,13 @@ SOC_RESERVE_MEMORY_REGION(SOC_RTC_DRAM_LOW, (intptr_t)&_rtc_force_fast_end, rtcr
 
 SOC_RESERVE_MEMORY_REGION((intptr_t)&_rtc_fast_reserved_start, (intptr_t)&_rtc_fast_reserved_end, rtc_fast_reserved_data);
 SOC_RESERVE_MEMORY_REGION((intptr_t)&_rtc_slow_reserved_start, (intptr_t)&_rtc_slow_reserved_end, rtc_reserved_data);
+
+#ifdef MANUALLY_RESERVED_6432B_AT_0x3FFAE6E0_DRAM
+SOC_RESERVE_MEMORY_REGION(0x3FFAE6E0, 0x3FFB0000, manual_heap_6k);
+#endif
+#ifdef MANUALLY_RESERVED_15072B_AT_0x3FFE0440_DRAM
+SOC_RESERVE_MEMORY_REGION(0x3FFE0440, 0x3FFE3F20, manual_heap_20k);
+#endif
+#ifdef MANUALLY_RESERVED_8192B_AT_0x4009E000_IRAM
+SOC_RESERVE_MEMORY_REGION(0x4009E000, 0x400A0000, manual_heap_iram);
+#endif
-- 
2.47.2

