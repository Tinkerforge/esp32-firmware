/* esp32-firmware
 * Copyright (C) 2020-2021 Erik Fleckstein <erik@tinkerforge.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include <Arduino.h>
#include <WiFi.h>

#include <stdio.h>
#include <string.h>

#include "index_html.embedded.h"
{{{module_includes}}}

#include "api.h"
#include "event_log.h"
#include "task_scheduler.h"
#include "web_server.h"
#include "build_timestamp.h"

#ifndef TF_ESP_PREINIT
#define TF_ESP_PREINIT
#endif

bool config_constructors_allowed = false;

const char* DISPLAY_NAME = "{{{display_name}}}";

WebServer server;

EventLog logger;

TaskScheduler task_scheduler;
API api;

{{{module_decls}}}

// declared and initialized by board module
extern TF_HAL hal;
// initialized by board module
uint32_t local_uid_num = 0;
char local_uid_str[7] = {0};
char passphrase[20] = {0};
int8_t blue_led_pin = -1;
int8_t green_led_pin = -1;
int8_t button_pin = -1;
// filled by board module
bool factory_reset_requested = false;

ConfigRoot modules;
ConfigRoot reboot;

bool firmware_update_allowed = true;

static bool is_safari(const String &user_agent) {
    return user_agent.indexOf("Safari/") >= 0 &&
           user_agent.indexOf("Version/") >= 0 &&
           user_agent.indexOf("Chrome/") == -1 &&
           user_agent.indexOf("Chromium/") == -1;
}

static WebServerRequestReturnProtect send_index_html(WebServerRequest &request) {
    request.addResponseHeader("Content-Encoding", "gzip");
    request.addResponseHeader("ETag", BUILD_TIMESTAMP_HEX_STR);
    request.addResponseHeader("X-Clacks-Overhead", "GNU Terry Pratchett");

    if (request.header("If-None-Match") == BUILD_TIMESTAMP_HEX_STR) {
        return request.send(304);
    }

    return request.send(200, "text/html", index_html_data, index_html_length);
}

static void register_default_urls(void) {
    server.on("/", HTTP_GET, [](WebServerRequest request) {
        return send_index_html(request);
    });

    reboot = ConfigRoot{Config::Null()};

    api.addCommand("reboot", &reboot, {}, []() {
        logger.printfln("Reboot requested by API.");
        delay(1500);
        ESP.restart();
    }, true);

    api.addState("info/modules", &modules, {}, 10000);

    server.on("/force_reboot", HTTP_GET, [](WebServerRequest request) {
        ESP.restart();
        return request.send(200, "text/html", "Forced reboot.");
    });

    server.onNotAuthorized([](WebServerRequest request) {
        if (request.uri() == "/") {
            // Safari does not support an unauthenticated login page and an authenticated main page on the same url,
            // as it does not proactively send the credentials if the same url is known to have an unauthenticated
            // version.
            if (is_safari(request.header("User-Agent"))) {
                return request.requestAuthentication();
            }

            return send_index_html(request);
        } else if (request.uri() == "/login_state") {
            // Same reasoning as above. If we don't force Safari, it does not send credentials, which breaks the login_state check.
            if (is_safari(request.header("User-Agent"))) {
                return request.requestAuthentication();
            }

            return request.send(200, "text/plain", "Not logged in");
        } else {
            return request.requestAuthentication();
        }
    });

    server.on("/credential_check", HTTP_GET, [](WebServerRequest request) {
        return request.send(200, "text/plain", "Credentials okay");
    });

    server.on("/login_state", HTTP_GET, [](WebServerRequest request) {
        return request.send(200, "text/plain", "Logged in");
    });

    api.registerDebugUrl(&server);
}

void setup(void) {
    Serial.begin(115200);

    logger.setup();

    logger.printfln("    **** TINKERFORGE {{{display_name_upper}}} V" BUILD_VERSION_FULL_STR " ****");
    logger.printfln("         %dK RAM SYSTEM   %d HEAP BYTES FREE", ESP.getHeapSize() / 1024, ESP.getFreeHeap());
    logger.printfln("READY.");

    logger.printfln("Last reset reason was: %s", tf_reset_reason());

    TF_ESP_PREINIT

    if(!mount_or_format_spiffs()) {
        logger.printfln("Failed to mount SPIFFS.");
    }

    config_constructors_allowed = true;

    task_scheduler.pre_setup();
    api.pre_setup();

    {{{module_pre_setup}}}

    // Setup task scheduler before API: The API setup can run migrations that want to start tasks.
    task_scheduler.setup();
    api.setup();

    {{{module_setup}}}

    modules = Config::Object({
        // Fake that the event_log is a module for now.
        {"event_log", Config::Bool(true)},
        {{{module_init_config}}}
    });

    server.start();

    register_default_urls();
    logger.register_urls();
    task_scheduler.register_urls();

    {{{module_register_urls}}}
}

void loop(void) {
    // Prioritize proxy performance over web interface and WiFi responsitivity
    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);

    task_scheduler.loop();

    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);

    api.loop();

    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);
    tf_hal_tick(&hal, 0);

    {{{module_loop}}}
}
