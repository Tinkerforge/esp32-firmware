#!/usr/bin/env python3

import argparse
import os
import sys
import signal
import subprocess
import serial
import time


colors = {"off":"\x1b[00m",
          "blue":   "\x1b[34m",
          "cyan":   "\x1b[36m",
          "green":  "\x1b[32m",
          "red":    "\x1b[31m",
          "gray": "\x1b[90m"}

def red(s):
    return colors["red"]+s+colors["off"]

def green(s):
    return colors["green"]+s+colors["off"]


parser = argparse.ArgumentParser()
parser.add_argument("-p", "--port")
parser.add_argument("firmware", nargs='?', default=None)
parser.add_argument("-S", "--no-serial", action="store_true")
parser.add_argument("-s", "--serial-only", action="store_true")
parser.add_argument("-e", "--erase", action="store_true")
args = parser.parse_args()

def get_latest_fw(fw_type=''):
    files = os.listdir("build")
    files = [x for x in files if x.endswith("_merged.bin") and (fw_type == '' or x.startswith(fw_type + "_firmware"))]
    latest = max(files, key=lambda x: int(x.replace("-NIGHTLY", "").replace("-WITH-WIFI-PASSPHRASE-DO-NOT-DISTRIBUTE", "").split("_firmware_")[1].split("_")[3], 16), default=None)
    if latest is None:
        if os.path.exists(fw_type):
            return fw_type
        print("Failed to find a firmware containing the string {}".format(fw_type))
        sys.exit(0)
    return os.path.join("build", latest)

if args.firmware is None:
    firmware = get_latest_fw()
else:
    if ".bin" in args.firmware:
        firmware = args.firmware
    else:
        firmware = get_latest_fw(args.firmware)

if args.port:
    if len(args.port) < 6:
        port = "/dev/ttyUSB" + args.port
    else:
        port = args.port
else:
    port = "/dev/ttyUSB0"

if args.erase:
    print(red("Erasing flash on port {}".format(port)))
    os.system("pio pkg exec esptool.py -- --port {} --chip esp32 erase_flash".format(port))

if not args.serial_only:
    print(green("Flashing firmware {} to port {}".format(firmware, port)))

    os.system("pio pkg exec esptool.py -- --port {} --chip esp32 --baud 921600 --before default_reset --after hard_reset write_flash 0x1000 {}".format(port, firmware))

if not args.no_serial:
    while True:
        try:
            time.sleep(0.1)
            with serial.Serial(port, 115200, timeout=1) as ser:
                while ser.is_open:
                    sys.stdout.buffer.write(ser.read())
                    sys.stdout.flush()
        except KeyboardInterrupt:
            sys.exit(0)
        except:
            pass
