[env:warp]
extends = env:base_esp32

lib_deps = ${env:base_esp32.lib_deps}
           https://github.com/Tinkerforge/WireGuard-ESP32-Arduino#80b5c79d
           https://github.com/Tinkerforge/modbus-esp8266#a6affca4

build_flags = ${env:base_esp32.build_flags}
              -DMETERS_SLOTS=2
              -DMETERS_SLOT_0_DEFAULT_CLASS=MeterClassID::RS485Bricklet
              ;-DTF_IGNORE_DEVICE_IDS=2159,277,286,2106
              ;2159: EVSE
              ;277: RS485
              ;286: NFC
              ;2106: RTC 2.0

custom_name = warp
custom_config_type = warp
custom_host_prefix = warp
custom_display_name = WARP Charger
custom_manual_url = https://www.warp-charger.com/warp1.html#documents
custom_apidoc_url = https://www.warp-charger.com/api.html
custom_firmware_url = https://www.warp-charger.com/warp1.html#firmware
custom_require_firmware_info = 0
custom_web_build_flags = METERS_SLOTS = 2
                         IS_ENERGY_MANAGER = 0

custom_backend_modules = ESP32 Brick
                         Watchdog
                         Uptime Tracker
                         EVSE
                         Evse Common
                         Evse Led
                         Network
                         Wifi
                         NTP
                         Rtc
                         Rtc Bricklet
                         Mqtt
                         Mqtt Auto Discovery
                         Http
                         WS
                         Event
                         Firmware Update
                         Meters
                         Meters RS485 Bricklet
                         Meters API
                         Meters Modbus TCP
                         Meters Sun Spec
                         Meters Legacy API
                         Require Meter
                         Hidden Proxy
                         Charge Manager
                         CM Networking
                         Charge Tracker
                         Users
                         NFC
                         Device Name
                         Modbus Tcp
                         Wireguard
                         Charge Limits
                         Coredump
                         Pwa
                         Certs
                         Automation

custom_frontend_modules = Device Name
                          EVSE Common
                          Meters
                          Meters RS485 Bricklet
                          Meters API
                          Meters Sun Spec
                          Meters Legacy API
                          Charge Tracker
                          Charge Manager
                          Network
                          Wifi
                          Wireguard
                          Mqtt
                          Modbus Tcp
                          NFC
                          Users
                          Certs
                          Automation
                          NTP
                          Rtc
                          Event Log
                          Firmware Update
                          Charge Limits
                          Require Meter
                          EVSE Group
                          Network Group
                          Interfaces Group
                          Users Group
                          System Group
                          WARP Branding

custom_frontend_components_pre_ocpp = EVSE Group $ Open
                                        EVSE Common | EVSE
                                        EVSE Common | EVSE Settings
                                        Meters
                                        Charge Tracker
                                        Charge Manager
                                        Automation
                                      EVSE Group $ Close
                                      Network Group $ Open
                                        Network
                                        Wifi | Wifi STA
                                        Wifi | Wifi AP
                                        Wireguard
                                      Network Group $ Close
                                      Interfaces Group $ Open
                                        Mqtt
                                        Modbus Tcp

custom_frontend_components_post_ocpp = Interfaces Group $ Close
                                       Users Group $ Open
                                         NFC
                                         Users
                                       Users Group $ Close
                                       System Group $ Open
                                         Certs
                                         NTP
                                         Rtc
                                         Event Log
                                         Firmware Update
                                       System Group $ Close

custom_frontend_components = ${this.custom_frontend_components_pre_ocpp}
                             ${this.custom_frontend_components_post_ocpp}

custom_frontend_status_components_pre_ocpp = Device Name
                                             EVSE Common | EVSE Status
                                             Charge Limits
                                             Meters
                                             Charge Tracker
                                             Charge Manager
                                             Wifi
                                             Wireguard
                                             Mqtt

custom_frontend_status_components_post_ocpp = NTP

custom_frontend_status_components = ${this.custom_frontend_status_components_pre_ocpp}
                                    ${this.custom_frontend_status_components_post_ocpp}

; ============================================================================

[env:warp_4mb]
extends = env:warp

; Use this environment to build for 4MB ESP32 for development purposes
upload_port = /dev/cu.usbserial-01A13E71
board_build.partitions = default_4MB_coredump.csv

; ============================================================================

[env:warp_debug]
extends = env:warp
custom_frontend_debug = true

; ============================================================================

[env:warp_web]
extends = env:warp
custom_web_only = true
custom_frontend_debug = true

[env:warp_with_ocpp]
extends = env:warp

lib_deps = ${env:warp.lib_deps}
           https://github.com/Tinkerforge/tfocpp#0d40dc3d

build_flags = ${env:warp.build_flags}
              -DOCPP_LOG_LEVEL=2
              -DOCPP_PLATFORM_ESP32
              -DOCPP_STATE_CALLBACKS
              -DOCPP_SUPPORTED_FEATURE_PROFILES="\"Core,SmartCharging\""
              -DOCPP_WEB_SOCKET_PING_INTERVAL=10
              -DOCPP_WEB_SOCKET_PING_INTERVAL_REQUIRES_REBOOT=true
              -DOCPP_METER_VALUES_ALIGNED_DATA_MAX_LENGTH=5
              -DOCPP_DEFAULT_CLOCK_ALIGNED_DATA_INTERVAL=60
              -DOCPP_DEFAULT_METER_VALUES_ALIGNED_DATA="\"Energy.Active.Import.Register\""
              -DOCPP_METER_VALUES_SAMPLED_DATA_MAX_LENGTH=5
              -DOCPP_DEFAULT_METER_VALUE_SAMPLE_INTERVAL=60
              -DOCPP_DEFAULT_METER_VALUES_SAMPLED_DATA="\"Energy.Active.Import.Register\""

custom_backend_modules = ${env:warp.custom_backend_modules}
                         Ocpp

custom_frontend_modules = ${env:warp.custom_frontend_modules}
                          Ocpp

custom_frontend_components = ${env:warp.custom_frontend_components_pre_ocpp}
                             Ocpp
                             ${env:warp.custom_frontend_components_post_ocpp}

custom_frontend_status_components = ${env:warp.custom_frontend_status_components_pre_ocpp}
                                    Ocpp
                                    ${env:warp.custom_frontend_status_components_post_ocpp}
